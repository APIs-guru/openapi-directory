# coding: utf-8

"""
    PolicyStatesClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-04-04
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.operations_list_results import OperationsListResults
from openapi_client.models.policy_states_query_results import PolicyStatesQueryResults
from openapi_client.models.summarize_results import SummarizeResults

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def operations_list(
        self,
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationsListResults:
        """operations_list

        Lists available operations.

        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsListResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationsListResults]:
        """operations_list

        Lists available operations.

        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsListResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """operations_list

        Lists available operations.

        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationsListResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_list_serialize(
        self,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.PolicyInsights/operations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_get_metadata(
        self,
        scope: Annotated[StrictStr, Field(description="A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """policy_states_get_metadata

        Gets OData metadata XML document.

        :param scope: A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
        :type scope: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_get_metadata_serialize(
            scope=scope,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_get_metadata_with_http_info(
        self,
        scope: Annotated[StrictStr, Field(description="A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """policy_states_get_metadata

        Gets OData metadata XML document.

        :param scope: A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
        :type scope: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_get_metadata_serialize(
            scope=scope,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_get_metadata_without_preload_content(
        self,
        scope: Annotated[StrictStr, Field(description="A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_get_metadata

        Gets OData metadata XML document.

        :param scope: A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
        :type scope: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_get_metadata_serialize(
            scope=scope,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_get_metadata_serialize(
        self,
        scope,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if scope is not None:
            _path_params['scope'] = scope
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{scope}/providers/Microsoft.PolicyInsights/policyStates/$metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_management_group(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_management_group

        Queries policy states for the resources under the management group.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_management_group_serialize(
            policy_states_resource=policy_states_resource,
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_management_group_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_management_group

        Queries policy states for the resources under the management group.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_management_group_serialize(
            policy_states_resource=policy_states_resource,
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_management_group_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_management_group

        Queries policy states for the resources under the management group.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_management_group_serialize(
            policy_states_resource=policy_states_resource,
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_management_group_serialize(
        self,
        policy_states_resource,
        management_groups_namespace,
        management_group_name,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if management_groups_namespace is not None:
            _path_params['managementGroupsNamespace'] = management_groups_namespace
        if management_group_name is not None:
            _path_params['managementGroupName'] = management_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_policy_definition(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_definition_name: Annotated[StrictStr, Field(description="Policy definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_policy_definition

        Queries policy states for the subscription level policy definition.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_definition_name: Policy definition name. (required)
        :type policy_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_policy_definition_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_definition_name=policy_definition_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_policy_definition_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_definition_name: Annotated[StrictStr, Field(description="Policy definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_policy_definition

        Queries policy states for the subscription level policy definition.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_definition_name: Policy definition name. (required)
        :type policy_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_policy_definition_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_definition_name=policy_definition_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_policy_definition_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_definition_name: Annotated[StrictStr, Field(description="Policy definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_policy_definition

        Queries policy states for the subscription level policy definition.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_definition_name: Policy definition name. (required)
        :type policy_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_policy_definition_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_definition_name=policy_definition_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_policy_definition_serialize(
        self,
        policy_states_resource,
        subscription_id,
        authorization_namespace,
        policy_definition_name,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_definition_name is not None:
            _path_params['policyDefinitionName'] = policy_definition_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_policy_set_definition(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_set_definition_name: Annotated[StrictStr, Field(description="Policy set definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_policy_set_definition

        Queries policy states for the subscription level policy set definition.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_set_definition_name: Policy set definition name. (required)
        :type policy_set_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_policy_set_definition_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_set_definition_name=policy_set_definition_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_policy_set_definition_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_set_definition_name: Annotated[StrictStr, Field(description="Policy set definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_policy_set_definition

        Queries policy states for the subscription level policy set definition.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_set_definition_name: Policy set definition name. (required)
        :type policy_set_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_policy_set_definition_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_set_definition_name=policy_set_definition_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_policy_set_definition_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_set_definition_name: Annotated[StrictStr, Field(description="Policy set definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_policy_set_definition

        Queries policy states for the subscription level policy set definition.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_set_definition_name: Policy set definition name. (required)
        :type policy_set_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_policy_set_definition_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_set_definition_name=policy_set_definition_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_policy_set_definition_serialize(
        self,
        policy_states_resource,
        subscription_id,
        authorization_namespace,
        policy_set_definition_name,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_set_definition_name is not None:
            _path_params['policySetDefinitionName'] = policy_set_definition_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_resource(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_resource

        Queries policy states for the resource.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_serialize(
            policy_states_resource=policy_states_resource,
            resource_id=resource_id,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_resource_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_resource

        Queries policy states for the resource.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_serialize(
            policy_states_resource=policy_states_resource,
            resource_id=resource_id,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_resource_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_resource

        Queries policy states for the resource.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_serialize(
            policy_states_resource=policy_states_resource,
            resource_id=resource_id,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_resource_serialize(
        self,
        policy_states_resource,
        resource_id,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if resource_id is not None:
            _path_params['resourceId'] = resource_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_resource_group(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_resource_group

        Queries policy states for the resources under the resource group.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_group_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_resource_group_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_resource_group

        Queries policy states for the resources under the resource group.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_group_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_resource_group_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_resource_group

        Queries policy states for the resources under the resource group.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_group_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_resource_group_serialize(
        self,
        policy_states_resource,
        subscription_id,
        resource_group_name,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_resource_group_level_policy_assignment(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_resource_group_level_policy_assignment

        Queries policy states for the resource group level policy assignment.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_group_level_policy_assignment_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_resource_group_level_policy_assignment_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_resource_group_level_policy_assignment

        Queries policy states for the resource group level policy assignment.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_group_level_policy_assignment_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_resource_group_level_policy_assignment_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_resource_group_level_policy_assignment

        Queries policy states for the resource group level policy assignment.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_resource_group_level_policy_assignment_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_resource_group_level_policy_assignment_serialize(
        self,
        policy_states_resource,
        subscription_id,
        resource_group_name,
        authorization_namespace,
        policy_assignment_name,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_assignment_name is not None:
            _path_params['policyAssignmentName'] = policy_assignment_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_subscription(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_subscription

        Queries policy states for the resources under the subscription.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_subscription_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_subscription_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_subscription

        Queries policy states for the resources under the subscription.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_subscription_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_subscription_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_subscription

        Queries policy states for the resources under the subscription.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_subscription_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_subscription_serialize(
        self,
        policy_states_resource,
        subscription_id,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_list_query_results_for_subscription_level_policy_assignment(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyStatesQueryResults:
        """policy_states_list_query_results_for_subscription_level_policy_assignment

        Queries policy states for the subscription level policy assignment.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_subscription_level_policy_assignment_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_list_query_results_for_subscription_level_policy_assignment_with_http_info(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyStatesQueryResults]:
        """policy_states_list_query_results_for_subscription_level_policy_assignment

        Queries policy states for the subscription level policy assignment.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_subscription_level_policy_assignment_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_list_query_results_for_subscription_level_policy_assignment_without_preload_content(
        self,
        policy_states_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="OData apply expression for aggregations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_list_query_results_for_subscription_level_policy_assignment

        Queries policy states for the subscription level policy assignment.

        :param policy_states_resource: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). (required)
        :type policy_states_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param orderby: Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
        :type orderby: str
        :param select: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
        :type select: str
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param apply: OData apply expression for aggregations.
        :type apply: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_list_query_results_for_subscription_level_policy_assignment_serialize(
            policy_states_resource=policy_states_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            orderby=orderby,
            select=select,
            var_from=var_from,
            to=to,
            filter=filter,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyStatesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_list_query_results_for_subscription_level_policy_assignment_serialize(
        self,
        policy_states_resource,
        subscription_id,
        authorization_namespace,
        policy_assignment_name,
        api_version,
        top,
        orderby,
        select,
        var_from,
        to,
        filter,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_resource is not None:
            _path_params['policyStatesResource'] = policy_states_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_assignment_name is not None:
            _path_params['policyAssignmentName'] = policy_assignment_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_management_group(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_management_group

        Summarizes policy states for the resources under the management group.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_management_group_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_management_group_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_management_group

        Summarizes policy states for the resources under the management group.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_management_group_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_management_group_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_management_group

        Summarizes policy states for the resources under the management group.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_management_group_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_management_group_serialize(
        self,
        policy_states_summary_resource,
        management_groups_namespace,
        management_group_name,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if management_groups_namespace is not None:
            _path_params['managementGroupsNamespace'] = management_groups_namespace
        if management_group_name is not None:
            _path_params['managementGroupName'] = management_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_policy_definition(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_definition_name: Annotated[StrictStr, Field(description="Policy definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_policy_definition

        Summarizes policy states for the subscription level policy definition.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_definition_name: Policy definition name. (required)
        :type policy_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_policy_definition_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_definition_name=policy_definition_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_policy_definition_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_definition_name: Annotated[StrictStr, Field(description="Policy definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_policy_definition

        Summarizes policy states for the subscription level policy definition.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_definition_name: Policy definition name. (required)
        :type policy_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_policy_definition_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_definition_name=policy_definition_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_policy_definition_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_definition_name: Annotated[StrictStr, Field(description="Policy definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_policy_definition

        Summarizes policy states for the subscription level policy definition.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_definition_name: Policy definition name. (required)
        :type policy_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_policy_definition_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_definition_name=policy_definition_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_policy_definition_serialize(
        self,
        policy_states_summary_resource,
        subscription_id,
        authorization_namespace,
        policy_definition_name,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_definition_name is not None:
            _path_params['policyDefinitionName'] = policy_definition_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_policy_set_definition(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_set_definition_name: Annotated[StrictStr, Field(description="Policy set definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_policy_set_definition

        Summarizes policy states for the subscription level policy set definition.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_set_definition_name: Policy set definition name. (required)
        :type policy_set_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_policy_set_definition_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_set_definition_name=policy_set_definition_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_policy_set_definition_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_set_definition_name: Annotated[StrictStr, Field(description="Policy set definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_policy_set_definition

        Summarizes policy states for the subscription level policy set definition.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_set_definition_name: Policy set definition name. (required)
        :type policy_set_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_policy_set_definition_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_set_definition_name=policy_set_definition_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_policy_set_definition_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_set_definition_name: Annotated[StrictStr, Field(description="Policy set definition name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_policy_set_definition

        Summarizes policy states for the subscription level policy set definition.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_set_definition_name: Policy set definition name. (required)
        :type policy_set_definition_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_policy_set_definition_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_set_definition_name=policy_set_definition_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_policy_set_definition_serialize(
        self,
        policy_states_summary_resource,
        subscription_id,
        authorization_namespace,
        policy_set_definition_name,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_set_definition_name is not None:
            _path_params['policySetDefinitionName'] = policy_set_definition_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_resource(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_resource

        Summarizes policy states for the resource.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            resource_id=resource_id,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_resource_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_resource

        Summarizes policy states for the resource.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            resource_id=resource_id,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_resource_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_resource

        Summarizes policy states for the resource.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            resource_id=resource_id,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_resource_serialize(
        self,
        policy_states_summary_resource,
        resource_id,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if resource_id is not None:
            _path_params['resourceId'] = resource_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_resource_group(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_resource_group

        Summarizes policy states for the resources under the resource group.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_group_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_resource_group_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_resource_group

        Summarizes policy states for the resources under the resource group.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_group_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_resource_group_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_resource_group

        Summarizes policy states for the resources under the resource group.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_group_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_resource_group_serialize(
        self,
        policy_states_summary_resource,
        subscription_id,
        resource_group_name,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_resource_group_level_policy_assignment(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_resource_group_level_policy_assignment

        Summarizes policy states for the resource group level policy assignment.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_group_level_policy_assignment_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_resource_group_level_policy_assignment_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_resource_group_level_policy_assignment

        Summarizes policy states for the resource group level policy assignment.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_group_level_policy_assignment_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_resource_group_level_policy_assignment_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_resource_group_level_policy_assignment

        Summarizes policy states for the resource group level policy assignment.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_resource_group_level_policy_assignment_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_resource_group_level_policy_assignment_serialize(
        self,
        policy_states_summary_resource,
        subscription_id,
        resource_group_name,
        authorization_namespace,
        policy_assignment_name,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_assignment_name is not None:
            _path_params['policyAssignmentName'] = policy_assignment_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_subscription(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_subscription

        Summarizes policy states for the resources under the subscription.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_subscription_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_subscription_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_subscription

        Summarizes policy states for the resources under the subscription.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_subscription_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_subscription_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_subscription

        Summarizes policy states for the resources under the subscription.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_subscription_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_subscription_serialize(
        self,
        policy_states_summary_resource,
        subscription_id,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_states_summarize_for_subscription_level_policy_assignment(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SummarizeResults:
        """policy_states_summarize_for_subscription_level_policy_assignment

        Summarizes policy states for the subscription level policy assignment.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_subscription_level_policy_assignment_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_states_summarize_for_subscription_level_policy_assignment_with_http_info(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SummarizeResults]:
        """policy_states_summarize_for_subscription_level_policy_assignment

        Summarizes policy states for the subscription level policy assignment.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_subscription_level_policy_assignment_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_states_summarize_for_subscription_level_policy_assignment_without_preload_content(
        self,
        policy_states_summary_resource: Annotated[StrictStr, Field(description="The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        authorization_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.")],
        policy_assignment_name: Annotated[StrictStr, Field(description="Policy assignment name.")],
        api_version: Annotated[StrictStr, Field(description="API version to use with the client requests.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        var_from: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).")] = None,
        to: Annotated[Optional[datetime], Field(description="ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_states_summarize_for_subscription_level_policy_assignment

        Summarizes policy states for the subscription level policy assignment.

        :param policy_states_summary_resource: The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value. (required)
        :type policy_states_summary_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param authorization_namespace: The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed. (required)
        :type authorization_namespace: str
        :param policy_assignment_name: Policy assignment name. (required)
        :type policy_assignment_name: str
        :param api_version: API version to use with the client requests. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param var_from: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
        :type var_from: datetime
        :param to: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
        :type to: datetime
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_states_summarize_for_subscription_level_policy_assignment_serialize(
            policy_states_summary_resource=policy_states_summary_resource,
            subscription_id=subscription_id,
            authorization_namespace=authorization_namespace,
            policy_assignment_name=policy_assignment_name,
            api_version=api_version,
            top=top,
            var_from=var_from,
            to=to,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SummarizeResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_states_summarize_for_subscription_level_policy_assignment_serialize(
        self,
        policy_states_summary_resource,
        subscription_id,
        authorization_namespace,
        policy_assignment_name,
        api_version,
        top,
        var_from,
        to,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_states_summary_resource is not None:
            _path_params['policyStatesSummaryResource'] = policy_states_summary_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if authorization_namespace is not None:
            _path_params['authorizationNamespace'] = authorization_namespace
        if policy_assignment_name is not None:
            _path_params['policyAssignmentName'] = policy_assignment_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        '$from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        '$to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('$to', to))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



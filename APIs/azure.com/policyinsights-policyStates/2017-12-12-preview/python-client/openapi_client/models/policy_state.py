# coding: utf-8

"""
    PolicyStatesClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-12-12-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PolicyState(BaseModel):
    """
    Policy state record.
    """ # noqa: E501
    odata_context: Optional[StrictStr] = Field(default=None, description="OData context string; used by OData clients to resolve type information based on metadata.", alias="@odata.context")
    odata_id: Optional[StrictStr] = Field(default=None, description="OData entity ID; always set to null since policy state records do not have an entity ID.", alias="@odata.id")
    effective_parameters: Optional[StrictStr] = Field(default=None, description="Effective parameters for the policy assignment.", alias="effectiveParameters")
    is_compliant: Optional[StrictBool] = Field(default=None, description="Flag which states whether the resource is compliant against the policy assignment it was evaluated against.", alias="isCompliant")
    management_group_ids: Optional[StrictStr] = Field(default=None, description="Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.", alias="managementGroupIds")
    policy_assignment_id: Optional[StrictStr] = Field(default=None, description="Policy assignment ID.", alias="policyAssignmentId")
    policy_assignment_name: Optional[StrictStr] = Field(default=None, description="Policy assignment name.", alias="policyAssignmentName")
    policy_assignment_owner: Optional[StrictStr] = Field(default=None, description="Policy assignment owner.", alias="policyAssignmentOwner")
    policy_assignment_parameters: Optional[StrictStr] = Field(default=None, description="Policy assignment parameters.", alias="policyAssignmentParameters")
    policy_assignment_scope: Optional[StrictStr] = Field(default=None, description="Policy assignment scope.", alias="policyAssignmentScope")
    policy_definition_action: Optional[StrictStr] = Field(default=None, description="Policy definition action, i.e. effect.", alias="policyDefinitionAction")
    policy_definition_category: Optional[StrictStr] = Field(default=None, description="Policy definition category.", alias="policyDefinitionCategory")
    policy_definition_id: Optional[StrictStr] = Field(default=None, description="Policy definition ID.", alias="policyDefinitionId")
    policy_definition_name: Optional[StrictStr] = Field(default=None, description="Policy definition name.", alias="policyDefinitionName")
    policy_definition_reference_id: Optional[StrictStr] = Field(default=None, description="Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.", alias="policyDefinitionReferenceId")
    policy_set_definition_category: Optional[StrictStr] = Field(default=None, description="Policy set definition category, if the policy assignment is for a policy set.", alias="policySetDefinitionCategory")
    policy_set_definition_id: Optional[StrictStr] = Field(default=None, description="Policy set definition ID, if the policy assignment is for a policy set.", alias="policySetDefinitionId")
    policy_set_definition_name: Optional[StrictStr] = Field(default=None, description="Policy set definition name, if the policy assignment is for a policy set.", alias="policySetDefinitionName")
    policy_set_definition_owner: Optional[StrictStr] = Field(default=None, description="Policy set definition owner, if the policy assignment is for a policy set.", alias="policySetDefinitionOwner")
    policy_set_definition_parameters: Optional[StrictStr] = Field(default=None, description="Policy set definition parameters, if the policy assignment is for a policy set.", alias="policySetDefinitionParameters")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource group name.", alias="resourceGroup")
    resource_id: Optional[StrictStr] = Field(default=None, description="Resource ID.", alias="resourceId")
    resource_location: Optional[StrictStr] = Field(default=None, description="Resource location.", alias="resourceLocation")
    resource_tags: Optional[StrictStr] = Field(default=None, description="List of resource tags.", alias="resourceTags")
    resource_type: Optional[StrictStr] = Field(default=None, description="Resource type.", alias="resourceType")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription ID.", alias="subscriptionId")
    timestamp: Optional[datetime] = Field(default=None, description="Timestamp for the policy state record.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["@odata.context", "@odata.id", "effectiveParameters", "isCompliant", "managementGroupIds", "policyAssignmentId", "policyAssignmentName", "policyAssignmentOwner", "policyAssignmentParameters", "policyAssignmentScope", "policyDefinitionAction", "policyDefinitionCategory", "policyDefinitionId", "policyDefinitionName", "policyDefinitionReferenceId", "policySetDefinitionCategory", "policySetDefinitionId", "policySetDefinitionName", "policySetDefinitionOwner", "policySetDefinitionParameters", "resourceGroup", "resourceId", "resourceLocation", "resourceTags", "resourceType", "subscriptionId", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.context": obj.get("@odata.context"),
            "@odata.id": obj.get("@odata.id"),
            "effectiveParameters": obj.get("effectiveParameters"),
            "isCompliant": obj.get("isCompliant"),
            "managementGroupIds": obj.get("managementGroupIds"),
            "policyAssignmentId": obj.get("policyAssignmentId"),
            "policyAssignmentName": obj.get("policyAssignmentName"),
            "policyAssignmentOwner": obj.get("policyAssignmentOwner"),
            "policyAssignmentParameters": obj.get("policyAssignmentParameters"),
            "policyAssignmentScope": obj.get("policyAssignmentScope"),
            "policyDefinitionAction": obj.get("policyDefinitionAction"),
            "policyDefinitionCategory": obj.get("policyDefinitionCategory"),
            "policyDefinitionId": obj.get("policyDefinitionId"),
            "policyDefinitionName": obj.get("policyDefinitionName"),
            "policyDefinitionReferenceId": obj.get("policyDefinitionReferenceId"),
            "policySetDefinitionCategory": obj.get("policySetDefinitionCategory"),
            "policySetDefinitionId": obj.get("policySetDefinitionId"),
            "policySetDefinitionName": obj.get("policySetDefinitionName"),
            "policySetDefinitionOwner": obj.get("policySetDefinitionOwner"),
            "policySetDefinitionParameters": obj.get("policySetDefinitionParameters"),
            "resourceGroup": obj.get("resourceGroup"),
            "resourceId": obj.get("resourceId"),
            "resourceLocation": obj.get("resourceLocation"),
            "resourceTags": obj.get("resourceTags"),
            "resourceType": obj.get("resourceType"),
            "subscriptionId": obj.get("subscriptionId"),
            "timestamp": obj.get("timestamp")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



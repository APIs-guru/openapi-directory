# coding: utf-8

"""
    SearchManagementClient

    Client that can be used to manage Azure Search services and API keys.

    The version of the OpenAPI document: 2015-02-28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku import Sku
from typing import Optional, Set
from typing_extensions import Self

class SearchServiceReadableProperties(BaseModel):
    """
    Defines all the properties of an Azure Search service.
    """ # noqa: E501
    partition_count: Optional[StrictInt] = Field(default=None, description="The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.", alias="partitionCount")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The state of the last provisioning operation performed on the Search service.", alias="provisioningState")
    replica_count: Optional[StrictInt] = Field(default=None, description="The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.", alias="replicaCount")
    sku: Optional[Sku] = None
    status: Optional[StrictStr] = Field(default=None, description="The status of the Search service.")
    status_details: Optional[StrictStr] = Field(default=None, description="The details of the Search service status.", alias="statusDetails")
    __properties: ClassVar[List[str]] = ["partitionCount", "provisioningState", "replicaCount", "sku", "status", "statusDetails"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['succeeded', 'provisioning', 'failed']):
            raise ValueError("must be one of enum values ('succeeded', 'provisioning', 'failed')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['running', 'provisioning', 'deleting', 'degraded', 'disabled', 'error']):
            raise ValueError("must be one of enum values ('running', 'provisioning', 'deleting', 'degraded', 'disabled', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchServiceReadableProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "status",
            "status_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchServiceReadableProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "partitionCount": obj.get("partitionCount"),
            "provisioningState": obj.get("provisioningState"),
            "replicaCount": obj.get("replicaCount"),
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "status": obj.get("status"),
            "statusDetails": obj.get("statusDetails")
        })
        return _obj



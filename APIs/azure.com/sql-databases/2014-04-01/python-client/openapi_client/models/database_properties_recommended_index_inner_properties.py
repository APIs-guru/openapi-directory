# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Databases.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.database_properties_recommended_index_inner_properties_estimated_impact_inner import DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner
from typing import Optional, Set
from typing_extensions import Self

class DatabasePropertiesRecommendedIndexInnerProperties(BaseModel):
    """
    Represents the properties of a database recommended index.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.")
    columns: Optional[List[StrictStr]] = Field(default=None, description="Columns over which to build index")
    created: Optional[datetime] = Field(default=None, description="The UTC datetime showing when this resource was created (ISO8601 format).")
    estimated_impact: Optional[List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]] = Field(default=None, description="The estimated impact of doing recommended index action.", alias="estimatedImpact")
    included_columns: Optional[List[StrictStr]] = Field(default=None, description="The list of column names to be included in the index", alias="includedColumns")
    index_script: Optional[StrictStr] = Field(default=None, description="The full build index script", alias="indexScript")
    index_type: Optional[StrictStr] = Field(default=None, description="The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)", alias="indexType")
    last_modified: Optional[datetime] = Field(default=None, description="The UTC datetime of when was this resource last changed (ISO8601 format).", alias="lastModified")
    reported_impact: Optional[List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]] = Field(default=None, description="The values reported after index action is complete.", alias="reportedImpact")
    var_schema: Optional[StrictStr] = Field(default=None, description="The schema where table to build index over resides", alias="schema")
    state: Optional[StrictStr] = Field(default=None, description="The current recommendation state.")
    table: Optional[StrictStr] = Field(default=None, description="The table on which to build index.")
    __properties: ClassVar[List[str]] = ["action", "columns", "created", "estimatedImpact", "includedColumns", "indexScript", "indexType", "lastModified", "reportedImpact", "schema", "state", "table"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Create', 'Drop', 'Rebuild']):
            raise ValueError("must be one of enum values ('Create', 'Drop', 'Rebuild')")
        return value

    @field_validator('index_type')
    def index_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLUSTERED', 'NONCLUSTERED', 'COLUMNSTORE', 'CLUSTERED COLUMNSTORE']):
            raise ValueError("must be one of enum values ('CLUSTERED', 'NONCLUSTERED', 'COLUMNSTORE', 'CLUSTERED COLUMNSTORE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Pending', 'Executing', 'Verifying', 'Pending Revert', 'Reverting', 'Reverted', 'Ignored', 'Expired', 'Blocked', 'Success']):
            raise ValueError("must be one of enum values ('Active', 'Pending', 'Executing', 'Verifying', 'Pending Revert', 'Reverting', 'Reverted', 'Ignored', 'Expired', 'Blocked', 'Success')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabasePropertiesRecommendedIndexInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "action",
            "columns",
            "created",
            "estimated_impact",
            "included_columns",
            "index_script",
            "index_type",
            "last_modified",
            "reported_impact",
            "var_schema",
            "state",
            "table",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in estimated_impact (list)
        _items = []
        if self.estimated_impact:
            for _item_estimated_impact in self.estimated_impact:
                if _item_estimated_impact:
                    _items.append(_item_estimated_impact.to_dict())
            _dict['estimatedImpact'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reported_impact (list)
        _items = []
        if self.reported_impact:
            for _item_reported_impact in self.reported_impact:
                if _item_reported_impact:
                    _items.append(_item_reported_impact.to_dict())
            _dict['reportedImpact'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabasePropertiesRecommendedIndexInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "columns": obj.get("columns"),
            "created": obj.get("created"),
            "estimatedImpact": [DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner.from_dict(_item) for _item in obj["estimatedImpact"]] if obj.get("estimatedImpact") is not None else None,
            "includedColumns": obj.get("includedColumns"),
            "indexScript": obj.get("indexScript"),
            "indexType": obj.get("indexType"),
            "lastModified": obj.get("lastModified"),
            "reportedImpact": [DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner.from_dict(_item) for _item in obj["reportedImpact"]] if obj.get("reportedImpact") is not None else None,
            "schema": obj.get("schema"),
            "state": obj.get("state"),
            "table": obj.get("table")
        })
        return _obj



# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Databases.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database import Database

class TestDatabase(unittest.TestCase):
    """Database unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Database:
        """Test Database
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Database`
        """
        model = Database()
        if include_optional:
            return Database(
                kind = '',
                properties = openapi_client.models.database_properties.DatabaseProperties(
                    collation = '', 
                    containment_state = 56, 
                    create_mode = 'Copy', 
                    creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    current_service_objective_id = '', 
                    database_id = '', 
                    default_secondary_location = '', 
                    earliest_restore_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    edition = 'Web', 
                    elastic_pool_name = '', 
                    failover_group_id = '', 
                    max_size_bytes = '', 
                    read_scale = 'Enabled', 
                    recommended_index = [
                        openapi_client.models.database_properties_recommended_index_inner.DatabaseProperties_recommendedIndex_inner(
                            properties = openapi_client.models.database_properties_recommended_index_inner_properties.DatabaseProperties_recommendedIndex_inner_properties(
                                action = 'Create', 
                                columns = [
                                    ''
                                    ], 
                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                estimated_impact = [
                                    openapi_client.models.database_properties_recommended_index_inner_properties_estimated_impact_inner.DatabaseProperties_recommendedIndex_inner_properties_estimatedImpact_inner(
                                        change_value_absolute = 1.337, 
                                        change_value_relative = 1.337, 
                                        name = '', 
                                        unit = '', )
                                    ], 
                                included_columns = [
                                    ''
                                    ], 
                                index_script = '', 
                                index_type = 'CLUSTERED', 
                                last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                reported_impact = [
                                    openapi_client.models.database_properties_recommended_index_inner_properties_estimated_impact_inner.DatabaseProperties_recommendedIndex_inner_properties_estimatedImpact_inner(
                                        change_value_absolute = 1.337, 
                                        change_value_relative = 1.337, 
                                        name = '', 
                                        unit = '', )
                                    ], 
                                schema = '', 
                                state = 'Active', 
                                table = '', ), )
                        ], 
                    recovery_services_recovery_point_resource_id = '', 
                    requested_service_objective_id = '', 
                    requested_service_objective_name = 'System', 
                    restore_point_in_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    sample_name = 'AdventureWorksLT', 
                    service_level_objective = 'System', 
                    service_tier_advisors = [
                        openapi_client.models.database_properties_service_tier_advisors_inner.DatabaseProperties_serviceTierAdvisors_inner()
                        ], 
                    source_database_deletion_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    source_database_id = '', 
                    status = '', 
                    transparent_data_encryption = [
                        openapi_client.models.database_properties_transparent_data_encryption_inner.DatabaseProperties_transparentDataEncryption_inner(
                            location = '', )
                        ], 
                    zone_redundant = True, ),
                location = '',
                tags = {
                    'key' : ''
                    },
                id = '',
                name = '',
                type = ''
            )
        else:
            return Database(
                location = '',
        )
        """

    def testDatabase(self):
        """Test Database"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

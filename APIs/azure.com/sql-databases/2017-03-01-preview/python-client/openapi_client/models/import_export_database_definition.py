# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ImportExportDatabaseDefinition(BaseModel):
    """
    Contains the information necessary to perform import/export operation.
    """ # noqa: E501
    administrator_login: StrictStr = Field(description="Administrator login name.", alias="administratorLogin")
    administrator_login_password: StrictStr = Field(description="Administrator login password.", alias="administratorLoginPassword")
    authentication_type: Optional[StrictStr] = Field(default=None, description="Authentication type.", alias="authenticationType")
    database_name: Optional[StrictStr] = Field(default=None, description="Name of the import database.", alias="databaseName")
    edition: Optional[StrictStr] = Field(default=None, description="Edition of the import database.")
    max_size_bytes: Optional[StrictStr] = Field(default=None, description="Max size in bytes for the import database.", alias="maxSizeBytes")
    service_objective_name: Optional[StrictStr] = Field(default=None, description="Service level objective name of the import database.", alias="serviceObjectiveName")
    storage_key: StrictStr = Field(description="Storage key.", alias="storageKey")
    storage_key_type: StrictStr = Field(description="Storage key type.", alias="storageKeyType")
    storage_uri: StrictStr = Field(description="Storage Uri.", alias="storageUri")
    __properties: ClassVar[List[str]] = ["administratorLogin", "administratorLoginPassword", "authenticationType", "databaseName", "edition", "maxSizeBytes", "serviceObjectiveName", "storageKey", "storageKeyType", "storageUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportExportDatabaseDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportExportDatabaseDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administratorLogin": obj.get("administratorLogin"),
            "administratorLoginPassword": obj.get("administratorLoginPassword"),
            "authenticationType": obj.get("authenticationType"),
            "databaseName": obj.get("databaseName"),
            "edition": obj.get("edition"),
            "maxSizeBytes": obj.get("maxSizeBytes"),
            "serviceObjectiveName": obj.get("serviceObjectiveName"),
            "storageKey": obj.get("storageKey"),
            "storageKeyType": obj.get("storageKeyType"),
            "storageUri": obj.get("storageUri")
        })
        return _obj



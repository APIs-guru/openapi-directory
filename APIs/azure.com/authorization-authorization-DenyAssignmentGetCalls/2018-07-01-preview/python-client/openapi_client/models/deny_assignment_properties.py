# coding: utf-8

"""
    AuthorizationManagementClient

    Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deny_assignment_permission import DenyAssignmentPermission
from openapi_client.models.principal import Principal
from typing import Optional, Set
from typing_extensions import Self

class DenyAssignmentProperties(BaseModel):
    """
    Deny assignment properties.
    """ # noqa: E501
    deny_assignment_name: Optional[StrictStr] = Field(default=None, description="The display name of the deny assignment.", alias="denyAssignmentName")
    description: Optional[StrictStr] = Field(default=None, description="The description of the deny assignment.")
    do_not_apply_to_child_scopes: Optional[StrictBool] = Field(default=None, description="Determines if the deny assignment applies to child scopes. Default value is false.", alias="doNotApplyToChildScopes")
    exclude_principals: Optional[List[Principal]] = Field(default=None, description="Array of principals to which the deny assignment does not apply.", alias="excludePrincipals")
    is_system_protected: Optional[StrictBool] = Field(default=None, description="Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.", alias="isSystemProtected")
    permissions: Optional[List[DenyAssignmentPermission]] = Field(default=None, description="An array of permissions that are denied by the deny assignment.")
    principals: Optional[List[Principal]] = Field(default=None, description="Array of principals to which the deny assignment applies.")
    scope: Optional[StrictStr] = Field(default=None, description="The deny assignment scope.")
    __properties: ClassVar[List[str]] = ["denyAssignmentName", "description", "doNotApplyToChildScopes", "excludePrincipals", "isSystemProtected", "permissions", "principals", "scope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DenyAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exclude_principals (list)
        _items = []
        if self.exclude_principals:
            for _item_exclude_principals in self.exclude_principals:
                if _item_exclude_principals:
                    _items.append(_item_exclude_principals.to_dict())
            _dict['excludePrincipals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in principals (list)
        _items = []
        if self.principals:
            for _item_principals in self.principals:
                if _item_principals:
                    _items.append(_item_principals.to_dict())
            _dict['principals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DenyAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "denyAssignmentName": obj.get("denyAssignmentName"),
            "description": obj.get("description"),
            "doNotApplyToChildScopes": obj.get("doNotApplyToChildScopes"),
            "excludePrincipals": [Principal.from_dict(_item) for _item in obj["excludePrincipals"]] if obj.get("excludePrincipals") is not None else None,
            "isSystemProtected": obj.get("isSystemProtected"),
            "permissions": [DenyAssignmentPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "principals": [Principal.from_dict(_item) for _item in obj["principals"]] if obj.get("principals") is not None else None,
            "scope": obj.get("scope")
        })
        return _obj



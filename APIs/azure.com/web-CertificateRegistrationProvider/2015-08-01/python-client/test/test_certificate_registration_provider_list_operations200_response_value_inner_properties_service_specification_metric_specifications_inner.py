# coding: utf-8

"""
    CertificateRegistrationProvider API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.certificate_registration_provider_list_operations200_response_value_inner_properties_service_specification_metric_specifications_inner import CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner

class TestCertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner(unittest.TestCase):
    """CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner:
        """Test CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner`
        """
        model = CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner()
        if include_optional:
            return CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner(
                aggregation_type = '',
                availabilities = [
                    openapi_client.models.certificate_registration_provider_list_operations_200_response_value_inner_properties_service_specification_metric_specifications_inner_availabilities_inner.CertificateRegistrationProvider_ListOperations_200_response_value_inner_properties_serviceSpecification_metricSpecifications_inner_availabilities_inner(
                        blob_duration = '', 
                        time_grain = '', )
                    ],
                category = '',
                dimensions = [
                    openapi_client.models.certificate_registration_provider_list_operations_200_response_value_inner_properties_service_specification_metric_specifications_inner_dimensions_inner.CertificateRegistrationProvider_ListOperations_200_response_value_inner_properties_serviceSpecification_metricSpecifications_inner_dimensions_inner(
                        display_name = '', 
                        internal_name = '', 
                        name = '', 
                        to_be_exported_for_shoebox = True, )
                    ],
                display_description = '',
                display_name = '',
                enable_regional_mdm_account = True,
                fill_gap_with_zero = True,
                is_internal = True,
                metric_filter_pattern = '',
                name = '',
                source_mdm_account = '',
                source_mdm_namespace = '',
                supports_instance_level_aggregation = True,
                unit = ''
            )
        else:
            return CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner(
        )
        """

    def testCertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner(self):
        """Test CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

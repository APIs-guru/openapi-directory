# coding: utf-8

"""
    Azure Activity Log Alerts

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_log_alert_action_list import ActivityLogAlertActionList
from openapi_client.models.activity_log_alert_all_of_condition import ActivityLogAlertAllOfCondition
from typing import Optional, Set
from typing_extensions import Self

class ActivityLogAlert(BaseModel):
    """
    An Azure activity log alert.
    """ # noqa: E501
    actions: ActivityLogAlertActionList
    condition: ActivityLogAlertAllOfCondition
    description: Optional[StrictStr] = Field(default=None, description="A description of this activity log alert.")
    enabled: Optional[StrictBool] = Field(default=True, description="Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated.")
    scopes: List[StrictStr] = Field(description="A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.")
    __properties: ClassVar[List[str]] = ["actions", "condition", "description", "enabled", "scopes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityLogAlert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actions
        if self.actions:
            _dict['actions'] = self.actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityLogAlert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": ActivityLogAlertActionList.from_dict(obj["actions"]) if obj.get("actions") is not None else None,
            "condition": ActivityLogAlertAllOfCondition.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "description": obj.get("description"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "scopes": obj.get("scopes")
        })
        return _obj



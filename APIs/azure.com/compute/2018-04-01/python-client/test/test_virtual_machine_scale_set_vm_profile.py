# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine_scale_set_vm_profile import VirtualMachineScaleSetVMProfile

class TestVirtualMachineScaleSetVMProfile(unittest.TestCase):
    """VirtualMachineScaleSetVMProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachineScaleSetVMProfile:
        """Test VirtualMachineScaleSetVMProfile
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachineScaleSetVMProfile`
        """
        model = VirtualMachineScaleSetVMProfile()
        if include_optional:
            return VirtualMachineScaleSetVMProfile(
                diagnostics_profile = openapi_client.models.diagnostics_profile.DiagnosticsProfile(
                    boot_diagnostics = openapi_client.models.boot_diagnostics.BootDiagnostics(
                        enabled = True, 
                        storage_uri = '', ), ),
                eviction_policy = 'Deallocate',
                extension_profile = openapi_client.models.virtual_machine_scale_set_extension_profile.VirtualMachineScaleSetExtensionProfile(
                    extensions = [
                        openapi_client.models.virtual_machine_scale_set_extension.VirtualMachineScaleSetExtension(
                            name = '', 
                            properties = openapi_client.models.virtual_machine_scale_set_extension_properties.VirtualMachineScaleSetExtensionProperties(
                                auto_upgrade_minor_version = True, 
                                force_update_tag = '', 
                                protected_settings = openapi_client.models.protected_settings.protectedSettings(), 
                                provisioning_state = '', 
                                publisher = '', 
                                settings = openapi_client.models.settings.settings(), 
                                type = '', 
                                type_handler_version = '', ), )
                        ], ),
                license_type = '',
                network_profile = openapi_client.models.virtual_machine_scale_set_network_profile.VirtualMachineScaleSetNetworkProfile(
                    health_probe = openapi_client.models.api_entity_reference.ApiEntityReference(
                        id = '', ), 
                    network_interface_configurations = [
                        openapi_client.models.virtual_machine_scale_set_network_configuration.VirtualMachineScaleSetNetworkConfiguration(
                            name = '', 
                            properties = openapi_client.models.virtual_machine_scale_set_network_configuration_properties.VirtualMachineScaleSetNetworkConfigurationProperties(
                                dns_settings = openapi_client.models.virtual_machine_scale_set_network_configuration_dns_settings.VirtualMachineScaleSetNetworkConfigurationDnsSettings(
                                    dns_servers = [
                                        ''
                                        ], ), 
                                enable_accelerated_networking = True, 
                                enable_ip_forwarding = True, 
                                ip_configurations = [
                                    openapi_client.models.virtual_machine_scale_set_ip_configuration.VirtualMachineScaleSetIPConfiguration(
                                        name = '', )
                                    ], 
                                network_security_group = openapi_client.models.sub_resource.SubResource(
                                    id = '', ), 
                                primary = True, ), )
                        ], ),
                os_profile = openapi_client.models.virtual_machine_scale_set_os_profile.VirtualMachineScaleSetOSProfile(
                    admin_password = '', 
                    admin_username = '', 
                    computer_name_prefix = '', 
                    custom_data = '', 
                    linux_configuration = openapi_client.models.linux_configuration.LinuxConfiguration(
                        disable_password_authentication = True, 
                        ssh = openapi_client.models.ssh_configuration.SshConfiguration(
                            public_keys = [
                                openapi_client.models.ssh_public_key.SshPublicKey(
                                    key_data = '', 
                                    path = '', )
                                ], ), ), 
                    secrets = [
                        openapi_client.models.vault_secret_group.VaultSecretGroup(
                            source_vault = openapi_client.models.sub_resource.SubResource(
                                id = '', ), 
                            vault_certificates = [
                                openapi_client.models.vault_certificate.VaultCertificate(
                                    certificate_store = '', 
                                    certificate_url = '', )
                                ], )
                        ], 
                    windows_configuration = openapi_client.models.windows_configuration.WindowsConfiguration(
                        additional_unattend_content = [
                            openapi_client.models.additional_unattend_content.AdditionalUnattendContent(
                                component_name = 'Microsoft-Windows-Shell-Setup', 
                                content = '', 
                                pass_name = 'OobeSystem', 
                                setting_name = 'AutoLogon', )
                            ], 
                        enable_automatic_updates = True, 
                        provision_vm_agent = True, 
                        time_zone = '', 
                        win_rm = openapi_client.models.win_rm_configuration.WinRMConfiguration(
                            listeners = [
                                openapi_client.models.win_rm_listener.WinRMListener(
                                    certificate_url = '', 
                                    protocol = 'Http', )
                                ], ), ), ),
                priority = 'Regular',
                storage_profile = openapi_client.models.virtual_machine_scale_set_storage_profile.VirtualMachineScaleSetStorageProfile(
                    data_disks = [
                        openapi_client.models.virtual_machine_scale_set_data_disk.VirtualMachineScaleSetDataDisk(
                            caching = 'None', 
                            create_option = 'FromImage', 
                            disk_size_gb = 56, 
                            lun = 56, 
                            managed_disk = openapi_client.models.virtual_machine_scale_set_managed_disk_parameters.VirtualMachineScaleSetManagedDiskParameters(
                                storage_account_type = 'Standard_LRS', ), 
                            name = '', 
                            write_accelerator_enabled = True, )
                        ], 
                    image_reference = openapi_client.models.image_reference.ImageReference(
                        offer = '', 
                        publisher = '', 
                        sku = '', 
                        version = '', ), 
                    os_disk = openapi_client.models.virtual_machine_scale_set_os_disk.VirtualMachineScaleSetOSDisk(
                        create_option = 'FromImage', 
                        disk_size_gb = 56, 
                        image = openapi_client.models.virtual_hard_disk.VirtualHardDisk(
                            uri = '', ), 
                        name = '', 
                        os_type = 'Windows', 
                        vhd_containers = [
                            ''
                            ], 
                        write_accelerator_enabled = True, ), )
            )
        else:
            return VirtualMachineScaleSetVMProfile(
        )
        """

    def testVirtualMachineScaleSetVMProfile(self):
        """Test VirtualMachineScaleSetVMProfile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.diagnostics_profile import DiagnosticsProfile
from openapi_client.models.hardware_profile import HardwareProfile
from openapi_client.models.network_profile import NetworkProfile
from openapi_client.models.os_profile import OSProfile
from openapi_client.models.storage_profile import StorageProfile
from openapi_client.models.sub_resource import SubResource
from openapi_client.models.virtual_machine_instance_view import VirtualMachineInstanceView
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineProperties(BaseModel):
    """
    Describes the properties of a Virtual Machine.
    """ # noqa: E501
    availability_set: Optional[SubResource] = Field(default=None, alias="availabilitySet")
    diagnostics_profile: Optional[DiagnosticsProfile] = Field(default=None, alias="diagnosticsProfile")
    hardware_profile: Optional[HardwareProfile] = Field(default=None, alias="hardwareProfile")
    instance_view: Optional[VirtualMachineInstanceView] = Field(default=None, alias="instanceView")
    license_type: Optional[StrictStr] = Field(default=None, description="Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15", alias="licenseType")
    network_profile: Optional[NetworkProfile] = Field(default=None, alias="networkProfile")
    os_profile: Optional[OSProfile] = Field(default=None, alias="osProfile")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    proximity_placement_group: Optional[SubResource] = Field(default=None, alias="proximityPlacementGroup")
    storage_profile: Optional[StorageProfile] = Field(default=None, alias="storageProfile")
    vm_id: Optional[StrictStr] = Field(default=None, description="Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.", alias="vmId")
    __properties: ClassVar[List[str]] = ["availabilitySet", "diagnosticsProfile", "hardwareProfile", "instanceView", "licenseType", "networkProfile", "osProfile", "provisioningState", "proximityPlacementGroup", "storageProfile", "vmId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "vm_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of availability_set
        if self.availability_set:
            _dict['availabilitySet'] = self.availability_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diagnostics_profile
        if self.diagnostics_profile:
            _dict['diagnosticsProfile'] = self.diagnostics_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hardware_profile
        if self.hardware_profile:
            _dict['hardwareProfile'] = self.hardware_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instance_view
        if self.instance_view:
            _dict['instanceView'] = self.instance_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_profile
        if self.network_profile:
            _dict['networkProfile'] = self.network_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_profile
        if self.os_profile:
            _dict['osProfile'] = self.os_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proximity_placement_group
        if self.proximity_placement_group:
            _dict['proximityPlacementGroup'] = self.proximity_placement_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilitySet": SubResource.from_dict(obj["availabilitySet"]) if obj.get("availabilitySet") is not None else None,
            "diagnosticsProfile": DiagnosticsProfile.from_dict(obj["diagnosticsProfile"]) if obj.get("diagnosticsProfile") is not None else None,
            "hardwareProfile": HardwareProfile.from_dict(obj["hardwareProfile"]) if obj.get("hardwareProfile") is not None else None,
            "instanceView": VirtualMachineInstanceView.from_dict(obj["instanceView"]) if obj.get("instanceView") is not None else None,
            "licenseType": obj.get("licenseType"),
            "networkProfile": NetworkProfile.from_dict(obj["networkProfile"]) if obj.get("networkProfile") is not None else None,
            "osProfile": OSProfile.from_dict(obj["osProfile"]) if obj.get("osProfile") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "proximityPlacementGroup": SubResource.from_dict(obj["proximityPlacementGroup"]) if obj.get("proximityPlacementGroup") is not None else None,
            "storageProfile": StorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None,
            "vmId": obj.get("vmId")
        })
        return _obj



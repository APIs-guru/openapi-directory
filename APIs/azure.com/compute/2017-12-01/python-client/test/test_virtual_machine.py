# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine import VirtualMachine

class TestVirtualMachine(unittest.TestCase):
    """VirtualMachine unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachine:
        """Test VirtualMachine
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachine`
        """
        model = VirtualMachine()
        if include_optional:
            return VirtualMachine(
                identity = openapi_client.models.virtual_machine_identity.VirtualMachineIdentity(
                    identity_ids = [
                        ''
                        ], 
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', ),
                plan = openapi_client.models.plan.Plan(
                    name = '', 
                    product = '', 
                    promotion_code = '', 
                    publisher = '', ),
                properties = openapi_client.models.virtual_machine_properties.VirtualMachineProperties(
                    availability_set = openapi_client.models.sub_resource.SubResource(
                        id = '', ), 
                    diagnostics_profile = openapi_client.models.diagnostics_profile.DiagnosticsProfile(
                        boot_diagnostics = openapi_client.models.boot_diagnostics.BootDiagnostics(
                            enabled = True, 
                            storage_uri = '', ), ), 
                    hardware_profile = openapi_client.models.hardware_profile.HardwareProfile(
                        vm_size = 'Basic_A0', ), 
                    instance_view = openapi_client.models.virtual_machine_instance_view.VirtualMachineInstanceView(
                        computer_name = '', 
                        disks = [
                            openapi_client.models.disk_instance_view.DiskInstanceView(
                                encryption_settings = [
                                    openapi_client.models.disk_encryption_settings.DiskEncryptionSettings(
                                        disk_encryption_key = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                            secret_url = '', 
                                            source_vault = openapi_client.models.sub_resource.SubResource(
                                                id = '', ), ), 
                                        enabled = True, 
                                        key_encryption_key = openapi_client.models.key_vault_key_reference.KeyVaultKeyReference(
                                            key_url = '', 
                                            source_vault = , ), )
                                    ], 
                                name = '', 
                                statuses = [
                                    openapi_client.models.instance_view_status.InstanceViewStatus(
                                        code = '', 
                                        display_status = '', 
                                        level = 'Info', 
                                        message = '', 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], )
                            ], 
                        extensions = [
                            openapi_client.models.virtual_machine_extension_instance_view.VirtualMachineExtensionInstanceView(
                                name = '', 
                                substatuses = [
                                    openapi_client.models.instance_view_status.InstanceViewStatus(
                                        code = '', 
                                        display_status = '', 
                                        level = 'Info', 
                                        message = '', 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                type = '', 
                                type_handler_version = '', )
                            ], 
                        maintenance_redeploy_status = openapi_client.models.maintenance_redeploy_status.MaintenanceRedeployStatus(
                            is_customer_initiated_maintenance_allowed = True, 
                            last_operation_message = '', 
                            last_operation_result_code = 'None', 
                            maintenance_window_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            maintenance_window_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            pre_maintenance_window_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            pre_maintenance_window_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        os_name = '', 
                        os_version = '', 
                        platform_fault_domain = 56, 
                        platform_update_domain = 56, 
                        rdp_thumb_print = '', 
                        statuses = [
                            
                            ], 
                        vm_agent = openapi_client.models.virtual_machine_agent_instance_view.VirtualMachineAgentInstanceView(
                            extension_handlers = [
                                openapi_client.models.virtual_machine_extension_handler_instance_view.VirtualMachineExtensionHandlerInstanceView(
                                    status = , 
                                    type = '', 
                                    type_handler_version = '', )
                                ], 
                            vm_agent_version = '', ), ), 
                    license_type = '', 
                    network_profile = openapi_client.models.network_profile.NetworkProfile(
                        network_interfaces = [
                            openapi_client.models.network_interface_reference.NetworkInterfaceReference(
                                properties = openapi_client.models.network_interface_reference_properties.NetworkInterfaceReferenceProperties(
                                    primary = True, ), )
                            ], ), 
                    os_profile = openapi_client.models.os_profile.OSProfile(
                        admin_password = '', 
                        admin_username = '', 
                        computer_name = '', 
                        custom_data = '', 
                        linux_configuration = openapi_client.models.linux_configuration.LinuxConfiguration(
                            disable_password_authentication = True, 
                            ssh = openapi_client.models.ssh_configuration.SshConfiguration(
                                public_keys = [
                                    openapi_client.models.ssh_public_key.SshPublicKey(
                                        key_data = '', 
                                        path = '', )
                                    ], ), ), 
                        secrets = [
                            openapi_client.models.vault_secret_group.VaultSecretGroup(
                                vault_certificates = [
                                    openapi_client.models.vault_certificate.VaultCertificate(
                                        certificate_store = '', 
                                        certificate_url = '', )
                                    ], )
                            ], 
                        windows_configuration = openapi_client.models.windows_configuration.WindowsConfiguration(
                            additional_unattend_content = [
                                openapi_client.models.additional_unattend_content.AdditionalUnattendContent(
                                    component_name = 'Microsoft-Windows-Shell-Setup', 
                                    content = '', 
                                    pass_name = 'OobeSystem', 
                                    setting_name = 'AutoLogon', )
                                ], 
                            enable_automatic_updates = True, 
                            provision_vm_agent = True, 
                            time_zone = '', 
                            win_rm = openapi_client.models.win_rm_configuration.WinRMConfiguration(
                                listeners = [
                                    openapi_client.models.win_rm_listener.WinRMListener(
                                        certificate_url = '', 
                                        protocol = 'Http', )
                                    ], ), ), ), 
                    provisioning_state = '', 
                    storage_profile = openapi_client.models.storage_profile.StorageProfile(
                        data_disks = [
                            openapi_client.models.data_disk.DataDisk(
                                caching = 'None', 
                                create_option = 'FromImage', 
                                disk_size_gb = 56, 
                                image = openapi_client.models.virtual_hard_disk.VirtualHardDisk(
                                    uri = '', ), 
                                lun = 56, 
                                managed_disk = openapi_client.models.managed_disk_parameters.ManagedDiskParameters(
                                    storage_account_type = 'Standard_LRS', ), 
                                name = '', 
                                vhd = openapi_client.models.virtual_hard_disk.VirtualHardDisk(
                                    uri = '', ), 
                                write_accelerator_enabled = True, )
                            ], 
                        image_reference = openapi_client.models.image_reference.ImageReference(
                            offer = '', 
                            publisher = '', 
                            sku = '', 
                            version = '', ), 
                        os_disk = openapi_client.models.os_disk.OSDisk(
                            create_option = 'FromImage', 
                            disk_size_gb = 56, 
                            name = '', 
                            os_type = 'Windows', 
                            write_accelerator_enabled = True, ), ), 
                    vm_id = '', ),
                resources = [
                    openapi_client.models.virtual_machine_extension.VirtualMachineExtension(
                        properties = openapi_client.models.virtual_machine_extension_properties.VirtualMachineExtensionProperties(
                            auto_upgrade_minor_version = True, 
                            force_update_tag = '', 
                            instance_view = openapi_client.models.virtual_machine_extension_instance_view.VirtualMachineExtensionInstanceView(
                                name = '', 
                                statuses = [
                                    openapi_client.models.instance_view_status.InstanceViewStatus(
                                        code = '', 
                                        display_status = '', 
                                        level = 'Info', 
                                        message = '', 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                substatuses = [
                                    openapi_client.models.instance_view_status.InstanceViewStatus(
                                        code = '', 
                                        display_status = '', 
                                        level = 'Info', 
                                        message = '', 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                type = '', 
                                type_handler_version = '', ), 
                            protected_settings = openapi_client.models.protected_settings.protectedSettings(), 
                            provisioning_state = '', 
                            publisher = '', 
                            settings = openapi_client.models.settings.settings(), 
                            type = '', 
                            type_handler_version = '', ), )
                    ],
                zones = [
                    ''
                    ],
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return VirtualMachine(
                location = '',
        )
        """

    def testVirtualMachine(self):
        """Test VirtualMachine"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

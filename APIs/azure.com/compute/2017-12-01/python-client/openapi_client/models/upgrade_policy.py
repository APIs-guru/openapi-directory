# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_os_upgrade_policy import AutoOSUpgradePolicy
from openapi_client.models.rolling_upgrade_policy import RollingUpgradePolicy
from typing import Optional, Set
from typing_extensions import Self

class UpgradePolicy(BaseModel):
    """
    Describes an upgrade policy - automatic, manual, or rolling.
    """ # noqa: E501
    auto_os_upgrade_policy: Optional[AutoOSUpgradePolicy] = Field(default=None, alias="autoOSUpgradePolicy")
    automatic_os_upgrade: Optional[StrictBool] = Field(default=None, description="Whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the image becomes available.", alias="automaticOSUpgrade")
    mode: Optional[StrictStr] = Field(default=None, description="Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.")
    rolling_upgrade_policy: Optional[RollingUpgradePolicy] = Field(default=None, alias="rollingUpgradePolicy")
    __properties: ClassVar[List[str]] = ["autoOSUpgradePolicy", "automaticOSUpgrade", "mode", "rollingUpgradePolicy"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Automatic', 'Manual', 'Rolling']):
            raise ValueError("must be one of enum values ('Automatic', 'Manual', 'Rolling')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_os_upgrade_policy
        if self.auto_os_upgrade_policy:
            _dict['autoOSUpgradePolicy'] = self.auto_os_upgrade_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rolling_upgrade_policy
        if self.rolling_upgrade_policy:
            _dict['rollingUpgradePolicy'] = self.rolling_upgrade_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoOSUpgradePolicy": AutoOSUpgradePolicy.from_dict(obj["autoOSUpgradePolicy"]) if obj.get("autoOSUpgradePolicy") is not None else None,
            "automaticOSUpgrade": obj.get("automaticOSUpgrade"),
            "mode": obj.get("mode"),
            "rollingUpgradePolicy": RollingUpgradePolicy.from_dict(obj["rollingUpgradePolicy"]) if obj.get("rollingUpgradePolicy") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.caching import Caching
from openapi_client.models.create_option import CreateOption
from openapi_client.models.managed_disk_parameters import ManagedDiskParameters
from openapi_client.models.virtual_hard_disk import VirtualHardDisk
from typing import Optional, Set
from typing_extensions import Self

class DataDisk(BaseModel):
    """
    Describes a data disk.
    """ # noqa: E501
    caching: Optional[Caching] = None
    create_option: CreateOption = Field(alias="createOption")
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB", alias="diskSizeGB")
    image: Optional[VirtualHardDisk] = None
    lun: StrictInt = Field(description="Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.")
    managed_disk: Optional[ManagedDiskParameters] = Field(default=None, alias="managedDisk")
    name: Optional[StrictStr] = Field(default=None, description="The disk name.")
    vhd: Optional[VirtualHardDisk] = None
    write_accelerator_enabled: Optional[StrictBool] = Field(default=None, description="Specifies whether writeAccelerator should be enabled or disabled on the disk.", alias="writeAcceleratorEnabled")
    __properties: ClassVar[List[str]] = ["caching", "createOption", "diskSizeGB", "image", "lun", "managedDisk", "name", "vhd", "writeAcceleratorEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_disk
        if self.managed_disk:
            _dict['managedDisk'] = self.managed_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vhd
        if self.vhd:
            _dict['vhd'] = self.vhd.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caching": obj.get("caching"),
            "createOption": obj.get("createOption"),
            "diskSizeGB": obj.get("diskSizeGB"),
            "image": VirtualHardDisk.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "lun": obj.get("lun"),
            "managedDisk": ManagedDiskParameters.from_dict(obj["managedDisk"]) if obj.get("managedDisk") is not None else None,
            "name": obj.get("name"),
            "vhd": VirtualHardDisk.from_dict(obj["vhd"]) if obj.get("vhd") is not None else None,
            "writeAcceleratorEnabled": obj.get("writeAcceleratorEnabled")
        })
        return _obj



# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.caching import Caching
from openapi_client.models.virtual_hard_disk import VirtualHardDisk
from openapi_client.models.virtual_machine_scale_set_managed_disk_parameters import VirtualMachineScaleSetManagedDiskParameters
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetUpdateOSDisk(BaseModel):
    """
    Describes virtual machine scale set operating system disk Update Object. This should be used for Updating VMSS OS Disk.
    """ # noqa: E501
    caching: Optional[Caching] = None
    image: Optional[VirtualHardDisk] = None
    managed_disk: Optional[VirtualMachineScaleSetManagedDiskParameters] = Field(default=None, alias="managedDisk")
    vhd_containers: Optional[List[StrictStr]] = Field(default=None, description="The list of virtual hard disk container uris.", alias="vhdContainers")
    write_accelerator_enabled: Optional[StrictBool] = Field(default=None, description="Specifies whether writeAccelerator should be enabled or disabled on the disk.", alias="writeAcceleratorEnabled")
    __properties: ClassVar[List[str]] = ["caching", "image", "managedDisk", "vhdContainers", "writeAcceleratorEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetUpdateOSDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_disk
        if self.managed_disk:
            _dict['managedDisk'] = self.managed_disk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetUpdateOSDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caching": obj.get("caching"),
            "image": VirtualHardDisk.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "managedDisk": VirtualMachineScaleSetManagedDiskParameters.from_dict(obj["managedDisk"]) if obj.get("managedDisk") is not None else None,
            "vhdContainers": obj.get("vhdContainers"),
            "writeAcceleratorEnabled": obj.get("writeAcceleratorEnabled")
        })
        return _obj



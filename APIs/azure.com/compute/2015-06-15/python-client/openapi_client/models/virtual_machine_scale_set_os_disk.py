# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2015-06-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.caching import Caching
from openapi_client.models.create_option import CreateOption
from openapi_client.models.virtual_hard_disk import VirtualHardDisk
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetOSDisk(BaseModel):
    """
    Describes a virtual machine scale set operating system disk.
    """ # noqa: E501
    caching: Optional[Caching] = None
    create_option: CreateOption = Field(alias="createOption")
    image: Optional[VirtualHardDisk] = None
    name: StrictStr = Field(description="The disk name.")
    os_type: Optional[StrictStr] = Field(default=None, description="This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**", alias="osType")
    vhd_containers: Optional[List[StrictStr]] = Field(default=None, description="The list of virtual hard disk container uris.", alias="vhdContainers")
    __properties: ClassVar[List[str]] = ["caching", "createOption", "image", "name", "osType", "vhdContainers"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetOSDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetOSDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caching": obj.get("caching"),
            "createOption": obj.get("createOption"),
            "image": VirtualHardDisk.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "name": obj.get("name"),
            "osType": obj.get("osType"),
            "vhdContainers": obj.get("vhdContainers")
        })
        return _obj



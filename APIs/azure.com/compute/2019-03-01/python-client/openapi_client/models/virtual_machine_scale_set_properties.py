# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_capabilities import AdditionalCapabilities
from openapi_client.models.scale_in_policy import ScaleInPolicy
from openapi_client.models.sub_resource import SubResource
from openapi_client.models.upgrade_policy import UpgradePolicy
from openapi_client.models.virtual_machine_scale_set_vm_profile import VirtualMachineScaleSetVMProfile
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetProperties(BaseModel):
    """
    Describes the properties of a Virtual Machine Scale Set.
    """ # noqa: E501
    additional_capabilities: Optional[AdditionalCapabilities] = Field(default=None, alias="additionalCapabilities")
    do_not_run_extensions_on_overprovisioned_vms: Optional[StrictBool] = Field(default=None, description="When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.", alias="doNotRunExtensionsOnOverprovisionedVMs")
    overprovision: Optional[StrictBool] = Field(default=None, description="Specifies whether the Virtual Machine Scale Set should be overprovisioned.")
    platform_fault_domain_count: Optional[StrictInt] = Field(default=None, description="Fault Domain count for each placement group.", alias="platformFaultDomainCount")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    proximity_placement_group: Optional[SubResource] = Field(default=None, alias="proximityPlacementGroup")
    scale_in_policy: Optional[ScaleInPolicy] = Field(default=None, alias="scaleInPolicy")
    single_placement_group: Optional[StrictBool] = Field(default=None, description="When true this limits the scale set to a single placement group, of max size 100 virtual machines.", alias="singlePlacementGroup")
    unique_id: Optional[StrictStr] = Field(default=None, description="Specifies the ID which uniquely identifies a Virtual Machine Scale Set.", alias="uniqueId")
    upgrade_policy: Optional[UpgradePolicy] = Field(default=None, alias="upgradePolicy")
    virtual_machine_profile: Optional[VirtualMachineScaleSetVMProfile] = Field(default=None, alias="virtualMachineProfile")
    zone_balance: Optional[StrictBool] = Field(default=None, description="Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.", alias="zoneBalance")
    __properties: ClassVar[List[str]] = ["additionalCapabilities", "doNotRunExtensionsOnOverprovisionedVMs", "overprovision", "platformFaultDomainCount", "provisioningState", "proximityPlacementGroup", "scaleInPolicy", "singlePlacementGroup", "uniqueId", "upgradePolicy", "virtualMachineProfile", "zoneBalance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "unique_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_capabilities
        if self.additional_capabilities:
            _dict['additionalCapabilities'] = self.additional_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proximity_placement_group
        if self.proximity_placement_group:
            _dict['proximityPlacementGroup'] = self.proximity_placement_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_in_policy
        if self.scale_in_policy:
            _dict['scaleInPolicy'] = self.scale_in_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_policy
        if self.upgrade_policy:
            _dict['upgradePolicy'] = self.upgrade_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_profile
        if self.virtual_machine_profile:
            _dict['virtualMachineProfile'] = self.virtual_machine_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalCapabilities": AdditionalCapabilities.from_dict(obj["additionalCapabilities"]) if obj.get("additionalCapabilities") is not None else None,
            "doNotRunExtensionsOnOverprovisionedVMs": obj.get("doNotRunExtensionsOnOverprovisionedVMs"),
            "overprovision": obj.get("overprovision"),
            "platformFaultDomainCount": obj.get("platformFaultDomainCount"),
            "provisioningState": obj.get("provisioningState"),
            "proximityPlacementGroup": SubResource.from_dict(obj["proximityPlacementGroup"]) if obj.get("proximityPlacementGroup") is not None else None,
            "scaleInPolicy": ScaleInPolicy.from_dict(obj["scaleInPolicy"]) if obj.get("scaleInPolicy") is not None else None,
            "singlePlacementGroup": obj.get("singlePlacementGroup"),
            "uniqueId": obj.get("uniqueId"),
            "upgradePolicy": UpgradePolicy.from_dict(obj["upgradePolicy"]) if obj.get("upgradePolicy") is not None else None,
            "virtualMachineProfile": VirtualMachineScaleSetVMProfile.from_dict(obj["virtualMachineProfile"]) if obj.get("virtualMachineProfile") is not None else None,
            "zoneBalance": obj.get("zoneBalance")
        })
        return _obj



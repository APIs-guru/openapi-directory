# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MaintenanceRedeployStatus(BaseModel):
    """
    Maintenance Operation Status.
    """ # noqa: E501
    is_customer_initiated_maintenance_allowed: Optional[StrictBool] = Field(default=None, description="True, if customer is allowed to perform Maintenance.", alias="isCustomerInitiatedMaintenanceAllowed")
    last_operation_message: Optional[StrictStr] = Field(default=None, description="Message returned for the last Maintenance Operation.", alias="lastOperationMessage")
    last_operation_result_code: Optional[StrictStr] = Field(default=None, description="The Last Maintenance Operation Result Code.", alias="lastOperationResultCode")
    maintenance_window_end_time: Optional[datetime] = Field(default=None, description="End Time for the Maintenance Window.", alias="maintenanceWindowEndTime")
    maintenance_window_start_time: Optional[datetime] = Field(default=None, description="Start Time for the Maintenance Window.", alias="maintenanceWindowStartTime")
    pre_maintenance_window_end_time: Optional[datetime] = Field(default=None, description="End Time for the Pre Maintenance Window.", alias="preMaintenanceWindowEndTime")
    pre_maintenance_window_start_time: Optional[datetime] = Field(default=None, description="Start Time for the Pre Maintenance Window.", alias="preMaintenanceWindowStartTime")
    __properties: ClassVar[List[str]] = ["isCustomerInitiatedMaintenanceAllowed", "lastOperationMessage", "lastOperationResultCode", "maintenanceWindowEndTime", "maintenanceWindowStartTime", "preMaintenanceWindowEndTime", "preMaintenanceWindowStartTime"]

    @field_validator('last_operation_result_code')
    def last_operation_result_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'RetryLater', 'MaintenanceAborted', 'MaintenanceCompleted']):
            raise ValueError("must be one of enum values ('None', 'RetryLater', 'MaintenanceAborted', 'MaintenanceCompleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MaintenanceRedeployStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MaintenanceRedeployStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isCustomerInitiatedMaintenanceAllowed": obj.get("isCustomerInitiatedMaintenanceAllowed"),
            "lastOperationMessage": obj.get("lastOperationMessage"),
            "lastOperationResultCode": obj.get("lastOperationResultCode"),
            "maintenanceWindowEndTime": obj.get("maintenanceWindowEndTime"),
            "maintenanceWindowStartTime": obj.get("maintenanceWindowStartTime"),
            "preMaintenanceWindowEndTime": obj.get("preMaintenanceWindowEndTime"),
            "preMaintenanceWindowStartTime": obj.get("preMaintenanceWindowStartTime")
        })
        return _obj



# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.dedicated_host_instance_view import DedicatedHostInstanceView
from openapi_client.models.dedicated_host_license_type import DedicatedHostLicenseType
from openapi_client.models.sub_resource_read_only import SubResourceReadOnly
from typing import Optional, Set
from typing_extensions import Self

class DedicatedHostProperties(BaseModel):
    """
    Properties of the dedicated host.
    """ # noqa: E501
    auto_replace_on_failure: Optional[StrictBool] = Field(default=None, description="Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.", alias="autoReplaceOnFailure")
    host_id: Optional[StrictStr] = Field(default=None, description="A unique id generated and assigned to the dedicated host by the platform. <br><br> Does not change throughout the lifetime of the host.", alias="hostId")
    instance_view: Optional[DedicatedHostInstanceView] = Field(default=None, alias="instanceView")
    license_type: Optional[DedicatedHostLicenseType] = Field(default=None, alias="licenseType")
    platform_fault_domain: Optional[Annotated[int, Field(le=2, strict=True, ge=0)]] = Field(default=None, description="Fault domain of the dedicated host within a dedicated host group.", alias="platformFaultDomain")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    provisioning_time: Optional[datetime] = Field(default=None, description="The date when the host was first provisioned.", alias="provisioningTime")
    virtual_machines: Optional[List[SubResourceReadOnly]] = Field(default=None, description="A list of references to all virtual machines in the Dedicated Host.", alias="virtualMachines")
    __properties: ClassVar[List[str]] = ["autoReplaceOnFailure", "hostId", "instanceView", "licenseType", "platformFaultDomain", "provisioningState", "provisioningTime", "virtualMachines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DedicatedHostProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "host_id",
            "provisioning_state",
            "provisioning_time",
            "virtual_machines",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_view
        if self.instance_view:
            _dict['instanceView'] = self.instance_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_machines (list)
        _items = []
        if self.virtual_machines:
            for _item_virtual_machines in self.virtual_machines:
                if _item_virtual_machines:
                    _items.append(_item_virtual_machines.to_dict())
            _dict['virtualMachines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DedicatedHostProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoReplaceOnFailure": obj.get("autoReplaceOnFailure"),
            "hostId": obj.get("hostId"),
            "instanceView": DedicatedHostInstanceView.from_dict(obj["instanceView"]) if obj.get("instanceView") is not None else None,
            "licenseType": obj.get("licenseType"),
            "platformFaultDomain": obj.get("platformFaultDomain"),
            "provisioningState": obj.get("provisioningState"),
            "provisioningTime": obj.get("provisioningTime"),
            "virtualMachines": [SubResourceReadOnly.from_dict(_item) for _item in obj["virtualMachines"]] if obj.get("virtualMachines") is not None else None
        })
        return _obj



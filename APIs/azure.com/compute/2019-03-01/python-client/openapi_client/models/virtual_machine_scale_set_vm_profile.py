# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billing_profile import BillingProfile
from openapi_client.models.diagnostics_profile import DiagnosticsProfile
from openapi_client.models.scheduled_events_profile import ScheduledEventsProfile
from openapi_client.models.virtual_machine_scale_set_extension_profile import VirtualMachineScaleSetExtensionProfile
from openapi_client.models.virtual_machine_scale_set_network_profile import VirtualMachineScaleSetNetworkProfile
from openapi_client.models.virtual_machine_scale_set_os_profile import VirtualMachineScaleSetOSProfile
from openapi_client.models.virtual_machine_scale_set_storage_profile import VirtualMachineScaleSetStorageProfile
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetVMProfile(BaseModel):
    """
    Describes a virtual machine scale set virtual machine profile.
    """ # noqa: E501
    billing_profile: Optional[BillingProfile] = Field(default=None, alias="billingProfile")
    diagnostics_profile: Optional[DiagnosticsProfile] = Field(default=None, alias="diagnosticsProfile")
    eviction_policy: Optional[StrictStr] = Field(default=None, description="Specifies the eviction policy for virtual machines in a low priority scale set. <br><br>Minimum api-version: 2017-10-30-preview", alias="evictionPolicy")
    extension_profile: Optional[VirtualMachineScaleSetExtensionProfile] = Field(default=None, alias="extensionProfile")
    license_type: Optional[StrictStr] = Field(default=None, description="Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15", alias="licenseType")
    network_profile: Optional[VirtualMachineScaleSetNetworkProfile] = Field(default=None, alias="networkProfile")
    os_profile: Optional[VirtualMachineScaleSetOSProfile] = Field(default=None, alias="osProfile")
    priority: Optional[StrictStr] = Field(default=None, description="Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview")
    scheduled_events_profile: Optional[ScheduledEventsProfile] = Field(default=None, alias="scheduledEventsProfile")
    storage_profile: Optional[VirtualMachineScaleSetStorageProfile] = Field(default=None, alias="storageProfile")
    __properties: ClassVar[List[str]] = ["billingProfile", "diagnosticsProfile", "evictionPolicy", "extensionProfile", "licenseType", "networkProfile", "osProfile", "priority", "scheduledEventsProfile", "storageProfile"]

    @field_validator('eviction_policy')
    def eviction_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Deallocate', 'Delete']):
            raise ValueError("must be one of enum values ('Deallocate', 'Delete')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Regular', 'Low']):
            raise ValueError("must be one of enum values ('Regular', 'Low')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetVMProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_profile
        if self.billing_profile:
            _dict['billingProfile'] = self.billing_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diagnostics_profile
        if self.diagnostics_profile:
            _dict['diagnosticsProfile'] = self.diagnostics_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extension_profile
        if self.extension_profile:
            _dict['extensionProfile'] = self.extension_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_profile
        if self.network_profile:
            _dict['networkProfile'] = self.network_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_profile
        if self.os_profile:
            _dict['osProfile'] = self.os_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_events_profile
        if self.scheduled_events_profile:
            _dict['scheduledEventsProfile'] = self.scheduled_events_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetVMProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingProfile": BillingProfile.from_dict(obj["billingProfile"]) if obj.get("billingProfile") is not None else None,
            "diagnosticsProfile": DiagnosticsProfile.from_dict(obj["diagnosticsProfile"]) if obj.get("diagnosticsProfile") is not None else None,
            "evictionPolicy": obj.get("evictionPolicy"),
            "extensionProfile": VirtualMachineScaleSetExtensionProfile.from_dict(obj["extensionProfile"]) if obj.get("extensionProfile") is not None else None,
            "licenseType": obj.get("licenseType"),
            "networkProfile": VirtualMachineScaleSetNetworkProfile.from_dict(obj["networkProfile"]) if obj.get("networkProfile") is not None else None,
            "osProfile": VirtualMachineScaleSetOSProfile.from_dict(obj["osProfile"]) if obj.get("osProfile") is not None else None,
            "priority": obj.get("priority"),
            "scheduledEventsProfile": ScheduledEventsProfile.from_dict(obj["scheduledEventsProfile"]) if obj.get("scheduledEventsProfile") is not None else None,
            "storageProfile": VirtualMachineScaleSetStorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None
        })
        return _obj



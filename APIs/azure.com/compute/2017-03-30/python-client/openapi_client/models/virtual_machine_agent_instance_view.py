# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2017-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_view_status import InstanceViewStatus
from openapi_client.models.virtual_machine_extension_handler_instance_view import VirtualMachineExtensionHandlerInstanceView
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineAgentInstanceView(BaseModel):
    """
    The instance view of the VM Agent running on the virtual machine.
    """ # noqa: E501
    extension_handlers: Optional[List[VirtualMachineExtensionHandlerInstanceView]] = Field(default=None, description="The virtual machine extension handler instance view.", alias="extensionHandlers")
    statuses: Optional[List[InstanceViewStatus]] = Field(default=None, description="The resource status information.")
    vm_agent_version: Optional[StrictStr] = Field(default=None, description="The VM Agent full version.", alias="vmAgentVersion")
    __properties: ClassVar[List[str]] = ["extensionHandlers", "statuses", "vmAgentVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineAgentInstanceView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extension_handlers (list)
        _items = []
        if self.extension_handlers:
            for _item_extension_handlers in self.extension_handlers:
                if _item_extension_handlers:
                    _items.append(_item_extension_handlers.to_dict())
            _dict['extensionHandlers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statuses (list)
        _items = []
        if self.statuses:
            for _item_statuses in self.statuses:
                if _item_statuses:
                    _items.append(_item_statuses.to_dict())
            _dict['statuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineAgentInstanceView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "extensionHandlers": [VirtualMachineExtensionHandlerInstanceView.from_dict(_item) for _item in obj["extensionHandlers"]] if obj.get("extensionHandlers") is not None else None,
            "statuses": [InstanceViewStatus.from_dict(_item) for _item in obj["statuses"]] if obj.get("statuses") is not None else None,
            "vmAgentVersion": obj.get("vmAgentVersion")
        })
        return _obj



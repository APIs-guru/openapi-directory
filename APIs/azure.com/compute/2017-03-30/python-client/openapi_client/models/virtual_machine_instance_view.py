# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2017-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.boot_diagnostics_instance_view import BootDiagnosticsInstanceView
from openapi_client.models.disk_instance_view import DiskInstanceView
from openapi_client.models.instance_view_status import InstanceViewStatus
from openapi_client.models.maintenance_redeploy_status import MaintenanceRedeployStatus
from openapi_client.models.virtual_machine_agent_instance_view import VirtualMachineAgentInstanceView
from openapi_client.models.virtual_machine_extension_instance_view import VirtualMachineExtensionInstanceView
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineInstanceView(BaseModel):
    """
    The instance view of a virtual machine.
    """ # noqa: E501
    boot_diagnostics: Optional[BootDiagnosticsInstanceView] = Field(default=None, alias="bootDiagnostics")
    disks: Optional[List[DiskInstanceView]] = Field(default=None, description="The virtual machine disk information.")
    extensions: Optional[List[VirtualMachineExtensionInstanceView]] = Field(default=None, description="The extensions information.")
    maintenance_redeploy_status: Optional[MaintenanceRedeployStatus] = Field(default=None, alias="maintenanceRedeployStatus")
    platform_fault_domain: Optional[StrictInt] = Field(default=None, description="Specifies the fault domain of the virtual machine.", alias="platformFaultDomain")
    platform_update_domain: Optional[StrictInt] = Field(default=None, description="Specifies the update domain of the virtual machine.", alias="platformUpdateDomain")
    rdp_thumb_print: Optional[StrictStr] = Field(default=None, description="The Remote desktop certificate thumbprint.", alias="rdpThumbPrint")
    statuses: Optional[List[InstanceViewStatus]] = Field(default=None, description="The resource status information.")
    vm_agent: Optional[VirtualMachineAgentInstanceView] = Field(default=None, alias="vmAgent")
    __properties: ClassVar[List[str]] = ["bootDiagnostics", "disks", "extensions", "maintenanceRedeployStatus", "platformFaultDomain", "platformUpdateDomain", "rdpThumbPrint", "statuses", "vmAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineInstanceView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boot_diagnostics
        if self.boot_diagnostics:
            _dict['bootDiagnostics'] = self.boot_diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item_extensions in self.extensions:
                if _item_extensions:
                    _items.append(_item_extensions.to_dict())
            _dict['extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of maintenance_redeploy_status
        if self.maintenance_redeploy_status:
            _dict['maintenanceRedeployStatus'] = self.maintenance_redeploy_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statuses (list)
        _items = []
        if self.statuses:
            for _item_statuses in self.statuses:
                if _item_statuses:
                    _items.append(_item_statuses.to_dict())
            _dict['statuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of vm_agent
        if self.vm_agent:
            _dict['vmAgent'] = self.vm_agent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineInstanceView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootDiagnostics": BootDiagnosticsInstanceView.from_dict(obj["bootDiagnostics"]) if obj.get("bootDiagnostics") is not None else None,
            "disks": [DiskInstanceView.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "extensions": [VirtualMachineExtensionInstanceView.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "maintenanceRedeployStatus": MaintenanceRedeployStatus.from_dict(obj["maintenanceRedeployStatus"]) if obj.get("maintenanceRedeployStatus") is not None else None,
            "platformFaultDomain": obj.get("platformFaultDomain"),
            "platformUpdateDomain": obj.get("platformUpdateDomain"),
            "rdpThumbPrint": obj.get("rdpThumbPrint"),
            "statuses": [InstanceViewStatus.from_dict(_item) for _item in obj["statuses"]] if obj.get("statuses") is not None else None,
            "vmAgent": VirtualMachineAgentInstanceView.from_dict(obj["vmAgent"]) if obj.get("vmAgent") is not None else None
        })
        return _obj



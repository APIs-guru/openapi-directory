# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2016-04-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.virtual_machine_extension_instance_view import VirtualMachineExtensionInstanceView
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineExtensionProperties(BaseModel):
    """
    Describes the properties of a Virtual Machine Extension.
    """ # noqa: E501
    auto_upgrade_minor_version: Optional[StrictBool] = Field(default=None, description="Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.", alias="autoUpgradeMinorVersion")
    force_update_tag: Optional[StrictStr] = Field(default=None, description="How the extension handler should be forced to update even if the extension configuration has not changed.", alias="forceUpdateTag")
    instance_view: Optional[VirtualMachineExtensionInstanceView] = Field(default=None, alias="instanceView")
    protected_settings: Optional[Dict[str, Any]] = Field(default=None, description="The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.", alias="protectedSettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    publisher: Optional[StrictStr] = Field(default=None, description="The name of the extension handler publisher.")
    settings: Optional[Dict[str, Any]] = Field(default=None, description="Json formatted public settings for the extension.")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the extension; an example is \"CustomScriptExtension\".")
    type_handler_version: Optional[StrictStr] = Field(default=None, description="Specifies the version of the script handler.", alias="typeHandlerVersion")
    __properties: ClassVar[List[str]] = ["autoUpgradeMinorVersion", "forceUpdateTag", "instanceView", "protectedSettings", "provisioningState", "publisher", "settings", "type", "typeHandlerVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineExtensionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_view
        if self.instance_view:
            _dict['instanceView'] = self.instance_view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineExtensionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoUpgradeMinorVersion": obj.get("autoUpgradeMinorVersion"),
            "forceUpdateTag": obj.get("forceUpdateTag"),
            "instanceView": VirtualMachineExtensionInstanceView.from_dict(obj["instanceView"]) if obj.get("instanceView") is not None else None,
            "protectedSettings": obj.get("protectedSettings"),
            "provisioningState": obj.get("provisioningState"),
            "publisher": obj.get("publisher"),
            "settings": obj.get("settings"),
            "type": obj.get("type"),
            "typeHandlerVersion": obj.get("typeHandlerVersion")
        })
        return _obj



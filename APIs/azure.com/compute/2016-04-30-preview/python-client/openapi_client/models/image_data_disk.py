# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2016-04-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class ImageDataDisk(BaseModel):
    """
    Describes a data disk.
    """ # noqa: E501
    blob_uri: Optional[StrictStr] = Field(default=None, description="The Virtual Hard Disk.", alias="blobUri")
    caching: Optional[StrictStr] = Field(default=None, description="Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**")
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB", alias="diskSizeGB")
    lun: StrictInt = Field(description="Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.")
    managed_disk: Optional[SubResource] = Field(default=None, alias="managedDisk")
    snapshot: Optional[SubResource] = None
    __properties: ClassVar[List[str]] = ["blobUri", "caching", "diskSizeGB", "lun", "managedDisk", "snapshot"]

    @field_validator('caching')
    def caching_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'ReadOnly', 'ReadWrite']):
            raise ValueError("must be one of enum values ('None', 'ReadOnly', 'ReadWrite')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageDataDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of managed_disk
        if self.managed_disk:
            _dict['managedDisk'] = self.managed_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snapshot
        if self.snapshot:
            _dict['snapshot'] = self.snapshot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageDataDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blobUri": obj.get("blobUri"),
            "caching": obj.get("caching"),
            "diskSizeGB": obj.get("diskSizeGB"),
            "lun": obj.get("lun"),
            "managedDisk": SubResource.from_dict(obj["managedDisk"]) if obj.get("managedDisk") is not None else None,
            "snapshot": SubResource.from_dict(obj["snapshot"]) if obj.get("snapshot") is not None else None
        })
        return _obj



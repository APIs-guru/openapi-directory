# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_view_status import InstanceViewStatus
from openapi_client.models.sub_resource_with_colocation_status import SubResourceWithColocationStatus
from typing import Optional, Set
from typing_extensions import Self

class ProximityPlacementGroupProperties(BaseModel):
    """
    Describes the properties of a Proximity Placement Group.
    """ # noqa: E501
    availability_sets: Optional[List[SubResourceWithColocationStatus]] = Field(default=None, description="A list of references to all availability sets in the proximity placement group.", alias="availabilitySets")
    colocation_status: Optional[InstanceViewStatus] = Field(default=None, alias="colocationStatus")
    proximity_placement_group_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.", alias="proximityPlacementGroupType")
    virtual_machine_scale_sets: Optional[List[SubResourceWithColocationStatus]] = Field(default=None, description="A list of references to all virtual machine scale sets in the proximity placement group.", alias="virtualMachineScaleSets")
    virtual_machines: Optional[List[SubResourceWithColocationStatus]] = Field(default=None, description="A list of references to all virtual machines in the proximity placement group.", alias="virtualMachines")
    __properties: ClassVar[List[str]] = ["availabilitySets", "colocationStatus", "proximityPlacementGroupType", "virtualMachineScaleSets", "virtualMachines"]

    @field_validator('proximity_placement_group_type')
    def proximity_placement_group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard', 'Ultra']):
            raise ValueError("must be one of enum values ('Standard', 'Ultra')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProximityPlacementGroupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "availability_sets",
            "virtual_machine_scale_sets",
            "virtual_machines",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in availability_sets (list)
        _items = []
        if self.availability_sets:
            for _item_availability_sets in self.availability_sets:
                if _item_availability_sets:
                    _items.append(_item_availability_sets.to_dict())
            _dict['availabilitySets'] = _items
        # override the default output from pydantic by calling `to_dict()` of colocation_status
        if self.colocation_status:
            _dict['colocationStatus'] = self.colocation_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_machine_scale_sets (list)
        _items = []
        if self.virtual_machine_scale_sets:
            for _item_virtual_machine_scale_sets in self.virtual_machine_scale_sets:
                if _item_virtual_machine_scale_sets:
                    _items.append(_item_virtual_machine_scale_sets.to_dict())
            _dict['virtualMachineScaleSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_machines (list)
        _items = []
        if self.virtual_machines:
            for _item_virtual_machines in self.virtual_machines:
                if _item_virtual_machines:
                    _items.append(_item_virtual_machines.to_dict())
            _dict['virtualMachines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProximityPlacementGroupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilitySets": [SubResourceWithColocationStatus.from_dict(_item) for _item in obj["availabilitySets"]] if obj.get("availabilitySets") is not None else None,
            "colocationStatus": InstanceViewStatus.from_dict(obj["colocationStatus"]) if obj.get("colocationStatus") is not None else None,
            "proximityPlacementGroupType": obj.get("proximityPlacementGroupType"),
            "virtualMachineScaleSets": [SubResourceWithColocationStatus.from_dict(_item) for _item in obj["virtualMachineScaleSets"]] if obj.get("virtualMachineScaleSets") is not None else None,
            "virtualMachines": [SubResourceWithColocationStatus.from_dict(_item) for _item in obj["virtualMachines"]] if obj.get("virtualMachines") is not None else None
        })
        return _obj



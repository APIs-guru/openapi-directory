# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_unattend_content import AdditionalUnattendContent
from openapi_client.models.win_rm_configuration import WinRMConfiguration
from typing import Optional, Set
from typing_extensions import Self

class WindowsConfiguration(BaseModel):
    """
    Specifies Windows operating system settings on the virtual machine.
    """ # noqa: E501
    additional_unattend_content: Optional[List[AdditionalUnattendContent]] = Field(default=None, description="Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.", alias="additionalUnattendContent")
    enable_automatic_updates: Optional[StrictBool] = Field(default=None, description="Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.", alias="enableAutomaticUpdates")
    provision_vm_agent: Optional[StrictBool] = Field(default=None, description="Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.", alias="provisionVMAgent")
    time_zone: Optional[StrictStr] = Field(default=None, description="Specifies the time zone of the virtual machine. e.g. \"Pacific Standard Time\". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).", alias="timeZone")
    win_rm: Optional[WinRMConfiguration] = Field(default=None, alias="winRM")
    __properties: ClassVar[List[str]] = ["additionalUnattendContent", "enableAutomaticUpdates", "provisionVMAgent", "timeZone", "winRM"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WindowsConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_unattend_content (list)
        _items = []
        if self.additional_unattend_content:
            for _item_additional_unattend_content in self.additional_unattend_content:
                if _item_additional_unattend_content:
                    _items.append(_item_additional_unattend_content.to_dict())
            _dict['additionalUnattendContent'] = _items
        # override the default output from pydantic by calling `to_dict()` of win_rm
        if self.win_rm:
            _dict['winRM'] = self.win_rm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WindowsConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalUnattendContent": [AdditionalUnattendContent.from_dict(_item) for _item in obj["additionalUnattendContent"]] if obj.get("additionalUnattendContent") is not None else None,
            "enableAutomaticUpdates": obj.get("enableAutomaticUpdates"),
            "provisionVMAgent": obj.get("provisionVMAgent"),
            "timeZone": obj.get("timeZone"),
            "winRM": WinRMConfiguration.from_dict(obj["winRM"]) if obj.get("winRM") is not None else None
        })
        return _obj



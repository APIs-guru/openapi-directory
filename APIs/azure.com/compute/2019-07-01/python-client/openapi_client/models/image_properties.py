# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hyper_v_generation_type import HyperVGenerationType
from openapi_client.models.image_storage_profile import ImageStorageProfile
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class ImageProperties(BaseModel):
    """
    Describes the properties of an Image.
    """ # noqa: E501
    hyper_v_generation: Optional[HyperVGenerationType] = Field(default=None, alias="hyperVGeneration")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state.", alias="provisioningState")
    source_virtual_machine: Optional[SubResource] = Field(default=None, alias="sourceVirtualMachine")
    storage_profile: Optional[ImageStorageProfile] = Field(default=None, alias="storageProfile")
    __properties: ClassVar[List[str]] = ["hyperVGeneration", "provisioningState", "sourceVirtualMachine", "storageProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_virtual_machine
        if self.source_virtual_machine:
            _dict['sourceVirtualMachine'] = self.source_virtual_machine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hyperVGeneration": obj.get("hyperVGeneration"),
            "provisioningState": obj.get("provisioningState"),
            "sourceVirtualMachine": SubResource.from_dict(obj["sourceVirtualMachine"]) if obj.get("sourceVirtualMachine") is not None else None,
            "storageProfile": ImageStorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None
        })
        return _obj



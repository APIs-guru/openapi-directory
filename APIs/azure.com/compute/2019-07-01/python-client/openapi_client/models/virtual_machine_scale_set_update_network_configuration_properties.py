# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from openapi_client.models.virtual_machine_scale_set_network_configuration_dns_settings import VirtualMachineScaleSetNetworkConfigurationDnsSettings
from openapi_client.models.virtual_machine_scale_set_update_ip_configuration import VirtualMachineScaleSetUpdateIPConfiguration
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetUpdateNetworkConfigurationProperties(BaseModel):
    """
    Describes a virtual machine scale set updatable network profile's IP configuration.Use this object for updating network profile's IP Configuration.
    """ # noqa: E501
    dns_settings: Optional[VirtualMachineScaleSetNetworkConfigurationDnsSettings] = Field(default=None, alias="dnsSettings")
    enable_accelerated_networking: Optional[StrictBool] = Field(default=None, description="Specifies whether the network interface is accelerated networking-enabled.", alias="enableAcceleratedNetworking")
    enable_ip_forwarding: Optional[StrictBool] = Field(default=None, description="Whether IP forwarding enabled on this NIC.", alias="enableIPForwarding")
    ip_configurations: Optional[List[VirtualMachineScaleSetUpdateIPConfiguration]] = Field(default=None, description="The virtual machine scale set IP Configuration.", alias="ipConfigurations")
    network_security_group: Optional[SubResource] = Field(default=None, alias="networkSecurityGroup")
    primary: Optional[StrictBool] = Field(default=None, description="Whether this is a primary NIC on a virtual machine.")
    __properties: ClassVar[List[str]] = ["dnsSettings", "enableAcceleratedNetworking", "enableIPForwarding", "ipConfigurations", "networkSecurityGroup", "primary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetUpdateNetworkConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_settings
        if self.dns_settings:
            _dict['dnsSettings'] = self.dns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_configurations (list)
        _items = []
        if self.ip_configurations:
            for _item_ip_configurations in self.ip_configurations:
                if _item_ip_configurations:
                    _items.append(_item_ip_configurations.to_dict())
            _dict['ipConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_security_group
        if self.network_security_group:
            _dict['networkSecurityGroup'] = self.network_security_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetUpdateNetworkConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsSettings": VirtualMachineScaleSetNetworkConfigurationDnsSettings.from_dict(obj["dnsSettings"]) if obj.get("dnsSettings") is not None else None,
            "enableAcceleratedNetworking": obj.get("enableAcceleratedNetworking"),
            "enableIPForwarding": obj.get("enableIPForwarding"),
            "ipConfigurations": [VirtualMachineScaleSetUpdateIPConfiguration.from_dict(_item) for _item in obj["ipConfigurations"]] if obj.get("ipConfigurations") is not None else None,
            "networkSecurityGroup": SubResource.from_dict(obj["networkSecurityGroup"]) if obj.get("networkSecurityGroup") is not None else None,
            "primary": obj.get("primary")
        })
        return _obj



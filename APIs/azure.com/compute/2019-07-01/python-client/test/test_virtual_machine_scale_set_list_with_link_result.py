# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine_scale_set_list_with_link_result import VirtualMachineScaleSetListWithLinkResult

class TestVirtualMachineScaleSetListWithLinkResult(unittest.TestCase):
    """VirtualMachineScaleSetListWithLinkResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachineScaleSetListWithLinkResult:
        """Test VirtualMachineScaleSetListWithLinkResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachineScaleSetListWithLinkResult`
        """
        model = VirtualMachineScaleSetListWithLinkResult()
        if include_optional:
            return VirtualMachineScaleSetListWithLinkResult(
                next_link = '',
                value = [
                    openapi_client.models.virtual_machine_scale_set.VirtualMachineScaleSet(
                        identity = openapi_client.models.virtual_machine_scale_set_identity.VirtualMachineScaleSetIdentity(
                            principal_id = '', 
                            tenant_id = '', 
                            type = 'SystemAssigned', 
                            user_assigned_identities = {
                                'key' : openapi_client.models.virtual_machine_identity_user_assigned_identities_value.VirtualMachineIdentity_userAssignedIdentities_value(
                                    client_id = '', 
                                    principal_id = '', )
                                }, ), 
                        plan = openapi_client.models.plan.Plan(
                            name = '', 
                            product = '', 
                            promotion_code = '', 
                            publisher = '', ), 
                        properties = openapi_client.models.virtual_machine_scale_set_properties.VirtualMachineScaleSetProperties(
                            additional_capabilities = openapi_client.models.additional_capabilities.AdditionalCapabilities(
                                ultra_ssd_enabled = True, ), 
                            automatic_repairs_policy = openapi_client.models.automatic_repairs_policy.AutomaticRepairsPolicy(
                                enabled = True, 
                                grace_period = '', ), 
                            do_not_run_extensions_on_overprovisioned_vms = True, 
                            overprovision = True, 
                            platform_fault_domain_count = 56, 
                            provisioning_state = '', 
                            proximity_placement_group = openapi_client.models.sub_resource.SubResource(
                                id = '', ), 
                            scale_in_policy = openapi_client.models.scale_in_policy.ScaleInPolicy(
                                rules = [
                                    'Default'
                                    ], ), 
                            single_placement_group = True, 
                            unique_id = '', 
                            upgrade_policy = openapi_client.models.upgrade_policy.UpgradePolicy(
                                automatic_os_upgrade_policy = openapi_client.models.automatic_os_upgrade_policy.AutomaticOSUpgradePolicy(
                                    disable_automatic_rollback = True, 
                                    enable_automatic_os_upgrade = True, ), 
                                mode = 'Automatic', 
                                rolling_upgrade_policy = openapi_client.models.rolling_upgrade_policy.RollingUpgradePolicy(
                                    max_batch_instance_percent = 5, 
                                    max_unhealthy_instance_percent = 5, 
                                    max_unhealthy_upgraded_instance_percent = 0, 
                                    pause_time_between_batches = '', ), ), 
                            virtual_machine_profile = openapi_client.models.virtual_machine_scale_set_vm_profile.VirtualMachineScaleSetVMProfile(
                                billing_profile = openapi_client.models.billing_profile.BillingProfile(
                                    max_price = 1.337, ), 
                                diagnostics_profile = openapi_client.models.diagnostics_profile.DiagnosticsProfile(
                                    boot_diagnostics = openapi_client.models.boot_diagnostics.BootDiagnostics(
                                        enabled = True, 
                                        storage_uri = '', ), ), 
                                eviction_policy = 'Deallocate', 
                                extension_profile = openapi_client.models.virtual_machine_scale_set_extension_profile.VirtualMachineScaleSetExtensionProfile(
                                    extensions = [
                                        openapi_client.models.virtual_machine_scale_set_extension.VirtualMachineScaleSetExtension(
                                            name = '', 
                                            type = '', )
                                        ], ), 
                                license_type = '', 
                                network_profile = openapi_client.models.virtual_machine_scale_set_network_profile.VirtualMachineScaleSetNetworkProfile(
                                    health_probe = openapi_client.models.api_entity_reference.ApiEntityReference(
                                        id = '', ), 
                                    network_interface_configurations = [
                                        openapi_client.models.virtual_machine_scale_set_network_configuration.VirtualMachineScaleSetNetworkConfiguration(
                                            name = '', )
                                        ], ), 
                                os_profile = openapi_client.models.virtual_machine_scale_set_os_profile.VirtualMachineScaleSetOSProfile(
                                    admin_password = '', 
                                    admin_username = '', 
                                    computer_name_prefix = '', 
                                    custom_data = '', 
                                    linux_configuration = openapi_client.models.linux_configuration.LinuxConfiguration(
                                        disable_password_authentication = True, 
                                        provision_vm_agent = True, 
                                        ssh = openapi_client.models.ssh_configuration.SshConfiguration(
                                            public_keys = [
                                                openapi_client.models.ssh_public_key.SshPublicKey(
                                                    key_data = '', 
                                                    path = '', )
                                                ], ), ), 
                                    secrets = [
                                        openapi_client.models.vault_secret_group.VaultSecretGroup(
                                            source_vault = openapi_client.models.sub_resource.SubResource(
                                                id = '', ), 
                                            vault_certificates = [
                                                openapi_client.models.vault_certificate.VaultCertificate(
                                                    certificate_store = '', 
                                                    certificate_url = '', )
                                                ], )
                                        ], 
                                    windows_configuration = openapi_client.models.windows_configuration.WindowsConfiguration(
                                        additional_unattend_content = [
                                            openapi_client.models.additional_unattend_content.AdditionalUnattendContent(
                                                component_name = 'Microsoft-Windows-Shell-Setup', 
                                                content = '', 
                                                pass_name = 'OobeSystem', 
                                                setting_name = 'AutoLogon', )
                                            ], 
                                        enable_automatic_updates = True, 
                                        provision_vm_agent = True, 
                                        time_zone = '', 
                                        win_rm = openapi_client.models.win_rm_configuration.WinRMConfiguration(
                                            listeners = [
                                                openapi_client.models.win_rm_listener.WinRMListener(
                                                    certificate_url = '', 
                                                    protocol = 'Http', )
                                                ], ), ), ), 
                                priority = 'Regular', 
                                scheduled_events_profile = openapi_client.models.scheduled_events_profile.ScheduledEventsProfile(
                                    terminate_notification_profile = openapi_client.models.terminate_notification_profile.TerminateNotificationProfile(
                                        enable = True, 
                                        not_before_timeout = '', ), ), 
                                storage_profile = openapi_client.models.virtual_machine_scale_set_storage_profile.VirtualMachineScaleSetStorageProfile(
                                    data_disks = [
                                        openapi_client.models.virtual_machine_scale_set_data_disk.VirtualMachineScaleSetDataDisk(
                                            caching = 'None', 
                                            create_option = 'FromImage', 
                                            disk_iops_read_write = 56, 
                                            disk_m_bps_read_write = 56, 
                                            disk_size_gb = 56, 
                                            lun = 56, 
                                            managed_disk = openapi_client.models.virtual_machine_scale_set_managed_disk_parameters.VirtualMachineScaleSetManagedDiskParameters(
                                                disk_encryption_set = null, 
                                                storage_account_type = 'Standard_LRS', ), 
                                            name = '', 
                                            write_accelerator_enabled = True, )
                                        ], 
                                    image_reference = openapi_client.models.image_reference.ImageReference(
                                        exact_version = '', 
                                        offer = '', 
                                        publisher = '', 
                                        sku = '', 
                                        version = '', ), 
                                    os_disk = openapi_client.models.virtual_machine_scale_set_os_disk.VirtualMachineScaleSetOSDisk(
                                        create_option = 'FromImage', 
                                        diff_disk_settings = openapi_client.models.diff_disk_settings.DiffDiskSettings(
                                            option = 'Local', ), 
                                        disk_size_gb = 56, 
                                        image = openapi_client.models.virtual_hard_disk.VirtualHardDisk(
                                            uri = '', ), 
                                        name = '', 
                                        os_type = 'Windows', 
                                        vhd_containers = [
                                            ''
                                            ], 
                                        write_accelerator_enabled = True, ), ), ), 
                            zone_balance = True, ), 
                        sku = openapi_client.models.sku.Sku(
                            capacity = 56, 
                            name = '', 
                            tier = '', ), 
                        zones = [
                            ''
                            ], )
                    ]
            )
        else:
            return VirtualMachineScaleSetListWithLinkResult(
                value = [
                    openapi_client.models.virtual_machine_scale_set.VirtualMachineScaleSet(
                        identity = openapi_client.models.virtual_machine_scale_set_identity.VirtualMachineScaleSetIdentity(
                            principal_id = '', 
                            tenant_id = '', 
                            type = 'SystemAssigned', 
                            user_assigned_identities = {
                                'key' : openapi_client.models.virtual_machine_identity_user_assigned_identities_value.VirtualMachineIdentity_userAssignedIdentities_value(
                                    client_id = '', 
                                    principal_id = '', )
                                }, ), 
                        plan = openapi_client.models.plan.Plan(
                            name = '', 
                            product = '', 
                            promotion_code = '', 
                            publisher = '', ), 
                        properties = openapi_client.models.virtual_machine_scale_set_properties.VirtualMachineScaleSetProperties(
                            additional_capabilities = openapi_client.models.additional_capabilities.AdditionalCapabilities(
                                ultra_ssd_enabled = True, ), 
                            automatic_repairs_policy = openapi_client.models.automatic_repairs_policy.AutomaticRepairsPolicy(
                                enabled = True, 
                                grace_period = '', ), 
                            do_not_run_extensions_on_overprovisioned_vms = True, 
                            overprovision = True, 
                            platform_fault_domain_count = 56, 
                            provisioning_state = '', 
                            proximity_placement_group = openapi_client.models.sub_resource.SubResource(
                                id = '', ), 
                            scale_in_policy = openapi_client.models.scale_in_policy.ScaleInPolicy(
                                rules = [
                                    'Default'
                                    ], ), 
                            single_placement_group = True, 
                            unique_id = '', 
                            upgrade_policy = openapi_client.models.upgrade_policy.UpgradePolicy(
                                automatic_os_upgrade_policy = openapi_client.models.automatic_os_upgrade_policy.AutomaticOSUpgradePolicy(
                                    disable_automatic_rollback = True, 
                                    enable_automatic_os_upgrade = True, ), 
                                mode = 'Automatic', 
                                rolling_upgrade_policy = openapi_client.models.rolling_upgrade_policy.RollingUpgradePolicy(
                                    max_batch_instance_percent = 5, 
                                    max_unhealthy_instance_percent = 5, 
                                    max_unhealthy_upgraded_instance_percent = 0, 
                                    pause_time_between_batches = '', ), ), 
                            virtual_machine_profile = openapi_client.models.virtual_machine_scale_set_vm_profile.VirtualMachineScaleSetVMProfile(
                                billing_profile = openapi_client.models.billing_profile.BillingProfile(
                                    max_price = 1.337, ), 
                                diagnostics_profile = openapi_client.models.diagnostics_profile.DiagnosticsProfile(
                                    boot_diagnostics = openapi_client.models.boot_diagnostics.BootDiagnostics(
                                        enabled = True, 
                                        storage_uri = '', ), ), 
                                eviction_policy = 'Deallocate', 
                                extension_profile = openapi_client.models.virtual_machine_scale_set_extension_profile.VirtualMachineScaleSetExtensionProfile(
                                    extensions = [
                                        openapi_client.models.virtual_machine_scale_set_extension.VirtualMachineScaleSetExtension(
                                            name = '', 
                                            type = '', )
                                        ], ), 
                                license_type = '', 
                                network_profile = openapi_client.models.virtual_machine_scale_set_network_profile.VirtualMachineScaleSetNetworkProfile(
                                    health_probe = openapi_client.models.api_entity_reference.ApiEntityReference(
                                        id = '', ), 
                                    network_interface_configurations = [
                                        openapi_client.models.virtual_machine_scale_set_network_configuration.VirtualMachineScaleSetNetworkConfiguration(
                                            name = '', )
                                        ], ), 
                                os_profile = openapi_client.models.virtual_machine_scale_set_os_profile.VirtualMachineScaleSetOSProfile(
                                    admin_password = '', 
                                    admin_username = '', 
                                    computer_name_prefix = '', 
                                    custom_data = '', 
                                    linux_configuration = openapi_client.models.linux_configuration.LinuxConfiguration(
                                        disable_password_authentication = True, 
                                        provision_vm_agent = True, 
                                        ssh = openapi_client.models.ssh_configuration.SshConfiguration(
                                            public_keys = [
                                                openapi_client.models.ssh_public_key.SshPublicKey(
                                                    key_data = '', 
                                                    path = '', )
                                                ], ), ), 
                                    secrets = [
                                        openapi_client.models.vault_secret_group.VaultSecretGroup(
                                            source_vault = openapi_client.models.sub_resource.SubResource(
                                                id = '', ), 
                                            vault_certificates = [
                                                openapi_client.models.vault_certificate.VaultCertificate(
                                                    certificate_store = '', 
                                                    certificate_url = '', )
                                                ], )
                                        ], 
                                    windows_configuration = openapi_client.models.windows_configuration.WindowsConfiguration(
                                        additional_unattend_content = [
                                            openapi_client.models.additional_unattend_content.AdditionalUnattendContent(
                                                component_name = 'Microsoft-Windows-Shell-Setup', 
                                                content = '', 
                                                pass_name = 'OobeSystem', 
                                                setting_name = 'AutoLogon', )
                                            ], 
                                        enable_automatic_updates = True, 
                                        provision_vm_agent = True, 
                                        time_zone = '', 
                                        win_rm = openapi_client.models.win_rm_configuration.WinRMConfiguration(
                                            listeners = [
                                                openapi_client.models.win_rm_listener.WinRMListener(
                                                    certificate_url = '', 
                                                    protocol = 'Http', )
                                                ], ), ), ), 
                                priority = 'Regular', 
                                scheduled_events_profile = openapi_client.models.scheduled_events_profile.ScheduledEventsProfile(
                                    terminate_notification_profile = openapi_client.models.terminate_notification_profile.TerminateNotificationProfile(
                                        enable = True, 
                                        not_before_timeout = '', ), ), 
                                storage_profile = openapi_client.models.virtual_machine_scale_set_storage_profile.VirtualMachineScaleSetStorageProfile(
                                    data_disks = [
                                        openapi_client.models.virtual_machine_scale_set_data_disk.VirtualMachineScaleSetDataDisk(
                                            caching = 'None', 
                                            create_option = 'FromImage', 
                                            disk_iops_read_write = 56, 
                                            disk_m_bps_read_write = 56, 
                                            disk_size_gb = 56, 
                                            lun = 56, 
                                            managed_disk = openapi_client.models.virtual_machine_scale_set_managed_disk_parameters.VirtualMachineScaleSetManagedDiskParameters(
                                                disk_encryption_set = null, 
                                                storage_account_type = 'Standard_LRS', ), 
                                            name = '', 
                                            write_accelerator_enabled = True, )
                                        ], 
                                    image_reference = openapi_client.models.image_reference.ImageReference(
                                        exact_version = '', 
                                        offer = '', 
                                        publisher = '', 
                                        sku = '', 
                                        version = '', ), 
                                    os_disk = openapi_client.models.virtual_machine_scale_set_os_disk.VirtualMachineScaleSetOSDisk(
                                        create_option = 'FromImage', 
                                        diff_disk_settings = openapi_client.models.diff_disk_settings.DiffDiskSettings(
                                            option = 'Local', ), 
                                        disk_size_gb = 56, 
                                        image = openapi_client.models.virtual_hard_disk.VirtualHardDisk(
                                            uri = '', ), 
                                        name = '', 
                                        os_type = 'Windows', 
                                        vhd_containers = [
                                            ''
                                            ], 
                                        write_accelerator_enabled = True, ), ), ), 
                            zone_balance = True, ), 
                        sku = openapi_client.models.sku.Sku(
                            capacity = 56, 
                            name = '', 
                            tier = '', ), 
                        zones = [
                            ''
                            ], )
                    ],
        )
        """

    def testVirtualMachineScaleSetListWithLinkResult(self):
        """Test VirtualMachineScaleSetListWithLinkResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

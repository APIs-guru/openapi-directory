# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine_scale_set_vm_instance_view import VirtualMachineScaleSetVMInstanceView

class TestVirtualMachineScaleSetVMInstanceView(unittest.TestCase):
    """VirtualMachineScaleSetVMInstanceView unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachineScaleSetVMInstanceView:
        """Test VirtualMachineScaleSetVMInstanceView
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachineScaleSetVMInstanceView`
        """
        model = VirtualMachineScaleSetVMInstanceView()
        if include_optional:
            return VirtualMachineScaleSetVMInstanceView(
                boot_diagnostics = openapi_client.models.boot_diagnostics_instance_view.BootDiagnosticsInstanceView(
                    console_screenshot_blob_uri = '', 
                    serial_console_log_blob_uri = '', 
                    status = openapi_client.models.instance_view_status.InstanceViewStatus(
                        code = '', 
                        display_status = '', 
                        level = 'Info', 
                        message = '', 
                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
                disks = [
                    openapi_client.models.disk_instance_view.DiskInstanceView(
                        encryption_settings = [
                            openapi_client.models.disk_encryption_settings.DiskEncryptionSettings(
                                disk_encryption_key = openapi_client.models.key_vault_secret_reference.KeyVaultSecretReference(
                                    secret_url = '', 
                                    source_vault = openapi_client.models.sub_resource.SubResource(
                                        id = '', ), ), 
                                enabled = True, 
                                key_encryption_key = openapi_client.models.key_vault_key_reference.KeyVaultKeyReference(
                                    key_url = '', 
                                    source_vault = openapi_client.models.sub_resource.SubResource(
                                        id = '', ), ), )
                            ], 
                        name = '', 
                        statuses = [
                            openapi_client.models.instance_view_status.InstanceViewStatus(
                                code = '', 
                                display_status = '', 
                                level = 'Info', 
                                message = '', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                extensions = [
                    openapi_client.models.virtual_machine_extension_instance_view.VirtualMachineExtensionInstanceView(
                        name = '', 
                        statuses = [
                            openapi_client.models.instance_view_status.InstanceViewStatus(
                                code = '', 
                                display_status = '', 
                                level = 'Info', 
                                message = '', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        substatuses = [
                            openapi_client.models.instance_view_status.InstanceViewStatus(
                                code = '', 
                                display_status = '', 
                                level = 'Info', 
                                message = '', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        type = '', 
                        type_handler_version = '', )
                    ],
                maintenance_redeploy_status = openapi_client.models.maintenance_redeploy_status.MaintenanceRedeployStatus(
                    is_customer_initiated_maintenance_allowed = True, 
                    last_operation_message = '', 
                    last_operation_result_code = 'None', 
                    maintenance_window_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    maintenance_window_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    pre_maintenance_window_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    pre_maintenance_window_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                placement_group_id = '',
                platform_fault_domain = 56,
                platform_update_domain = 56,
                rdp_thumb_print = '',
                statuses = [
                    openapi_client.models.instance_view_status.InstanceViewStatus(
                        code = '', 
                        display_status = '', 
                        level = 'Info', 
                        message = '', 
                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                vm_agent = openapi_client.models.virtual_machine_agent_instance_view.VirtualMachineAgentInstanceView(
                    extension_handlers = [
                        openapi_client.models.virtual_machine_extension_handler_instance_view.VirtualMachineExtensionHandlerInstanceView(
                            status = openapi_client.models.instance_view_status.InstanceViewStatus(
                                code = '', 
                                display_status = '', 
                                level = 'Info', 
                                message = '', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            type = '', 
                            type_handler_version = '', )
                        ], 
                    statuses = [
                        openapi_client.models.instance_view_status.InstanceViewStatus(
                            code = '', 
                            display_status = '', 
                            level = 'Info', 
                            message = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    vm_agent_version = '', ),
                vm_health = openapi_client.models.virtual_machine_health_status.VirtualMachineHealthStatus(
                    status = openapi_client.models.instance_view_status.InstanceViewStatus(
                        code = '', 
                        display_status = '', 
                        level = 'Info', 
                        message = '', 
                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
            )
        else:
            return VirtualMachineScaleSetVMInstanceView(
        )
        """

    def testVirtualMachineScaleSetVMInstanceView(self):
        """Test VirtualMachineScaleSetVMInstanceView"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.storage_account_type import StorageAccountType
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class ImageOSDisk(BaseModel):
    """
    Describes an Operating System disk.
    """ # noqa: E501
    blob_uri: Optional[StrictStr] = Field(default=None, description="The Virtual Hard Disk.", alias="blobUri")
    caching: Optional[StrictStr] = Field(default=None, description="Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**")
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB", alias="diskSizeGB")
    managed_disk: Optional[SubResource] = Field(default=None, alias="managedDisk")
    os_state: StrictStr = Field(description="The OS State.", alias="osState")
    os_type: StrictStr = Field(description="This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**", alias="osType")
    snapshot: Optional[SubResource] = None
    storage_account_type: Optional[StorageAccountType] = Field(default=None, alias="storageAccountType")
    __properties: ClassVar[List[str]] = ["blobUri", "caching", "diskSizeGB", "managedDisk", "osState", "osType", "snapshot", "storageAccountType"]

    @field_validator('caching')
    def caching_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'ReadOnly', 'ReadWrite']):
            raise ValueError("must be one of enum values ('None', 'ReadOnly', 'ReadWrite')")
        return value

    @field_validator('os_state')
    def os_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Generalized', 'Specialized']):
            raise ValueError("must be one of enum values ('Generalized', 'Specialized')")
        return value

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Windows', 'Linux']):
            raise ValueError("must be one of enum values ('Windows', 'Linux')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageOSDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of managed_disk
        if self.managed_disk:
            _dict['managedDisk'] = self.managed_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snapshot
        if self.snapshot:
            _dict['snapshot'] = self.snapshot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageOSDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blobUri": obj.get("blobUri"),
            "caching": obj.get("caching"),
            "diskSizeGB": obj.get("diskSizeGB"),
            "managedDisk": SubResource.from_dict(obj["managedDisk"]) if obj.get("managedDisk") is not None else None,
            "osState": obj.get("osState"),
            "osType": obj.get("osType"),
            "snapshot": SubResource.from_dict(obj["snapshot"]) if obj.get("snapshot") is not None else None,
            "storageAccountType": obj.get("storageAccountType")
        })
        return _obj



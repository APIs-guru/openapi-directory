# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineExtensionImageProperties(BaseModel):
    """
    Describes the properties of a Virtual Machine Extension Image.
    """ # noqa: E501
    compute_role: StrictStr = Field(description="The type of role (IaaS or PaaS) this extension supports.", alias="computeRole")
    handler_schema: StrictStr = Field(description="The schema defined by publisher, where extension consumers should provide settings in a matching schema.", alias="handlerSchema")
    operating_system: StrictStr = Field(description="The operating system this extension supports.", alias="operatingSystem")
    supports_multiple_extensions: Optional[StrictBool] = Field(default=None, description="Whether the handler can support multiple extensions.", alias="supportsMultipleExtensions")
    vm_scale_set_enabled: Optional[StrictBool] = Field(default=None, description="Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.", alias="vmScaleSetEnabled")
    __properties: ClassVar[List[str]] = ["computeRole", "handlerSchema", "operatingSystem", "supportsMultipleExtensions", "vmScaleSetEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineExtensionImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineExtensionImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeRole": obj.get("computeRole"),
            "handlerSchema": obj.get("handlerSchema"),
            "operatingSystem": obj.get("operatingSystem"),
            "supportsMultipleExtensions": obj.get("supportsMultipleExtensions"),
            "vmScaleSetEnabled": obj.get("vmScaleSetEnabled")
        })
        return _obj



# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RollingUpgradePolicy(BaseModel):
    """
    The configuration parameters used while performing a rolling upgrade.
    """ # noqa: E501
    max_batch_instance_percent: Optional[Annotated[int, Field(le=100, strict=True, ge=5)]] = Field(default=None, description="The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.", alias="maxBatchInstancePercent")
    max_unhealthy_instance_percent: Optional[Annotated[int, Field(le=100, strict=True, ge=5)]] = Field(default=None, description="The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.", alias="maxUnhealthyInstancePercent")
    max_unhealthy_upgraded_instance_percent: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.", alias="maxUnhealthyUpgradedInstancePercent")
    pause_time_between_batches: Optional[StrictStr] = Field(default=None, description="The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).", alias="pauseTimeBetweenBatches")
    __properties: ClassVar[List[str]] = ["maxBatchInstancePercent", "maxUnhealthyInstancePercent", "maxUnhealthyUpgradedInstancePercent", "pauseTimeBetweenBatches"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RollingUpgradePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RollingUpgradePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxBatchInstancePercent": obj.get("maxBatchInstancePercent"),
            "maxUnhealthyInstancePercent": obj.get("maxUnhealthyInstancePercent"),
            "maxUnhealthyUpgradedInstancePercent": obj.get("maxUnhealthyUpgradedInstancePercent"),
            "pauseTimeBetweenBatches": obj.get("pauseTimeBetweenBatches")
        })
        return _obj



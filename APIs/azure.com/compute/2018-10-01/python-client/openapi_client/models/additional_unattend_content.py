# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2018-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdditionalUnattendContent(BaseModel):
    """
    Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
    """ # noqa: E501
    component_name: Optional[StrictStr] = Field(default=None, description="The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.", alias="componentName")
    content: Optional[StrictStr] = Field(default=None, description="Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.")
    pass_name: Optional[StrictStr] = Field(default=None, description="The pass name. Currently, the only allowable value is OobeSystem.", alias="passName")
    setting_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.", alias="settingName")
    __properties: ClassVar[List[str]] = ["componentName", "content", "passName", "settingName"]

    @field_validator('component_name')
    def component_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Microsoft-Windows-Shell-Setup']):
            raise ValueError("must be one of enum values ('Microsoft-Windows-Shell-Setup')")
        return value

    @field_validator('pass_name')
    def pass_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OobeSystem']):
            raise ValueError("must be one of enum values ('OobeSystem')")
        return value

    @field_validator('setting_name')
    def setting_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AutoLogon', 'FirstLogonCommands']):
            raise ValueError("must be one of enum values ('AutoLogon', 'FirstLogonCommands')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalUnattendContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalUnattendContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "componentName": obj.get("componentName"),
            "content": obj.get("content"),
            "passName": obj.get("passName"),
            "settingName": obj.get("settingName")
        })
        return _obj



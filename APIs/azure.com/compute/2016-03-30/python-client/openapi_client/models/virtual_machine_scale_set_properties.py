# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.upgrade_policy import UpgradePolicy
from openapi_client.models.virtual_machine_scale_set_vm_profile import VirtualMachineScaleSetVMProfile
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetProperties(BaseModel):
    """
    Describes the properties of a Virtual Machine Scale Set.
    """ # noqa: E501
    over_provision: Optional[StrictBool] = Field(default=None, description="Specifies whether the Virtual Machine Scale Set should be overprovisioned.", alias="overProvision")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state, which only appears in the response.", alias="provisioningState")
    upgrade_policy: Optional[UpgradePolicy] = Field(default=None, alias="upgradePolicy")
    virtual_machine_profile: Optional[VirtualMachineScaleSetVMProfile] = Field(default=None, alias="virtualMachineProfile")
    __properties: ClassVar[List[str]] = ["overProvision", "provisioningState", "upgradePolicy", "virtualMachineProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of upgrade_policy
        if self.upgrade_policy:
            _dict['upgradePolicy'] = self.upgrade_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_profile
        if self.virtual_machine_profile:
            _dict['virtualMachineProfile'] = self.virtual_machine_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "overProvision": obj.get("overProvision"),
            "provisioningState": obj.get("provisioningState"),
            "upgradePolicy": UpgradePolicy.from_dict(obj["upgradePolicy"]) if obj.get("upgradePolicy") is not None else None,
            "virtualMachineProfile": VirtualMachineScaleSetVMProfile.from_dict(obj["virtualMachineProfile"]) if obj.get("virtualMachineProfile") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_disk import DataDisk
from openapi_client.models.image_reference import ImageReference
from openapi_client.models.os_disk import OSDisk
from typing import Optional, Set
from typing_extensions import Self

class StorageProfile(BaseModel):
    """
    Specifies the storage settings for the virtual machine disks.
    """ # noqa: E501
    data_disks: Optional[List[DataDisk]] = Field(default=None, description="Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).", alias="dataDisks")
    image_reference: Optional[ImageReference] = Field(default=None, alias="imageReference")
    os_disk: Optional[OSDisk] = Field(default=None, alias="osDisk")
    __properties: ClassVar[List[str]] = ["dataDisks", "imageReference", "osDisk"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_disks (list)
        _items = []
        if self.data_disks:
            for _item_data_disks in self.data_disks:
                if _item_data_disks:
                    _items.append(_item_data_disks.to_dict())
            _dict['dataDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of image_reference
        if self.image_reference:
            _dict['imageReference'] = self.image_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_disk
        if self.os_disk:
            _dict['osDisk'] = self.os_disk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataDisks": [DataDisk.from_dict(_item) for _item in obj["dataDisks"]] if obj.get("dataDisks") is not None else None,
            "imageReference": ImageReference.from_dict(obj["imageReference"]) if obj.get("imageReference") is not None else None,
            "osDisk": OSDisk.from_dict(obj["osDisk"]) if obj.get("osDisk") is not None else None
        })
        return _obj



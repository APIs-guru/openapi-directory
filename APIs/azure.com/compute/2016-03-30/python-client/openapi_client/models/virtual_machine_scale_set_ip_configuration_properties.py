# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2016-03-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_entity_reference import ApiEntityReference
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineScaleSetIPConfigurationProperties(BaseModel):
    """
    Describes a virtual machine scale set network profile's IP configuration properties.
    """ # noqa: E501
    application_gateway_backend_address_pools: Optional[List[SubResource]] = Field(default=None, description="The application gateway backend address pools.", alias="applicationGatewayBackendAddressPools")
    load_balancer_backend_address_pools: Optional[List[SubResource]] = Field(default=None, description="The load balancer backend address pools.", alias="loadBalancerBackendAddressPools")
    load_balancer_inbound_nat_pools: Optional[List[SubResource]] = Field(default=None, description="The load balancer inbound nat pools.", alias="loadBalancerInboundNatPools")
    subnet: ApiEntityReference
    __properties: ClassVar[List[str]] = ["applicationGatewayBackendAddressPools", "loadBalancerBackendAddressPools", "loadBalancerInboundNatPools", "subnet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetIPConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_gateway_backend_address_pools (list)
        _items = []
        if self.application_gateway_backend_address_pools:
            for _item_application_gateway_backend_address_pools in self.application_gateway_backend_address_pools:
                if _item_application_gateway_backend_address_pools:
                    _items.append(_item_application_gateway_backend_address_pools.to_dict())
            _dict['applicationGatewayBackendAddressPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancer_backend_address_pools (list)
        _items = []
        if self.load_balancer_backend_address_pools:
            for _item_load_balancer_backend_address_pools in self.load_balancer_backend_address_pools:
                if _item_load_balancer_backend_address_pools:
                    _items.append(_item_load_balancer_backend_address_pools.to_dict())
            _dict['loadBalancerBackendAddressPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in load_balancer_inbound_nat_pools (list)
        _items = []
        if self.load_balancer_inbound_nat_pools:
            for _item_load_balancer_inbound_nat_pools in self.load_balancer_inbound_nat_pools:
                if _item_load_balancer_inbound_nat_pools:
                    _items.append(_item_load_balancer_inbound_nat_pools.to_dict())
            _dict['loadBalancerInboundNatPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineScaleSetIPConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationGatewayBackendAddressPools": [SubResource.from_dict(_item) for _item in obj["applicationGatewayBackendAddressPools"]] if obj.get("applicationGatewayBackendAddressPools") is not None else None,
            "loadBalancerBackendAddressPools": [SubResource.from_dict(_item) for _item in obj["loadBalancerBackendAddressPools"]] if obj.get("loadBalancerBackendAddressPools") is not None else None,
            "loadBalancerInboundNatPools": [SubResource.from_dict(_item) for _item in obj["loadBalancerInboundNatPools"]] if obj.get("loadBalancerInboundNatPools") is not None else None,
            "subnet": ApiEntityReference.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj



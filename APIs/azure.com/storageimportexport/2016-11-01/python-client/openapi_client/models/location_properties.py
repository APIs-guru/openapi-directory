# coding: utf-8

"""
    StorageImportExport

    The Storage Import/Export Resource Provider API.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LocationProperties(BaseModel):
    """
    location properties
    """ # noqa: E501
    alternate_locations: Optional[List[StrictStr]] = Field(default=None, description="A list of location IDs that should be used to ship shipping drives to for jobs created against the current location. If the current location is active, it will be part of the list. If it is temporarily closed due to maintenance, this list may contain other locations. ", alias="alternateLocations")
    city: Optional[StrictStr] = Field(default=None, description="The city name to use when shipping the drives to the Azure data center. ")
    country_or_region: Optional[StrictStr] = Field(default=None, description="The country or region to use when shipping the drives to the Azure data center. ", alias="countryOrRegion")
    phone: Optional[StrictStr] = Field(default=None, description="The phone number for the Azure data center. ")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code to use when shipping the drives to the Azure data center. ", alias="postalCode")
    recipient_name: Optional[StrictStr] = Field(default=None, description="The recipient name to use when shipping the drives to the Azure data center. ", alias="recipientName")
    state_or_province: Optional[StrictStr] = Field(default=None, description="The state or province to use when shipping the drives to the Azure data center. ", alias="stateOrProvince")
    street_address1: Optional[StrictStr] = Field(default=None, description="The first line of the street address to use when shipping the drives to the Azure data center. ", alias="streetAddress1")
    street_address2: Optional[StrictStr] = Field(default=None, description="The second line of the street address to use when shipping the drives to the Azure data center. ", alias="streetAddress2")
    supported_carriers: Optional[List[StrictStr]] = Field(default=None, description="A list of carriers that are supported at this location. ", alias="supportedCarriers")
    __properties: ClassVar[List[str]] = ["alternateLocations", "city", "countryOrRegion", "phone", "postalCode", "recipientName", "stateOrProvince", "streetAddress1", "streetAddress2", "supportedCarriers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateLocations": obj.get("alternateLocations"),
            "city": obj.get("city"),
            "countryOrRegion": obj.get("countryOrRegion"),
            "phone": obj.get("phone"),
            "postalCode": obj.get("postalCode"),
            "recipientName": obj.get("recipientName"),
            "stateOrProvince": obj.get("stateOrProvince"),
            "streetAddress1": obj.get("streetAddress1"),
            "streetAddress2": obj.get("streetAddress2"),
            "supportedCarriers": obj.get("supportedCarriers")
        })
        return _obj



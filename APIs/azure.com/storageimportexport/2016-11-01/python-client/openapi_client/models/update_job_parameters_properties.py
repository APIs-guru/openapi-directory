# coding: utf-8

"""
    StorageImportExport

    The Storage Import/Export Resource Provider API.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.drive_status import DriveStatus
from openapi_client.models.package_infomation import PackageInfomation
from openapi_client.models.return_address import ReturnAddress
from openapi_client.models.return_shipping import ReturnShipping
from typing import Optional, Set
from typing_extensions import Self

class UpdateJobParametersProperties(BaseModel):
    """
    Specifies the properties of a UpdateJob.
    """ # noqa: E501
    backup_drive_manifest: Optional[StrictBool] = Field(default=None, description="Indicates whether the manifest files on the drives should be copied to block blobs.", alias="backupDriveManifest")
    cancel_requested: Optional[StrictBool] = Field(default=None, description="If specified, the value must be true. The service will attempt to cancel the job. ", alias="cancelRequested")
    delivery_package: Optional[PackageInfomation] = Field(default=None, alias="deliveryPackage")
    drive_list: Optional[List[DriveStatus]] = Field(default=None, description="List of drives that comprise the job.", alias="driveList")
    log_level: Optional[StrictStr] = Field(default=None, description="Indicates whether error logging or verbose logging is enabled.", alias="logLevel")
    return_address: Optional[ReturnAddress] = Field(default=None, alias="returnAddress")
    return_shipping: Optional[ReturnShipping] = Field(default=None, alias="returnShipping")
    state: Optional[StrictStr] = Field(default=None, description="If specified, the value must be Shipping, which tells the Import/Export service that the package for the job has been shipped. The ReturnAddress and DeliveryPackage properties must have been set either in this request or in a previous request, otherwise the request will fail. ")
    __properties: ClassVar[List[str]] = ["backupDriveManifest", "cancelRequested", "deliveryPackage", "driveList", "logLevel", "returnAddress", "returnShipping", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateJobParametersProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_package
        if self.delivery_package:
            _dict['deliveryPackage'] = self.delivery_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in drive_list (list)
        _items = []
        if self.drive_list:
            for _item_drive_list in self.drive_list:
                if _item_drive_list:
                    _items.append(_item_drive_list.to_dict())
            _dict['driveList'] = _items
        # override the default output from pydantic by calling `to_dict()` of return_address
        if self.return_address:
            _dict['returnAddress'] = self.return_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_shipping
        if self.return_shipping:
            _dict['returnShipping'] = self.return_shipping.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateJobParametersProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupDriveManifest": obj.get("backupDriveManifest"),
            "cancelRequested": obj.get("cancelRequested"),
            "deliveryPackage": PackageInfomation.from_dict(obj["deliveryPackage"]) if obj.get("deliveryPackage") is not None else None,
            "driveList": [DriveStatus.from_dict(_item) for _item in obj["driveList"]] if obj.get("driveList") is not None else None,
            "logLevel": obj.get("logLevel"),
            "returnAddress": ReturnAddress.from_dict(obj["returnAddress"]) if obj.get("returnAddress") is not None else None,
            "returnShipping": ReturnShipping.from_dict(obj["returnShipping"]) if obj.get("returnShipping") is not None else None,
            "state": obj.get("state")
        })
        return _obj



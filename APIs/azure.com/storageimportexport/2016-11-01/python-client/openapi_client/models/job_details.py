# coding: utf-8

"""
    StorageImportExport

    The Storage Import/Export Resource Provider API.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.drive_status import DriveStatus
from openapi_client.models.export import Export
from openapi_client.models.package_infomation import PackageInfomation
from openapi_client.models.return_address import ReturnAddress
from openapi_client.models.return_shipping import ReturnShipping
from openapi_client.models.shipping_information import ShippingInformation
from typing import Optional, Set
from typing_extensions import Self

class JobDetails(BaseModel):
    """
    Specifies the job properties
    """ # noqa: E501
    backup_drive_manifest: Optional[StrictBool] = Field(default=None, description="Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.", alias="backupDriveManifest")
    cancel_requested: Optional[StrictBool] = Field(default=None, description="Indicates whether a request has been submitted to cancel the job.", alias="cancelRequested")
    delivery_package: Optional[PackageInfomation] = Field(default=None, alias="deliveryPackage")
    diagnostics_path: Optional[StrictStr] = Field(default=None, description="The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.", alias="diagnosticsPath")
    drive_list: Optional[List[DriveStatus]] = Field(default=None, description="List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.", alias="driveList")
    export: Optional[Export] = None
    incomplete_blob_list_uri: Optional[StrictStr] = Field(default=None, description="A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.", alias="incompleteBlobListUri")
    job_type: Optional[StrictStr] = Field(default=None, description="The type of job", alias="jobType")
    log_level: Optional[StrictStr] = Field(default=None, description="Default value is Error. Indicates whether error logging or verbose logging will be enabled.", alias="logLevel")
    percent_complete: Optional[StrictInt] = Field(default=None, description="Overall percentage completed for the job.", alias="percentComplete")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Specifies the provisioning state of the job.", alias="provisioningState")
    return_address: Optional[ReturnAddress] = Field(default=None, alias="returnAddress")
    return_package: Optional[PackageInfomation] = Field(default=None, alias="returnPackage")
    return_shipping: Optional[ReturnShipping] = Field(default=None, alias="returnShipping")
    shipping_information: Optional[ShippingInformation] = Field(default=None, alias="shippingInformation")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the job.")
    storage_account_id: Optional[StrictStr] = Field(default=None, description="The resource identifier of the storage account where data will be imported to or exported from.", alias="storageAccountId")
    __properties: ClassVar[List[str]] = ["backupDriveManifest", "cancelRequested", "deliveryPackage", "diagnosticsPath", "driveList", "export", "incompleteBlobListUri", "jobType", "logLevel", "percentComplete", "provisioningState", "returnAddress", "returnPackage", "returnShipping", "shippingInformation", "state", "storageAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_package
        if self.delivery_package:
            _dict['deliveryPackage'] = self.delivery_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in drive_list (list)
        _items = []
        if self.drive_list:
            for _item_drive_list in self.drive_list:
                if _item_drive_list:
                    _items.append(_item_drive_list.to_dict())
            _dict['driveList'] = _items
        # override the default output from pydantic by calling `to_dict()` of export
        if self.export:
            _dict['export'] = self.export.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_address
        if self.return_address:
            _dict['returnAddress'] = self.return_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_package
        if self.return_package:
            _dict['returnPackage'] = self.return_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_shipping
        if self.return_shipping:
            _dict['returnShipping'] = self.return_shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_information
        if self.shipping_information:
            _dict['shippingInformation'] = self.shipping_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupDriveManifest": obj.get("backupDriveManifest"),
            "cancelRequested": obj.get("cancelRequested"),
            "deliveryPackage": PackageInfomation.from_dict(obj["deliveryPackage"]) if obj.get("deliveryPackage") is not None else None,
            "diagnosticsPath": obj.get("diagnosticsPath"),
            "driveList": [DriveStatus.from_dict(_item) for _item in obj["driveList"]] if obj.get("driveList") is not None else None,
            "export": Export.from_dict(obj["export"]) if obj.get("export") is not None else None,
            "incompleteBlobListUri": obj.get("incompleteBlobListUri"),
            "jobType": obj.get("jobType"),
            "logLevel": obj.get("logLevel"),
            "percentComplete": obj.get("percentComplete"),
            "provisioningState": obj.get("provisioningState"),
            "returnAddress": ReturnAddress.from_dict(obj["returnAddress"]) if obj.get("returnAddress") is not None else None,
            "returnPackage": PackageInfomation.from_dict(obj["returnPackage"]) if obj.get("returnPackage") is not None else None,
            "returnShipping": ReturnShipping.from_dict(obj["returnShipping"]) if obj.get("returnShipping") is not None else None,
            "shippingInformation": ShippingInformation.from_dict(obj["shippingInformation"]) if obj.get("shippingInformation") is not None else None,
            "state": obj.get("state"),
            "storageAccountId": obj.get("storageAccountId")
        })
        return _obj



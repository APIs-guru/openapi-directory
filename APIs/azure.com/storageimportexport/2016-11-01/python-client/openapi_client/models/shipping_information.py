# coding: utf-8

"""
    StorageImportExport

    The Storage Import/Export Resource Provider API.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShippingInformation(BaseModel):
    """
    Contains information about the Microsoft datacenter to which the drives should be shipped.
    """ # noqa: E501
    city: StrictStr = Field(description="The city name to use when returning the drives.")
    country_or_region: StrictStr = Field(description="The country or region to use when returning the drives. ", alias="countryOrRegion")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number of the recipient of the returned drives.")
    postal_code: StrictStr = Field(description="The postal code to use when returning the drives.", alias="postalCode")
    recipient_name: StrictStr = Field(description="The name of the recipient who will receive the hard drives when they are returned. ", alias="recipientName")
    state_or_province: StrictStr = Field(description="The state or province to use when returning the drives.", alias="stateOrProvince")
    street_address1: StrictStr = Field(description="The first line of the street address to use when returning the drives. ", alias="streetAddress1")
    street_address2: Optional[StrictStr] = Field(default=None, description="The second line of the street address to use when returning the drives. ", alias="streetAddress2")
    __properties: ClassVar[List[str]] = ["city", "countryOrRegion", "phone", "postalCode", "recipientName", "stateOrProvince", "streetAddress1", "streetAddress2"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "countryOrRegion": obj.get("countryOrRegion"),
            "phone": obj.get("phone"),
            "postalCode": obj.get("postalCode"),
            "recipientName": obj.get("recipientName"),
            "stateOrProvince": obj.get("stateOrProvince"),
            "streetAddress1": obj.get("streetAddress1"),
            "streetAddress2": obj.get("streetAddress2")
        })
        return _obj



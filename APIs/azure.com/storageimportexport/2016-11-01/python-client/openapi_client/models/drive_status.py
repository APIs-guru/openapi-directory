# coding: utf-8

"""
    StorageImportExport

    The Storage Import/Export Resource Provider API.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DriveStatus(BaseModel):
    """
    Provides information about the drive's status
    """ # noqa: E501
    bit_locker_key: Optional[StrictStr] = Field(default=None, description="The BitLocker key used to encrypt the drive.", alias="bitLockerKey")
    bytes_succeeded: Optional[StrictInt] = Field(default=None, description="Bytes successfully transferred for the drive.", alias="bytesSucceeded")
    copy_status: Optional[StrictStr] = Field(default=None, description="Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.", alias="copyStatus")
    drive_header_hash: Optional[StrictStr] = Field(default=None, description="The drive header hash value.", alias="driveHeaderHash")
    drive_id: Optional[StrictStr] = Field(default=None, description="The drive's hardware serial number, without spaces.", alias="driveId")
    error_log_uri: Optional[StrictStr] = Field(default=None, description="A URI that points to the blob containing the error log for the data transfer operation.", alias="errorLogUri")
    manifest_file: Optional[StrictStr] = Field(default=None, description="The relative path of the manifest file on the drive. ", alias="manifestFile")
    manifest_hash: Optional[StrictStr] = Field(default=None, description="The Base16-encoded MD5 hash of the manifest file on the drive.", alias="manifestHash")
    manifest_uri: Optional[StrictStr] = Field(default=None, description="A URI that points to the blob containing the drive manifest file. ", alias="manifestUri")
    percent_complete: Optional[StrictInt] = Field(default=None, description="Percentage completed for the drive. ", alias="percentComplete")
    state: Optional[StrictStr] = Field(default=None, description="The drive's current state. ")
    verbose_log_uri: Optional[StrictStr] = Field(default=None, description="A URI that points to the blob containing the verbose log for the data transfer operation. ", alias="verboseLogUri")
    __properties: ClassVar[List[str]] = ["bitLockerKey", "bytesSucceeded", "copyStatus", "driveHeaderHash", "driveId", "errorLogUri", "manifestFile", "manifestHash", "manifestUri", "percentComplete", "state", "verboseLogUri"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Specified', 'Received', 'NeverReceived', 'Transferring', 'Completed', 'CompletedMoreInfo', 'ShippedBack']):
            raise ValueError("must be one of enum values ('Specified', 'Received', 'NeverReceived', 'Transferring', 'Completed', 'CompletedMoreInfo', 'ShippedBack')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DriveStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DriveStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bitLockerKey": obj.get("bitLockerKey"),
            "bytesSucceeded": obj.get("bytesSucceeded"),
            "copyStatus": obj.get("copyStatus"),
            "driveHeaderHash": obj.get("driveHeaderHash"),
            "driveId": obj.get("driveId"),
            "errorLogUri": obj.get("errorLogUri"),
            "manifestFile": obj.get("manifestFile"),
            "manifestHash": obj.get("manifestHash"),
            "manifestUri": obj.get("manifestUri"),
            "percentComplete": obj.get("percentComplete"),
            "state": obj.get("state"),
            "verboseLogUri": obj.get("verboseLogUri")
        })
        return _obj



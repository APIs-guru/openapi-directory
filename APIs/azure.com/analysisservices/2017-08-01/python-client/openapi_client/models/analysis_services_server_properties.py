# coding: utf-8

"""
    AzureAnalysisServices

    The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers

    The version of the OpenAPI document: 2017-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gateway_details import GatewayDetails
from openapi_client.models.ipv4_firewall_settings import IPv4FirewallSettings
from openapi_client.models.server_administrators import ServerAdministrators
from typing import Optional, Set
from typing_extensions import Self

class AnalysisServicesServerProperties(BaseModel):
    """
    Properties of Analysis Services resource.
    """ # noqa: E501
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.", alias="provisioningState")
    server_full_name: Optional[StrictStr] = Field(default=None, description="The full name of the Analysis Services resource.", alias="serverFullName")
    state: Optional[StrictStr] = Field(default=None, description="The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.")
    as_administrators: Optional[ServerAdministrators] = Field(default=None, alias="asAdministrators")
    backup_blob_container_uri: Optional[StrictStr] = Field(default=None, description="The SAS container URI to the backup container.", alias="backupBlobContainerUri")
    gateway_details: Optional[GatewayDetails] = Field(default=None, alias="gatewayDetails")
    ip_v4_firewall_settings: Optional[IPv4FirewallSettings] = Field(default=None, alias="ipV4FirewallSettings")
    querypool_connection_mode: Optional[StrictStr] = Field(default='All', description="How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error.", alias="querypoolConnectionMode")
    __properties: ClassVar[List[str]] = ["asAdministrators", "backupBlobContainerUri", "gatewayDetails", "ipV4FirewallSettings", "querypoolConnectionMode"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Deleting', 'Succeeded', 'Failed', 'Paused', 'Suspended', 'Provisioning', 'Updating', 'Suspending', 'Pausing', 'Resuming', 'Preparing', 'Scaling']):
            raise ValueError("must be one of enum values ('Deleting', 'Succeeded', 'Failed', 'Paused', 'Suspended', 'Provisioning', 'Updating', 'Suspending', 'Pausing', 'Resuming', 'Preparing', 'Scaling')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Deleting', 'Succeeded', 'Failed', 'Paused', 'Suspended', 'Provisioning', 'Updating', 'Suspending', 'Pausing', 'Resuming', 'Preparing', 'Scaling']):
            raise ValueError("must be one of enum values ('Deleting', 'Succeeded', 'Failed', 'Paused', 'Suspended', 'Provisioning', 'Updating', 'Suspending', 'Pausing', 'Resuming', 'Preparing', 'Scaling')")
        return value

    @field_validator('querypool_connection_mode')
    def querypool_connection_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['All', 'ReadOnly']):
            raise ValueError("must be one of enum values ('All', 'ReadOnly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisServicesServerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "server_full_name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of as_administrators
        if self.as_administrators:
            _dict['asAdministrators'] = self.as_administrators.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_details
        if self.gateway_details:
            _dict['gatewayDetails'] = self.gateway_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_v4_firewall_settings
        if self.ip_v4_firewall_settings:
            _dict['ipV4FirewallSettings'] = self.ip_v4_firewall_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisServicesServerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asAdministrators": ServerAdministrators.from_dict(obj["asAdministrators"]) if obj.get("asAdministrators") is not None else None,
            "backupBlobContainerUri": obj.get("backupBlobContainerUri"),
            "gatewayDetails": GatewayDetails.from_dict(obj["gatewayDetails"]) if obj.get("gatewayDetails") is not None else None,
            "ipV4FirewallSettings": IPv4FirewallSettings.from_dict(obj["ipV4FirewallSettings"]) if obj.get("ipV4FirewallSettings") is not None else None,
            "querypoolConnectionMode": obj.get("querypoolConnectionMode") if obj.get("querypoolConnectionMode") is not None else 'All'
        })
        return _obj



# coding: utf-8

"""
    SeaBreezeManagementClient

    APIs to deploy and manage resources to SeaBreeze.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_code_package_properties import ContainerCodePackageProperties
from openapi_client.models.diagnostics_ref import DiagnosticsRef
from openapi_client.models.network_ref import NetworkRef
from typing import Optional, Set
from typing_extensions import Self

class ServiceReplicaProperties(BaseModel):
    """
    Describes the properties of a service replica.
    """ # noqa: E501
    code_packages: List[ContainerCodePackageProperties] = Field(description="Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). ", alias="codePackages")
    diagnostics: Optional[DiagnosticsRef] = None
    network_refs: Optional[List[NetworkRef]] = Field(default=None, description="The names of the private networks that this service needs to be part of.", alias="networkRefs")
    os_type: StrictStr = Field(description="The Operating system type required by the code in service. ", alias="osType")
    __properties: ClassVar[List[str]] = ["codePackages", "diagnostics", "networkRefs", "osType"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Linux', 'Windows']):
            raise ValueError("must be one of enum values ('Linux', 'Windows')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceReplicaProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in code_packages (list)
        _items = []
        if self.code_packages:
            for _item_code_packages in self.code_packages:
                if _item_code_packages:
                    _items.append(_item_code_packages.to_dict())
            _dict['codePackages'] = _items
        # override the default output from pydantic by calling `to_dict()` of diagnostics
        if self.diagnostics:
            _dict['diagnostics'] = self.diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_refs (list)
        _items = []
        if self.network_refs:
            for _item_network_refs in self.network_refs:
                if _item_network_refs:
                    _items.append(_item_network_refs.to_dict())
            _dict['networkRefs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceReplicaProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codePackages": [ContainerCodePackageProperties.from_dict(_item) for _item in obj["codePackages"]] if obj.get("codePackages") is not None else None,
            "diagnostics": DiagnosticsRef.from_dict(obj["diagnostics"]) if obj.get("diagnostics") is not None else None,
            "networkRefs": [NetworkRef.from_dict(_item) for _item in obj["networkRefs"]] if obj.get("networkRefs") is not None else None,
            "osType": obj.get("osType")
        })
        return _obj



# coding: utf-8

"""
    SeaBreezeManagementClient

    APIs to deploy and manage resources to SeaBreeze.

    The version of the OpenAPI document: 2018-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_scoped_volume import ApplicationScopedVolume
from openapi_client.models.container_instance_view import ContainerInstanceView
from openapi_client.models.container_label import ContainerLabel
from openapi_client.models.diagnostics_ref import DiagnosticsRef
from openapi_client.models.endpoint_properties import EndpointProperties
from openapi_client.models.environment_variable import EnvironmentVariable
from openapi_client.models.image_registry_credential import ImageRegistryCredential
from openapi_client.models.reliable_collections_ref import ReliableCollectionsRef
from openapi_client.models.resource_requirements import ResourceRequirements
from openapi_client.models.setting import Setting
from openapi_client.models.volume_reference import VolumeReference
from typing import Optional, Set
from typing_extensions import Self

class ContainerCodePackageProperties(BaseModel):
    """
    Describes a container and its runtime properties.
    """ # noqa: E501
    commands: Optional[List[StrictStr]] = Field(default=None, description="Command array to execute within the container in exec form.")
    diagnostics: Optional[DiagnosticsRef] = None
    endpoints: Optional[List[EndpointProperties]] = Field(default=None, description="The endpoints exposed by this container.")
    entrypoint: Optional[StrictStr] = Field(default=None, description="Override for the default entry point in the container.")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(default=None, description="The environment variables to set in this container", alias="environmentVariables")
    image: StrictStr = Field(description="The Container image to use.")
    image_registry_credential: Optional[ImageRegistryCredential] = Field(default=None, alias="imageRegistryCredential")
    instance_view: Optional[ContainerInstanceView] = Field(default=None, alias="instanceView")
    labels: Optional[List[ContainerLabel]] = Field(default=None, description="The labels to set in this container.")
    name: StrictStr = Field(description="The name of the code package.")
    reliable_collections_refs: Optional[List[ReliableCollectionsRef]] = Field(default=None, description="A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.", alias="reliableCollectionsRefs")
    resources: ResourceRequirements
    settings: Optional[List[Setting]] = Field(default=None, description="The settings to set in this container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".")
    volume_refs: Optional[List[VolumeReference]] = Field(default=None, description="Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime.", alias="volumeRefs")
    volumes: Optional[List[ApplicationScopedVolume]] = Field(default=None, description="Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime.")
    __properties: ClassVar[List[str]] = ["commands", "diagnostics", "endpoints", "entrypoint", "environmentVariables", "image", "imageRegistryCredential", "instanceView", "labels", "name", "reliableCollectionsRefs", "resources", "settings", "volumeRefs", "volumes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerCodePackageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of diagnostics
        if self.diagnostics:
            _dict['diagnostics'] = self.diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict['environmentVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of image_registry_credential
        if self.image_registry_credential:
            _dict['imageRegistryCredential'] = self.image_registry_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instance_view
        if self.instance_view:
            _dict['instanceView'] = self.instance_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reliable_collections_refs (list)
        _items = []
        if self.reliable_collections_refs:
            for _item_reliable_collections_refs in self.reliable_collections_refs:
                if _item_reliable_collections_refs:
                    _items.append(_item_reliable_collections_refs.to_dict())
            _dict['reliableCollectionsRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volume_refs (list)
        _items = []
        if self.volume_refs:
            for _item_volume_refs in self.volume_refs:
                if _item_volume_refs:
                    _items.append(_item_volume_refs.to_dict())
            _dict['volumeRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerCodePackageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commands": obj.get("commands"),
            "diagnostics": DiagnosticsRef.from_dict(obj["diagnostics"]) if obj.get("diagnostics") is not None else None,
            "endpoints": [EndpointProperties.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "entrypoint": obj.get("entrypoint"),
            "environmentVariables": [EnvironmentVariable.from_dict(_item) for _item in obj["environmentVariables"]] if obj.get("environmentVariables") is not None else None,
            "image": obj.get("image"),
            "imageRegistryCredential": ImageRegistryCredential.from_dict(obj["imageRegistryCredential"]) if obj.get("imageRegistryCredential") is not None else None,
            "instanceView": ContainerInstanceView.from_dict(obj["instanceView"]) if obj.get("instanceView") is not None else None,
            "labels": [ContainerLabel.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "name": obj.get("name"),
            "reliableCollectionsRefs": [ReliableCollectionsRef.from_dict(_item) for _item in obj["reliableCollectionsRefs"]] if obj.get("reliableCollectionsRefs") is not None else None,
            "resources": ResourceRequirements.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "settings": [Setting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "volumeRefs": [VolumeReference.from_dict(_item) for _item in obj["volumeRefs"]] if obj.get("volumeRefs") is not None else None,
            "volumes": [ApplicationScopedVolume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None
        })
        return _obj



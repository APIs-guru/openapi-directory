# coding: utf-8

"""
    SeaBreezeManagementClient

    APIs to deploy and manage resources to SeaBreeze.

    The version of the OpenAPI document: 2018-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.secret_kind import SecretKind
from typing import Optional, Set
from typing_extensions import Self

class SecretResourceProperties(BaseModel):
    """
    Describes the properties of a secret resource.
    """ # noqa: E501
    content_type: Optional[StrictStr] = Field(default=None, description="The type of the content stored in the secret value. The value of this property is opaque to Service Fabric. Once set, the value of this property cannot be changed.", alias="contentType")
    description: Optional[StrictStr] = Field(default=None, description="User readable description of the secret.")
    status: Optional[ResourceStatus] = None
    status_details: Optional[StrictStr] = Field(default=None, description="Gives additional information about the current status of the secret.", alias="statusDetails")
    kind: SecretKind
    provisioning_state: Optional[StrictStr] = Field(default=None, description="State of the resource.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["kind", "provisioningState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecretResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "status_details",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecretResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



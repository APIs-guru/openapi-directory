# coding: utf-8

"""
    SeaBreezeManagementClient

    APIs to deploy and manage resources to SeaBreeze.

    The version of the OpenAPI document: 2018-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_scoped_volume import ApplicationScopedVolume

class TestApplicationScopedVolume(unittest.TestCase):
    """ApplicationScopedVolume unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationScopedVolume:
        """Test ApplicationScopedVolume
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationScopedVolume`
        """
        model = ApplicationScopedVolume()
        if include_optional:
            return ApplicationScopedVolume(
                creation_parameters = openapi_client.models.application_scoped_volume_creation_parameters.ApplicationScopedVolumeCreationParameters(
                    description = '', 
                    kind = 'ServiceFabricVolumeDisk', ),
                destination_path = '',
                name = '',
                read_only = True
            )
        else:
            return ApplicationScopedVolume(
                creation_parameters = openapi_client.models.application_scoped_volume_creation_parameters.ApplicationScopedVolumeCreationParameters(
                    description = '', 
                    kind = 'ServiceFabricVolumeDisk', ),
                destination_path = '',
                name = '',
        )
        """

    def testApplicationScopedVolume(self):
        """Test ApplicationScopedVolume"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_tag_information import ServiceTagInformation
from typing import Optional, Set
from typing_extensions import Self

class ServiceTagsListResult(BaseModel):
    """
    Response for the ListServiceTags API service call.
    """ # noqa: E501
    change_number: Optional[StrictStr] = Field(default=None, description="The iteration number.", alias="changeNumber")
    cloud: Optional[StrictStr] = Field(default=None, description="The name of the cloud.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the cloud.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the cloud.")
    type: Optional[StrictStr] = Field(default=None, description="The azure resource type.")
    values: Optional[List[ServiceTagInformation]] = Field(default=None, description="The list of service tag information resources.")
    __properties: ClassVar[List[str]] = ["changeNumber", "cloud", "id", "name", "type", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceTagsListResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "change_number",
            "cloud",
            "id",
            "name",
            "type",
            "values",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceTagsListResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeNumber": obj.get("changeNumber"),
            "cloud": obj.get("cloud"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "values": [ServiceTagInformation.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj



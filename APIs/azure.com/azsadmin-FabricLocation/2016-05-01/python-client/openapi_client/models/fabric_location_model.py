# coding: utf-8

"""
    FabricAdminClient

    Fabric location operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FabricLocationModel(BaseModel):
    """
    All properties of a fabric location resource.
    """ # noqa: E501
    exclusive_admin_operation_name: Optional[StrictStr] = Field(default=None, description="Name of the running exclusive admin operation.", alias="exclusiveAdminOperationName")
    exclusive_admin_operation_running: Optional[StrictBool] = Field(default=None, description="Value for whether an exclusive admin operation is running.", alias="exclusiveAdminOperationRunning")
    external_dnsip_address01: Optional[StrictStr] = Field(default=None, description="First external IP address of the DNS server.", alias="externalDNSIPAddress01")
    external_dnsip_address02: Optional[StrictStr] = Field(default=None, description="Second external IP Address of the DNS server.", alias="externalDNSIPAddress02")
    pep_ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="The IP addresses of the privileged endpoints.", alias="pepIpAddresses")
    shut_down_action_plan_end_time: Optional[datetime] = Field(default=None, description="Last known stamp stop time for the shut down action plan.", alias="shutDownActionPlanEndTime")
    shut_down_action_plan_start_time: Optional[datetime] = Field(default=None, description="Last known stamp start time for the shut down action plan", alias="shutDownActionPlanStartTime")
    stamp_information_id: Optional[StrictStr] = Field(default=None, description="The deployment id of the stamp.", alias="stampInformationId")
    start_up_action_plan_end_time: Optional[datetime] = Field(default=None, description="Last known stamp stop time for the start up action plan.", alias="startUpActionPlanEndTime")
    start_up_action_plan_start_time: Optional[datetime] = Field(default=None, description="Last known stamp start time for the start up action plan.", alias="startUpActionPlanStartTime")
    time_server: Optional[StrictStr] = Field(default=None, description="The IP address of the time server.", alias="timeServer")
    __properties: ClassVar[List[str]] = ["exclusiveAdminOperationName", "exclusiveAdminOperationRunning", "externalDNSIPAddress01", "externalDNSIPAddress02", "pepIpAddresses", "shutDownActionPlanEndTime", "shutDownActionPlanStartTime", "stampInformationId", "startUpActionPlanEndTime", "startUpActionPlanStartTime", "timeServer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FabricLocationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FabricLocationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclusiveAdminOperationName": obj.get("exclusiveAdminOperationName"),
            "exclusiveAdminOperationRunning": obj.get("exclusiveAdminOperationRunning"),
            "externalDNSIPAddress01": obj.get("externalDNSIPAddress01"),
            "externalDNSIPAddress02": obj.get("externalDNSIPAddress02"),
            "pepIpAddresses": obj.get("pepIpAddresses"),
            "shutDownActionPlanEndTime": obj.get("shutDownActionPlanEndTime"),
            "shutDownActionPlanStartTime": obj.get("shutDownActionPlanStartTime"),
            "stampInformationId": obj.get("stampInformationId"),
            "startUpActionPlanEndTime": obj.get("startUpActionPlanEndTime"),
            "startUpActionPlanStartTime": obj.get("startUpActionPlanStartTime"),
            "timeServer": obj.get("timeServer")
        })
        return _obj



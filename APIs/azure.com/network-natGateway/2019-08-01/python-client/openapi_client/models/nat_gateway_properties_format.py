# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.nat_gateway_properties_format_public_ip_addresses_inner import NatGatewayPropertiesFormatPublicIpAddressesInner
from typing import Optional, Set
from typing_extensions import Self

class NatGatewayPropertiesFormat(BaseModel):
    """
    Nat Gateway properties.
    """ # noqa: E501
    idle_timeout_in_minutes: Optional[StrictInt] = Field(default=None, description="The idle timeout of the nat gateway.", alias="idleTimeoutInMinutes")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current provisioning state.", alias="provisioningState")
    public_ip_addresses: Optional[List[NatGatewayPropertiesFormatPublicIpAddressesInner]] = Field(default=None, description="An array of public ip addresses associated with the nat gateway resource.", alias="publicIpAddresses")
    public_ip_prefixes: Optional[List[NatGatewayPropertiesFormatPublicIpAddressesInner]] = Field(default=None, description="An array of public ip prefixes associated with the nat gateway resource.", alias="publicIpPrefixes")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the NAT gateway resource.", alias="resourceGuid")
    subnets: Optional[List[NatGatewayPropertiesFormatPublicIpAddressesInner]] = Field(default=None, description="An array of references to the subnets using this nat gateway resource.")
    __properties: ClassVar[List[str]] = ["idleTimeoutInMinutes", "provisioningState", "publicIpAddresses", "publicIpPrefixes", "resourceGuid", "subnets"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NatGatewayPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "subnets",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in public_ip_addresses (list)
        _items = []
        if self.public_ip_addresses:
            for _item_public_ip_addresses in self.public_ip_addresses:
                if _item_public_ip_addresses:
                    _items.append(_item_public_ip_addresses.to_dict())
            _dict['publicIpAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in public_ip_prefixes (list)
        _items = []
        if self.public_ip_prefixes:
            for _item_public_ip_prefixes in self.public_ip_prefixes:
                if _item_public_ip_prefixes:
                    _items.append(_item_public_ip_prefixes.to_dict())
            _dict['publicIpPrefixes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item_subnets in self.subnets:
                if _item_subnets:
                    _items.append(_item_subnets.to_dict())
            _dict['subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NatGatewayPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idleTimeoutInMinutes": obj.get("idleTimeoutInMinutes"),
            "provisioningState": obj.get("provisioningState"),
            "publicIpAddresses": [NatGatewayPropertiesFormatPublicIpAddressesInner.from_dict(_item) for _item in obj["publicIpAddresses"]] if obj.get("publicIpAddresses") is not None else None,
            "publicIpPrefixes": [NatGatewayPropertiesFormatPublicIpAddressesInner.from_dict(_item) for _item in obj["publicIpPrefixes"]] if obj.get("publicIpPrefixes") is not None else None,
            "resourceGuid": obj.get("resourceGuid"),
            "subnets": [NatGatewayPropertiesFormatPublicIpAddressesInner.from_dict(_item) for _item in obj["subnets"]] if obj.get("subnets") is not None else None
        })
        return _obj



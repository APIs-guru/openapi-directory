# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_job_schedule import CloudJobSchedule

class TestCloudJobSchedule(unittest.TestCase):
    """CloudJobSchedule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudJobSchedule:
        """Test CloudJobSchedule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudJobSchedule`
        """
        model = CloudJobSchedule()
        if include_optional:
            return CloudJobSchedule(
                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                display_name = '',
                e_tag = '',
                execution_info = openapi_client.models.contains_information_about_jobs_that_have_been_and_will_be_run_under_a_job_schedule/.Contains information about jobs that have been and will be run under a job schedule.(
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_run_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    recent_job = openapi_client.models.information_about_the_most_recent_job_to_run_under_the_job_schedule/.Information about the most recent job to run under the job schedule.(
                        id = '', 
                        url = '', ), ),
                id = '',
                job_specification = openapi_client.models.specifies_details_of_the_jobs_to_be_created_on_a_schedule/.Specifies details of the jobs to be created on a schedule.(
                    common_environment_settings = [
                        openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a task process.(
                            name = '', 
                            value = '', )
                        ], 
                    constraints = openapi_client.models.the_execution_constraints_for_a_job/.The execution constraints for a job.(
                        max_task_retry_count = 56, 
                        max_wall_clock_time = '', ), 
                    display_name = '', 
                    job_manager_task = openapi_client.models.specifies_details_of_a_job_manager_task/.Specifies details of a Job Manager task.(
                        allow_low_priority_node = True, 
                        application_package_references = [
                            openapi_client.models.a_reference_to_an_application_package_to_be_deployed_to_compute_nodes/.A reference to an application package to be deployed to compute nodes.(
                                application_id = '', 
                                version = '', )
                            ], 
                        authentication_token_settings = openapi_client.models.the_settings_for_an_authentication_token_that_the_task_can_use_to_perform_batch_service_operations/.The settings for an authentication token that the task can use to perform Batch service operations.(
                            access = [
                                'job'
                                ], ), 
                        command_line = '', 
                        container_settings = openapi_client.models.the_container_settings_for_a_task/.The container settings for a task.(
                            container_run_options = '', 
                            image_name = '', 
                            registry = openapi_client.models.a_private_container_registry/.A private container registry.(
                                password = '', 
                                registry_server = '', 
                                username = '', ), ), 
                        display_name = '', 
                        environment_settings = [
                            openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a task process.(
                                name = '', 
                                value = '', )
                            ], 
                        id = '', 
                        kill_job_on_completion = True, 
                        output_files = [
                            openapi_client.models.a_specification_for_uploading_files_from_an_azure_batch_node_to_another_location_after_the_batch_service_has_finished_executing_the_task_process/.A specification for uploading files from an Azure Batch node to another location after the Batch service has finished executing the task process.(
                                destination = openapi_client.models.the_destination_to_which_a_file_should_be_uploaded/.The destination to which a file should be uploaded.(
                                    container = openapi_client.models.specifies_a_file_upload_destination_within_an_azure_blob_storage_container/.Specifies a file upload destination within an Azure blob storage container.(
                                        container_url = '', 
                                        path = '', ), ), 
                                file_pattern = '', 
                                upload_options = openapi_client.models.details_about_an_output_file_upload_operation,_including_under_what_conditions_to_perform_the_upload/.Details about an output file upload operation, including under what conditions to perform the upload.(
                                    upload_condition = 'tasksuccess', ), )
                            ], 
                        resource_files = [
                            openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a compute node.(
                                auto_storage_container_name = '', 
                                blob_prefix = '', 
                                file_mode = '', 
                                file_path = '', 
                                http_url = '', 
                                storage_container_url = '', )
                            ], 
                        run_exclusive = True, 
                        user_identity = openapi_client.models.the_definition_of_the_user_identity_under_which_the_task_is_run/.The definition of the user identity under which the task is run.(
                            auto_user = openapi_client.models.specifies_the_parameters_for_the_auto_user_that_runs_a_task_on_the_batch_service/.Specifies the parameters for the auto user that runs a task on the Batch service.(
                                elevation_level = 'nonadmin', 
                                scope = 'task', ), 
                            username = '', ), ), 
                    job_preparation_task = openapi_client.models.a_job_preparation_task_to_run_before_any_tasks_of_the_job_on_any_given_compute_node/.A Job Preparation task to run before any tasks of the job on any given compute node.(
                        command_line = '', 
                        environment_settings = [
                            
                            ], 
                        id = '', 
                        rerun_on_node_reboot_after_success = True, 
                        resource_files = [
                            openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a compute node.(
                                auto_storage_container_name = '', 
                                blob_prefix = '', 
                                file_mode = '', 
                                file_path = '', 
                                http_url = '', 
                                storage_container_url = '', )
                            ], 
                        wait_for_success = True, ), 
                    job_release_task = openapi_client.models.a_job_release_task_to_run_on_job_completion_on_any_compute_node_where_the_job_has_run/.A Job Release task to run on job completion on any compute node where the job has run.(
                        command_line = '', 
                        environment_settings = [
                            
                            ], 
                        id = '', 
                        max_wall_clock_time = '', 
                        resource_files = [
                            
                            ], 
                        retention_time = '', ), 
                    metadata = [
                        openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                            name = '', 
                            value = '', )
                        ], 
                    network_configuration = openapi_client.models.the_network_configuration_for_the_job/.The network configuration for the job.(
                        subnet_id = '', ), 
                    on_all_tasks_complete = 'noaction', 
                    on_task_failure = 'noaction', 
                    pool_info = openapi_client.models.specifies_how_a_job_should_be_assigned_to_a_pool/.Specifies how a job should be assigned to a pool.(
                        auto_pool_specification = openapi_client.models.specifies_characteristics_for_a_temporary_'auto_pool'/_the_batch_service_will_create_this_auto_pool_when_the_job_is_submitted/.Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.(
                            auto_pool_id_prefix = '', 
                            keep_alive = True, 
                            pool = openapi_client.models.specification_for_creating_a_new_pool/.Specification for creating a new pool.(
                                application_licenses = [
                                    ''
                                    ], 
                                application_package_references = [
                                    openapi_client.models.a_reference_to_an_application_package_to_be_deployed_to_compute_nodes/.A reference to an application package to be deployed to compute nodes.(
                                        application_id = '', 
                                        version = '', )
                                    ], 
                                auto_scale_evaluation_interval = '', 
                                auto_scale_formula = '', 
                                certificate_references = [
                                    openapi_client.models.a_reference_to_a_certificate_to_be_installed_on_compute_nodes_in_a_pool/.A reference to a certificate to be installed on compute nodes in a pool.(
                                        store_location = 'currentuser', 
                                        store_name = '', 
                                        thumbprint = '', 
                                        thumbprint_algorithm = '', 
                                        visibility = [
                                            'starttask'
                                            ], )
                                    ], 
                                cloud_service_configuration = openapi_client.models.the_configuration_for_nodes_in_a_pool_based_on_the_azure_cloud_services_platform/.The configuration for nodes in a pool based on the Azure Cloud Services platform.(
                                    os_family = '', 
                                    os_version = '', ), 
                                display_name = '', 
                                enable_auto_scale = True, 
                                enable_inter_node_communication = True, 
                                max_tasks_per_node = 56, 
                                metadata = [
                                    openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                                        name = '', 
                                        value = '', )
                                    ], 
                                resize_timeout = '', 
                                start_task = openapi_client.models.a_task_which_is_run_when_a_compute_node_joins_a_pool_in_the_azure_batch_service,_or_when_the_compute_node_is_rebooted_or_reimaged/.A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged.(
                                    command_line = '', 
                                    environment_settings = [
                                        
                                        ], 
                                    max_task_retry_count = 56, 
                                    resource_files = [
                                        
                                        ], 
                                    wait_for_success = True, ), 
                                target_dedicated_nodes = 56, 
                                target_low_priority_nodes = 56, 
                                task_scheduling_policy = openapi_client.models.specifies_how_tasks_should_be_distributed_across_compute_nodes/.Specifies how tasks should be distributed across compute nodes.(
                                    node_fill_type = 'spread', ), 
                                user_accounts = [
                                    openapi_client.models.properties_used_to_create_a_user_used_to_execute_tasks_on_an_azure_batch_node/.Properties used to create a user used to execute tasks on an Azure Batch node.(
                                        linux_user_configuration = openapi_client.models.properties_used_to_create_a_user_account_on_a_linux_node/.Properties used to create a user account on a Linux node.(
                                            gid = 56, 
                                            ssh_private_key = '', 
                                            uid = 56, ), 
                                        name = '', 
                                        password = '', 
                                        windows_user_configuration = openapi_client.models.properties_used_to_create_a_user_account_on_a_windows_node/.Properties used to create a user account on a Windows node.(
                                            login_mode = 'batch', ), )
                                    ], 
                                virtual_machine_configuration = openapi_client.models.the_configuration_for_compute_nodes_in_a_pool_based_on_the_azure_virtual_machines_infrastructure/.The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure.(
                                    container_configuration = openapi_client.models.the_configuration_for_container_enabled_pools/.The configuration for container-enabled pools.(
                                        container_image_names = [
                                            ''
                                            ], 
                                        container_registries = [
                                            openapi_client.models.a_private_container_registry/.A private container registry.(
                                                password = '', 
                                                registry_server = '', 
                                                username = '', )
                                            ], 
                                        type = 'dockerCompatible', ), 
                                    data_disks = [
                                        openapi_client.models.settings_which_will_be_used_by_the_data_disks_associated_to_compute_nodes_in_the_pool/.Settings which will be used by the data disks associated to compute nodes in the pool.(
                                            caching = 'none', 
                                            disk_size_gb = 56, 
                                            lun = 56, 
                                            storage_account_type = 'standard_lrs', )
                                        ], 
                                    image_reference = openapi_client.models.a_reference_to_an_azure_virtual_machines_marketplace_image_or_a_custom_azure_virtual_machine_image/_to_get_the_list_of_all_azure_marketplace_image_references_verified_by_azure_batch,_see_the_'list_node_agent_skus'_operation/.A reference to an Azure Virtual Machines Marketplace image or a custom Azure Virtual Machine image. To get the list of all Azure Marketplace image references verified by Azure Batch, see the 'List node agent SKUs' operation.(
                                        offer = '', 
                                        publisher = '', 
                                        sku = '', 
                                        version = '', 
                                        virtual_machine_image_id = '', ), 
                                    license_type = '', 
                                    node_agent_skuid = '', 
                                    windows_configuration = openapi_client.models.windows_operating_system_settings_to_apply_to_the_virtual_machine/.Windows operating system settings to apply to the virtual machine.(
                                        enable_automatic_updates = True, ), ), 
                                vm_size = '', ), 
                            pool_lifetime_option = 'jobschedule', ), 
                        pool_id = '', ), 
                    priority = 56, 
                    uses_task_dependencies = True, ),
                last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                metadata = [
                    openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                        name = '', 
                        value = '', )
                    ],
                previous_state = 'active',
                previous_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                schedule = openapi_client.models.the_schedule_according_to_which_jobs_will_be_created.The schedule according to which jobs will be created(
                    do_not_run_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    do_not_run_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    recurrence_interval = '', 
                    start_window = '', ),
                state = 'active',
                state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                stats = openapi_client.models.resource_usage_statistics_for_a_job_schedule/.Resource usage statistics for a job schedule.(
                    kernel_cpu_time = '', 
                    last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    num_failed_tasks = 56, 
                    num_succeeded_tasks = 56, 
                    num_task_retries = 56, 
                    read_iogi_b = 1.337, 
                    read_i_ops = 56, 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    url = '', 
                    user_cpu_time = '', 
                    wait_time = '', 
                    wall_clock_time = '', 
                    write_iogi_b = 1.337, 
                    write_i_ops = 56, ),
                url = ''
            )
        else:
            return CloudJobSchedule(
        )
        """

    def testCloudJobSchedule(self):
        """Test CloudJobSchedule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

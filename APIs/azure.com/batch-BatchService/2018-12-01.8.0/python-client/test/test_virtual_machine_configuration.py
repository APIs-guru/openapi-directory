# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine_configuration import VirtualMachineConfiguration

class TestVirtualMachineConfiguration(unittest.TestCase):
    """VirtualMachineConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachineConfiguration:
        """Test VirtualMachineConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachineConfiguration`
        """
        model = VirtualMachineConfiguration()
        if include_optional:
            return VirtualMachineConfiguration(
                container_configuration = openapi_client.models.the_configuration_for_container_enabled_pools/.The configuration for container-enabled pools.(
                    container_image_names = [
                        ''
                        ], 
                    container_registries = [
                        openapi_client.models.a_private_container_registry/.A private container registry.(
                            password = '', 
                            registry_server = '', 
                            username = '', )
                        ], 
                    type = 'dockerCompatible', ),
                data_disks = [
                    openapi_client.models.settings_which_will_be_used_by_the_data_disks_associated_to_compute_nodes_in_the_pool/.Settings which will be used by the data disks associated to compute nodes in the pool.(
                        caching = 'none', 
                        disk_size_gb = 56, 
                        lun = 56, 
                        storage_account_type = 'standard_lrs', )
                    ],
                image_reference = openapi_client.models.a_reference_to_an_azure_virtual_machines_marketplace_image_or_a_custom_azure_virtual_machine_image/_to_get_the_list_of_all_azure_marketplace_image_references_verified_by_azure_batch,_see_the_'list_node_agent_skus'_operation/.A reference to an Azure Virtual Machines Marketplace image or a custom Azure Virtual Machine image. To get the list of all Azure Marketplace image references verified by Azure Batch, see the 'List node agent SKUs' operation.(
                    offer = '', 
                    publisher = '', 
                    sku = '', 
                    version = '', 
                    virtual_machine_image_id = '', ),
                license_type = '',
                node_agent_skuid = '',
                windows_configuration = openapi_client.models.windows_operating_system_settings_to_apply_to_the_virtual_machine/.Windows operating system settings to apply to the virtual machine.(
                    enable_automatic_updates = True, )
            )
        else:
            return VirtualMachineConfiguration(
                image_reference = openapi_client.models.a_reference_to_an_azure_virtual_machines_marketplace_image_or_a_custom_azure_virtual_machine_image/_to_get_the_list_of_all_azure_marketplace_image_references_verified_by_azure_batch,_see_the_'list_node_agent_skus'_operation/.A reference to an Azure Virtual Machines Marketplace image or a custom Azure Virtual Machine image. To get the list of all Azure Marketplace image references verified by Azure Batch, see the 'List node agent SKUs' operation.(
                    offer = '', 
                    publisher = '', 
                    sku = '', 
                    version = '', 
                    virtual_machine_image_id = '', ),
                node_agent_skuid = '',
        )
        """

    def testVirtualMachineConfiguration(self):
        """Test VirtualMachineConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

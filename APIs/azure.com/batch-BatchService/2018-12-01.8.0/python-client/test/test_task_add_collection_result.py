# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.task_add_collection_result import TaskAddCollectionResult

class TestTaskAddCollectionResult(unittest.TestCase):
    """TaskAddCollectionResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskAddCollectionResult:
        """Test TaskAddCollectionResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskAddCollectionResult`
        """
        model = TaskAddCollectionResult()
        if include_optional:
            return TaskAddCollectionResult(
                value = [
                    openapi_client.models.result_for_a_single_task_added_as_part_of_an_add_task_collection_operation/.Result for a single task added as part of an add task collection operation.(
                        e_tag = '', 
                        error = openapi_client.models.an_error_response_received_from_the_azure_batch_service/.An error response received from the Azure Batch service.(
                            code = '', 
                            message = openapi_client.models.an_error_message_received_in_an_azure_batch_error_response/.An error message received in an Azure Batch error response.(
                                lang = '', 
                                value = '', ), 
                            values = [
                                openapi_client.models.an_item_of_additional_information_included_in_an_azure_batch_error_response/.An item of additional information included in an Azure Batch error response.(
                                    key = '', 
                                    value = '', )
                                ], ), 
                        last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        location = '', 
                        status = 'success', 
                        task_id = '', )
                    ]
            )
        else:
            return TaskAddCollectionResult(
        )
        """

    def testTaskAddCollectionResult(self):
        """Test TaskAddCollectionResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

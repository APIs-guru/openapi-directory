# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.cloud_task import CloudTask
from openapi_client.models.cloud_task_list_result import CloudTaskListResult
from openapi_client.models.cloud_task_list_subtasks_result import CloudTaskListSubtasksResult
from openapi_client.models.task_add_collection_parameter import TaskAddCollectionParameter
from openapi_client.models.task_add_collection_result import TaskAddCollectionResult
from openapi_client.models.task_add_parameter import TaskAddParameter
from openapi_client.models.task_update_parameter import TaskUpdateParameter

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TasksApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def task_add(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job to which the task is to be added.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task: Annotated[TaskAddParameter, Field(description="The task to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Adds a task to the specified job.

        The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.

        :param job_id: The ID of the job to which the task is to be added. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task: The task to be added. (required)
        :type task: TaskAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_add_serialize(
            job_id=job_id,
            api_version=api_version,
            task=task,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_add_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job to which the task is to be added.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task: Annotated[TaskAddParameter, Field(description="The task to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Adds a task to the specified job.

        The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.

        :param job_id: The ID of the job to which the task is to be added. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task: The task to be added. (required)
        :type task: TaskAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_add_serialize(
            job_id=job_id,
            api_version=api_version,
            task=task,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_add_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job to which the task is to be added.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task: Annotated[TaskAddParameter, Field(description="The task to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Adds a task to the specified job.

        The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.

        :param job_id: The ID of the job to which the task is to be added. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task: The task to be added. (required)
        :type task: TaskAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_add_serialize(
            job_id=job_id,
            api_version=api_version,
            task=task,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_add_serialize(
        self,
        job_id,
        api_version,
        task,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter
        if task is not None:
            _body_params = task


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_add_collection(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job to which the task collection is to be added.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task_collection: Annotated[TaskAddCollectionParameter, Field(description="The tasks to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TaskAddCollectionResult:
        """Adds a collection of tasks to the specified job.

        Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.

        :param job_id: The ID of the job to which the task collection is to be added. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task_collection: The tasks to be added. (required)
        :type task_collection: TaskAddCollectionParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_add_collection_serialize(
            job_id=job_id,
            api_version=api_version,
            task_collection=task_collection,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TaskAddCollectionResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_add_collection_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job to which the task collection is to be added.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task_collection: Annotated[TaskAddCollectionParameter, Field(description="The tasks to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TaskAddCollectionResult]:
        """Adds a collection of tasks to the specified job.

        Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.

        :param job_id: The ID of the job to which the task collection is to be added. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task_collection: The tasks to be added. (required)
        :type task_collection: TaskAddCollectionParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_add_collection_serialize(
            job_id=job_id,
            api_version=api_version,
            task_collection=task_collection,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TaskAddCollectionResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_add_collection_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job to which the task collection is to be added.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task_collection: Annotated[TaskAddCollectionParameter, Field(description="The tasks to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Adds a collection of tasks to the specified job.

        Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.

        :param job_id: The ID of the job to which the task collection is to be added. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task_collection: The tasks to be added. (required)
        :type task_collection: TaskAddCollectionParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_add_collection_serialize(
            job_id=job_id,
            api_version=api_version,
            task_collection=task_collection,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TaskAddCollectionResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_add_collection_serialize(
        self,
        job_id,
        api_version,
        task_collection,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter
        if task_collection is not None:
            _body_params = task_collection


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/addtaskcollection',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_delete(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job from which to delete the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to delete.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a task from the specified job.

        When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.

        :param job_id: The ID of the job from which to delete the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to delete. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_delete_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_delete_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job from which to delete the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to delete.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a task from the specified job.

        When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.

        :param job_id: The ID of the job from which to delete the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to delete. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_delete_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_delete_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job from which to delete the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to delete.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a task from the specified job.

        When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.

        :param job_id: The ID of the job from which to delete the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to delete. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_delete_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_delete_serialize(
        self,
        job_id,
        task_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        if task_id is not None:
            _path_params['taskId'] = task_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/jobs/{jobId}/tasks/{taskId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_get(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job that contains the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to get information about.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudTask:
        """Gets information about the specified task.

        For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the job that contains the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to get information about. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_get_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            select=select,
            expand=expand,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTask",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_get_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job that contains the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to get information about.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudTask]:
        """Gets information about the specified task.

        For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the job that contains the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to get information about. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_get_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            select=select,
            expand=expand,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTask",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_get_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job that contains the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to get information about.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets information about the specified task.

        For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the job that contains the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to get information about. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_get_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            select=select,
            expand=expand,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTask",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_get_serialize(
        self,
        job_id,
        task_id,
        api_version,
        select,
        expand,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        if task_id is not None:
            _path_params['taskId'] = task_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs/{jobId}/tasks/{taskId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_list(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudTaskListResult:
        """Lists all of the tasks that are associated with the specified job.

        For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_list_serialize(
            job_id=job_id,
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTaskListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_list_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudTaskListResult]:
        """Lists all of the tasks that are associated with the specified job.

        For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_list_serialize(
            job_id=job_id,
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTaskListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_list_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists all of the tasks that are associated with the specified job.

        For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.

        :param job_id: The ID of the job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_list_serialize(
            job_id=job_id,
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTaskListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_list_serialize(
        self,
        job_id,
        api_version,
        filter,
        select,
        expand,
        maxresults,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if maxresults is not None:
            
            _query_params.append(('maxresults', maxresults))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs/{jobId}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_list_subtasks(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudTaskListSubtasksResult:
        """Lists all of the subtasks that are associated with the specified multi-instance task.

        If the task is not a multi-instance task then this returns an empty collection.

        :param job_id: The ID of the job. (required)
        :type job_id: str
        :param task_id: The ID of the task. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_list_subtasks_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            select=select,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTaskListSubtasksResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_list_subtasks_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudTaskListSubtasksResult]:
        """Lists all of the subtasks that are associated with the specified multi-instance task.

        If the task is not a multi-instance task then this returns an empty collection.

        :param job_id: The ID of the job. (required)
        :type job_id: str
        :param task_id: The ID of the task. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_list_subtasks_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            select=select,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTaskListSubtasksResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_list_subtasks_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists all of the subtasks that are associated with the specified multi-instance task.

        If the task is not a multi-instance task then this returns an empty collection.

        :param job_id: The ID of the job. (required)
        :type job_id: str
        :param task_id: The ID of the task. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_list_subtasks_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            select=select,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudTaskListSubtasksResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_list_subtasks_serialize(
        self,
        job_id,
        task_id,
        api_version,
        select,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        if task_id is not None:
            _path_params['taskId'] = task_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs/{jobId}/tasks/{taskId}/subtasksinfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_reactivate(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to reactivate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reactivates a task, allowing it to run again even if its retry count has been exhausted.

        Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to reactivate. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_reactivate_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_reactivate_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to reactivate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reactivates a task, allowing it to run again even if its retry count has been exhausted.

        Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to reactivate. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_reactivate_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_reactivate_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to reactivate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reactivates a task, allowing it to run again even if its retry count has been exhausted.

        Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to reactivate. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_reactivate_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_reactivate_serialize(
        self,
        job_id,
        task_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        if task_id is not None:
            _path_params['taskId'] = task_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/tasks/{taskId}/reactivate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_terminate(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to terminate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Terminates the specified task.

        When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to terminate. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_terminate_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_terminate_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to terminate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Terminates the specified task.

        When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to terminate. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_terminate_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_terminate_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to terminate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Terminates the specified task.

        When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to terminate. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_terminate_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_terminate_serialize(
        self,
        job_id,
        task_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        if task_id is not None:
            _path_params['taskId'] = task_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/tasks/{taskId}/terminate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def task_update(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task_update_parameter: Annotated[TaskUpdateParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """task_update

        Updates the properties of the specified task.

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to update. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task_update_parameter: The parameters for the request. (required)
        :type task_update_parameter: TaskUpdateParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_update_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            task_update_parameter=task_update_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def task_update_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task_update_parameter: Annotated[TaskUpdateParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """task_update

        Updates the properties of the specified task.

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to update. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task_update_parameter: The parameters for the request. (required)
        :type task_update_parameter: TaskUpdateParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_update_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            task_update_parameter=task_update_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def task_update_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the job containing the task.")],
        task_id: Annotated[StrictStr, Field(description="The ID of the task to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        task_update_parameter: Annotated[TaskUpdateParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """task_update

        Updates the properties of the specified task.

        :param job_id: The ID of the job containing the task. (required)
        :type job_id: str
        :param task_id: The ID of the task to update. (required)
        :type task_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param task_update_parameter: The parameters for the request. (required)
        :type task_update_parameter: TaskUpdateParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._task_update_serialize(
            job_id=job_id,
            task_id=task_id,
            api_version=api_version,
            task_update_parameter=task_update_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _task_update_serialize(
        self,
        job_id,
        task_id,
        api_version,
        task_update_parameter,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        if task_id is not None:
            _path_params['taskId'] = task_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter
        if task_update_parameter is not None:
            _body_params = task_update_parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/jobs/{jobId}/tasks/{taskId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



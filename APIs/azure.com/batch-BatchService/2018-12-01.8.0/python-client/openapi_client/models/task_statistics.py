# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class TaskStatistics(BaseModel):
    """
    TaskStatistics
    """ # noqa: E501
    kernel_cpu_time: StrictStr = Field(alias="kernelCPUTime")
    last_update_time: datetime = Field(alias="lastUpdateTime")
    read_iogi_b: Union[StrictFloat, StrictInt] = Field(alias="readIOGiB")
    read_i_ops: StrictInt = Field(alias="readIOps")
    start_time: datetime = Field(alias="startTime")
    url: StrictStr
    user_cpu_time: StrictStr = Field(alias="userCPUTime")
    wait_time: StrictStr = Field(alias="waitTime")
    wall_clock_time: StrictStr = Field(description="The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If the task was retried, this includes the wall clock time of all the task retries.", alias="wallClockTime")
    write_iogi_b: Union[StrictFloat, StrictInt] = Field(alias="writeIOGiB")
    write_i_ops: StrictInt = Field(alias="writeIOps")
    __properties: ClassVar[List[str]] = ["kernelCPUTime", "lastUpdateTime", "readIOGiB", "readIOps", "startTime", "url", "userCPUTime", "waitTime", "wallClockTime", "writeIOGiB", "writeIOps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kernelCPUTime": obj.get("kernelCPUTime"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "readIOGiB": obj.get("readIOGiB"),
            "readIOps": obj.get("readIOps"),
            "startTime": obj.get("startTime"),
            "url": obj.get("url"),
            "userCPUTime": obj.get("userCPUTime"),
            "waitTime": obj.get("waitTime"),
            "wallClockTime": obj.get("wallClockTime"),
            "writeIOGiB": obj.get("writeIOGiB"),
            "writeIOps": obj.get("writeIOps")
        })
        return _obj



# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_reference import CertificateReference
from openapi_client.models.compute_node_endpoint_configuration import ComputeNodeEndpointConfiguration
from openapi_client.models.compute_node_error import ComputeNodeError
from openapi_client.models.node_agent_information import NodeAgentInformation
from openapi_client.models.start_task import StartTask
from openapi_client.models.start_task_information import StartTaskInformation
from openapi_client.models.task_information import TaskInformation
from typing import Optional, Set
from typing_extensions import Self

class ComputeNode(BaseModel):
    """
    ComputeNode
    """ # noqa: E501
    affinity_id: Optional[StrictStr] = Field(default=None, description="Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.", alias="affinityId")
    allocation_time: Optional[datetime] = Field(default=None, description="This is the time when the node was initially allocated and doesn't change once set. It is not updated when the node is service healed or preempted.", alias="allocationTime")
    certificate_references: Optional[List[CertificateReference]] = Field(default=None, description="For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.", alias="certificateReferences")
    endpoint_configuration: Optional[ComputeNodeEndpointConfiguration] = Field(default=None, alias="endpointConfiguration")
    errors: Optional[List[ComputeNodeError]] = None
    id: Optional[StrictStr] = Field(default=None, description="Every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes.")
    ip_address: Optional[StrictStr] = Field(default=None, description="Every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes.", alias="ipAddress")
    is_dedicated: Optional[StrictBool] = Field(default=None, alias="isDedicated")
    last_boot_time: Optional[datetime] = Field(default=None, description="This property may not be present if the node state is unusable.", alias="lastBootTime")
    node_agent_info: Optional[NodeAgentInformation] = Field(default=None, alias="nodeAgentInfo")
    recent_tasks: Optional[List[TaskInformation]] = Field(default=None, description="This property is present only if at least one task has run on this node since it was assigned to the pool.", alias="recentTasks")
    running_tasks_count: Optional[StrictInt] = Field(default=None, alias="runningTasksCount")
    scheduling_state: Optional[StrictStr] = Field(default=None, alias="schedulingState")
    start_task: Optional[StartTask] = Field(default=None, alias="startTask")
    start_task_info: Optional[StartTaskInformation] = Field(default=None, alias="startTaskInfo")
    state: Optional[StrictStr] = Field(default=None, description="The low-priority node has been preempted. Tasks which were running on the node when it was preempted will be rescheduled when another node becomes available.")
    state_transition_time: Optional[datetime] = Field(default=None, alias="stateTransitionTime")
    total_tasks_run: Optional[StrictInt] = Field(default=None, alias="totalTasksRun")
    total_tasks_succeeded: Optional[StrictInt] = Field(default=None, alias="totalTasksSucceeded")
    url: Optional[StrictStr] = None
    vm_size: Optional[StrictStr] = Field(default=None, description="For information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).", alias="vmSize")
    __properties: ClassVar[List[str]] = ["affinityId", "allocationTime", "certificateReferences", "endpointConfiguration", "errors", "id", "ipAddress", "isDedicated", "lastBootTime", "nodeAgentInfo", "recentTasks", "runningTasksCount", "schedulingState", "startTask", "startTaskInfo", "state", "stateTransitionTime", "totalTasksRun", "totalTasksSucceeded", "url", "vmSize"]

    @field_validator('scheduling_state')
    def scheduling_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'disabled']):
            raise ValueError("must be one of enum values ('enabled', 'disabled')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingforstarttask', 'starttaskfailed', 'unknown', 'leavingpool', 'offline', 'preempted']):
            raise ValueError("must be one of enum values ('idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingforstarttask', 'starttaskfailed', 'unknown', 'leavingpool', 'offline', 'preempted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in certificate_references (list)
        _items = []
        if self.certificate_references:
            for _item_certificate_references in self.certificate_references:
                if _item_certificate_references:
                    _items.append(_item_certificate_references.to_dict())
            _dict['certificateReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of endpoint_configuration
        if self.endpoint_configuration:
            _dict['endpointConfiguration'] = self.endpoint_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of node_agent_info
        if self.node_agent_info:
            _dict['nodeAgentInfo'] = self.node_agent_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_tasks (list)
        _items = []
        if self.recent_tasks:
            for _item_recent_tasks in self.recent_tasks:
                if _item_recent_tasks:
                    _items.append(_item_recent_tasks.to_dict())
            _dict['recentTasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of start_task
        if self.start_task:
            _dict['startTask'] = self.start_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_task_info
        if self.start_task_info:
            _dict['startTaskInfo'] = self.start_task_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affinityId": obj.get("affinityId"),
            "allocationTime": obj.get("allocationTime"),
            "certificateReferences": [CertificateReference.from_dict(_item) for _item in obj["certificateReferences"]] if obj.get("certificateReferences") is not None else None,
            "endpointConfiguration": ComputeNodeEndpointConfiguration.from_dict(obj["endpointConfiguration"]) if obj.get("endpointConfiguration") is not None else None,
            "errors": [ComputeNodeError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "id": obj.get("id"),
            "ipAddress": obj.get("ipAddress"),
            "isDedicated": obj.get("isDedicated"),
            "lastBootTime": obj.get("lastBootTime"),
            "nodeAgentInfo": NodeAgentInformation.from_dict(obj["nodeAgentInfo"]) if obj.get("nodeAgentInfo") is not None else None,
            "recentTasks": [TaskInformation.from_dict(_item) for _item in obj["recentTasks"]] if obj.get("recentTasks") is not None else None,
            "runningTasksCount": obj.get("runningTasksCount"),
            "schedulingState": obj.get("schedulingState"),
            "startTask": StartTask.from_dict(obj["startTask"]) if obj.get("startTask") is not None else None,
            "startTaskInfo": StartTaskInformation.from_dict(obj["startTaskInfo"]) if obj.get("startTaskInfo") is not None else None,
            "state": obj.get("state"),
            "stateTransitionTime": obj.get("stateTransitionTime"),
            "totalTasksRun": obj.get("totalTasksRun"),
            "totalTasksSucceeded": obj.get("totalTasksSucceeded"),
            "url": obj.get("url"),
            "vmSize": obj.get("vmSize")
        })
        return _obj



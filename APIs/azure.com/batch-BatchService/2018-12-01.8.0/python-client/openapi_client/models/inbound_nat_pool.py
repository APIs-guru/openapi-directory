# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inbound_endpoint_protocol import InboundEndpointProtocol
from openapi_client.models.network_security_group_rule import NetworkSecurityGroupRule
from typing import Optional, Set
from typing_extensions import Self

class InboundNATPool(BaseModel):
    """
    InboundNATPool
    """ # noqa: E501
    backend_port: StrictInt = Field(description="This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.", alias="backendPort")
    frontend_port_range_end: StrictInt = Field(description="Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.", alias="frontendPortRangeEnd")
    frontend_port_range_start: StrictInt = Field(description="Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.", alias="frontendPortRangeStart")
    name: StrictStr = Field(description="The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.")
    network_security_group_rules: Optional[List[NetworkSecurityGroupRule]] = Field(default=None, description="The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.", alias="networkSecurityGroupRules")
    protocol: InboundEndpointProtocol
    __properties: ClassVar[List[str]] = ["backendPort", "frontendPortRangeEnd", "frontendPortRangeStart", "name", "networkSecurityGroupRules", "protocol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundNATPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in network_security_group_rules (list)
        _items = []
        if self.network_security_group_rules:
            for _item_network_security_group_rules in self.network_security_group_rules:
                if _item_network_security_group_rules:
                    _items.append(_item_network_security_group_rules.to_dict())
            _dict['networkSecurityGroupRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundNATPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendPort": obj.get("backendPort"),
            "frontendPortRangeEnd": obj.get("frontendPortRangeEnd"),
            "frontendPortRangeStart": obj.get("frontendPortRangeStart"),
            "name": obj.get("name"),
            "networkSecurityGroupRules": [NetworkSecurityGroupRule.from_dict(_item) for _item in obj["networkSecurityGroupRules"]] if obj.get("networkSecurityGroupRules") is not None else None,
            "protocol": obj.get("protocol")
        })
        return _obj



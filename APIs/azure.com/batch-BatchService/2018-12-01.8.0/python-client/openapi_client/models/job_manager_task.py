# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_package_reference import ApplicationPackageReference
from openapi_client.models.authentication_token_settings import AuthenticationTokenSettings
from openapi_client.models.environment_setting import EnvironmentSetting
from openapi_client.models.output_file import OutputFile
from openapi_client.models.resource_file import ResourceFile
from openapi_client.models.task_constraints import TaskConstraints
from openapi_client.models.task_container_settings import TaskContainerSettings
from openapi_client.models.user_identity import UserIdentity
from typing import Optional, Set
from typing_extensions import Self

class JobManagerTask(BaseModel):
    """
    The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing.
    """ # noqa: E501
    allow_low_priority_node: Optional[StrictBool] = Field(default=None, description="The default value is true.", alias="allowLowPriorityNode")
    application_package_references: Optional[List[ApplicationPackageReference]] = Field(default=None, description="Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.", alias="applicationPackageReferences")
    authentication_token_settings: Optional[AuthenticationTokenSettings] = Field(default=None, alias="authenticationTokenSettings")
    command_line: StrictStr = Field(description="The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).", alias="commandLine")
    constraints: Optional[TaskConstraints] = None
    container_settings: Optional[TaskContainerSettings] = Field(default=None, alias="containerSettings")
    display_name: Optional[StrictStr] = Field(default=None, description="It need not be unique and can contain any Unicode characters up to a maximum length of 1024.", alias="displayName")
    environment_settings: Optional[List[EnvironmentSetting]] = Field(default=None, alias="environmentSettings")
    id: StrictStr = Field(description="The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.")
    kill_job_on_completion: Optional[StrictBool] = Field(default=None, description="If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.", alias="killJobOnCompletion")
    output_files: Optional[List[OutputFile]] = Field(default=None, description="For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.", alias="outputFiles")
    resource_files: Optional[List[ResourceFile]] = Field(default=None, description="Files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.", alias="resourceFiles")
    run_exclusive: Optional[StrictBool] = Field(default=None, description="If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.", alias="runExclusive")
    user_identity: Optional[UserIdentity] = Field(default=None, alias="userIdentity")
    __properties: ClassVar[List[str]] = ["allowLowPriorityNode", "applicationPackageReferences", "authenticationTokenSettings", "commandLine", "constraints", "containerSettings", "displayName", "environmentSettings", "id", "killJobOnCompletion", "outputFiles", "resourceFiles", "runExclusive", "userIdentity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobManagerTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_package_references (list)
        _items = []
        if self.application_package_references:
            for _item_application_package_references in self.application_package_references:
                if _item_application_package_references:
                    _items.append(_item_application_package_references.to_dict())
            _dict['applicationPackageReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of authentication_token_settings
        if self.authentication_token_settings:
            _dict['authenticationTokenSettings'] = self.authentication_token_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_settings
        if self.container_settings:
            _dict['containerSettings'] = self.container_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environment_settings (list)
        _items = []
        if self.environment_settings:
            for _item_environment_settings in self.environment_settings:
                if _item_environment_settings:
                    _items.append(_item_environment_settings.to_dict())
            _dict['environmentSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_files (list)
        _items = []
        if self.output_files:
            for _item_output_files in self.output_files:
                if _item_output_files:
                    _items.append(_item_output_files.to_dict())
            _dict['outputFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_files (list)
        _items = []
        if self.resource_files:
            for _item_resource_files in self.resource_files:
                if _item_resource_files:
                    _items.append(_item_resource_files.to_dict())
            _dict['resourceFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_identity
        if self.user_identity:
            _dict['userIdentity'] = self.user_identity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobManagerTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowLowPriorityNode": obj.get("allowLowPriorityNode"),
            "applicationPackageReferences": [ApplicationPackageReference.from_dict(_item) for _item in obj["applicationPackageReferences"]] if obj.get("applicationPackageReferences") is not None else None,
            "authenticationTokenSettings": AuthenticationTokenSettings.from_dict(obj["authenticationTokenSettings"]) if obj.get("authenticationTokenSettings") is not None else None,
            "commandLine": obj.get("commandLine"),
            "constraints": TaskConstraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "containerSettings": TaskContainerSettings.from_dict(obj["containerSettings"]) if obj.get("containerSettings") is not None else None,
            "displayName": obj.get("displayName"),
            "environmentSettings": [EnvironmentSetting.from_dict(_item) for _item in obj["environmentSettings"]] if obj.get("environmentSettings") is not None else None,
            "id": obj.get("id"),
            "killJobOnCompletion": obj.get("killJobOnCompletion"),
            "outputFiles": [OutputFile.from_dict(_item) for _item in obj["outputFiles"]] if obj.get("outputFiles") is not None else None,
            "resourceFiles": [ResourceFile.from_dict(_item) for _item in obj["resourceFiles"]] if obj.get("resourceFiles") is not None else None,
            "runExclusive": obj.get("runExclusive"),
            "userIdentity": UserIdentity.from_dict(obj["userIdentity"]) if obj.get("userIdentity") is not None else None
        })
        return _obj



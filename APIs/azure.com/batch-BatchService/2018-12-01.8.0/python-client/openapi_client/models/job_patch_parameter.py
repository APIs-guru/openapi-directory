# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_constraints import JobConstraints
from openapi_client.models.metadata_item import MetadataItem
from openapi_client.models.on_all_tasks_complete import OnAllTasksComplete
from openapi_client.models.pool_information import PoolInformation
from typing import Optional, Set
from typing_extensions import Self

class JobPatchParameter(BaseModel):
    """
    JobPatchParameter
    """ # noqa: E501
    constraints: Optional[JobConstraints] = None
    metadata: Optional[List[MetadataItem]] = Field(default=None, description="If omitted, the existing job metadata is left unchanged.")
    on_all_tasks_complete: Optional[OnAllTasksComplete] = Field(default=None, alias="onAllTasksComplete")
    pool_info: Optional[PoolInformation] = Field(default=None, alias="poolInfo")
    priority: Optional[StrictInt] = Field(default=None, description="Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.")
    __properties: ClassVar[List[str]] = ["constraints", "metadata", "onAllTasksComplete", "poolInfo", "priority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobPatchParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of pool_info
        if self.pool_info:
            _dict['poolInfo'] = self.pool_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobPatchParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraints": JobConstraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "metadata": [MetadataItem.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "onAllTasksComplete": obj.get("onAllTasksComplete"),
            "poolInfo": PoolInformation.from_dict(obj["poolInfo"]) if obj.get("poolInfo") is not None else None,
            "priority": obj.get("priority")
        })
        return _obj



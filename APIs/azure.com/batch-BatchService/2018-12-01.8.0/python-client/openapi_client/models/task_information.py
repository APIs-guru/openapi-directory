# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2018-12-01.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.task_execution_information import TaskExecutionInformation
from openapi_client.models.task_state import TaskState
from typing import Optional, Set
from typing_extensions import Self

class TaskInformation(BaseModel):
    """
    TaskInformation
    """ # noqa: E501
    execution_info: Optional[TaskExecutionInformation] = Field(default=None, alias="executionInfo")
    job_id: Optional[StrictStr] = Field(default=None, alias="jobId")
    subtask_id: Optional[StrictInt] = Field(default=None, alias="subtaskId")
    task_id: Optional[StrictStr] = Field(default=None, alias="taskId")
    task_state: TaskState = Field(alias="taskState")
    task_url: Optional[StrictStr] = Field(default=None, alias="taskUrl")
    __properties: ClassVar[List[str]] = ["executionInfo", "jobId", "subtaskId", "taskId", "taskState", "taskUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_info
        if self.execution_info:
            _dict['executionInfo'] = self.execution_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionInfo": TaskExecutionInformation.from_dict(obj["executionInfo"]) if obj.get("executionInfo") is not None else None,
            "jobId": obj.get("jobId"),
            "subtaskId": obj.get("subtaskId"),
            "taskId": obj.get("taskId"),
            "taskState": obj.get("taskState"),
            "taskUrl": obj.get("taskUrl")
        })
        return _obj



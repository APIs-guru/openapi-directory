# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.task_container_execution_information import TaskContainerExecutionInformation
from openapi_client.models.task_execution_result import TaskExecutionResult
from openapi_client.models.task_failure_information import TaskFailureInformation
from typing import Optional, Set
from typing_extensions import Self

class JobReleaseTaskExecutionInformation(BaseModel):
    """
    JobReleaseTaskExecutionInformation
    """ # noqa: E501
    container_info: Optional[TaskContainerExecutionInformation] = Field(default=None, alias="containerInfo")
    end_time: Optional[datetime] = Field(default=None, description="This property is set only if the Task is in the Completed state.", alias="endTime")
    exit_code: Optional[StrictInt] = Field(default=None, description="This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated.", alias="exitCode")
    failure_info: Optional[TaskFailureInformation] = Field(default=None, alias="failureInfo")
    result: Optional[TaskExecutionResult] = None
    start_time: datetime = Field(description="If the Task has been restarted or retried, this is the most recent time at which the Task started running.", alias="startTime")
    state: StrictStr
    task_root_directory: Optional[StrictStr] = Field(default=None, alias="taskRootDirectory")
    task_root_directory_url: Optional[StrictStr] = Field(default=None, alias="taskRootDirectoryUrl")
    __properties: ClassVar[List[str]] = ["containerInfo", "endTime", "exitCode", "failureInfo", "result", "startTime", "state", "taskRootDirectory", "taskRootDirectoryUrl"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['running', 'completed']):
            raise ValueError("must be one of enum values ('running', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobReleaseTaskExecutionInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_info
        if self.container_info:
            _dict['containerInfo'] = self.container_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_info
        if self.failure_info:
            _dict['failureInfo'] = self.failure_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobReleaseTaskExecutionInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerInfo": TaskContainerExecutionInformation.from_dict(obj["containerInfo"]) if obj.get("containerInfo") is not None else None,
            "endTime": obj.get("endTime"),
            "exitCode": obj.get("exitCode"),
            "failureInfo": TaskFailureInformation.from_dict(obj["failureInfo"]) if obj.get("failureInfo") is not None else None,
            "result": obj.get("result"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "taskRootDirectory": obj.get("taskRootDirectory"),
            "taskRootDirectoryUrl": obj.get("taskRootDirectoryUrl")
        })
        return _obj



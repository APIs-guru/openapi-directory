# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_setting import EnvironmentSetting
from openapi_client.models.job_constraints import JobConstraints
from openapi_client.models.job_manager_task import JobManagerTask
from openapi_client.models.job_network_configuration import JobNetworkConfiguration
from openapi_client.models.job_preparation_task import JobPreparationTask
from openapi_client.models.job_release_task import JobReleaseTask
from openapi_client.models.metadata_item import MetadataItem
from openapi_client.models.on_all_tasks_complete import OnAllTasksComplete
from openapi_client.models.on_task_failure import OnTaskFailure
from openapi_client.models.pool_information import PoolInformation
from typing import Optional, Set
from typing_extensions import Self

class JobAddParameter(BaseModel):
    """
    JobAddParameter
    """ # noqa: E501
    common_environment_settings: Optional[List[EnvironmentSetting]] = Field(default=None, description="Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.", alias="commonEnvironmentSettings")
    constraints: Optional[JobConstraints] = None
    display_name: Optional[StrictStr] = Field(default=None, description="The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.", alias="displayName")
    id: StrictStr = Field(description="The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).")
    job_manager_task: Optional[JobManagerTask] = Field(default=None, alias="jobManagerTask")
    job_preparation_task: Optional[JobPreparationTask] = Field(default=None, alias="jobPreparationTask")
    job_release_task: Optional[JobReleaseTask] = Field(default=None, alias="jobReleaseTask")
    metadata: Optional[List[MetadataItem]] = Field(default=None, description="The Batch service does not assign any meaning to metadata; it is solely for the use of user code.")
    network_configuration: Optional[JobNetworkConfiguration] = Field(default=None, alias="networkConfiguration")
    on_all_tasks_complete: Optional[OnAllTasksComplete] = Field(default=None, alias="onAllTasksComplete")
    on_task_failure: Optional[OnTaskFailure] = Field(default=None, alias="onTaskFailure")
    pool_info: PoolInformation = Field(alias="poolInfo")
    priority: Optional[StrictInt] = Field(default=None, description="Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.")
    uses_task_dependencies: Optional[StrictBool] = Field(default=None, alias="usesTaskDependencies")
    __properties: ClassVar[List[str]] = ["commonEnvironmentSettings", "constraints", "displayName", "id", "jobManagerTask", "jobPreparationTask", "jobReleaseTask", "metadata", "networkConfiguration", "onAllTasksComplete", "onTaskFailure", "poolInfo", "priority", "usesTaskDependencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobAddParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in common_environment_settings (list)
        _items = []
        if self.common_environment_settings:
            for _item_common_environment_settings in self.common_environment_settings:
                if _item_common_environment_settings:
                    _items.append(_item_common_environment_settings.to_dict())
            _dict['commonEnvironmentSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_manager_task
        if self.job_manager_task:
            _dict['jobManagerTask'] = self.job_manager_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_preparation_task
        if self.job_preparation_task:
            _dict['jobPreparationTask'] = self.job_preparation_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_release_task
        if self.job_release_task:
            _dict['jobReleaseTask'] = self.job_release_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_configuration
        if self.network_configuration:
            _dict['networkConfiguration'] = self.network_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pool_info
        if self.pool_info:
            _dict['poolInfo'] = self.pool_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobAddParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonEnvironmentSettings": [EnvironmentSetting.from_dict(_item) for _item in obj["commonEnvironmentSettings"]] if obj.get("commonEnvironmentSettings") is not None else None,
            "constraints": JobConstraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "jobManagerTask": JobManagerTask.from_dict(obj["jobManagerTask"]) if obj.get("jobManagerTask") is not None else None,
            "jobPreparationTask": JobPreparationTask.from_dict(obj["jobPreparationTask"]) if obj.get("jobPreparationTask") is not None else None,
            "jobReleaseTask": JobReleaseTask.from_dict(obj["jobReleaseTask"]) if obj.get("jobReleaseTask") is not None else None,
            "metadata": [MetadataItem.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "networkConfiguration": JobNetworkConfiguration.from_dict(obj["networkConfiguration"]) if obj.get("networkConfiguration") is not None else None,
            "onAllTasksComplete": obj.get("onAllTasksComplete"),
            "onTaskFailure": obj.get("onTaskFailure"),
            "poolInfo": PoolInformation.from_dict(obj["poolInfo"]) if obj.get("poolInfo") is not None else None,
            "priority": obj.get("priority"),
            "usesTaskDependencies": obj.get("usesTaskDependencies")
        })
        return _obj



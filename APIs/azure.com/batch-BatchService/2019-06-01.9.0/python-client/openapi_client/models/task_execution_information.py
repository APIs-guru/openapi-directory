# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.task_container_execution_information import TaskContainerExecutionInformation
from openapi_client.models.task_execution_result import TaskExecutionResult
from openapi_client.models.task_failure_information import TaskFailureInformation
from typing import Optional, Set
from typing_extensions import Self

class TaskExecutionInformation(BaseModel):
    """
    TaskExecutionInformation
    """ # noqa: E501
    container_info: Optional[TaskContainerExecutionInformation] = Field(default=None, alias="containerInfo")
    end_time: Optional[datetime] = Field(default=None, description="This property is set only if the Task is in the Completed state.", alias="endTime")
    exit_code: Optional[StrictInt] = Field(default=None, description="This property is set only if the Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.", alias="exitCode")
    failure_info: Optional[TaskFailureInformation] = Field(default=None, alias="failureInfo")
    last_requeue_time: Optional[datetime] = Field(default=None, description="This property is set only if the requeueCount is nonzero.", alias="lastRequeueTime")
    last_retry_time: Optional[datetime] = Field(default=None, description="This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.", alias="lastRetryTime")
    requeue_count: StrictInt = Field(description="When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued for these reasons.", alias="requeueCount")
    result: Optional[TaskExecutionResult] = None
    retry_count: StrictInt = Field(description="Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints.", alias="retryCount")
    start_time: Optional[datetime] = Field(default=None, description="'Running' corresponds to the running state, so if the Task specifies resource files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If the Task has been restarted or retried, this is the most recent time at which the Task started running. This property is present only for Tasks that are in the running or completed state.", alias="startTime")
    __properties: ClassVar[List[str]] = ["containerInfo", "endTime", "exitCode", "failureInfo", "lastRequeueTime", "lastRetryTime", "requeueCount", "result", "retryCount", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskExecutionInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_info
        if self.container_info:
            _dict['containerInfo'] = self.container_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_info
        if self.failure_info:
            _dict['failureInfo'] = self.failure_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskExecutionInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerInfo": TaskContainerExecutionInformation.from_dict(obj["containerInfo"]) if obj.get("containerInfo") is not None else None,
            "endTime": obj.get("endTime"),
            "exitCode": obj.get("exitCode"),
            "failureInfo": TaskFailureInformation.from_dict(obj["failureInfo"]) if obj.get("failureInfo") is not None else None,
            "lastRequeueTime": obj.get("lastRequeueTime"),
            "lastRetryTime": obj.get("lastRetryTime"),
            "requeueCount": obj.get("requeueCount"),
            "result": obj.get("result"),
            "retryCount": obj.get("retryCount"),
            "startTime": obj.get("startTime")
        })
        return _obj



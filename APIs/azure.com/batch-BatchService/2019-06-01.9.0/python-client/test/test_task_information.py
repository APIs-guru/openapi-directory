# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.task_information import TaskInformation

class TestTaskInformation(unittest.TestCase):
    """TaskInformation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskInformation:
        """Test TaskInformation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskInformation`
        """
        model = TaskInformation()
        if include_optional:
            return TaskInformation(
                execution_info = openapi_client.models.information_about_the_execution_of_a_task/.Information about the execution of a Task.(
                    container_info = openapi_client.models.contains_information_about_the_container_which_a_task_is_executing/.Contains information about the container which a Task is executing.(
                        container_id = '', 
                        error = '', 
                        state = '', ), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    exit_code = 56, 
                    failure_info = openapi_client.models.information_about_a_task_failure/.Information about a Task failure.(
                        category = 'usererror', 
                        code = '', 
                        details = [
                            openapi_client.models.represents_a_name_value_pair/.Represents a name-value pair.(
                                name = '', 
                                value = '', )
                            ], 
                        message = '', ), 
                    last_requeue_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_retry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    requeue_count = 56, 
                    result = 'success', 
                    retry_count = 56, 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                job_id = '',
                subtask_id = 56,
                task_id = '',
                task_state = 'active',
                task_url = ''
            )
        else:
            return TaskInformation(
                task_state = 'active',
        )
        """

    def testTaskInformation(self):
        """Test TaskInformation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.network_configuration import NetworkConfiguration

class TestNetworkConfiguration(unittest.TestCase):
    """NetworkConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetworkConfiguration:
        """Test NetworkConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetworkConfiguration`
        """
        model = NetworkConfiguration()
        if include_optional:
            return NetworkConfiguration(
                dynamic_v_net_assignment_scope = 'none',
                endpoint_configuration = openapi_client.models.the_endpoint_configuration_for_a_pool/.The endpoint configuration for a Pool.(
                    inbound_nat_pools = [
                        openapi_client.models.a_inbound_nat_pool_that_can_be_used_to_address_specific_ports_on_compute_nodes_in_a_batch_pool_externally/.A inbound NAT Pool that can be used to address specific ports on Compute Nodes in a Batch Pool externally.(
                            backend_port = 56, 
                            frontend_port_range_end = 56, 
                            frontend_port_range_start = 56, 
                            name = '', 
                            network_security_group_rules = [
                                openapi_client.models.a_network_security_group_rule_to_apply_to_an_inbound_endpoint/.A network security group rule to apply to an inbound endpoint.(
                                    access = 'allow', 
                                    priority = 56, 
                                    source_address_prefix = '', 
                                    source_port_ranges = [
                                        ''
                                        ], )
                                ], 
                            protocol = 'tcp', )
                        ], ),
                subnet_id = ''
            )
        else:
            return NetworkConfiguration(
        )
        """

    def testNetworkConfiguration(self):
        """Test NetworkConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

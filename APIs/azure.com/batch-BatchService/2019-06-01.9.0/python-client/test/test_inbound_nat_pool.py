# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.inbound_nat_pool import InboundNATPool

class TestInboundNATPool(unittest.TestCase):
    """InboundNATPool unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InboundNATPool:
        """Test InboundNATPool
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InboundNATPool`
        """
        model = InboundNATPool()
        if include_optional:
            return InboundNATPool(
                backend_port = 56,
                frontend_port_range_end = 56,
                frontend_port_range_start = 56,
                name = '',
                network_security_group_rules = [
                    openapi_client.models.a_network_security_group_rule_to_apply_to_an_inbound_endpoint/.A network security group rule to apply to an inbound endpoint.(
                        access = 'allow', 
                        priority = 56, 
                        source_address_prefix = '', 
                        source_port_ranges = [
                            ''
                            ], )
                    ],
                protocol = 'tcp'
            )
        else:
            return InboundNATPool(
                backend_port = 56,
                frontend_port_range_end = 56,
                frontend_port_range_start = 56,
                name = '',
                protocol = 'tcp',
        )
        """

    def testInboundNATPool(self):
        """Test InboundNATPool"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.exit_conditions import ExitConditions

class TestExitConditions(unittest.TestCase):
    """ExitConditions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExitConditions:
        """Test ExitConditions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExitConditions`
        """
        model = ExitConditions()
        if include_optional:
            return ExitConditions(
                default = openapi_client.models.specifies_how_the_batch_service_responds_to_a_particular_exit_condition/.Specifies how the Batch service responds to a particular exit condition.(
                    dependency_action = 'satisfy', 
                    job_action = 'none', ),
                exit_code_ranges = [
                    openapi_client.models.a_range_of_exit_codes_and_how_the_batch_service_should_respond_to_exit_codes_within_that_range/.A range of exit codes and how the Batch service should respond to exit codes within that range.(
                        end = 56, 
                        exit_options = openapi_client.models.specifies_how_the_batch_service_responds_to_a_particular_exit_condition/.Specifies how the Batch service responds to a particular exit condition.(
                            dependency_action = 'satisfy', 
                            job_action = 'none', ), 
                        start = 56, )
                    ],
                exit_codes = [
                    openapi_client.models.how_the_batch_service_should_respond_if_a_task_exits_with_a_particular_exit_code/.How the Batch service should respond if a Task exits with a particular exit code.(
                        code = 56, 
                        exit_options = openapi_client.models.specifies_how_the_batch_service_responds_to_a_particular_exit_condition/.Specifies how the Batch service responds to a particular exit condition.(
                            dependency_action = 'satisfy', 
                            job_action = 'none', ), )
                    ],
                file_upload_error = openapi_client.models.specifies_how_the_batch_service_responds_to_a_particular_exit_condition/.Specifies how the Batch service responds to a particular exit condition.(
                    dependency_action = 'satisfy', 
                    job_action = 'none', ),
                pre_processing_error = openapi_client.models.specifies_how_the_batch_service_responds_to_a_particular_exit_condition/.Specifies how the Batch service responds to a particular exit condition.(
                    dependency_action = 'satisfy', 
                    job_action = 'none', )
            )
        else:
            return ExitConditions(
        )
        """

    def testExitConditions(self):
        """Test ExitConditions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

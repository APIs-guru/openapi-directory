# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_pool_list_result import CloudPoolListResult

class TestCloudPoolListResult(unittest.TestCase):
    """CloudPoolListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudPoolListResult:
        """Test CloudPoolListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudPoolListResult`
        """
        model = CloudPoolListResult()
        if include_optional:
            return CloudPoolListResult(
                odata_next_link = '',
                value = [
                    openapi_client.models.a_pool_in_the_azure_batch_service/.A Pool in the Azure Batch service.(
                        allocation_state = 'steady', 
                        allocation_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        application_licenses = [
                            ''
                            ], 
                        application_package_references = [
                            openapi_client.models.a_reference_to_an_package_to_be_deployed_to_compute_nodes/.A reference to an Package to be deployed to Compute Nodes.(
                                application_id = '', 
                                version = '', )
                            ], 
                        auto_scale_evaluation_interval = '', 
                        auto_scale_formula = '', 
                        auto_scale_run = openapi_client.models.the_results_and_errors_from_an_execution_of_a_pool_autoscale_formula/.The results and errors from an execution of a Pool autoscale formula.(
                            error = openapi_client.models.an_error_that_occurred_when_executing_or_evaluating_a_pool_autoscale_formula/.An error that occurred when executing or evaluating a Pool autoscale formula.(
                                code = '', 
                                message = '', 
                                values = [
                                    openapi_client.models.represents_a_name_value_pair/.Represents a name-value pair.(
                                        name = '', 
                                        value = '', )
                                    ], ), 
                            results = '', 
                            timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        certificate_references = [
                            openapi_client.models.a_reference_to_a_certificate_to_be_installed_on_compute_nodes_in_a_pool/.A reference to a Certificate to be installed on Compute Nodes in a Pool.(
                                store_location = 'currentuser', 
                                store_name = '', 
                                thumbprint = '', 
                                thumbprint_algorithm = '', 
                                visibility = [
                                    'starttask'
                                    ], )
                            ], 
                        cloud_service_configuration = openapi_client.models.the_configuration_for_compute_nodes_in_a_pool_based_on_the_azure_cloud_services_platform/.The configuration for Compute Nodes in a Pool based on the Azure Cloud Services platform.(
                            os_family = '', 
                            os_version = '', ), 
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_dedicated_nodes = 56, 
                        current_low_priority_nodes = 56, 
                        display_name = '', 
                        e_tag = '', 
                        enable_auto_scale = True, 
                        enable_inter_node_communication = True, 
                        id = '', 
                        last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        max_tasks_per_node = 56, 
                        metadata = [
                            openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                                name = '', 
                                value = '', )
                            ], 
                        network_configuration = openapi_client.models.network_configuration.NetworkConfiguration(
                            dynamic_v_net_assignment_scope = 'none', 
                            endpoint_configuration = openapi_client.models.the_endpoint_configuration_for_a_pool/.The endpoint configuration for a Pool.(
                                inbound_nat_pools = [
                                    openapi_client.models.a_inbound_nat_pool_that_can_be_used_to_address_specific_ports_on_compute_nodes_in_a_batch_pool_externally/.A inbound NAT Pool that can be used to address specific ports on Compute Nodes in a Batch Pool externally.(
                                        backend_port = 56, 
                                        frontend_port_range_end = 56, 
                                        frontend_port_range_start = 56, 
                                        name = '', 
                                        network_security_group_rules = [
                                            openapi_client.models.a_network_security_group_rule_to_apply_to_an_inbound_endpoint/.A network security group rule to apply to an inbound endpoint.(
                                                access = 'allow', 
                                                priority = 56, 
                                                source_address_prefix = '', 
                                                source_port_ranges = [
                                                    ''
                                                    ], )
                                            ], 
                                        protocol = 'tcp', )
                                    ], ), 
                            subnet_id = '', ), 
                        resize_errors = [
                            openapi_client.models.an_error_that_occurred_when_resizing_a_pool/.An error that occurred when resizing a Pool.(
                                code = '', 
                                message = '', 
                                values = [
                                    openapi_client.models.represents_a_name_value_pair/.Represents a name-value pair.(
                                        name = '', 
                                        value = '', )
                                    ], )
                            ], 
                        resize_timeout = '', 
                        start_task = openapi_client.models.a_task_which_is_run_when_a_node_joins_a_pool_in_the_azure_batch_service,_or_when_the_compute_node_is_rebooted_or_reimaged/.A Task which is run when a Node joins a Pool in the Azure Batch service, or when the Compute Node is rebooted or reimaged.(
                            command_line = '', 
                            container_settings = openapi_client.models.the_container_settings_for_a_task/.The container settings for a Task.(
                                container_run_options = '', 
                                image_name = '', 
                                registry = openapi_client.models.a_private_container_registry/.A private container registry.(
                                    password = '', 
                                    registry_server = '', 
                                    username = '', ), 
                                working_directory = 'taskWorkingDirectory', ), 
                            environment_settings = [
                                openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a Task process.(
                                    name = '', 
                                    value = '', )
                                ], 
                            max_task_retry_count = 56, 
                            resource_files = [
                                openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a Compute Node.(
                                    auto_storage_container_name = '', 
                                    blob_prefix = '', 
                                    file_mode = '', 
                                    file_path = '', 
                                    http_url = '', 
                                    storage_container_url = '', )
                                ], 
                            user_identity = openapi_client.models.the_definition_of_the_user_identity_under_which_the_task_is_run/.The definition of the user identity under which the Task is run.(
                                auto_user = openapi_client.models.specifies_the_parameters_for_the_auto_user_that_runs_a_task_on_the_batch_service/.Specifies the parameters for the auto user that runs a Task on the Batch service.(
                                    elevation_level = 'nonadmin', 
                                    scope = 'task', ), 
                                username = '', ), 
                            wait_for_success = True, ), 
                        state = 'active', 
                        state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        stats = openapi_client.models.contains_utilization_and_resource_usage_statistics_for_the_lifetime_of_a_pool/.Contains utilization and resource usage statistics for the lifetime of a Pool.(
                            last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            resource_stats = openapi_client.models.statistics_related_to_resource_consumption_by_compute_nodes_in_a_pool/.Statistics related to resource consumption by Compute Nodes in a Pool.(
                                avg_cpu_percentage = 1.337, 
                                avg_disk_gi_b = 1.337, 
                                avg_memory_gi_b = 1.337, 
                                disk_read_gi_b = 1.337, 
                                disk_read_i_ops = 56, 
                                disk_write_gi_b = 1.337, 
                                disk_write_i_ops = 56, 
                                last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                network_read_gi_b = 1.337, 
                                network_write_gi_b = 1.337, 
                                peak_disk_gi_b = 1.337, 
                                peak_memory_gi_b = 1.337, 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            url = '', 
                            usage_stats = openapi_client.models.statistics_related_to_pool_usage_information/.Statistics related to Pool usage information.(
                                dedicated_core_time = '', 
                                last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), 
                        target_dedicated_nodes = 56, 
                        target_low_priority_nodes = 56, 
                        task_scheduling_policy = openapi_client.models.specifies_how_tasks_should_be_distributed_across_compute_nodes/.Specifies how Tasks should be distributed across Compute Nodes.(
                            node_fill_type = 'spread', ), 
                        url = '', 
                        user_accounts = [
                            openapi_client.models.properties_used_to_create_a_user_used_to_execute_tasks_on_an_azure_batch_compute_node/.Properties used to create a user used to execute Tasks on an Azure Batch Compute Node.(
                                linux_user_configuration = openapi_client.models.properties_used_to_create_a_user_account_on_a_linux_compute_node/.Properties used to create a user Account on a Linux Compute Node.(
                                    gid = 56, 
                                    ssh_private_key = '', 
                                    uid = 56, ), 
                                name = '', 
                                password = '', 
                                windows_user_configuration = openapi_client.models.properties_used_to_create_a_user_account_on_a_windows_compute_node/.Properties used to create a user Account on a Windows Compute Node.(
                                    login_mode = 'batch', ), )
                            ], 
                        virtual_machine_configuration = openapi_client.models.the_configuration_for_compute_nodes_in_a_pool_based_on_the_azure_virtual_machines_infrastructure/.The configuration for Compute Nodes in a Pool based on the Azure Virtual Machines infrastructure.(
                            container_configuration = openapi_client.models.the_configuration_for_container_enabled_pools/.The configuration for container-enabled Pools.(
                                container_image_names = [
                                    ''
                                    ], 
                                container_registries = [
                                    openapi_client.models.a_private_container_registry/.A private container registry.(
                                        password = '', 
                                        registry_server = '', 
                                        username = '', )
                                    ], 
                                type = 'dockerCompatible', ), 
                            data_disks = [
                                openapi_client.models.settings_which_will_be_used_by_the_data_disks_associated_to_compute_nodes_in_the_pool/.Settings which will be used by the data disks associated to Compute Nodes in the Pool.(
                                    caching = 'none', 
                                    disk_size_gb = 56, 
                                    lun = 56, 
                                    storage_account_type = 'standard_lrs', )
                                ], 
                            image_reference = openapi_client.models.a_reference_to_an_azure_virtual_machines_marketplace_image_or_a_custom_azure_virtual_machine_image/_to_get_the_list_of_all_azure_marketplace_image_references_verified_by_azure_batch,_see_the_'list_supported_images'_operation/.A reference to an Azure Virtual Machines Marketplace Image or a custom Azure Virtual Machine Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List supported Images' operation.(
                                offer = '', 
                                publisher = '', 
                                sku = '', 
                                version = '', 
                                virtual_machine_image_id = '', ), 
                            license_type = '', 
                            node_agent_skuid = '', 
                            windows_configuration = openapi_client.models.windows_operating_system_settings_to_apply_to_the_virtual_machine/.Windows operating system settings to apply to the virtual machine.(
                                enable_automatic_updates = True, ), ), 
                        vm_size = '', )
                    ]
            )
        else:
            return CloudPoolListResult(
        )
        """

    def testCloudPoolListResult(self):
        """Test CloudPoolListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-06-01.9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pool_update_properties_parameter import PoolUpdatePropertiesParameter

class TestPoolUpdatePropertiesParameter(unittest.TestCase):
    """PoolUpdatePropertiesParameter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PoolUpdatePropertiesParameter:
        """Test PoolUpdatePropertiesParameter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PoolUpdatePropertiesParameter`
        """
        model = PoolUpdatePropertiesParameter()
        if include_optional:
            return PoolUpdatePropertiesParameter(
                application_package_references = [
                    openapi_client.models.a_reference_to_an_package_to_be_deployed_to_compute_nodes/.A reference to an Package to be deployed to Compute Nodes.(
                        application_id = '', 
                        version = '', )
                    ],
                certificate_references = [
                    openapi_client.models.a_reference_to_a_certificate_to_be_installed_on_compute_nodes_in_a_pool/.A reference to a Certificate to be installed on Compute Nodes in a Pool.(
                        store_location = 'currentuser', 
                        store_name = '', 
                        thumbprint = '', 
                        thumbprint_algorithm = '', 
                        visibility = [
                            'starttask'
                            ], )
                    ],
                metadata = [
                    openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                        name = '', 
                        value = '', )
                    ],
                start_task = openapi_client.models.a_task_which_is_run_when_a_node_joins_a_pool_in_the_azure_batch_service,_or_when_the_compute_node_is_rebooted_or_reimaged/.A Task which is run when a Node joins a Pool in the Azure Batch service, or when the Compute Node is rebooted or reimaged.(
                    command_line = '', 
                    container_settings = openapi_client.models.the_container_settings_for_a_task/.The container settings for a Task.(
                        container_run_options = '', 
                        image_name = '', 
                        registry = openapi_client.models.a_private_container_registry/.A private container registry.(
                            password = '', 
                            registry_server = '', 
                            username = '', ), 
                        working_directory = 'taskWorkingDirectory', ), 
                    environment_settings = [
                        openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a Task process.(
                            name = '', 
                            value = '', )
                        ], 
                    max_task_retry_count = 56, 
                    resource_files = [
                        openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a Compute Node.(
                            auto_storage_container_name = '', 
                            blob_prefix = '', 
                            file_mode = '', 
                            file_path = '', 
                            http_url = '', 
                            storage_container_url = '', )
                        ], 
                    user_identity = openapi_client.models.the_definition_of_the_user_identity_under_which_the_task_is_run/.The definition of the user identity under which the Task is run.(
                        auto_user = openapi_client.models.specifies_the_parameters_for_the_auto_user_that_runs_a_task_on_the_batch_service/.Specifies the parameters for the auto user that runs a Task on the Batch service.(
                            elevation_level = 'nonadmin', 
                            scope = 'task', ), 
                        username = '', ), 
                    wait_for_success = True, )
            )
        else:
            return PoolUpdatePropertiesParameter(
                application_package_references = [
                    openapi_client.models.a_reference_to_an_package_to_be_deployed_to_compute_nodes/.A reference to an Package to be deployed to Compute Nodes.(
                        application_id = '', 
                        version = '', )
                    ],
                certificate_references = [
                    openapi_client.models.a_reference_to_a_certificate_to_be_installed_on_compute_nodes_in_a_pool/.A reference to a Certificate to be installed on Compute Nodes in a Pool.(
                        store_location = 'currentuser', 
                        store_name = '', 
                        thumbprint = '', 
                        thumbprint_algorithm = '', 
                        visibility = [
                            'starttask'
                            ], )
                    ],
                metadata = [
                    openapi_client.models.a_name_value_pair_associated_with_a_batch_service_resource/.A name-value pair associated with a Batch service resource.(
                        name = '', 
                        value = '', )
                    ],
        )
        """

    def testPoolUpdatePropertiesParameter(self):
        """Test PoolUpdatePropertiesParameter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

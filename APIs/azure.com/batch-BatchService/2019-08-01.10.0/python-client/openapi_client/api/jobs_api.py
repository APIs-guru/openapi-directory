# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.cloud_job import CloudJob
from openapi_client.models.cloud_job_list_preparation_and_release_task_status_result import CloudJobListPreparationAndReleaseTaskStatusResult
from openapi_client.models.cloud_job_list_result import CloudJobListResult
from openapi_client.models.job_add_parameter import JobAddParameter
from openapi_client.models.job_disable_parameter import JobDisableParameter
from openapi_client.models.job_patch_parameter import JobPatchParameter
from openapi_client.models.job_statistics import JobStatistics
from openapi_client.models.job_terminate_parameter import JobTerminateParameter
from openapi_client.models.job_update_parameter import JobUpdateParameter
from openapi_client.models.task_counts import TaskCounts

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class JobsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def job_add(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job: Annotated[JobAddParameter, Field(description="The Job to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Adds a Job to the specified Account.

        The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.

        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job: The Job to be added. (required)
        :type job: JobAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_add_serialize(
            api_version=api_version,
            job=job,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_add_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job: Annotated[JobAddParameter, Field(description="The Job to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Adds a Job to the specified Account.

        The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.

        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job: The Job to be added. (required)
        :type job: JobAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_add_serialize(
            api_version=api_version,
            job=job,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_add_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job: Annotated[JobAddParameter, Field(description="The Job to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Adds a Job to the specified Account.

        The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.

        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job: The Job to be added. (required)
        :type job: JobAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_add_serialize(
            api_version=api_version,
            job=job,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_add_serialize(
        self,
        api_version,
        job,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter
        if job is not None:
            _body_params = job


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_delete(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to delete.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a Job.

        Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted.

        :param job_id: The ID of the Job to delete. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_delete_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_delete_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to delete.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a Job.

        Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted.

        :param job_id: The ID of the Job to delete. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_delete_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_delete_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to delete.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a Job.

        Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks' working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted.

        :param job_id: The ID of the Job to delete. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_delete_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_delete_serialize(
        self,
        job_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/jobs/{jobId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_disable(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to disable.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_disable_parameter: Annotated[JobDisableParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Disables the specified Job, preventing new Tasks from running.

        The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409.

        :param job_id: The ID of the Job to disable. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_disable_parameter: The parameters for the request. (required)
        :type job_disable_parameter: JobDisableParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_disable_serialize(
            job_id=job_id,
            api_version=api_version,
            job_disable_parameter=job_disable_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_disable_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to disable.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_disable_parameter: Annotated[JobDisableParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Disables the specified Job, preventing new Tasks from running.

        The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409.

        :param job_id: The ID of the Job to disable. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_disable_parameter: The parameters for the request. (required)
        :type job_disable_parameter: JobDisableParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_disable_serialize(
            job_id=job_id,
            api_version=api_version,
            job_disable_parameter=job_disable_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_disable_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to disable.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_disable_parameter: Annotated[JobDisableParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disables the specified Job, preventing new Tasks from running.

        The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409.

        :param job_id: The ID of the Job to disable. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_disable_parameter: The parameters for the request. (required)
        :type job_disable_parameter: JobDisableParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_disable_serialize(
            job_id=job_id,
            api_version=api_version,
            job_disable_parameter=job_disable_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_disable_serialize(
        self,
        job_id,
        api_version,
        job_disable_parameter,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter
        if job_disable_parameter is not None:
            _body_params = job_disable_parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/disable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_enable(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to enable.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Enables the specified Job, allowing new Tasks to run.

        When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.

        :param job_id: The ID of the Job to enable. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_enable_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_enable_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to enable.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Enables the specified Job, allowing new Tasks to run.

        When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.

        :param job_id: The ID of the Job to enable. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_enable_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_enable_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to enable.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Enables the specified Job, allowing new Tasks to run.

        When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.

        :param job_id: The ID of the Job to enable. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_enable_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_enable_serialize(
        self,
        job_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/enable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_get(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudJob:
        """Gets information about the specified Job.


        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_serialize(
            job_id=job_id,
            api_version=api_version,
            select=select,
            expand=expand,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJob",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_get_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudJob]:
        """Gets information about the specified Job.


        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_serialize(
            job_id=job_id,
            api_version=api_version,
            select=select,
            expand=expand,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJob",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_get_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets information about the specified Job.


        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_serialize(
            job_id=job_id,
            api_version=api_version,
            select=select,
            expand=expand,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJob",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_get_serialize(
        self,
        job_id,
        api_version,
        select,
        expand,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs/{jobId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_get_all_lifetime_statistics(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> JobStatistics:
        """Gets lifetime summary statistics for all of the Jobs in the specified Account.

        Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.

        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_all_lifetime_statistics_serialize(
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobStatistics",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_get_all_lifetime_statistics_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[JobStatistics]:
        """Gets lifetime summary statistics for all of the Jobs in the specified Account.

        Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.

        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_all_lifetime_statistics_serialize(
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobStatistics",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_get_all_lifetime_statistics_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets lifetime summary statistics for all of the Jobs in the specified Account.

        Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.

        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_all_lifetime_statistics_serialize(
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobStatistics",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_get_all_lifetime_statistics_serialize(
        self,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/lifetimejobstats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_get_task_counts(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TaskCounts:
        """Gets the Task counts for the specified Job.

        Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running.

        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_task_counts_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TaskCounts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_get_task_counts_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TaskCounts]:
        """Gets the Task counts for the specified Job.

        Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running.

        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_task_counts_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TaskCounts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_get_task_counts_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the Task counts for the specified Job.

        Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running.

        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_get_task_counts_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TaskCounts",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_get_task_counts_serialize(
        self,
        job_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs/{jobId}/taskcounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_list(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudJobListResult:
        """Lists all of the Jobs in the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_serialize(
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudJobListResult]:
        """Lists all of the Jobs in the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_serialize(
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists all of the Jobs in the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_serialize(
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_list_serialize(
        self,
        api_version,
        filter,
        select,
        expand,
        maxresults,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if maxresults is not None:
            
            _query_params.append(('maxresults', maxresults))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_list_from_job_schedule(
        self,
        job_schedule_id: Annotated[StrictStr, Field(description="The ID of the Job Schedule from which you want to get a list of Jobs.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudJobListResult:
        """Lists the Jobs that have been created under the specified Job Schedule.


        :param job_schedule_id: The ID of the Job Schedule from which you want to get a list of Jobs. (required)
        :type job_schedule_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_from_job_schedule_serialize(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_list_from_job_schedule_with_http_info(
        self,
        job_schedule_id: Annotated[StrictStr, Field(description="The ID of the Job Schedule from which you want to get a list of Jobs.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudJobListResult]:
        """Lists the Jobs that have been created under the specified Job Schedule.


        :param job_schedule_id: The ID of the Job Schedule from which you want to get a list of Jobs. (required)
        :type job_schedule_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_from_job_schedule_serialize(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_list_from_job_schedule_without_preload_content(
        self,
        job_schedule_id: Annotated[StrictStr, Field(description="The ID of the Job Schedule from which you want to get a list of Jobs.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="An OData $expand clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists the Jobs that have been created under the specified Job Schedule.


        :param job_schedule_id: The ID of the Job Schedule from which you want to get a list of Jobs. (required)
        :type job_schedule_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param expand: An OData $expand clause.
        :type expand: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_from_job_schedule_serialize(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            filter=filter,
            select=select,
            expand=expand,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_list_from_job_schedule_serialize(
        self,
        job_schedule_id,
        api_version,
        filter,
        select,
        expand,
        maxresults,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_schedule_id is not None:
            _path_params['jobScheduleId'] = job_schedule_id
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if maxresults is not None:
            
            _query_params.append(('maxresults', maxresults))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobschedules/{jobScheduleId}/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_list_preparation_and_release_task_status(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CloudJobListPreparationAndReleaseTaskStatusResult:
        """Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.

        This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.

        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_preparation_and_release_task_status_serialize(
            job_id=job_id,
            api_version=api_version,
            filter=filter,
            select=select,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListPreparationAndReleaseTaskStatusResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_list_preparation_and_release_task_status_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CloudJobListPreparationAndReleaseTaskStatusResult]:
        """Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.

        This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.

        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_preparation_and_release_task_status_serialize(
            job_id=job_id,
            api_version=api_version,
            filter=filter,
            select=select,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListPreparationAndReleaseTaskStatusResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_list_preparation_and_release_task_status_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.

        This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.

        :param job_id: The ID of the Job. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_list_preparation_and_release_task_status_serialize(
            job_id=job_id,
            api_version=api_version,
            filter=filter,
            select=select,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CloudJobListPreparationAndReleaseTaskStatusResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_list_preparation_and_release_task_status_serialize(
        self,
        job_id,
        api_version,
        filter,
        select,
        maxresults,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if maxresults is not None:
            
            _query_params.append(('maxresults', maxresults))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/jobs/{jobId}/jobpreparationandreleasetaskstatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_patch(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job whose properties you want to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_patch_parameter: Annotated[JobPatchParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Updates the properties of the specified Job.

        This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_patch_parameter: The parameters for the request. (required)
        :type job_patch_parameter: JobPatchParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_patch_serialize(
            job_id=job_id,
            api_version=api_version,
            job_patch_parameter=job_patch_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_patch_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job whose properties you want to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_patch_parameter: Annotated[JobPatchParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Updates the properties of the specified Job.

        This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_patch_parameter: The parameters for the request. (required)
        :type job_patch_parameter: JobPatchParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_patch_serialize(
            job_id=job_id,
            api_version=api_version,
            job_patch_parameter=job_patch_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_patch_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job whose properties you want to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_patch_parameter: Annotated[JobPatchParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates the properties of the specified Job.

        This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_patch_parameter: The parameters for the request. (required)
        :type job_patch_parameter: JobPatchParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_patch_serialize(
            job_id=job_id,
            api_version=api_version,
            job_patch_parameter=job_patch_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_patch_serialize(
        self,
        job_id,
        api_version,
        job_patch_parameter,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter
        if job_patch_parameter is not None:
            _body_params = job_patch_parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/jobs/{jobId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_terminate(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to terminate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        job_terminate_parameter: Annotated[Optional[JobTerminateParameter], Field(description="The parameters for the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Terminates the specified Job, marking it as completed.

        When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled.

        :param job_id: The ID of the Job to terminate. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param job_terminate_parameter: The parameters for the request.
        :type job_terminate_parameter: JobTerminateParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_terminate_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            job_terminate_parameter=job_terminate_parameter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_terminate_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to terminate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        job_terminate_parameter: Annotated[Optional[JobTerminateParameter], Field(description="The parameters for the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Terminates the specified Job, marking it as completed.

        When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled.

        :param job_id: The ID of the Job to terminate. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param job_terminate_parameter: The parameters for the request.
        :type job_terminate_parameter: JobTerminateParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_terminate_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            job_terminate_parameter=job_terminate_parameter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_terminate_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job to terminate.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        job_terminate_parameter: Annotated[Optional[JobTerminateParameter], Field(description="The parameters for the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Terminates the specified Job, marking it as completed.

        When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled.

        :param job_id: The ID of the Job to terminate. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param job_terminate_parameter: The parameters for the request.
        :type job_terminate_parameter: JobTerminateParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_terminate_serialize(
            job_id=job_id,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            job_terminate_parameter=job_terminate_parameter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_terminate_serialize(
        self,
        job_id,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        job_terminate_parameter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter
        if job_terminate_parameter is not None:
            _body_params = job_terminate_parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/jobs/{jobId}/terminate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def job_update(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job whose properties you want to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_update_parameter: Annotated[JobUpdateParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Updates the properties of the specified Job.

        This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_update_parameter: The parameters for the request. (required)
        :type job_update_parameter: JobUpdateParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_update_serialize(
            job_id=job_id,
            api_version=api_version,
            job_update_parameter=job_update_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def job_update_with_http_info(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job whose properties you want to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_update_parameter: Annotated[JobUpdateParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Updates the properties of the specified Job.

        This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_update_parameter: The parameters for the request. (required)
        :type job_update_parameter: JobUpdateParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_update_serialize(
            job_id=job_id,
            api_version=api_version,
            job_update_parameter=job_update_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def job_update_without_preload_content(
        self,
        job_id: Annotated[StrictStr, Field(description="The ID of the Job whose properties you want to update.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        job_update_parameter: Annotated[JobUpdateParameter, Field(description="The parameters for the request.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        if_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.")] = None,
        if_modified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.")] = None,
        if_unmodified_since: Annotated[Optional[StrictStr], Field(description="A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates the properties of the specified Job.

        This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. (required)
        :type job_id: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param job_update_parameter: The parameters for the request. (required)
        :type job_update_parameter: JobUpdateParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param if_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
        :type if_match: str
        :param if_none_match: An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
        :type if_none_match: str
        :param if_modified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
        :type if_modified_since: str
        :param if_unmodified_since: A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
        :type if_unmodified_since: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._job_update_serialize(
            job_id=job_id,
            api_version=api_version,
            job_update_parameter=job_update_parameter,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            if_match=if_match,
            if_none_match=if_none_match,
            if_modified_since=if_modified_since,
            if_unmodified_since=if_unmodified_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _job_update_serialize(
        self,
        job_id,
        api_version,
        job_update_parameter,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        if_match,
        if_none_match,
        if_modified_since,
        if_unmodified_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if job_id is not None:
            _path_params['jobId'] = job_id
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if if_modified_since is not None:
            _header_params['If-Modified-Since'] = if_modified_since
        if if_unmodified_since is not None:
            _header_params['If-Unmodified-Since'] = if_unmodified_since
        # process the form parameters
        # process the body parameter
        if job_update_parameter is not None:
            _body_params = job_update_parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/jobs/{jobId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



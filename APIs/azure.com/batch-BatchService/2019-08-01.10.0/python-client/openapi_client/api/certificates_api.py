# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.certificate import Certificate
from openapi_client.models.certificate_add_parameter import CertificateAddParameter
from openapi_client.models.certificate_list_result import CertificateListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CertificatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def certificate_add(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        certificate: Annotated[CertificateAddParameter, Field(description="The Certificate to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Adds a Certificate to the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param certificate: The Certificate to be added. (required)
        :type certificate: CertificateAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_add_serialize(
            api_version=api_version,
            certificate=certificate,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificate_add_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        certificate: Annotated[CertificateAddParameter, Field(description="The Certificate to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Adds a Certificate to the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param certificate: The Certificate to be added. (required)
        :type certificate: CertificateAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_add_serialize(
            api_version=api_version,
            certificate=certificate,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificate_add_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        certificate: Annotated[CertificateAddParameter, Field(description="The Certificate to be added.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Adds a Certificate to the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param certificate: The Certificate to be added. (required)
        :type certificate: CertificateAddParameter
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_add_serialize(
            api_version=api_version,
            certificate=certificate,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificate_add_serialize(
        self,
        api_version,
        certificate,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter
        if certificate is not None:
            _body_params = certificate


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; odata=minimalmetadata'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/certificates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificate_cancel_deletion(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate being deleted.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancels a failed deletion of a Certificate from the specified Account.

        If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate being deleted. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_cancel_deletion_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificate_cancel_deletion_with_http_info(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate being deleted.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancels a failed deletion of a Certificate from the specified Account.

        If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate being deleted. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_cancel_deletion_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificate_cancel_deletion_without_preload_content(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate being deleted.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancels a failed deletion of a Certificate from the specified Account.

        If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate being deleted. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_cancel_deletion_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificate_cancel_deletion_serialize(
        self,
        thumbprint_algorithm,
        thumbprint,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if thumbprint_algorithm is not None:
            _path_params['thumbprintAlgorithm'] = thumbprint_algorithm
        if thumbprint is not None:
            _path_params['thumbprint'] = thumbprint
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificate_delete(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate to be deleted.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes a Certificate from the specified Account.

        You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate to be deleted. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_delete_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificate_delete_with_http_info(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate to be deleted.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes a Certificate from the specified Account.

        You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate to be deleted. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_delete_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificate_delete_without_preload_content(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate to be deleted.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes a Certificate from the specified Account.

        You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate to be deleted. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_delete_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificate_delete_serialize(
        self,
        thumbprint_algorithm,
        thumbprint,
        api_version,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if thumbprint_algorithm is not None:
            _path_params['thumbprintAlgorithm'] = thumbprint_algorithm
        if thumbprint is not None:
            _path_params['thumbprint'] = thumbprint
        # process the query parameters
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificate_get(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate to get.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Certificate:
        """certificate_get

        Gets information about the specified Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate to get. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_get_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            select=select,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Certificate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificate_get_with_http_info(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate to get.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Certificate]:
        """certificate_get

        Gets information about the specified Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate to get. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_get_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            select=select,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Certificate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificate_get_without_preload_content(
        self,
        thumbprint_algorithm: Annotated[StrictStr, Field(description="The algorithm used to derive the thumbprint parameter. This must be sha1.")],
        thumbprint: Annotated[StrictStr, Field(description="The thumbprint of the Certificate to get.")],
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """certificate_get

        Gets information about the specified Certificate.

        :param thumbprint_algorithm: The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
        :type thumbprint_algorithm: str
        :param thumbprint: The thumbprint of the Certificate to get. (required)
        :type thumbprint: str
        :param api_version: Client API Version. (required)
        :type api_version: str
        :param select: An OData $select clause.
        :type select: str
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_get_serialize(
            thumbprint_algorithm=thumbprint_algorithm,
            thumbprint=thumbprint,
            api_version=api_version,
            select=select,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Certificate",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificate_get_serialize(
        self,
        thumbprint_algorithm,
        thumbprint,
        api_version,
        select,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if thumbprint_algorithm is not None:
            _path_params['thumbprintAlgorithm'] = thumbprint_algorithm
        if thumbprint is not None:
            _path_params['thumbprint'] = thumbprint
        # process the query parameters
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def certificate_list(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateListResult:
        """Lists all of the Certificates that have been added to the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_list_serialize(
            api_version=api_version,
            filter=filter,
            select=select,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def certificate_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateListResult]:
        """Lists all of the Certificates that have been added to the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_list_serialize(
            api_version=api_version,
            filter=filter,
            select=select,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def certificate_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client API Version.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="An OData $select clause.")] = None,
        maxresults: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.")] = None,
        timeout: Annotated[Optional[StrictInt], Field(description="The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.")] = None,
        client_request_id: Annotated[Optional[StrictStr], Field(description="The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")] = None,
        return_client_request_id: Annotated[Optional[StrictBool], Field(description="Whether the server should return the client-request-id in the response.")] = None,
        ocp_date: Annotated[Optional[StrictStr], Field(description="The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lists all of the Certificates that have been added to the specified Account.


        :param api_version: Client API Version. (required)
        :type api_version: str
        :param filter: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        :type filter: str
        :param select: An OData $select clause.
        :type select: str
        :param maxresults: The maximum number of items to return in the response. A maximum of 1000 Certificates can be returned.
        :type maxresults: int
        :param timeout: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
        :type timeout: int
        :param client_request_id: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        :type client_request_id: str
        :param return_client_request_id: Whether the server should return the client-request-id in the response.
        :type return_client_request_id: bool
        :param ocp_date: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
        :type ocp_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._certificate_list_serialize(
            api_version=api_version,
            filter=filter,
            select=select,
            maxresults=maxresults,
            timeout=timeout,
            client_request_id=client_request_id,
            return_client_request_id=return_client_request_id,
            ocp_date=ocp_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _certificate_list_serialize(
        self,
        api_version,
        filter,
        select,
        maxresults,
        timeout,
        client_request_id,
        return_client_request_id,
        ocp_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if maxresults is not None:
            
            _query_params.append(('maxresults', maxresults))
            
        if timeout is not None:
            
            _query_params.append(('timeout', timeout))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if client_request_id is not None:
            _header_params['client-request-id'] = client_request_id
        if return_client_request_id is not None:
            _header_params['return-client-request-id'] = return_client_request_id
        if ocp_date is not None:
            _header_params['ocp-date'] = ocp_date
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/certificates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



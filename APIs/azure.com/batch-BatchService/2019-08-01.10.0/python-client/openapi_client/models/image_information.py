# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_reference import ImageReference
from typing import Optional, Set
from typing_extensions import Self

class ImageInformation(BaseModel):
    """
    ImageInformation
    """ # noqa: E501
    batch_support_end_of_life: Optional[datetime] = Field(default=None, alias="batchSupportEndOfLife")
    capabilities: Optional[List[StrictStr]] = Field(default=None, description="Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service.")
    image_reference: ImageReference = Field(alias="imageReference")
    node_agent_skuid: StrictStr = Field(alias="nodeAgentSKUId")
    os_type: StrictStr = Field(alias="osType")
    verification_type: StrictStr = Field(alias="verificationType")
    __properties: ClassVar[List[str]] = ["batchSupportEndOfLife", "capabilities", "imageReference", "nodeAgentSKUId", "osType", "verificationType"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['linux', 'windows']):
            raise ValueError("must be one of enum values ('linux', 'windows')")
        return value

    @field_validator('verification_type')
    def verification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['verified', 'unverified']):
            raise ValueError("must be one of enum values ('verified', 'unverified')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_reference
        if self.image_reference:
            _dict['imageReference'] = self.image_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchSupportEndOfLife": obj.get("batchSupportEndOfLife"),
            "capabilities": obj.get("capabilities"),
            "imageReference": ImageReference.from_dict(obj["imageReference"]) if obj.get("imageReference") is not None else None,
            "nodeAgentSKUId": obj.get("nodeAgentSKUId"),
            "osType": obj.get("osType"),
            "verificationType": obj.get("verificationType")
        })
        return _obj



# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_schedule_execution_information import JobScheduleExecutionInformation
from openapi_client.models.job_schedule_state import JobScheduleState
from openapi_client.models.job_schedule_statistics import JobScheduleStatistics
from openapi_client.models.job_specification import JobSpecification
from openapi_client.models.metadata_item import MetadataItem
from openapi_client.models.schedule import Schedule
from typing import Optional, Set
from typing_extensions import Self

class CloudJobSchedule(BaseModel):
    """
    CloudJobSchedule
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    e_tag: Optional[StrictStr] = Field(default=None, description="This is an opaque string. You can use it to detect whether the Job Schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime.", alias="eTag")
    execution_info: Optional[JobScheduleExecutionInformation] = Field(default=None, alias="executionInfo")
    id: Optional[StrictStr] = None
    job_specification: Optional[JobSpecification] = Field(default=None, alias="jobSpecification")
    last_modified: Optional[datetime] = Field(default=None, description="This is the last time at which the schedule level data, such as the Job specification or recurrence information, changed. It does not factor in job-level changes such as new Jobs being created or Jobs changing state.", alias="lastModified")
    metadata: Optional[List[MetadataItem]] = Field(default=None, description="The Batch service does not assign any meaning to metadata; it is solely for the use of user code.")
    previous_state: Optional[JobScheduleState] = Field(default=None, alias="previousState")
    previous_state_transition_time: Optional[datetime] = Field(default=None, description="This property is not present if the Job Schedule is in its initial active state.", alias="previousStateTransitionTime")
    schedule: Optional[Schedule] = None
    state: Optional[JobScheduleState] = None
    state_transition_time: Optional[datetime] = Field(default=None, alias="stateTransitionTime")
    stats: Optional[JobScheduleStatistics] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["creationTime", "displayName", "eTag", "executionInfo", "id", "jobSpecification", "lastModified", "metadata", "previousState", "previousStateTransitionTime", "schedule", "state", "stateTransitionTime", "stats", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudJobSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_info
        if self.execution_info:
            _dict['executionInfo'] = self.execution_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_specification
        if self.job_specification:
            _dict['jobSpecification'] = self.job_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudJobSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "displayName": obj.get("displayName"),
            "eTag": obj.get("eTag"),
            "executionInfo": JobScheduleExecutionInformation.from_dict(obj["executionInfo"]) if obj.get("executionInfo") is not None else None,
            "id": obj.get("id"),
            "jobSpecification": JobSpecification.from_dict(obj["jobSpecification"]) if obj.get("jobSpecification") is not None else None,
            "lastModified": obj.get("lastModified"),
            "metadata": [MetadataItem.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "previousState": obj.get("previousState"),
            "previousStateTransitionTime": obj.get("previousStateTransitionTime"),
            "schedule": Schedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "state": obj.get("state"),
            "stateTransitionTime": obj.get("stateTransitionTime"),
            "stats": JobScheduleStatistics.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "url": obj.get("url")
        })
        return _obj



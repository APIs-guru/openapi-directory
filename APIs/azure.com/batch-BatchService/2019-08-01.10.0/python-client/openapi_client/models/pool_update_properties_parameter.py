# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_package_reference import ApplicationPackageReference
from openapi_client.models.certificate_reference import CertificateReference
from openapi_client.models.metadata_item import MetadataItem
from openapi_client.models.start_task import StartTask
from typing import Optional, Set
from typing_extensions import Self

class PoolUpdatePropertiesParameter(BaseModel):
    """
    PoolUpdatePropertiesParameter
    """ # noqa: E501
    application_package_references: List[ApplicationPackageReference] = Field(description="The list replaces any existing Application Package references on the Pool. Changes to Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package references on any given Pool. If omitted, or if you specify an empty collection, any existing Application Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool.", alias="applicationPackageReferences")
    certificate_references: List[CertificateReference] = Field(description="This list replaces any existing Certificate references configured on the Pool. If you specify an empty collection, any existing Certificate references are removed from the Pool. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.", alias="certificateReferences")
    metadata: List[MetadataItem] = Field(description="This list replaces any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the Pool.")
    start_task: Optional[StartTask] = Field(default=None, alias="startTask")
    __properties: ClassVar[List[str]] = ["applicationPackageReferences", "certificateReferences", "metadata", "startTask"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PoolUpdatePropertiesParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_package_references (list)
        _items = []
        if self.application_package_references:
            for _item_application_package_references in self.application_package_references:
                if _item_application_package_references:
                    _items.append(_item_application_package_references.to_dict())
            _dict['applicationPackageReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in certificate_references (list)
        _items = []
        if self.certificate_references:
            for _item_certificate_references in self.certificate_references:
                if _item_certificate_references:
                    _items.append(_item_certificate_references.to_dict())
            _dict['certificateReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of start_task
        if self.start_task:
            _dict['startTask'] = self.start_task.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PoolUpdatePropertiesParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationPackageReferences": [ApplicationPackageReference.from_dict(_item) for _item in obj["applicationPackageReferences"]] if obj.get("applicationPackageReferences") is not None else None,
            "certificateReferences": [CertificateReference.from_dict(_item) for _item in obj["certificateReferences"]] if obj.get("certificateReferences") is not None else None,
            "metadata": [MetadataItem.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "startTask": StartTask.from_dict(obj["startTask"]) if obj.get("startTask") is not None else None
        })
        return _obj



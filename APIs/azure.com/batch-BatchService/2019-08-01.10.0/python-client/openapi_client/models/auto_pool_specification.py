# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pool_specification import PoolSpecification
from typing import Optional, Set
from typing_extensions import Self

class AutoPoolSpecification(BaseModel):
    """
    AutoPoolSpecification
    """ # noqa: E501
    auto_pool_id_prefix: Optional[StrictStr] = Field(default=None, description="The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.", alias="autoPoolIdPrefix")
    keep_alive: Optional[StrictBool] = Field(default=None, description="If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.", alias="keepAlive")
    pool: Optional[PoolSpecification] = None
    pool_lifetime_option: StrictStr = Field(alias="poolLifetimeOption")
    __properties: ClassVar[List[str]] = ["autoPoolIdPrefix", "keepAlive", "pool", "poolLifetimeOption"]

    @field_validator('pool_lifetime_option')
    def pool_lifetime_option_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['jobschedule', 'job']):
            raise ValueError("must be one of enum values ('jobschedule', 'job')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoPoolSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pool
        if self.pool:
            _dict['pool'] = self.pool.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoPoolSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoPoolIdPrefix": obj.get("autoPoolIdPrefix"),
            "keepAlive": obj.get("keepAlive"),
            "pool": PoolSpecification.from_dict(obj["pool"]) if obj.get("pool") is not None else None,
            "poolLifetimeOption": obj.get("poolLifetimeOption")
        })
        return _obj



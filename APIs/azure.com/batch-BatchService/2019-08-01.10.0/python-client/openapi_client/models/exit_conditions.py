# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.exit_code_mapping import ExitCodeMapping
from openapi_client.models.exit_code_range_mapping import ExitCodeRangeMapping
from openapi_client.models.exit_options import ExitOptions
from typing import Optional, Set
from typing_extensions import Self

class ExitConditions(BaseModel):
    """
    ExitConditions
    """ # noqa: E501
    default: Optional[ExitOptions] = None
    exit_code_ranges: Optional[List[ExitCodeRangeMapping]] = Field(default=None, alias="exitCodeRanges")
    exit_codes: Optional[List[ExitCodeMapping]] = Field(default=None, alias="exitCodes")
    file_upload_error: Optional[ExitOptions] = Field(default=None, alias="fileUploadError")
    pre_processing_error: Optional[ExitOptions] = Field(default=None, alias="preProcessingError")
    __properties: ClassVar[List[str]] = ["default", "exitCodeRanges", "exitCodes", "fileUploadError", "preProcessingError"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExitConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in exit_code_ranges (list)
        _items = []
        if self.exit_code_ranges:
            for _item_exit_code_ranges in self.exit_code_ranges:
                if _item_exit_code_ranges:
                    _items.append(_item_exit_code_ranges.to_dict())
            _dict['exitCodeRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exit_codes (list)
        _items = []
        if self.exit_codes:
            for _item_exit_codes in self.exit_codes:
                if _item_exit_codes:
                    _items.append(_item_exit_codes.to_dict())
            _dict['exitCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of file_upload_error
        if self.file_upload_error:
            _dict['fileUploadError'] = self.file_upload_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_processing_error
        if self.pre_processing_error:
            _dict['preProcessingError'] = self.pre_processing_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExitConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": ExitOptions.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "exitCodeRanges": [ExitCodeRangeMapping.from_dict(_item) for _item in obj["exitCodeRanges"]] if obj.get("exitCodeRanges") is not None else None,
            "exitCodes": [ExitCodeMapping.from_dict(_item) for _item in obj["exitCodes"]] if obj.get("exitCodes") is not None else None,
            "fileUploadError": ExitOptions.from_dict(obj["fileUploadError"]) if obj.get("fileUploadError") is not None else None,
            "preProcessingError": ExitOptions.from_dict(obj["preProcessingError"]) if obj.get("preProcessingError") is not None else None
        })
        return _obj



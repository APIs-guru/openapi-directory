# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_package_reference import ApplicationPackageReference
from openapi_client.models.auto_scale_run import AutoScaleRun
from openapi_client.models.certificate_reference import CertificateReference
from openapi_client.models.cloud_service_configuration import CloudServiceConfiguration
from openapi_client.models.metadata_item import MetadataItem
from openapi_client.models.mount_configuration import MountConfiguration
from openapi_client.models.network_configuration import NetworkConfiguration
from openapi_client.models.pool_statistics import PoolStatistics
from openapi_client.models.resize_error import ResizeError
from openapi_client.models.start_task import StartTask
from openapi_client.models.task_scheduling_policy import TaskSchedulingPolicy
from openapi_client.models.user_account import UserAccount
from openapi_client.models.virtual_machine_configuration import VirtualMachineConfiguration
from typing import Optional, Set
from typing_extensions import Self

class CloudPool(BaseModel):
    """
    CloudPool
    """ # noqa: E501
    allocation_state: Optional[StrictStr] = Field(default=None, alias="allocationState")
    allocation_state_transition_time: Optional[datetime] = Field(default=None, alias="allocationStateTransitionTime")
    application_licenses: Optional[List[StrictStr]] = Field(default=None, description="The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.", alias="applicationLicenses")
    application_package_references: Optional[List[ApplicationPackageReference]] = Field(default=None, description="Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.", alias="applicationPackageReferences")
    auto_scale_evaluation_interval: Optional[StrictStr] = Field(default=None, description="This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.", alias="autoScaleEvaluationInterval")
    auto_scale_formula: Optional[StrictStr] = Field(default=None, description="This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.", alias="autoScaleFormula")
    auto_scale_run: Optional[AutoScaleRun] = Field(default=None, alias="autoScaleRun")
    certificate_references: Optional[List[CertificateReference]] = Field(default=None, description="For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.", alias="certificateReferences")
    cloud_service_configuration: Optional[CloudServiceConfiguration] = Field(default=None, alias="cloudServiceConfiguration")
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    current_dedicated_nodes: Optional[StrictInt] = Field(default=None, alias="currentDedicatedNodes")
    current_low_priority_nodes: Optional[StrictInt] = Field(default=None, description="Low-priority Compute Nodes which have been preempted are included in this count.", alias="currentLowPriorityNodes")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.", alias="displayName")
    e_tag: Optional[StrictStr] = Field(default=None, description="This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.", alias="eTag")
    enable_auto_scale: Optional[StrictBool] = Field(default=None, description="If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.", alias="enableAutoScale")
    enable_inter_node_communication: Optional[StrictBool] = Field(default=None, description="This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.", alias="enableInterNodeCommunication")
    id: Optional[StrictStr] = Field(default=None, description="The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).")
    last_modified: Optional[datetime] = Field(default=None, description="This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.", alias="lastModified")
    max_tasks_per_node: Optional[StrictInt] = Field(default=None, description="The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256.", alias="maxTasksPerNode")
    metadata: Optional[List[MetadataItem]] = None
    mount_configuration: Optional[List[MountConfiguration]] = Field(default=None, description="This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.", alias="mountConfiguration")
    network_configuration: Optional[NetworkConfiguration] = Field(default=None, alias="networkConfiguration")
    resize_errors: Optional[List[ResizeError]] = Field(default=None, description="This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.", alias="resizeErrors")
    resize_timeout: Optional[StrictStr] = Field(default=None, description="This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.", alias="resizeTimeout")
    start_task: Optional[StartTask] = Field(default=None, alias="startTask")
    state: Optional[StrictStr] = None
    state_transition_time: Optional[datetime] = Field(default=None, alias="stateTransitionTime")
    stats: Optional[PoolStatistics] = None
    target_dedicated_nodes: Optional[StrictInt] = Field(default=None, alias="targetDedicatedNodes")
    target_low_priority_nodes: Optional[StrictInt] = Field(default=None, alias="targetLowPriorityNodes")
    task_scheduling_policy: Optional[TaskSchedulingPolicy] = Field(default=None, alias="taskSchedulingPolicy")
    url: Optional[StrictStr] = None
    user_accounts: Optional[List[UserAccount]] = Field(default=None, alias="userAccounts")
    virtual_machine_configuration: Optional[VirtualMachineConfiguration] = Field(default=None, alias="virtualMachineConfiguration")
    vm_size: Optional[StrictStr] = Field(default=None, description="For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).", alias="vmSize")
    __properties: ClassVar[List[str]] = ["allocationState", "allocationStateTransitionTime", "applicationLicenses", "applicationPackageReferences", "autoScaleEvaluationInterval", "autoScaleFormula", "autoScaleRun", "certificateReferences", "cloudServiceConfiguration", "creationTime", "currentDedicatedNodes", "currentLowPriorityNodes", "displayName", "eTag", "enableAutoScale", "enableInterNodeCommunication", "id", "lastModified", "maxTasksPerNode", "metadata", "mountConfiguration", "networkConfiguration", "resizeErrors", "resizeTimeout", "startTask", "state", "stateTransitionTime", "stats", "targetDedicatedNodes", "targetLowPriorityNodes", "taskSchedulingPolicy", "url", "userAccounts", "virtualMachineConfiguration", "vmSize"]

    @field_validator('allocation_state')
    def allocation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['steady', 'resizing', 'stopping']):
            raise ValueError("must be one of enum values ('steady', 'resizing', 'stopping')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'deleting']):
            raise ValueError("must be one of enum values ('active', 'deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_package_references (list)
        _items = []
        if self.application_package_references:
            for _item_application_package_references in self.application_package_references:
                if _item_application_package_references:
                    _items.append(_item_application_package_references.to_dict())
            _dict['applicationPackageReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of auto_scale_run
        if self.auto_scale_run:
            _dict['autoScaleRun'] = self.auto_scale_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in certificate_references (list)
        _items = []
        if self.certificate_references:
            for _item_certificate_references in self.certificate_references:
                if _item_certificate_references:
                    _items.append(_item_certificate_references.to_dict())
            _dict['certificateReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of cloud_service_configuration
        if self.cloud_service_configuration:
            _dict['cloudServiceConfiguration'] = self.cloud_service_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mount_configuration (list)
        _items = []
        if self.mount_configuration:
            for _item_mount_configuration in self.mount_configuration:
                if _item_mount_configuration:
                    _items.append(_item_mount_configuration.to_dict())
            _dict['mountConfiguration'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_configuration
        if self.network_configuration:
            _dict['networkConfiguration'] = self.network_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resize_errors (list)
        _items = []
        if self.resize_errors:
            for _item_resize_errors in self.resize_errors:
                if _item_resize_errors:
                    _items.append(_item_resize_errors.to_dict())
            _dict['resizeErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of start_task
        if self.start_task:
            _dict['startTask'] = self.start_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of task_scheduling_policy
        if self.task_scheduling_policy:
            _dict['taskSchedulingPolicy'] = self.task_scheduling_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_accounts (list)
        _items = []
        if self.user_accounts:
            for _item_user_accounts in self.user_accounts:
                if _item_user_accounts:
                    _items.append(_item_user_accounts.to_dict())
            _dict['userAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_machine_configuration
        if self.virtual_machine_configuration:
            _dict['virtualMachineConfiguration'] = self.virtual_machine_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationState": obj.get("allocationState"),
            "allocationStateTransitionTime": obj.get("allocationStateTransitionTime"),
            "applicationLicenses": obj.get("applicationLicenses"),
            "applicationPackageReferences": [ApplicationPackageReference.from_dict(_item) for _item in obj["applicationPackageReferences"]] if obj.get("applicationPackageReferences") is not None else None,
            "autoScaleEvaluationInterval": obj.get("autoScaleEvaluationInterval"),
            "autoScaleFormula": obj.get("autoScaleFormula"),
            "autoScaleRun": AutoScaleRun.from_dict(obj["autoScaleRun"]) if obj.get("autoScaleRun") is not None else None,
            "certificateReferences": [CertificateReference.from_dict(_item) for _item in obj["certificateReferences"]] if obj.get("certificateReferences") is not None else None,
            "cloudServiceConfiguration": CloudServiceConfiguration.from_dict(obj["cloudServiceConfiguration"]) if obj.get("cloudServiceConfiguration") is not None else None,
            "creationTime": obj.get("creationTime"),
            "currentDedicatedNodes": obj.get("currentDedicatedNodes"),
            "currentLowPriorityNodes": obj.get("currentLowPriorityNodes"),
            "displayName": obj.get("displayName"),
            "eTag": obj.get("eTag"),
            "enableAutoScale": obj.get("enableAutoScale"),
            "enableInterNodeCommunication": obj.get("enableInterNodeCommunication"),
            "id": obj.get("id"),
            "lastModified": obj.get("lastModified"),
            "maxTasksPerNode": obj.get("maxTasksPerNode"),
            "metadata": [MetadataItem.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "mountConfiguration": [MountConfiguration.from_dict(_item) for _item in obj["mountConfiguration"]] if obj.get("mountConfiguration") is not None else None,
            "networkConfiguration": NetworkConfiguration.from_dict(obj["networkConfiguration"]) if obj.get("networkConfiguration") is not None else None,
            "resizeErrors": [ResizeError.from_dict(_item) for _item in obj["resizeErrors"]] if obj.get("resizeErrors") is not None else None,
            "resizeTimeout": obj.get("resizeTimeout"),
            "startTask": StartTask.from_dict(obj["startTask"]) if obj.get("startTask") is not None else None,
            "state": obj.get("state"),
            "stateTransitionTime": obj.get("stateTransitionTime"),
            "stats": PoolStatistics.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "targetDedicatedNodes": obj.get("targetDedicatedNodes"),
            "targetLowPriorityNodes": obj.get("targetLowPriorityNodes"),
            "taskSchedulingPolicy": TaskSchedulingPolicy.from_dict(obj["taskSchedulingPolicy"]) if obj.get("taskSchedulingPolicy") is not None else None,
            "url": obj.get("url"),
            "userAccounts": [UserAccount.from_dict(_item) for _item in obj["userAccounts"]] if obj.get("userAccounts") is not None else None,
            "virtualMachineConfiguration": VirtualMachineConfiguration.from_dict(obj["virtualMachineConfiguration"]) if obj.get("virtualMachineConfiguration") is not None else None,
            "vmSize": obj.get("vmSize")
        })
        return _obj



# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compute_node_list_result import ComputeNodeListResult

class TestComputeNodeListResult(unittest.TestCase):
    """ComputeNodeListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComputeNodeListResult:
        """Test ComputeNodeListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComputeNodeListResult`
        """
        model = ComputeNodeListResult()
        if include_optional:
            return ComputeNodeListResult(
                odata_next_link = '',
                value = [
                    openapi_client.models.a_compute_node_in_the_batch_service/.A Compute Node in the Batch service.(
                        affinity_id = '', 
                        allocation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        certificate_references = [
                            openapi_client.models.a_reference_to_a_certificate_to_be_installed_on_compute_nodes_in_a_pool/.A reference to a Certificate to be installed on Compute Nodes in a Pool.(
                                store_location = 'currentuser', 
                                store_name = '', 
                                thumbprint = '', 
                                thumbprint_algorithm = '', 
                                visibility = [
                                    'starttask'
                                    ], )
                            ], 
                        endpoint_configuration = openapi_client.models.the_endpoint_configuration_for_the_compute_node/.The endpoint configuration for the Compute Node.(
                            inbound_endpoints = [
                                openapi_client.models.an_inbound_endpoint_on_a_compute_node/.An inbound endpoint on a Compute Node.(
                                    backend_port = 56, 
                                    frontend_port = 56, 
                                    name = '', 
                                    protocol = 'tcp', 
                                    public_fqdn = '', 
                                    public_ip_address = '', )
                                ], ), 
                        errors = [
                            openapi_client.models.an_error_encountered_by_a_compute_node/.An error encountered by a Compute Node.(
                                code = '', 
                                error_details = [
                                    openapi_client.models.represents_a_name_value_pair/.Represents a name-value pair.(
                                        name = '', 
                                        value = '', )
                                    ], 
                                message = '', )
                            ], 
                        id = '', 
                        ip_address = '', 
                        is_dedicated = True, 
                        last_boot_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        node_agent_info = openapi_client.models.information_about_the_compute_node_agent/.Information about the Compute Node agent.(
                            last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            version = '', ), 
                        recent_tasks = [
                            openapi_client.models.information_about_a_task_running_on_a_compute_node/.Information about a Task running on a Compute Node.(
                                execution_info = openapi_client.models.information_about_the_execution_of_a_task/.Information about the execution of a Task.(
                                    container_info = openapi_client.models.contains_information_about_the_container_which_a_task_is_executing/.Contains information about the container which a Task is executing.(
                                        container_id = '', 
                                        error = '', 
                                        state = '', ), 
                                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    exit_code = 56, 
                                    failure_info = openapi_client.models.information_about_a_task_failure/.Information about a Task failure.(
                                        category = 'usererror', 
                                        code = '', 
                                        details = [
                                            openapi_client.models.represents_a_name_value_pair/.Represents a name-value pair.(
                                                name = '', 
                                                value = '', )
                                            ], 
                                        message = '', ), 
                                    last_requeue_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    last_retry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    requeue_count = 56, 
                                    result = 'success', 
                                    retry_count = 56, 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                job_id = '', 
                                subtask_id = 56, 
                                task_id = '', 
                                task_state = 'active', 
                                task_url = '', )
                            ], 
                        running_tasks_count = 56, 
                        scheduling_state = 'enabled', 
                        start_task = openapi_client.models.a_task_which_is_run_when_a_node_joins_a_pool_in_the_azure_batch_service,_or_when_the_compute_node_is_rebooted_or_reimaged/.A Task which is run when a Node joins a Pool in the Azure Batch service, or when the Compute Node is rebooted or reimaged.(
                            command_line = '', 
                            container_settings = openapi_client.models.the_container_settings_for_a_task/.The container settings for a Task.(
                                container_run_options = '', 
                                image_name = '', 
                                registry = openapi_client.models.a_private_container_registry/.A private container registry.(
                                    password = '', 
                                    registry_server = '', 
                                    username = '', ), 
                                working_directory = 'taskWorkingDirectory', ), 
                            environment_settings = [
                                openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a Task process.(
                                    name = '', 
                                    value = '', )
                                ], 
                            max_task_retry_count = 56, 
                            resource_files = [
                                openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a Compute Node.(
                                    auto_storage_container_name = '', 
                                    blob_prefix = '', 
                                    file_mode = '', 
                                    file_path = '', 
                                    http_url = '', 
                                    storage_container_url = '', )
                                ], 
                            user_identity = openapi_client.models.the_definition_of_the_user_identity_under_which_the_task_is_run/.The definition of the user identity under which the Task is run.(
                                auto_user = openapi_client.models.specifies_the_parameters_for_the_auto_user_that_runs_a_task_on_the_batch_service/.Specifies the parameters for the auto user that runs a Task on the Batch service.(
                                    elevation_level = 'nonadmin', 
                                    scope = 'task', ), 
                                username = '', ), 
                            wait_for_success = True, ), 
                        start_task_info = openapi_client.models.information_about_a_start_task_running_on_a_compute_node/.Information about a StartTask running on a Compute Node.(
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            exit_code = 56, 
                            last_retry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            retry_count = 56, 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = 'running', ), 
                        state = 'idle', 
                        state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        total_tasks_run = 56, 
                        total_tasks_succeeded = 56, 
                        url = '', 
                        vm_size = '', )
                    ]
            )
        else:
            return ComputeNodeListResult(
        )
        """

    def testComputeNodeListResult(self):
        """Test ComputeNodeListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

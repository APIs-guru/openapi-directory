# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.task_execution_information import TaskExecutionInformation

class TestTaskExecutionInformation(unittest.TestCase):
    """TaskExecutionInformation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskExecutionInformation:
        """Test TaskExecutionInformation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskExecutionInformation`
        """
        model = TaskExecutionInformation()
        if include_optional:
            return TaskExecutionInformation(
                container_info = openapi_client.models.contains_information_about_the_container_which_a_task_is_executing/.Contains information about the container which a Task is executing.(
                    container_id = '', 
                    error = '', 
                    state = '', ),
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                exit_code = 56,
                failure_info = openapi_client.models.information_about_a_task_failure/.Information about a Task failure.(
                    category = 'usererror', 
                    code = '', 
                    details = [
                        openapi_client.models.represents_a_name_value_pair/.Represents a name-value pair.(
                            name = '', 
                            value = '', )
                        ], 
                    message = '', ),
                last_requeue_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_retry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                requeue_count = 56,
                result = 'success',
                retry_count = 56,
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return TaskExecutionInformation(
                requeue_count = 56,
                retry_count = 56,
        )
        """

    def testTaskExecutionInformation(self):
        """Test TaskExecutionInformation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

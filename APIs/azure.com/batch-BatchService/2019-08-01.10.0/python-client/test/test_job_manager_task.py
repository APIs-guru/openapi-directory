# coding: utf-8

"""
    BatchService

    A client for issuing REST requests to the Azure Batch service.

    The version of the OpenAPI document: 2019-08-01.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_manager_task import JobManagerTask

class TestJobManagerTask(unittest.TestCase):
    """JobManagerTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobManagerTask:
        """Test JobManagerTask
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobManagerTask`
        """
        model = JobManagerTask()
        if include_optional:
            return JobManagerTask(
                allow_low_priority_node = True,
                application_package_references = [
                    openapi_client.models.a_reference_to_an_package_to_be_deployed_to_compute_nodes/.A reference to an Package to be deployed to Compute Nodes.(
                        application_id = '', 
                        version = '', )
                    ],
                authentication_token_settings = openapi_client.models.the_settings_for_an_authentication_token_that_the_task_can_use_to_perform_batch_service_operations/.The settings for an authentication token that the Task can use to perform Batch service operations.(
                    access = [
                        'job'
                        ], ),
                command_line = '',
                constraints = openapi_client.models.execution_constraints_to_apply_to_a_task/.Execution constraints to apply to a Task.(
                    max_task_retry_count = 56, 
                    max_wall_clock_time = '', 
                    retention_time = '', ),
                container_settings = openapi_client.models.the_container_settings_for_a_task/.The container settings for a Task.(
                    container_run_options = '', 
                    image_name = '', 
                    registry = openapi_client.models.a_private_container_registry/.A private container registry.(
                        password = '', 
                        registry_server = '', 
                        username = '', ), 
                    working_directory = 'taskWorkingDirectory', ),
                display_name = '',
                environment_settings = [
                    openapi_client.models.an_environment_variable_to_be_set_on_a_task_process/.An environment variable to be set on a Task process.(
                        name = '', 
                        value = '', )
                    ],
                id = '',
                kill_job_on_completion = True,
                output_files = [
                    openapi_client.models.a_specification_for_uploading_files_from_an_azure_batch_compute_node_to_another_location_after_the_batch_service_has_finished_executing_the_task_process/.A specification for uploading files from an Azure Batch Compute Node to another location after the Batch service has finished executing the Task process.(
                        destination = openapi_client.models.the_destination_to_which_a_file_should_be_uploaded/.The destination to which a file should be uploaded.(
                            container = openapi_client.models.specifies_a_file_upload_destination_within_an_azure_blob_storage_container/.Specifies a file upload destination within an Azure blob storage container.(
                                container_url = '', 
                                path = '', ), ), 
                        file_pattern = '', 
                        upload_options = openapi_client.models.details_about_an_output_file_upload_operation,_including_under_what_conditions_to_perform_the_upload/.Details about an output file upload operation, including under what conditions to perform the upload.(
                            upload_condition = 'tasksuccess', ), )
                    ],
                resource_files = [
                    openapi_client.models.a_single_file_or_multiple_files_to_be_downloaded_to_a_compute_node/.A single file or multiple files to be downloaded to a Compute Node.(
                        auto_storage_container_name = '', 
                        blob_prefix = '', 
                        file_mode = '', 
                        file_path = '', 
                        http_url = '', 
                        storage_container_url = '', )
                    ],
                run_exclusive = True,
                user_identity = openapi_client.models.the_definition_of_the_user_identity_under_which_the_task_is_run/.The definition of the user identity under which the Task is run.(
                    auto_user = openapi_client.models.specifies_the_parameters_for_the_auto_user_that_runs_a_task_on_the_batch_service/.Specifies the parameters for the auto user that runs a Task on the Batch service.(
                        elevation_level = 'nonadmin', 
                        scope = 'task', ), 
                    username = '', )
            )
        else:
            return JobManagerTask(
                command_line = '',
                id = '',
        )
        """

    def testJobManagerTask(self):
        """Test JobManagerTask"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

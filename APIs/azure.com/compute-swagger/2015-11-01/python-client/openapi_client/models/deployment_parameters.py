# coding: utf-8

"""
    ComputeManagementConvenienceClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_parameters_admin_password import DeploymentParametersAdminPassword
from openapi_client.models.deployment_parameters_admin_username import DeploymentParametersAdminUsername
from openapi_client.models.deployment_parameters_dns_label_prefix import DeploymentParametersDnsLabelPrefix
from openapi_client.models.deployment_parameters_os_version import DeploymentParametersOsVersion
from typing import Optional, Set
from typing_extensions import Self

class DeploymentParameters(BaseModel):
    """
    DeploymentParameters
    """ # noqa: E501
    admin_password: Optional[DeploymentParametersAdminPassword] = Field(default=None, alias="adminPassword")
    admin_username: Optional[DeploymentParametersAdminUsername] = Field(default=None, alias="adminUsername")
    dns_label_prefix: Optional[DeploymentParametersDnsLabelPrefix] = Field(default=None, alias="dnsLabelPrefix")
    os_version: Optional[DeploymentParametersOsVersion] = Field(default=None, alias="osVersion")
    __properties: ClassVar[List[str]] = ["adminPassword", "adminUsername", "dnsLabelPrefix", "osVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admin_password
        if self.admin_password:
            _dict['adminPassword'] = self.admin_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of admin_username
        if self.admin_username:
            _dict['adminUsername'] = self.admin_username.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_label_prefix
        if self.dns_label_prefix:
            _dict['dnsLabelPrefix'] = self.dns_label_prefix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_version
        if self.os_version:
            _dict['osVersion'] = self.os_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminPassword": DeploymentParametersAdminPassword.from_dict(obj["adminPassword"]) if obj.get("adminPassword") is not None else None,
            "adminUsername": DeploymentParametersAdminUsername.from_dict(obj["adminUsername"]) if obj.get("adminUsername") is not None else None,
            "dnsLabelPrefix": DeploymentParametersDnsLabelPrefix.from_dict(obj["dnsLabelPrefix"]) if obj.get("dnsLabelPrefix") is not None else None,
            "osVersion": DeploymentParametersOsVersion.from_dict(obj["osVersion"]) if obj.get("osVersion") is not None else None
        })
        return _obj



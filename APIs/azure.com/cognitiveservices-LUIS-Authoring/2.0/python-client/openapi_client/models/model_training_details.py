# coding: utf-8

"""
    LUIS Authoring Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.training_status import TrainingStatus
from typing import Optional, Set
from typing_extensions import Self

class ModelTrainingDetails(BaseModel):
    """
    Model Training Details.
    """ # noqa: E501
    example_count: Optional[StrictInt] = Field(default=None, description="The count of examples used to train the model.", alias="exampleCount")
    failure_reason: Optional[StrictStr] = Field(default=None, description="Reason for the training failure.", alias="failureReason")
    status: Optional[TrainingStatus] = None
    status_id: Optional[StrictInt] = Field(default=None, description="The train request status ID.", alias="statusId")
    training_date_time: Optional[datetime] = Field(default=None, description="When the model was trained.", alias="trainingDateTime")
    __properties: ClassVar[List[str]] = ["exampleCount", "failureReason", "status", "statusId", "trainingDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelTrainingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelTrainingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exampleCount": obj.get("exampleCount"),
            "failureReason": obj.get("failureReason"),
            "status": obj.get("status"),
            "statusId": obj.get("statusId"),
            "trainingDateTime": obj.get("trainingDateTime")
        })
        return _obj



# coding: utf-8

"""
    LUIS Authoring Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInfoResponse(BaseModel):
    """
    Response containing the Application Info.
    """ # noqa: E501
    active_version: Optional[StrictStr] = Field(default=None, description="The version ID currently marked as active.", alias="activeVersion")
    created_date_time: Optional[StrictStr] = Field(default=None, description="The version's creation timestamp.", alias="createdDateTime")
    culture: Optional[StrictStr] = Field(default=None, description="The culture of the application. For example, \"en-us\".")
    description: Optional[StrictStr] = Field(default=None, description="The description of the application.")
    domain: Optional[StrictStr] = Field(default=None, description="The domain for the new application. Optional. For example, Comics.")
    endpoint_hits_count: Optional[StrictInt] = Field(default=None, description="Number of calls made to this endpoint.", alias="endpointHitsCount")
    endpoints: Optional[Dict[str, Any]] = Field(default=None, description="The Runtime endpoint URL for this model version.")
    id: Optional[StrictStr] = Field(default=None, description="The ID (GUID) of the application.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application.")
    usage_scenario: Optional[StrictStr] = Field(default=None, description="Defines the scenario for the new application. Optional. For example, IoT.", alias="usageScenario")
    versions_count: Optional[StrictInt] = Field(default=None, description="Amount of model versions within the application.", alias="versionsCount")
    __properties: ClassVar[List[str]] = ["activeVersion", "createdDateTime", "culture", "description", "domain", "endpointHitsCount", "endpoints", "id", "name", "usageScenario", "versionsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeVersion": obj.get("activeVersion"),
            "createdDateTime": obj.get("createdDateTime"),
            "culture": obj.get("culture"),
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "endpointHitsCount": obj.get("endpointHitsCount"),
            "endpoints": obj.get("endpoints"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "usageScenario": obj.get("usageScenario"),
            "versionsCount": obj.get("versionsCount")
        })
        return _obj



# coding: utf-8

"""
    LUIS Authoring Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_label import EntityLabel
from openapi_client.models.entity_prediction import EntityPrediction
from openapi_client.models.intent_prediction import IntentPrediction
from typing import Optional, Set
from typing_extensions import Self

class LabeledUtterance(BaseModel):
    """
    A prediction and label pair of an example.
    """ # noqa: E501
    entity_labels: Optional[List[EntityLabel]] = Field(default=None, description="The entities matching the example.", alias="entityLabels")
    entity_predictions: Optional[List[EntityPrediction]] = Field(default=None, description="List of suggested entities.", alias="entityPredictions")
    id: Optional[StrictInt] = Field(default=None, description="ID of Labeled Utterance.")
    intent_label: Optional[StrictStr] = Field(default=None, description="The intent matching the example.", alias="intentLabel")
    intent_predictions: Optional[List[IntentPrediction]] = Field(default=None, description="List of suggested intents.", alias="intentPredictions")
    text: Optional[StrictStr] = Field(default=None, description="The utterance. For example, \"What's the weather like in seattle?\"")
    tokenized_text: Optional[List[StrictStr]] = Field(default=None, description="The utterance tokenized.", alias="tokenizedText")
    __properties: ClassVar[List[str]] = ["entityLabels", "entityPredictions", "id", "intentLabel", "intentPredictions", "text", "tokenizedText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabeledUtterance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entity_labels (list)
        _items = []
        if self.entity_labels:
            for _item_entity_labels in self.entity_labels:
                if _item_entity_labels:
                    _items.append(_item_entity_labels.to_dict())
            _dict['entityLabels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entity_predictions (list)
        _items = []
        if self.entity_predictions:
            for _item_entity_predictions in self.entity_predictions:
                if _item_entity_predictions:
                    _items.append(_item_entity_predictions.to_dict())
            _dict['entityPredictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in intent_predictions (list)
        _items = []
        if self.intent_predictions:
            for _item_intent_predictions in self.intent_predictions:
                if _item_intent_predictions:
                    _items.append(_item_intent_predictions.to_dict())
            _dict['intentPredictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabeledUtterance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityLabels": [EntityLabel.from_dict(_item) for _item in obj["entityLabels"]] if obj.get("entityLabels") is not None else None,
            "entityPredictions": [EntityPrediction.from_dict(_item) for _item in obj["entityPredictions"]] if obj.get("entityPredictions") is not None else None,
            "id": obj.get("id"),
            "intentLabel": obj.get("intentLabel"),
            "intentPredictions": [IntentPrediction.from_dict(_item) for _item in obj["intentPredictions"]] if obj.get("intentPredictions") is not None else None,
            "text": obj.get("text"),
            "tokenizedText": obj.get("tokenizedText")
        })
        return _obj



# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2018-03-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.container_service_storage_profile import ContainerServiceStorageProfile
from openapi_client.models.container_service_vm_size import ContainerServiceVMSize
from openapi_client.models.os_type import OSType
from typing import Optional, Set
from typing_extensions import Self

class ManagedClusterAgentPoolProfile(BaseModel):
    """
    Profile for the container service agent pool.
    """ # noqa: E501
    count: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=1, description="Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. ")
    max_pods: Optional[StrictInt] = Field(default=None, description="Maximum number of pods that can run on a node.", alias="maxPods")
    name: StrictStr = Field(description="Unique name of the agent pool profile in the context of the subscription and resource group.")
    os_disk_size_gb: Optional[Annotated[int, Field(le=1023, strict=True, ge=0)]] = Field(default=None, description="OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.", alias="osDiskSizeGB")
    os_type: Optional[OSType] = Field(default=OSType.LINUX, alias="osType")
    storage_profile: Optional[ContainerServiceStorageProfile] = Field(default=None, alias="storageProfile")
    vm_size: ContainerServiceVMSize = Field(alias="vmSize")
    vnet_subnet_id: Optional[StrictStr] = Field(default=None, description="VNet SubnetID specifies the VNet's subnet identifier.", alias="vnetSubnetID")
    __properties: ClassVar[List[str]] = ["count", "maxPods", "name", "osDiskSizeGB", "osType", "storageProfile", "vmSize", "vnetSubnetID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedClusterAgentPoolProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedClusterAgentPoolProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count") if obj.get("count") is not None else 1,
            "maxPods": obj.get("maxPods"),
            "name": obj.get("name"),
            "osDiskSizeGB": obj.get("osDiskSizeGB"),
            "osType": obj.get("osType") if obj.get("osType") is not None else OSType.LINUX,
            "storageProfile": obj.get("storageProfile"),
            "vmSize": obj.get("vmSize"),
            "vnetSubnetID": obj.get("vnetSubnetID")
        })
        return _obj



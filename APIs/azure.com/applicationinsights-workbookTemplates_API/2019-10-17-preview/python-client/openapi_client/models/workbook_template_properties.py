# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights workbook template type.

    The version of the OpenAPI document: 2019-10-17-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.workbook_template_gallery import WorkbookTemplateGallery
from openapi_client.models.workbook_template_localized_gallery import WorkbookTemplateLocalizedGallery
from typing import Optional, Set
from typing_extensions import Self

class WorkbookTemplateProperties(BaseModel):
    """
    Properties that contain a workbook template.
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="Information about the author of the workbook template.")
    galleries: List[WorkbookTemplateGallery] = Field(description="Workbook galleries supported by the template.")
    localized: Optional[Dict[str, List[WorkbookTemplateLocalizedGallery]]] = Field(default=None, description="Key value pair of localized gallery. Each key is the locale code of languages supported by the Azure portal.")
    priority: Optional[StrictInt] = Field(default=None, description="Priority of the template. Determines which template to open when a workbook gallery is opened in viewer mode.")
    template_data: Dict[str, Any] = Field(description="Valid JSON object containing workbook template payload.", alias="templateData")
    __properties: ClassVar[List[str]] = ["author", "galleries", "localized", "priority", "templateData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkbookTemplateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in galleries (list)
        _items = []
        if self.galleries:
            for _item_galleries in self.galleries:
                if _item_galleries:
                    _items.append(_item_galleries.to_dict())
            _dict['galleries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in localized (dict of array)
        _field_dict_of_array = {}
        if self.localized:
            for _key_localized in self.localized:
                if self.localized[_key_localized] is not None:
                    _field_dict_of_array[_key_localized] = [
                        _item.to_dict() for _item in self.localized[_key_localized]
                    ]
            _dict['localized'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkbookTemplateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "galleries": [WorkbookTemplateGallery.from_dict(_item) for _item in obj["galleries"]] if obj.get("galleries") is not None else None,
            "localized": dict(
                (_k,
                        [WorkbookTemplateLocalizedGallery.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("localized", {}).items()
            ),
            "priority": obj.get("priority"),
            "templateData": obj.get("templateData")
        })
        return _obj



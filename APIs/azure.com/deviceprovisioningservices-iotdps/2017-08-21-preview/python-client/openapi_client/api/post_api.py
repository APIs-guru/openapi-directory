# coding: utf-8

"""
    iotDpsClient

    API for using the Azure IoT Hub Device Provisioning Service features.

    The version of the OpenAPI document: 2017-08-21-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.certificate_response import CertificateResponse
from openapi_client.models.name_availability_info import NameAvailabilityInfo
from openapi_client.models.operation_inputs import OperationInputs
from openapi_client.models.shared_access_signature_authorization_rule_access_rights_description import SharedAccessSignatureAuthorizationRuleAccessRightsDescription
from openapi_client.models.shared_access_signature_authorization_rule_list_result import SharedAccessSignatureAuthorizationRuleListResult
from openapi_client.models.verification_code_request import VerificationCodeRequest
from openapi_client.models.verification_code_response import VerificationCodeResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class POSTApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def dps_certificate_generate_verification_code(
        self,
        certificate_name: Annotated[StrictStr, Field(description="The mandatory logical name of the certificate, that the provisioning service uses to access.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="name of resource group.")],
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of provisioning service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        certificate_name2: Annotated[Optional[StrictStr], Field(description="Common Name for the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data of certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="Description mentioning the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Certificate creation time.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Certificate last updated time.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerificationCodeResponse:
        """dps_certificate_generate_verification_code

        Generate verification code for Proof of Possession.

        :param certificate_name: The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
        :type certificate_name: str
        :param if_match: ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
        :type if_match: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: name of resource group. (required)
        :type resource_group_name: str
        :param provisioning_service_name: Name of provisioning service. (required)
        :type provisioning_service_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param certificate_name2: Common Name for the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data of certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: Description mentioning the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Certificate creation time.
        :type certificate_created: datetime
        :param certificate_last_updated: Certificate last updated time.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_generate_verification_code_serialize(
            certificate_name=certificate_name,
            if_match=if_match,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            api_version=api_version,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerificationCodeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dps_certificate_generate_verification_code_with_http_info(
        self,
        certificate_name: Annotated[StrictStr, Field(description="The mandatory logical name of the certificate, that the provisioning service uses to access.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="name of resource group.")],
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of provisioning service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        certificate_name2: Annotated[Optional[StrictStr], Field(description="Common Name for the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data of certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="Description mentioning the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Certificate creation time.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Certificate last updated time.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerificationCodeResponse]:
        """dps_certificate_generate_verification_code

        Generate verification code for Proof of Possession.

        :param certificate_name: The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
        :type certificate_name: str
        :param if_match: ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
        :type if_match: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: name of resource group. (required)
        :type resource_group_name: str
        :param provisioning_service_name: Name of provisioning service. (required)
        :type provisioning_service_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param certificate_name2: Common Name for the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data of certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: Description mentioning the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Certificate creation time.
        :type certificate_created: datetime
        :param certificate_last_updated: Certificate last updated time.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_generate_verification_code_serialize(
            certificate_name=certificate_name,
            if_match=if_match,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            api_version=api_version,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerificationCodeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dps_certificate_generate_verification_code_without_preload_content(
        self,
        certificate_name: Annotated[StrictStr, Field(description="The mandatory logical name of the certificate, that the provisioning service uses to access.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="name of resource group.")],
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of provisioning service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        certificate_name2: Annotated[Optional[StrictStr], Field(description="Common Name for the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data of certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="Description mentioning the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Certificate creation time.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Certificate last updated time.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """dps_certificate_generate_verification_code

        Generate verification code for Proof of Possession.

        :param certificate_name: The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
        :type certificate_name: str
        :param if_match: ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. (required)
        :type if_match: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: name of resource group. (required)
        :type resource_group_name: str
        :param provisioning_service_name: Name of provisioning service. (required)
        :type provisioning_service_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param certificate_name2: Common Name for the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data of certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: Description mentioning the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Certificate creation time.
        :type certificate_created: datetime
        :param certificate_last_updated: Certificate last updated time.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_generate_verification_code_serialize(
            certificate_name=certificate_name,
            if_match=if_match,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            api_version=api_version,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerificationCodeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dps_certificate_generate_verification_code_serialize(
        self,
        certificate_name,
        if_match,
        subscription_id,
        resource_group_name,
        provisioning_service_name,
        api_version,
        certificate_name2,
        certificate_raw_bytes,
        certificate_is_verified,
        certificate_purpose,
        certificate_created,
        certificate_last_updated,
        certificate_has_private_key,
        certificate_nonce,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if provisioning_service_name is not None:
            _path_params['provisioningServiceName'] = provisioning_service_name
        # process the query parameters
        if certificate_name2 is not None:
            
            _query_params.append(('certificate.name', certificate_name2))
            
        if certificate_raw_bytes is not None:
            
            _query_params.append(('certificate.rawBytes', certificate_raw_bytes))
            
        if certificate_is_verified is not None:
            
            _query_params.append(('certificate.isVerified', certificate_is_verified))
            
        if certificate_purpose is not None:
            
            _query_params.append(('certificate.purpose', certificate_purpose))
            
        if certificate_created is not None:
            if isinstance(certificate_created, datetime):
                _query_params.append(
                    (
                        'certificate.created',
                        certificate_created.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('certificate.created', certificate_created))
            
        if certificate_last_updated is not None:
            if isinstance(certificate_last_updated, datetime):
                _query_params.append(
                    (
                        'certificate.lastUpdated',
                        certificate_last_updated.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('certificate.lastUpdated', certificate_last_updated))
            
        if certificate_has_private_key is not None:
            
            _query_params.append(('certificate.hasPrivateKey', certificate_has_private_key))
            
        if certificate_nonce is not None:
            
            _query_params.append(('certificate.nonce', certificate_nonce))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dps_certificate_verify_certificate(
        self,
        certificate_name: Annotated[StrictStr, Field(description="The mandatory logical name of the certificate, that the provisioning service uses to access.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        provisioning_service_name: Annotated[StrictStr, Field(description="Provisioning service name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        request: VerificationCodeRequest,
        certificate_name2: Annotated[Optional[StrictStr], Field(description="Common Name for the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data of certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="Describe the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Certificate creation time.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Certificate last updated time.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CertificateResponse:
        """dps_certificate_verify_certificate

        Verifies certificate for the provisioning service.

        :param certificate_name: The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
        :type certificate_name: str
        :param if_match: ETag of the certificate. (required)
        :type if_match: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param provisioning_service_name: Provisioning service name. (required)
        :type provisioning_service_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param request: (required)
        :type request: VerificationCodeRequest
        :param certificate_name2: Common Name for the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data of certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: Describe the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Certificate creation time.
        :type certificate_created: datetime
        :param certificate_last_updated: Certificate last updated time.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_verify_certificate_serialize(
            certificate_name=certificate_name,
            if_match=if_match,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            api_version=api_version,
            request=request,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dps_certificate_verify_certificate_with_http_info(
        self,
        certificate_name: Annotated[StrictStr, Field(description="The mandatory logical name of the certificate, that the provisioning service uses to access.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        provisioning_service_name: Annotated[StrictStr, Field(description="Provisioning service name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        request: VerificationCodeRequest,
        certificate_name2: Annotated[Optional[StrictStr], Field(description="Common Name for the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data of certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="Describe the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Certificate creation time.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Certificate last updated time.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CertificateResponse]:
        """dps_certificate_verify_certificate

        Verifies certificate for the provisioning service.

        :param certificate_name: The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
        :type certificate_name: str
        :param if_match: ETag of the certificate. (required)
        :type if_match: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param provisioning_service_name: Provisioning service name. (required)
        :type provisioning_service_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param request: (required)
        :type request: VerificationCodeRequest
        :param certificate_name2: Common Name for the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data of certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: Describe the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Certificate creation time.
        :type certificate_created: datetime
        :param certificate_last_updated: Certificate last updated time.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_verify_certificate_serialize(
            certificate_name=certificate_name,
            if_match=if_match,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            api_version=api_version,
            request=request,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dps_certificate_verify_certificate_without_preload_content(
        self,
        certificate_name: Annotated[StrictStr, Field(description="The mandatory logical name of the certificate, that the provisioning service uses to access.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        provisioning_service_name: Annotated[StrictStr, Field(description="Provisioning service name.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        request: VerificationCodeRequest,
        certificate_name2: Annotated[Optional[StrictStr], Field(description="Common Name for the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data of certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="Describe the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Certificate creation time.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Certificate last updated time.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """dps_certificate_verify_certificate

        Verifies certificate for the provisioning service.

        :param certificate_name: The mandatory logical name of the certificate, that the provisioning service uses to access. (required)
        :type certificate_name: str
        :param if_match: ETag of the certificate. (required)
        :type if_match: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param provisioning_service_name: Provisioning service name. (required)
        :type provisioning_service_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param request: (required)
        :type request: VerificationCodeRequest
        :param certificate_name2: Common Name for the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data of certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: Describe the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Certificate creation time.
        :type certificate_created: datetime
        :param certificate_last_updated: Certificate last updated time.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_verify_certificate_serialize(
            certificate_name=certificate_name,
            if_match=if_match,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            api_version=api_version,
            request=request,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CertificateResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dps_certificate_verify_certificate_serialize(
        self,
        certificate_name,
        if_match,
        subscription_id,
        resource_group_name,
        provisioning_service_name,
        api_version,
        request,
        certificate_name2,
        certificate_raw_bytes,
        certificate_is_verified,
        certificate_purpose,
        certificate_created,
        certificate_last_updated,
        certificate_has_private_key,
        certificate_nonce,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if provisioning_service_name is not None:
            _path_params['provisioningServiceName'] = provisioning_service_name
        # process the query parameters
        if certificate_name2 is not None:
            
            _query_params.append(('certificate.name', certificate_name2))
            
        if certificate_raw_bytes is not None:
            
            _query_params.append(('certificate.rawBytes', certificate_raw_bytes))
            
        if certificate_is_verified is not None:
            
            _query_params.append(('certificate.isVerified', certificate_is_verified))
            
        if certificate_purpose is not None:
            
            _query_params.append(('certificate.purpose', certificate_purpose))
            
        if certificate_created is not None:
            if isinstance(certificate_created, datetime):
                _query_params.append(
                    (
                        'certificate.created',
                        certificate_created.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('certificate.created', certificate_created))
            
        if certificate_last_updated is not None:
            if isinstance(certificate_last_updated, datetime):
                _query_params.append(
                    (
                        'certificate.lastUpdated',
                        certificate_last_updated.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('certificate.lastUpdated', certificate_last_updated))
            
        if certificate_has_private_key is not None:
            
            _query_params.append(('certificate.hasPrivateKey', certificate_has_private_key))
            
        if certificate_nonce is not None:
            
            _query_params.append(('certificate.nonce', certificate_nonce))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter
        if request is not None:
            _body_params = request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def iot_dps_resource_check_name_availability(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        arguments: Annotated[OperationInputs, Field(description="Set the name parameter in the OperationInputs structure to the name of the provisioning service to check.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NameAvailabilityInfo:
        """Check if a provisioning service name is available.

        Check if a provisioning service name is available.

        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param arguments: Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
        :type arguments: OperationInputs
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_check_name_availability_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            arguments=arguments,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NameAvailabilityInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def iot_dps_resource_check_name_availability_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        arguments: Annotated[OperationInputs, Field(description="Set the name parameter in the OperationInputs structure to the name of the provisioning service to check.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NameAvailabilityInfo]:
        """Check if a provisioning service name is available.

        Check if a provisioning service name is available.

        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param arguments: Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
        :type arguments: OperationInputs
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_check_name_availability_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            arguments=arguments,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NameAvailabilityInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def iot_dps_resource_check_name_availability_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        arguments: Annotated[OperationInputs, Field(description="Set the name parameter in the OperationInputs structure to the name of the provisioning service to check.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Check if a provisioning service name is available.

        Check if a provisioning service name is available.

        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param arguments: Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. (required)
        :type arguments: OperationInputs
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_check_name_availability_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            arguments=arguments,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NameAvailabilityInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _iot_dps_resource_check_name_availability_serialize(
        self,
        subscription_id,
        api_version,
        arguments,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if arguments is not None:
            _body_params = arguments


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def iot_dps_resource_get_keys_for_key_name(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of the provisioning service.")],
        key_name: Annotated[StrictStr, Field(description="Logical key name to get key-values for.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the provisioning service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SharedAccessSignatureAuthorizationRuleAccessRightsDescription:
        """Get a shared access policy by name from a provisioning service.

        Get a shared access policy by name from a provisioning service.

        :param provisioning_service_name: Name of the provisioning service. (required)
        :type provisioning_service_name: str
        :param key_name: Logical key name to get key-values for. (required)
        :type key_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the provisioning service. (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_get_keys_for_key_name_serialize(
            provisioning_service_name=provisioning_service_name,
            key_name=key_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SharedAccessSignatureAuthorizationRuleAccessRightsDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def iot_dps_resource_get_keys_for_key_name_with_http_info(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of the provisioning service.")],
        key_name: Annotated[StrictStr, Field(description="Logical key name to get key-values for.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the provisioning service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SharedAccessSignatureAuthorizationRuleAccessRightsDescription]:
        """Get a shared access policy by name from a provisioning service.

        Get a shared access policy by name from a provisioning service.

        :param provisioning_service_name: Name of the provisioning service. (required)
        :type provisioning_service_name: str
        :param key_name: Logical key name to get key-values for. (required)
        :type key_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the provisioning service. (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_get_keys_for_key_name_serialize(
            provisioning_service_name=provisioning_service_name,
            key_name=key_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SharedAccessSignatureAuthorizationRuleAccessRightsDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def iot_dps_resource_get_keys_for_key_name_without_preload_content(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of the provisioning service.")],
        key_name: Annotated[StrictStr, Field(description="Logical key name to get key-values for.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group that contains the provisioning service.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a shared access policy by name from a provisioning service.

        Get a shared access policy by name from a provisioning service.

        :param provisioning_service_name: Name of the provisioning service. (required)
        :type provisioning_service_name: str
        :param key_name: Logical key name to get key-values for. (required)
        :type key_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group that contains the provisioning service. (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_get_keys_for_key_name_serialize(
            provisioning_service_name=provisioning_service_name,
            key_name=key_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SharedAccessSignatureAuthorizationRuleAccessRightsDescription",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _iot_dps_resource_get_keys_for_key_name_serialize(
        self,
        provisioning_service_name,
        key_name,
        subscription_id,
        resource_group_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if provisioning_service_name is not None:
            _path_params['provisioningServiceName'] = provisioning_service_name
        if key_name is not None:
            _path_params['keyName'] = key_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def iot_dps_resource_list_keys(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="The provisioning service name to get the shared access keys for.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="resource group name")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SharedAccessSignatureAuthorizationRuleListResult:
        """Get the security metadata for a provisioning service.

        Get the security metadata for a provisioning service.

        :param provisioning_service_name: The provisioning service name to get the shared access keys for. (required)
        :type provisioning_service_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: resource group name (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_list_keys_serialize(
            provisioning_service_name=provisioning_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SharedAccessSignatureAuthorizationRuleListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def iot_dps_resource_list_keys_with_http_info(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="The provisioning service name to get the shared access keys for.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="resource group name")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SharedAccessSignatureAuthorizationRuleListResult]:
        """Get the security metadata for a provisioning service.

        Get the security metadata for a provisioning service.

        :param provisioning_service_name: The provisioning service name to get the shared access keys for. (required)
        :type provisioning_service_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: resource group name (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_list_keys_serialize(
            provisioning_service_name=provisioning_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SharedAccessSignatureAuthorizationRuleListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def iot_dps_resource_list_keys_without_preload_content(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="The provisioning service name to get the shared access keys for.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="resource group name")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the security metadata for a provisioning service.

        Get the security metadata for a provisioning service.

        :param provisioning_service_name: The provisioning service name to get the shared access keys for. (required)
        :type provisioning_service_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: resource group name (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_list_keys_serialize(
            provisioning_service_name=provisioning_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SharedAccessSignatureAuthorizationRuleListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _iot_dps_resource_list_keys_serialize(
        self,
        provisioning_service_name,
        subscription_id,
        resource_group_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if provisioning_service_name is not None:
            _path_params['provisioningServiceName'] = provisioning_service_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



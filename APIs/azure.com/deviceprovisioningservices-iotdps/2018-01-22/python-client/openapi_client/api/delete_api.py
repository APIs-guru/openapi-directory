# coding: utf-8

"""
    iotDpsClient

    API for using the Azure IoT Hub Device Provisioning Service features.

    The version of the OpenAPI document: 2018-01-22
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DELETEApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def dps_certificate_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group identifier.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate")],
        provisioning_service_name: Annotated[StrictStr, Field(description="The name of the provisioning service.")],
        certificate_name: Annotated[StrictStr, Field(description="This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        certificate_name2: Annotated[Optional[StrictStr], Field(description="This is optional, and it is the Common Name of the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data within the certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="A description that mentions the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Time the certificate is created.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Time the certificate is last updated.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains a private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete the Provisioning Service Certificate.

        Deletes the specified certificate associated with the Provisioning Service

        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group identifier. (required)
        :type resource_group_name: str
        :param if_match: ETag of the certificate (required)
        :type if_match: str
        :param provisioning_service_name: The name of the provisioning service. (required)
        :type provisioning_service_name: str
        :param certificate_name: This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
        :type certificate_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param certificate_name2: This is optional, and it is the Common Name of the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data within the certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: A description that mentions the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Time the certificate is created.
        :type certificate_created: datetime
        :param certificate_last_updated: Time the certificate is last updated.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains a private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            if_match=if_match,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            api_version=api_version,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dps_certificate_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group identifier.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate")],
        provisioning_service_name: Annotated[StrictStr, Field(description="The name of the provisioning service.")],
        certificate_name: Annotated[StrictStr, Field(description="This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        certificate_name2: Annotated[Optional[StrictStr], Field(description="This is optional, and it is the Common Name of the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data within the certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="A description that mentions the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Time the certificate is created.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Time the certificate is last updated.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains a private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete the Provisioning Service Certificate.

        Deletes the specified certificate associated with the Provisioning Service

        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group identifier. (required)
        :type resource_group_name: str
        :param if_match: ETag of the certificate (required)
        :type if_match: str
        :param provisioning_service_name: The name of the provisioning service. (required)
        :type provisioning_service_name: str
        :param certificate_name: This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
        :type certificate_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param certificate_name2: This is optional, and it is the Common Name of the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data within the certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: A description that mentions the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Time the certificate is created.
        :type certificate_created: datetime
        :param certificate_last_updated: Time the certificate is last updated.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains a private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            if_match=if_match,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            api_version=api_version,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dps_certificate_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group identifier.")],
        if_match: Annotated[StrictStr, Field(description="ETag of the certificate")],
        provisioning_service_name: Annotated[StrictStr, Field(description="The name of the provisioning service.")],
        certificate_name: Annotated[StrictStr, Field(description="This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        certificate_name2: Annotated[Optional[StrictStr], Field(description="This is optional, and it is the Common Name of the certificate.")] = None,
        certificate_raw_bytes: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="Raw data within the certificate.")] = None,
        certificate_is_verified: Annotated[Optional[StrictBool], Field(description="Indicates if certificate has been verified by owner of the private key.")] = None,
        certificate_purpose: Annotated[Optional[StrictStr], Field(description="A description that mentions the purpose of the certificate.")] = None,
        certificate_created: Annotated[Optional[datetime], Field(description="Time the certificate is created.")] = None,
        certificate_last_updated: Annotated[Optional[datetime], Field(description="Time the certificate is last updated.")] = None,
        certificate_has_private_key: Annotated[Optional[StrictBool], Field(description="Indicates if the certificate contains a private key.")] = None,
        certificate_nonce: Annotated[Optional[StrictStr], Field(description="Random number generated to indicate Proof of Possession.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete the Provisioning Service Certificate.

        Deletes the specified certificate associated with the Provisioning Service

        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group identifier. (required)
        :type resource_group_name: str
        :param if_match: ETag of the certificate (required)
        :type if_match: str
        :param provisioning_service_name: The name of the provisioning service. (required)
        :type provisioning_service_name: str
        :param certificate_name: This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
        :type certificate_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param certificate_name2: This is optional, and it is the Common Name of the certificate.
        :type certificate_name2: str
        :param certificate_raw_bytes: Raw data within the certificate.
        :type certificate_raw_bytes: bytearray
        :param certificate_is_verified: Indicates if certificate has been verified by owner of the private key.
        :type certificate_is_verified: bool
        :param certificate_purpose: A description that mentions the purpose of the certificate.
        :type certificate_purpose: str
        :param certificate_created: Time the certificate is created.
        :type certificate_created: datetime
        :param certificate_last_updated: Time the certificate is last updated.
        :type certificate_last_updated: datetime
        :param certificate_has_private_key: Indicates if the certificate contains a private key.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession.
        :type certificate_nonce: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dps_certificate_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            if_match=if_match,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            api_version=api_version,
            certificate_name2=certificate_name2,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dps_certificate_delete_serialize(
        self,
        subscription_id,
        resource_group_name,
        if_match,
        provisioning_service_name,
        certificate_name,
        api_version,
        certificate_name2,
        certificate_raw_bytes,
        certificate_is_verified,
        certificate_purpose,
        certificate_created,
        certificate_last_updated,
        certificate_has_private_key,
        certificate_nonce,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if provisioning_service_name is not None:
            _path_params['provisioningServiceName'] = provisioning_service_name
        if certificate_name is not None:
            _path_params['certificateName'] = certificate_name
        # process the query parameters
        if certificate_name2 is not None:
            
            _query_params.append(('certificate.name', certificate_name2))
            
        if certificate_raw_bytes is not None:
            
            _query_params.append(('certificate.rawBytes', certificate_raw_bytes))
            
        if certificate_is_verified is not None:
            
            _query_params.append(('certificate.isVerified', certificate_is_verified))
            
        if certificate_purpose is not None:
            
            _query_params.append(('certificate.purpose', certificate_purpose))
            
        if certificate_created is not None:
            if isinstance(certificate_created, datetime):
                _query_params.append(
                    (
                        'certificate.created',
                        certificate_created.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('certificate.created', certificate_created))
            
        if certificate_last_updated is not None:
            if isinstance(certificate_last_updated, datetime):
                _query_params.append(
                    (
                        'certificate.lastUpdated',
                        certificate_last_updated.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('certificate.lastUpdated', certificate_last_updated))
            
        if certificate_has_private_key is not None:
            
            _query_params.append(('certificate.hasPrivateKey', certificate_has_private_key))
            
        if certificate_nonce is not None:
            
            _query_params.append(('certificate.nonce', certificate_nonce))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def iot_dps_resource_delete(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of provisioning service to delete.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group identifier.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete the Provisioning Service

        Deletes the Provisioning Service.

        :param provisioning_service_name: Name of provisioning service to delete. (required)
        :type provisioning_service_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group identifier. (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_delete_serialize(
            provisioning_service_name=provisioning_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def iot_dps_resource_delete_with_http_info(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of provisioning service to delete.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group identifier.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete the Provisioning Service

        Deletes the Provisioning Service.

        :param provisioning_service_name: Name of provisioning service to delete. (required)
        :type provisioning_service_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group identifier. (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_delete_serialize(
            provisioning_service_name=provisioning_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def iot_dps_resource_delete_without_preload_content(
        self,
        provisioning_service_name: Annotated[StrictStr, Field(description="Name of provisioning service to delete.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription identifier.")],
        resource_group_name: Annotated[StrictStr, Field(description="Resource group identifier.")],
        api_version: Annotated[StrictStr, Field(description="The version of the API.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete the Provisioning Service

        Deletes the Provisioning Service.

        :param provisioning_service_name: Name of provisioning service to delete. (required)
        :type provisioning_service_name: str
        :param subscription_id: The subscription identifier. (required)
        :type subscription_id: str
        :param resource_group_name: Resource group identifier. (required)
        :type resource_group_name: str
        :param api_version: The version of the API. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._iot_dps_resource_delete_serialize(
            provisioning_service_name=provisioning_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _iot_dps_resource_delete_serialize(
        self,
        provisioning_service_name,
        subscription_id,
        resource_group_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if provisioning_service_name is not None:
            _path_params['provisioningServiceName'] = provisioning_service_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



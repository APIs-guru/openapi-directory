# coding: utf-8

"""
    DeploymentAdminClient

    Deployment Admin Client.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action_plan_admin_properties_error import ActionPlanAdminPropertiesError
from openapi_client.models.action_plan_admin_properties_parameters import ActionPlanAdminPropertiesParameters
from typing import Optional, Set
from typing_extensions import Self

class ActionPlanAdminProperties(BaseModel):
    """
    Action Plan Properties
    """ # noqa: E501
    action_plan_instance_id: Optional[StrictStr] = Field(default=None, description="Action plan instance identifier", alias="actionPlanInstanceId")
    action_plan_uri: Optional[StrictStr] = Field(default=None, description="Action plan uri", alias="actionPlanUri")
    blob_container_name: Optional[StrictStr] = Field(default=None, description="Blob container name storing the deployment data", alias="blobContainerName")
    end_time: Optional[datetime] = Field(default=None, description="The deployment end time", alias="endTime")
    error: Optional[ActionPlanAdminPropertiesError] = None
    parameters: Optional[ActionPlanAdminPropertiesParameters] = None
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state", alias="provisioningState")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="The target resource group name", alias="resourceGroupName")
    start_time: Optional[datetime] = Field(default=None, description="The deployment start time", alias="startTime")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The target subscription identifier", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["actionPlanInstanceId", "actionPlanUri", "blobContainerName", "endTime", "error", "parameters", "provisioningState", "resourceGroupName", "startTime", "subscriptionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionPlanAdminProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionPlanAdminProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionPlanInstanceId": obj.get("actionPlanInstanceId"),
            "actionPlanUri": obj.get("actionPlanUri"),
            "blobContainerName": obj.get("blobContainerName"),
            "endTime": obj.get("endTime"),
            "error": ActionPlanAdminPropertiesError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "parameters": ActionPlanAdminPropertiesParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "startTime": obj.get("startTime"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj



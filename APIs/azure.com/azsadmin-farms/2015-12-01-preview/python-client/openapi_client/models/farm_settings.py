# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2015-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FarmSettings(BaseModel):
    """
    Storage farm settings.
    """ # noqa: E501
    bandwidth_throttle_is_enabled: Optional[StrictBool] = Field(default=None, description="Switch of bandwidth throttle enablement.", alias="bandwidthThrottleIsEnabled")
    cors_allowed_origins_list: Optional[StrictStr] = Field(default=None, description="The list of allowed origins.", alias="corsAllowedOriginsList")
    data_center_uri_host_suffixes: Optional[StrictStr] = Field(default=None, description="The suffixes of URI of hosts in data center.", alias="dataCenterUriHostSuffixes")
    default_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default egress threshold (in Gbps).", alias="defaultEgressThresholdInGbps")
    default_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default ingress threshold (in Gbps).", alias="defaultIngressThresholdInGbps")
    default_intranet_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default Intranet egress threshold (in Gbps).", alias="defaultIntranetEgressThresholdInGbps")
    default_intranet_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default Intranet ingress threshold (in Gbps).", alias="defaultIntranetIngressThresholdInGbps")
    default_request_threshold_in_tps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default request threshold (in TPS).", alias="defaultRequestThresholdInTps")
    default_throttle_probability_decay_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Interval (in seconds) of default throttle probability decay.", alias="defaultThrottleProbabilityDecayIntervalInSeconds")
    default_total_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default total egress threshold (in Gbps).", alias="defaultTotalEgressThresholdInGbps")
    default_total_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default total ingress threshold (in Gbps).", alias="defaultTotalIngressThresholdInGbps")
    feedback_refresh_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Interval (in seconds) of feedback refresh.", alias="feedbackRefreshIntervalInSeconds")
    grace_period_for_full_throttling_in_refresh_intervals: Optional[StrictInt] = Field(default=None, description="Grace period for full throttling in refresh intervals.", alias="gracePeriodForFullThrottlingInRefreshIntervals")
    grace_period_max_throttle_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum probability of throttle in grace period.", alias="gracePeriodMaxThrottleProbability")
    host_style_http_port: Optional[StrictInt] = Field(default=None, description="Host style HTTP port.", alias="hostStyleHttpPort")
    host_style_https_port: Optional[StrictInt] = Field(default=None, description="Host style HTTPs port.", alias="hostStyleHttpsPort")
    minimum_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum egress threshold (in Gbps).", alias="minimumEgressThresholdInGbps")
    minimum_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum ingress threshold (in Gbps).", alias="minimumIngressThresholdInGbps")
    minimum_intranet_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum Intranet egress threshold (in Gbps).", alias="minimumIntranetEgressThresholdInGbps")
    minimum_intranet_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum Intranet ingress threshold (in Gbps).", alias="minimumIntranetIngressThresholdInGbps")
    minimum_request_threshold_in_tps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum request threshold (in TPS).", alias="minimumRequestThresholdInTps")
    minimum_total_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum total egress threshold (in Gbp", alias="minimumTotalEgressThresholdInGbps")
    minimum_total_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum total ingress threshold (in Gbps).", alias="minimumTotalIngressThresholdInGbps")
    number_of_accounts_to_sync: Optional[StrictInt] = Field(default=None, description="Number of accounts to sync.", alias="numberOfAccountsToSync")
    overall_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall egress threshold (in Gbps).", alias="overallEgressThresholdInGbps")
    overall_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall ingress threshold (in Gbps)", alias="overallIngressThresholdInGbps")
    overall_intranet_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall Intranet egress threshold (in Gbps).", alias="overallIntranetEgressThresholdInGbps")
    overall_intranet_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall Intranet ingress threshold (in Gbps).", alias="overallIntranetIngressThresholdInGbps")
    overall_request_threshold_in_tps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall request threshold (in TPS).", alias="overallRequestThresholdInTps")
    overall_total_egress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall total egress threshold (in Gbps).", alias="overallTotalEgressThresholdInGbps")
    overall_total_ingress_threshold_in_gbps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall total ingress threshold (in Gbps).", alias="overallTotalIngressThresholdInGbps")
    retention_period_for_deleted_storage_accounts_in_days: Optional[StrictInt] = Field(default=None, description="The retention period (in days) for deleted storage account.", alias="retentionPeriodForDeletedStorageAccountsInDays")
    settings_polling_interval_in_second: Optional[StrictInt] = Field(default=None, description="The polling interval (in second).", alias="settingsPollingIntervalInSecond")
    tolerance_factor_for_egress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for egress.", alias="toleranceFactorForEgress")
    tolerance_factor_for_ingress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for ingress.", alias="toleranceFactorForIngress")
    tolerance_factor_for_intranet_egress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for Intranet egress.", alias="toleranceFactorForIntranetEgress")
    tolerance_factor_for_intranet_ingress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for Intranet ingress.", alias="toleranceFactorForIntranetIngress")
    tolerance_factor_for_total_egress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for total egress.", alias="toleranceFactorForTotalEgress")
    tolerance_factor_for_total_ingress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for total ingress.", alias="toleranceFactorForTotalIngress")
    tolerance_factor_for_tps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tolerance factor for TPS.", alias="toleranceFactorForTps")
    usage_collection_interval_in_seconds: Optional[StrictInt] = Field(default=None, description="Interval (in seconds) of storage usage collection.", alias="usageCollectionIntervalInSeconds")
    __properties: ClassVar[List[str]] = ["bandwidthThrottleIsEnabled", "corsAllowedOriginsList", "dataCenterUriHostSuffixes", "defaultEgressThresholdInGbps", "defaultIngressThresholdInGbps", "defaultIntranetEgressThresholdInGbps", "defaultIntranetIngressThresholdInGbps", "defaultRequestThresholdInTps", "defaultThrottleProbabilityDecayIntervalInSeconds", "defaultTotalEgressThresholdInGbps", "defaultTotalIngressThresholdInGbps", "feedbackRefreshIntervalInSeconds", "gracePeriodForFullThrottlingInRefreshIntervals", "gracePeriodMaxThrottleProbability", "hostStyleHttpPort", "hostStyleHttpsPort", "minimumEgressThresholdInGbps", "minimumIngressThresholdInGbps", "minimumIntranetEgressThresholdInGbps", "minimumIntranetIngressThresholdInGbps", "minimumRequestThresholdInTps", "minimumTotalEgressThresholdInGbps", "minimumTotalIngressThresholdInGbps", "numberOfAccountsToSync", "overallEgressThresholdInGbps", "overallIngressThresholdInGbps", "overallIntranetEgressThresholdInGbps", "overallIntranetIngressThresholdInGbps", "overallRequestThresholdInTps", "overallTotalEgressThresholdInGbps", "overallTotalIngressThresholdInGbps", "retentionPeriodForDeletedStorageAccountsInDays", "settingsPollingIntervalInSecond", "toleranceFactorForEgress", "toleranceFactorForIngress", "toleranceFactorForIntranetEgress", "toleranceFactorForIntranetIngress", "toleranceFactorForTotalEgress", "toleranceFactorForTotalIngress", "toleranceFactorForTps", "usageCollectionIntervalInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FarmSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FarmSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthThrottleIsEnabled": obj.get("bandwidthThrottleIsEnabled"),
            "corsAllowedOriginsList": obj.get("corsAllowedOriginsList"),
            "dataCenterUriHostSuffixes": obj.get("dataCenterUriHostSuffixes"),
            "defaultEgressThresholdInGbps": obj.get("defaultEgressThresholdInGbps"),
            "defaultIngressThresholdInGbps": obj.get("defaultIngressThresholdInGbps"),
            "defaultIntranetEgressThresholdInGbps": obj.get("defaultIntranetEgressThresholdInGbps"),
            "defaultIntranetIngressThresholdInGbps": obj.get("defaultIntranetIngressThresholdInGbps"),
            "defaultRequestThresholdInTps": obj.get("defaultRequestThresholdInTps"),
            "defaultThrottleProbabilityDecayIntervalInSeconds": obj.get("defaultThrottleProbabilityDecayIntervalInSeconds"),
            "defaultTotalEgressThresholdInGbps": obj.get("defaultTotalEgressThresholdInGbps"),
            "defaultTotalIngressThresholdInGbps": obj.get("defaultTotalIngressThresholdInGbps"),
            "feedbackRefreshIntervalInSeconds": obj.get("feedbackRefreshIntervalInSeconds"),
            "gracePeriodForFullThrottlingInRefreshIntervals": obj.get("gracePeriodForFullThrottlingInRefreshIntervals"),
            "gracePeriodMaxThrottleProbability": obj.get("gracePeriodMaxThrottleProbability"),
            "hostStyleHttpPort": obj.get("hostStyleHttpPort"),
            "hostStyleHttpsPort": obj.get("hostStyleHttpsPort"),
            "minimumEgressThresholdInGbps": obj.get("minimumEgressThresholdInGbps"),
            "minimumIngressThresholdInGbps": obj.get("minimumIngressThresholdInGbps"),
            "minimumIntranetEgressThresholdInGbps": obj.get("minimumIntranetEgressThresholdInGbps"),
            "minimumIntranetIngressThresholdInGbps": obj.get("minimumIntranetIngressThresholdInGbps"),
            "minimumRequestThresholdInTps": obj.get("minimumRequestThresholdInTps"),
            "minimumTotalEgressThresholdInGbps": obj.get("minimumTotalEgressThresholdInGbps"),
            "minimumTotalIngressThresholdInGbps": obj.get("minimumTotalIngressThresholdInGbps"),
            "numberOfAccountsToSync": obj.get("numberOfAccountsToSync"),
            "overallEgressThresholdInGbps": obj.get("overallEgressThresholdInGbps"),
            "overallIngressThresholdInGbps": obj.get("overallIngressThresholdInGbps"),
            "overallIntranetEgressThresholdInGbps": obj.get("overallIntranetEgressThresholdInGbps"),
            "overallIntranetIngressThresholdInGbps": obj.get("overallIntranetIngressThresholdInGbps"),
            "overallRequestThresholdInTps": obj.get("overallRequestThresholdInTps"),
            "overallTotalEgressThresholdInGbps": obj.get("overallTotalEgressThresholdInGbps"),
            "overallTotalIngressThresholdInGbps": obj.get("overallTotalIngressThresholdInGbps"),
            "retentionPeriodForDeletedStorageAccountsInDays": obj.get("retentionPeriodForDeletedStorageAccountsInDays"),
            "settingsPollingIntervalInSecond": obj.get("settingsPollingIntervalInSecond"),
            "toleranceFactorForEgress": obj.get("toleranceFactorForEgress"),
            "toleranceFactorForIngress": obj.get("toleranceFactorForIngress"),
            "toleranceFactorForIntranetEgress": obj.get("toleranceFactorForIntranetEgress"),
            "toleranceFactorForIntranetIngress": obj.get("toleranceFactorForIntranetIngress"),
            "toleranceFactorForTotalEgress": obj.get("toleranceFactorForTotalEgress"),
            "toleranceFactorForTotalIngress": obj.get("toleranceFactorForTotalIngress"),
            "toleranceFactorForTps": obj.get("toleranceFactorForTps"),
            "usageCollectionIntervalInSeconds": obj.get("usageCollectionIntervalInSeconds")
        })
        return _obj



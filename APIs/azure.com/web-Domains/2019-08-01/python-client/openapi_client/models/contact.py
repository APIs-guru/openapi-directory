# coding: utf-8

"""
    Domains API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class Contact(BaseModel):
    """
    Contact information for domain registration. If 'Domain Privacy' option is not selected then the contact information is made publicly available through the Whois  directories as per ICANN requirements.
    """ # noqa: E501
    address_mailing: Optional[Address] = Field(default=None, alias="addressMailing")
    email: StrictStr = Field(description="Email address.")
    fax: Optional[StrictStr] = Field(default=None, description="Fax number.")
    job_title: Optional[StrictStr] = Field(default=None, description="Job title.", alias="jobTitle")
    name_first: StrictStr = Field(description="First name.", alias="nameFirst")
    name_last: StrictStr = Field(description="Last name.", alias="nameLast")
    name_middle: Optional[StrictStr] = Field(default=None, description="Middle name.", alias="nameMiddle")
    organization: Optional[StrictStr] = Field(default=None, description="Organization contact belongs to.")
    phone: StrictStr = Field(description="Phone number.")
    __properties: ClassVar[List[str]] = ["addressMailing", "email", "fax", "jobTitle", "nameFirst", "nameLast", "nameMiddle", "organization", "phone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address_mailing
        if self.address_mailing:
            _dict['addressMailing'] = self.address_mailing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressMailing": Address.from_dict(obj["addressMailing"]) if obj.get("addressMailing") is not None else None,
            "email": obj.get("email"),
            "fax": obj.get("fax"),
            "jobTitle": obj.get("jobTitle"),
            "nameFirst": obj.get("nameFirst"),
            "nameLast": obj.get("nameLast"),
            "nameMiddle": obj.get("nameMiddle"),
            "organization": obj.get("organization"),
            "phone": obj.get("phone")
        })
        return _obj



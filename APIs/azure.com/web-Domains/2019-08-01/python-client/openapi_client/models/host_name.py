# coding: utf-8

"""
    Domains API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HostName(BaseModel):
    """
    Details of a hostname derived from a domain.
    """ # noqa: E501
    azure_resource_name: Optional[StrictStr] = Field(default=None, description="Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.", alias="azureResourceName")
    azure_resource_type: Optional[StrictStr] = Field(default=None, description="Type of the Azure resource the hostname is assigned to.", alias="azureResourceType")
    custom_host_name_dns_record_type: Optional[StrictStr] = Field(default=None, description="Type of the DNS record.", alias="customHostNameDnsRecordType")
    host_name_type: Optional[StrictStr] = Field(default=None, description="Type of the hostname.", alias="hostNameType")
    name: Optional[StrictStr] = Field(default=None, description="Name of the hostname.")
    site_names: Optional[List[StrictStr]] = Field(default=None, description="List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.", alias="siteNames")
    __properties: ClassVar[List[str]] = ["azureResourceName", "azureResourceType", "customHostNameDnsRecordType", "hostNameType", "name", "siteNames"]

    @field_validator('azure_resource_type')
    def azure_resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Website', 'TrafficManager']):
            raise ValueError("must be one of enum values ('Website', 'TrafficManager')")
        return value

    @field_validator('custom_host_name_dns_record_type')
    def custom_host_name_dns_record_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CName', 'A']):
            raise ValueError("must be one of enum values ('CName', 'A')")
        return value

    @field_validator('host_name_type')
    def host_name_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Verified', 'Managed']):
            raise ValueError("must be one of enum values ('Verified', 'Managed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureResourceName": obj.get("azureResourceName"),
            "azureResourceType": obj.get("azureResourceType"),
            "customHostNameDnsRecordType": obj.get("customHostNameDnsRecordType"),
            "hostNameType": obj.get("hostNameType"),
            "name": obj.get("name"),
            "siteNames": obj.get("siteNames")
        })
        return _obj



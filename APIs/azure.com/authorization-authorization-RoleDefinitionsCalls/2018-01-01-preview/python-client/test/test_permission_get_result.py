# coding: utf-8

"""
    AuthorizationManagementClient

    Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations allow you to manage role definitions. A role definition describes the set of actions that can be performed on resources.

    The version of the OpenAPI document: 2018-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.permission_get_result import PermissionGetResult

class TestPermissionGetResult(unittest.TestCase):
    """PermissionGetResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PermissionGetResult:
        """Test PermissionGetResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PermissionGetResult`
        """
        model = PermissionGetResult()
        if include_optional:
            return PermissionGetResult(
                next_link = '',
                value = [
                    openapi_client.models.permission.Permission(
                        actions = [
                            ''
                            ], 
                        data_actions = [
                            ''
                            ], 
                        not_actions = [
                            ''
                            ], 
                        not_data_actions = [
                            ''
                            ], )
                    ]
            )
        else:
            return PermissionGetResult(
        )
        """

    def testPermissionGetResult(self):
        """Test PermissionGetResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

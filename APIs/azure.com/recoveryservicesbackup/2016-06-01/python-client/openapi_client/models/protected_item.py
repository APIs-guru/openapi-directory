# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.azure_iaa_s_classic_compute_vm_protected_item import AzureIaaSClassicComputeVMProtectedItem
    from openapi_client.models.azure_iaa_s_compute_vm_protected_item import AzureIaaSComputeVMProtectedItem
    from openapi_client.models.azure_iaa_svm_protected_item import AzureIaaSVMProtectedItem
    from openapi_client.models.azure_sql_protected_item import AzureSqlProtectedItem
    from openapi_client.models.mab_file_folder_protected_item import MabFileFolderProtectedItem

class ProtectedItem(BaseModel):
    """
    The base class for backup items.
    """ # noqa: E501
    backup_management_type: Optional[StrictStr] = Field(default=None, description="The backup management type associated with the backup item.", alias="backupManagementType")
    last_recovery_point: Optional[datetime] = Field(default=None, description="The timestamp when the most recent backup copy was created for this backup item.", alias="lastRecoveryPoint")
    policy_id: Optional[StrictStr] = Field(default=None, description="The ID of the backup policy associated with this backup item.", alias="policyId")
    protected_item_type: Optional[StrictStr] = Field(default=None, description="The backup item type.", alias="protectedItemType")
    source_resource_id: Optional[StrictStr] = Field(default=None, description="The ID of the resource to be backed up.", alias="sourceResourceId")
    workload_type: Optional[StrictStr] = Field(default=None, description="The workload type for this item.", alias="workloadType")
    __properties: ClassVar[List[str]] = ["backupManagementType", "lastRecoveryPoint", "policyId", "protectedItemType", "sourceResourceId", "workloadType"]

    @field_validator('backup_management_type')
    def backup_management_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql']):
            raise ValueError("must be one of enum values ('Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql')")
        return value

    @field_validator('workload_type')
    def workload_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'VM', 'FileFolder', 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'DPMUnknown']):
            raise ValueError("must be one of enum values ('Invalid', 'VM', 'FileFolder', 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'DPMUnknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'protectedItemType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AzureIaaSClassicComputeVMProtectedItem': 'AzureIaaSClassicComputeVMProtectedItem','AzureIaaSComputeVMProtectedItem': 'AzureIaaSComputeVMProtectedItem','AzureIaaSVMProtectedItem': 'AzureIaaSVMProtectedItem','AzureSqlProtectedItem': 'AzureSqlProtectedItem','MabFileFolderProtectedItem': 'MabFileFolderProtectedItem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AzureIaaSClassicComputeVMProtectedItem, AzureIaaSComputeVMProtectedItem, AzureIaaSVMProtectedItem, AzureSqlProtectedItem, MabFileFolderProtectedItem]]:
        """Create an instance of ProtectedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AzureIaaSClassicComputeVMProtectedItem, AzureIaaSComputeVMProtectedItem, AzureIaaSVMProtectedItem, AzureSqlProtectedItem, MabFileFolderProtectedItem]]:
        """Create an instance of ProtectedItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AzureIaaSClassicComputeVMProtectedItem':
            return import_module("openapi_client.models.azure_iaa_s_classic_compute_vm_protected_item").AzureIaaSClassicComputeVMProtectedItem.from_dict(obj)
        if object_type ==  'AzureIaaSComputeVMProtectedItem':
            return import_module("openapi_client.models.azure_iaa_s_compute_vm_protected_item").AzureIaaSComputeVMProtectedItem.from_dict(obj)
        if object_type ==  'AzureIaaSVMProtectedItem':
            return import_module("openapi_client.models.azure_iaa_svm_protected_item").AzureIaaSVMProtectedItem.from_dict(obj)
        if object_type ==  'AzureSqlProtectedItem':
            return import_module("openapi_client.models.azure_sql_protected_item").AzureSqlProtectedItem.from_dict(obj)
        if object_type ==  'MabFileFolderProtectedItem':
            return import_module("openapi_client.models.mab_file_folder_protected_item").MabFileFolderProtectedItem.from_dict(obj)

        raise ValueError("ProtectedItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



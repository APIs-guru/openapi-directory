# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_details import EncryptionDetails
from openapi_client.models.restore_request import RestoreRequest
from typing import Optional, Set
from typing_extensions import Self

class IaasVMRestoreRequest(RestoreRequest):
    """
    IaaS VM workload-specific restore.
    """ # noqa: E501
    affinity_group: Optional[StrictStr] = Field(default=None, description="The affinity group associated with the VM to be restored. Affinity groups are used only for Classic-deployed virtual machines.", alias="affinityGroup")
    create_new_cloud_service: Optional[StrictBool] = Field(default=None, description="Asks the question if a new cloud service should be created while restoring the VM. If the answer is false, the VM is restored to the same cloud service.", alias="createNewCloudService")
    encryption_details: Optional[EncryptionDetails] = Field(default=None, alias="encryptionDetails")
    recovery_point_id: Optional[StrictStr] = Field(default=None, description="The ID of the backup copy to be recovered.", alias="recoveryPointId")
    recovery_type: Optional[StrictStr] = Field(default=None, description="The type of this recovery.", alias="recoveryType")
    region: Optional[StrictStr] = Field(default=None, description="The region where the virtual machine is restored.")
    source_resource_id: Optional[StrictStr] = Field(default=None, description="The fully qualified Resource Manager ID of the VM being recovered.", alias="sourceResourceId")
    storage_account_id: Optional[StrictStr] = Field(default=None, description="The fully qualified Resource Manager ID of the storage account where the VM will be restored.", alias="storageAccountId")
    subnet_id: Optional[StrictStr] = Field(default=None, description="Subnet ID is the identifier for the VM to be restored. For Classic VMs the subnet ID would be {VnetID}/Subnet/{SubnetName}, and for the Resource Manager VMs, the subnet ID would be the Resource Manager resource ID used to represent the subnet.", alias="subnetId")
    target_domain_name_id: Optional[StrictStr] = Field(default=None, description="The fully qualified Resource Manager ID of the domain name to be associated with the VM being restored. Use the Resource Manager ID to identify the domain, only for Classic-deployed virtual machines.", alias="targetDomainNameId")
    target_resource_group_id: Optional[StrictStr] = Field(default=None, description="The Resource Manager ID of the resource group you're creating for this VM and other artifacts.      For example: /subscriptions/{subId}/resourcegroups/{rg}", alias="targetResourceGroupId")
    target_virtual_machine_id: Optional[StrictStr] = Field(default=None, description="The complete Resource Manager ID of the VM that will be created.              For example: /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}", alias="targetVirtualMachineId")
    virtual_network_id: Optional[StrictStr] = Field(default=None, description="This is the virtual network ID of the vnet that is attached to the virtual machine.              Your join action permissions are validated during the linked access.", alias="virtualNetworkId")
    __properties: ClassVar[List[str]] = ["objectType"]

    @field_validator('recovery_type')
    def recovery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'OriginalLocation', 'AlternateLocation', 'RestoreDisks']):
            raise ValueError("must be one of enum values ('Invalid', 'OriginalLocation', 'AlternateLocation', 'RestoreDisks')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IaasVMRestoreRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IaasVMRestoreRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objectType": obj.get("objectType")
        })
        return _obj



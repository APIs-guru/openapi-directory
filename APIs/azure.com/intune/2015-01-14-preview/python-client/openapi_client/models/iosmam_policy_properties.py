# coding: utf-8

"""
    IntuneResourceManagementClient

    Microsoft.Intune Resource provider Api features in the swagger-2.0 specification

    The version of the OpenAPI document: 2015-01-14-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IOSMAMPolicyProperties(BaseModel):
    """
    Intune MAM iOS Policy Properties.
    """ # noqa: E501
    file_encryption_level: Optional[StrictStr] = Field(default='deviceLocked', alias="fileEncryptionLevel")
    touch_id: Optional[StrictStr] = Field(default='enable', alias="touchId")
    access_recheck_offline_timeout: Optional[StrictStr] = Field(default=None, alias="accessRecheckOfflineTimeout")
    access_recheck_online_timeout: Optional[StrictStr] = Field(default=None, alias="accessRecheckOnlineTimeout")
    app_sharing_from_level: Optional[StrictStr] = Field(default='none', alias="appSharingFromLevel")
    app_sharing_to_level: Optional[StrictStr] = Field(default='none', alias="appSharingToLevel")
    authentication: Optional[StrictStr] = 'required'
    clipboard_sharing_level: Optional[StrictStr] = Field(default='blocked', alias="clipboardSharingLevel")
    data_backup: Optional[StrictStr] = Field(default='allow', alias="dataBackup")
    description: Optional[StrictStr] = None
    device_compliance: Optional[StrictStr] = Field(default='enable', alias="deviceCompliance")
    file_sharing_save_as: Optional[StrictStr] = Field(default='allow', alias="fileSharingSaveAs")
    friendly_name: StrictStr = Field(alias="friendlyName")
    group_status: Optional[StrictStr] = Field(default='notTargeted', alias="groupStatus")
    last_modified_time: Optional[datetime] = Field(default=None, alias="lastModifiedTime")
    managed_browser: Optional[StrictStr] = Field(default='required', alias="managedBrowser")
    num_of_apps: Optional[StrictInt] = Field(default=None, alias="numOfApps")
    offline_wipe_timeout: Optional[StrictStr] = Field(default=None, alias="offlineWipeTimeout")
    pin: Optional[StrictStr] = 'required'
    pin_num_retry: Optional[StrictInt] = Field(default=None, alias="pinNumRetry")
    __properties: ClassVar[List[str]] = ["accessRecheckOfflineTimeout", "accessRecheckOnlineTimeout", "appSharingFromLevel", "appSharingToLevel", "authentication", "clipboardSharingLevel", "dataBackup", "description", "deviceCompliance", "fileSharingSaveAs", "friendlyName", "groupStatus", "lastModifiedTime", "managedBrowser", "numOfApps", "offlineWipeTimeout", "pin", "pinNumRetry"]

    @field_validator('file_encryption_level')
    def file_encryption_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['deviceLocked', 'deviceLockedExceptFilesOpen', 'afterDeviceRestart', 'useDeviceSettings']):
            raise ValueError("must be one of enum values ('deviceLocked', 'deviceLockedExceptFilesOpen', 'afterDeviceRestart', 'useDeviceSettings')")
        return value

    @field_validator('touch_id')
    def touch_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enable', 'disable']):
            raise ValueError("must be one of enum values ('enable', 'disable')")
        return value

    @field_validator('app_sharing_from_level')
    def app_sharing_from_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'policyManagedApps', 'allApps']):
            raise ValueError("must be one of enum values ('none', 'policyManagedApps', 'allApps')")
        return value

    @field_validator('app_sharing_to_level')
    def app_sharing_to_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'policyManagedApps', 'allApps']):
            raise ValueError("must be one of enum values ('none', 'policyManagedApps', 'allApps')")
        return value

    @field_validator('authentication')
    def authentication_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['required', 'notRequired']):
            raise ValueError("must be one of enum values ('required', 'notRequired')")
        return value

    @field_validator('clipboard_sharing_level')
    def clipboard_sharing_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['blocked', 'policyManagedApps', 'policyManagedAppsWithPasteIn', 'allApps']):
            raise ValueError("must be one of enum values ('blocked', 'policyManagedApps', 'policyManagedAppsWithPasteIn', 'allApps')")
        return value

    @field_validator('data_backup')
    def data_backup_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'block']):
            raise ValueError("must be one of enum values ('allow', 'block')")
        return value

    @field_validator('device_compliance')
    def device_compliance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enable', 'disable']):
            raise ValueError("must be one of enum values ('enable', 'disable')")
        return value

    @field_validator('file_sharing_save_as')
    def file_sharing_save_as_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'block']):
            raise ValueError("must be one of enum values ('allow', 'block')")
        return value

    @field_validator('group_status')
    def group_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['notTargeted', 'targeted']):
            raise ValueError("must be one of enum values ('notTargeted', 'targeted')")
        return value

    @field_validator('managed_browser')
    def managed_browser_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['required', 'notRequired']):
            raise ValueError("must be one of enum values ('required', 'notRequired')")
        return value

    @field_validator('pin')
    def pin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['required', 'notRequired']):
            raise ValueError("must be one of enum values ('required', 'notRequired')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IOSMAMPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "group_status",
            "last_modified_time",
            "num_of_apps",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IOSMAMPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessRecheckOfflineTimeout": obj.get("accessRecheckOfflineTimeout"),
            "accessRecheckOnlineTimeout": obj.get("accessRecheckOnlineTimeout"),
            "appSharingFromLevel": obj.get("appSharingFromLevel") if obj.get("appSharingFromLevel") is not None else 'none',
            "appSharingToLevel": obj.get("appSharingToLevel") if obj.get("appSharingToLevel") is not None else 'none',
            "authentication": obj.get("authentication") if obj.get("authentication") is not None else 'required',
            "clipboardSharingLevel": obj.get("clipboardSharingLevel") if obj.get("clipboardSharingLevel") is not None else 'blocked',
            "dataBackup": obj.get("dataBackup") if obj.get("dataBackup") is not None else 'allow',
            "description": obj.get("description"),
            "deviceCompliance": obj.get("deviceCompliance") if obj.get("deviceCompliance") is not None else 'enable',
            "fileSharingSaveAs": obj.get("fileSharingSaveAs") if obj.get("fileSharingSaveAs") is not None else 'allow',
            "friendlyName": obj.get("friendlyName"),
            "groupStatus": obj.get("groupStatus") if obj.get("groupStatus") is not None else 'notTargeted',
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "managedBrowser": obj.get("managedBrowser") if obj.get("managedBrowser") is not None else 'required',
            "numOfApps": obj.get("numOfApps"),
            "offlineWipeTimeout": obj.get("offlineWipeTimeout"),
            "pin": obj.get("pin") if obj.get("pin") is not None else 'required',
            "pinNumRetry": obj.get("pinNumRetry")
        })
        return _obj



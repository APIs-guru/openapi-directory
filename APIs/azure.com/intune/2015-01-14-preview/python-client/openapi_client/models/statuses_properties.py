# coding: utf-8

"""
    IntuneResourceManagementClient

    Microsoft.Intune Resource provider Api features in the swagger-2.0 specification

    The version of the OpenAPI document: 2015-01-14-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StatusesProperties(BaseModel):
    """
    StatusesProperties
    """ # noqa: E501
    deployed_policies: Optional[StrictInt] = Field(default=None, alias="deployedPolicies")
    enrolled_users: Optional[StrictInt] = Field(default=None, alias="enrolledUsers")
    flagged_users: Optional[StrictInt] = Field(default=None, alias="flaggedUsers")
    last_modified_time: Optional[datetime] = Field(default=None, alias="lastModifiedTime")
    policy_applied_users: Optional[StrictInt] = Field(default=None, alias="policyAppliedUsers")
    status: Optional[StrictStr] = None
    wipe_failed_apps: Optional[StrictInt] = Field(default=None, alias="wipeFailedApps")
    wipe_pending_apps: Optional[StrictInt] = Field(default=None, alias="wipePendingApps")
    wipe_succeeded_apps: Optional[StrictInt] = Field(default=None, alias="wipeSucceededApps")
    __properties: ClassVar[List[str]] = ["deployedPolicies", "enrolledUsers", "flaggedUsers", "lastModifiedTime", "policyAppliedUsers", "status", "wipeFailedApps", "wipePendingApps", "wipeSucceededApps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusesProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "deployed_policies",
            "enrolled_users",
            "flagged_users",
            "last_modified_time",
            "policy_applied_users",
            "status",
            "wipe_failed_apps",
            "wipe_pending_apps",
            "wipe_succeeded_apps",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusesProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployedPolicies": obj.get("deployedPolicies"),
            "enrolledUsers": obj.get("enrolledUsers"),
            "flaggedUsers": obj.get("flaggedUsers"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "policyAppliedUsers": obj.get("policyAppliedUsers"),
            "status": obj.get("status"),
            "wipeFailedApps": obj.get("wipeFailedApps"),
            "wipePendingApps": obj.get("wipePendingApps"),
            "wipeSucceededApps": obj.get("wipeSucceededApps")
        })
        return _obj



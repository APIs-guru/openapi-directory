# coding: utf-8

"""
    Certificates API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.certificate_collection import CertificateCollection

class TestCertificateCollection(unittest.TestCase):
    """CertificateCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CertificateCollection:
        """Test CertificateCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CertificateCollection`
        """
        model = CertificateCollection()
        if include_optional:
            return CertificateCollection(
                next_link = '',
                value = [
                    openapi_client.models.certificate.Certificate(
                        properties = openapi_client.models.properties.properties(
                            cer_blob = 'YQ==', 
                            expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            friendly_name = '', 
                            geo_region = '', 
                            host_names = [
                                ''
                                ], 
                            hosting_environment_profile = openapi_client.models.hosting_environment_profile.hostingEnvironmentProfile(
                                id = '', 
                                name = '', 
                                type = '', ), 
                            issue_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            issuer = '', 
                            key_vault_id = '', 
                            key_vault_secret_name = '', 
                            key_vault_secret_status = 'Initialized', 
                            password = '', 
                            pfx_blob = 'YQ==', 
                            public_key_hash = '', 
                            self_link = '', 
                            server_farm_id = '', 
                            site_name = '', 
                            subject_name = '', 
                            thumbprint = '', 
                            valid = True, ), )
                    ]
            )
        else:
            return CertificateCollection(
                value = [
                    openapi_client.models.certificate.Certificate(
                        properties = openapi_client.models.properties.properties(
                            cer_blob = 'YQ==', 
                            expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            friendly_name = '', 
                            geo_region = '', 
                            host_names = [
                                ''
                                ], 
                            hosting_environment_profile = openapi_client.models.hosting_environment_profile.hostingEnvironmentProfile(
                                id = '', 
                                name = '', 
                                type = '', ), 
                            issue_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            issuer = '', 
                            key_vault_id = '', 
                            key_vault_secret_name = '', 
                            key_vault_secret_status = 'Initialized', 
                            password = '', 
                            pfx_blob = 'YQ==', 
                            public_key_hash = '', 
                            self_link = '', 
                            server_farm_id = '', 
                            site_name = '', 
                            subject_name = '', 
                            thumbprint = '', 
                            valid = True, ), )
                    ],
        )
        """

    def testCertificateCollection(self):
        """Test CertificateCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

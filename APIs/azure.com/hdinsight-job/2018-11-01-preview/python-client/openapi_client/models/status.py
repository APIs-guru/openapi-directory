# coding: utf-8

"""
    HDInsightJobManagementClient

    The HDInsight Job Client.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.job_id import JobID
from typing import Optional, Set
from typing_extensions import Self

class Status(BaseModel):
    """
    Gets or sets the object containing the job status information.
    """ # noqa: E501
    cleanup_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress made on the cleanup.", alias="cleanupProgress")
    failure_info: Optional[StrictStr] = Field(default=None, description="The information about any failures that have occurred.", alias="failureInfo")
    finish_time: Optional[StrictInt] = Field(default=None, description="The time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.", alias="finishTime")
    history_file: Optional[StrictStr] = Field(default=None, description="The history file of the job.", alias="historyFile")
    job_acls: Optional[Dict[str, Any]] = Field(default=None, description="The object containing the job ACLs.", alias="jobACLs")
    job_complete: Optional[StrictBool] = Field(default=None, description="Whether or not the job has completed.", alias="jobComplete")
    job_file: Optional[StrictStr] = Field(default=None, description="The job configuration file.", alias="jobFile")
    job_id: Optional[JobID] = Field(default=None, alias="jobID")
    job_id: Optional[StrictStr] = Field(default=None, description="The full ID of the job.", alias="jobId")
    job_name: Optional[StrictStr] = Field(default=None, description="The user-specified job name.", alias="jobName")
    job_priority: Optional[StrictStr] = Field(default=None, description="The priority of the job.", alias="jobPriority")
    map_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress made on the maps.", alias="mapProgress")
    needed_mem: Optional[StrictInt] = Field(default=None, description="The amount of memory needed for the job.", alias="neededMem")
    num_reserved_slots: Optional[StrictInt] = Field(default=None, description="The number of slots reserved.", alias="numReservedSlots")
    num_used_slots: Optional[StrictInt] = Field(default=None, description="The number of slots used for the job.", alias="numUsedSlots")
    priority: Optional[StrictStr] = Field(default=None, description="The priority of the job.")
    queue: Optional[StrictStr] = Field(default=None, description="The job queue name.")
    reduce_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress made on the reduces.", alias="reduceProgress")
    reserved_mem: Optional[StrictInt] = Field(default=None, description="The amount of memory reserved for the job.", alias="reservedMem")
    retired: Optional[StrictBool] = Field(default=None, description="Whether or not the job has been retired. ")
    run_state: Optional[StrictInt] = Field(default=None, description="The current state of the job.", alias="runState")
    scheduling_info: Optional[StrictStr] = Field(default=None, description="The information about the scheduling of the job.", alias="schedulingInfo")
    setup_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress made on the setup.", alias="setupProgress")
    start_time: Optional[StrictInt] = Field(default=None, description="The time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="The state of the job.")
    tracking_url: Optional[StrictStr] = Field(default=None, description="The link to the web-ui for details of the job.", alias="trackingUrl")
    uber: Optional[StrictBool] = Field(default=None, description="Whether job running in uber mode.")
    used_mem: Optional[StrictInt] = Field(default=None, description="The amount of memory used by the job.", alias="usedMem")
    username: Optional[StrictStr] = Field(default=None, description="The userid of the person who submitted the job.")
    __properties: ClassVar[List[str]] = ["cleanupProgress", "failureInfo", "finishTime", "historyFile", "jobACLs", "jobComplete", "jobFile", "jobID", "jobId", "jobName", "jobPriority", "mapProgress", "neededMem", "numReservedSlots", "numUsedSlots", "priority", "queue", "reduceProgress", "reservedMem", "retired", "runState", "schedulingInfo", "setupProgress", "startTime", "state", "trackingUrl", "uber", "usedMem", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict['jobID'] = self.job_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cleanupProgress": obj.get("cleanupProgress"),
            "failureInfo": obj.get("failureInfo"),
            "finishTime": obj.get("finishTime"),
            "historyFile": obj.get("historyFile"),
            "jobACLs": obj.get("jobACLs"),
            "jobComplete": obj.get("jobComplete"),
            "jobFile": obj.get("jobFile"),
            "jobID": JobID.from_dict(obj["jobID"]) if obj.get("jobID") is not None else None,
            "jobId": obj.get("jobId"),
            "jobName": obj.get("jobName"),
            "jobPriority": obj.get("jobPriority"),
            "mapProgress": obj.get("mapProgress"),
            "neededMem": obj.get("neededMem"),
            "numReservedSlots": obj.get("numReservedSlots"),
            "numUsedSlots": obj.get("numUsedSlots"),
            "priority": obj.get("priority"),
            "queue": obj.get("queue"),
            "reduceProgress": obj.get("reduceProgress"),
            "reservedMem": obj.get("reservedMem"),
            "retired": obj.get("retired"),
            "runState": obj.get("runState"),
            "schedulingInfo": obj.get("schedulingInfo"),
            "setupProgress": obj.get("setupProgress"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "trackingUrl": obj.get("trackingUrl"),
            "uber": obj.get("uber"),
            "usedMem": obj.get("usedMem"),
            "username": obj.get("username")
        })
        return _obj



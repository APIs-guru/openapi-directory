# coding: utf-8

"""
    HDInsightJobManagementClient

    The HDInsight Job Client.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Userargs(BaseModel):
    """
    Gets or sets the object containing the user arguments.
    """ # noqa: E501
    arg: Optional[List[StrictStr]] = Field(default=None, description="The list of args defined by the user.")
    callback: Optional[Dict[str, Any]] = Field(default=None, description="The callback URL, if any.")
    define: Optional[List[StrictStr]] = Field(default=None, description="The define properties defined by the user.")
    enablelog: Optional[StrictStr] = Field(default=None, description="Whether or not the user enabled logs.")
    execute: Optional[StrictStr] = Field(default=None, description="The query defined by the user.")
    file: Optional[Dict[str, Any]] = Field(default=None, description="The query file provided by the user.")
    files: Optional[Dict[str, Any]] = Field(default=None, description="The files defined by the user.")
    jar: Optional[StrictStr] = Field(default=None, description="The JAR file provided by the user.")
    statusdir: Optional[Dict[str, Any]] = Field(default=None, description="The status directory defined by the user.")
    __properties: ClassVar[List[str]] = ["arg", "callback", "define", "enablelog", "execute", "file", "files", "jar", "statusdir"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Userargs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "arg",
            "define",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Userargs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arg": obj.get("arg"),
            "callback": obj.get("callback"),
            "define": obj.get("define"),
            "enablelog": obj.get("enablelog"),
            "execute": obj.get("execute"),
            "file": obj.get("file"),
            "files": obj.get("files"),
            "jar": obj.get("jar"),
            "statusdir": obj.get("statusdir")
        })
        return _obj



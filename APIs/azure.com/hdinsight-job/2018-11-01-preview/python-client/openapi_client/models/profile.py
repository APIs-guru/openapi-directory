# coding: utf-8

"""
    HDInsightJobManagementClient

    The HDInsight Job Client.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_id import JobID
from typing import Optional, Set
from typing_extensions import Self

class Profile(BaseModel):
    """
    The object containing the job profile information.
    """ # noqa: E501
    job_file: Optional[StrictStr] = Field(default=None, description="The job configuration file.", alias="jobFile")
    job_id: Optional[JobID] = Field(default=None, alias="jobID")
    job_id: Optional[StrictStr] = Field(default=None, description="The full ID of the job.", alias="jobId")
    job_name: Optional[StrictStr] = Field(default=None, description="The user-specified job name.", alias="jobName")
    queue_name: Optional[StrictStr] = Field(default=None, description="The name of the queue to which the job is submitted.", alias="queueName")
    url: Optional[StrictStr] = Field(default=None, description="The link to the web-ui for details of the job.")
    user: Optional[StrictStr] = Field(default=None, description="The userid of the person who submitted the job.")
    __properties: ClassVar[List[str]] = ["jobFile", "jobID", "jobId", "jobName", "queueName", "url", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Profile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict['jobID'] = self.job_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Profile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobFile": obj.get("jobFile"),
            "jobID": JobID.from_dict(obj["jobID"]) if obj.get("jobID") is not None else None,
            "jobId": obj.get("jobId"),
            "jobName": obj.get("jobName"),
            "queueName": obj.get("queueName"),
            "url": obj.get("url"),
            "user": obj.get("user")
        })
        return _obj



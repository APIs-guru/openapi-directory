# coding: utf-8

"""
    HDInsightJobManagementClient

    The HDInsight Job Client.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.profile import Profile
from openapi_client.models.status import Status
from openapi_client.models.userargs import Userargs
from typing import Optional, Set
from typing_extensions import Self

class JobDetailRootJsonObject(BaseModel):
    """
    The object containing the job details.
    """ # noqa: E501
    callback: Optional[Dict[str, Any]] = Field(default=None, description="The callback URL, if any.")
    completed: Optional[StrictStr] = Field(default=None, description="The string representing completed status, for example 'done'.")
    exit_value: Optional[StrictInt] = Field(default=None, description="The job's exit value.", alias="exitValue")
    id: Optional[StrictStr] = Field(default=None, description="The job ID.")
    msg: Optional[Dict[str, Any]] = Field(default=None, description="The message returned.")
    parent_id: Optional[StrictStr] = Field(default=None, description="The parent job ID.", alias="parentId")
    percent_complete: Optional[StrictStr] = Field(default=None, description="The job completion percentage, for example '75% complete'.", alias="percentComplete")
    profile: Optional[Profile] = None
    status: Optional[Status] = None
    user: Optional[StrictStr] = Field(default=None, description="The user name of the job creator.")
    userargs: Optional[Userargs] = None
    __properties: ClassVar[List[str]] = ["callback", "completed", "exitValue", "id", "msg", "parentId", "percentComplete", "profile", "status", "user", "userargs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobDetailRootJsonObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of userargs
        if self.userargs:
            _dict['userargs'] = self.userargs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobDetailRootJsonObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callback": obj.get("callback"),
            "completed": obj.get("completed"),
            "exitValue": obj.get("exitValue"),
            "id": obj.get("id"),
            "msg": obj.get("msg"),
            "parentId": obj.get("parentId"),
            "percentComplete": obj.get("percentComplete"),
            "profile": Profile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "user": obj.get("user"),
            "userargs": Userargs.from_dict(obj["userargs"]) if obj.get("userargs") is not None else None
        })
        return _obj



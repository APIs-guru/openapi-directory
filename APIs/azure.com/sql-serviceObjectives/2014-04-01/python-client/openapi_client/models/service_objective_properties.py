# coding: utf-8

"""
    Azure SQL Database

    Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ServiceObjectiveProperties(BaseModel):
    """
    Represents the properties of a database service objective.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description for the service level objective.")
    enabled: Optional[StrictBool] = Field(default=None, description="Gets whether the service level objective is enabled.")
    is_default: Optional[StrictBool] = Field(default=None, description="Gets whether the service level objective is the default service objective.", alias="isDefault")
    is_system: Optional[StrictBool] = Field(default=None, description="Gets whether the service level objective is a system service objective.", alias="isSystem")
    service_objective_name: Optional[StrictStr] = Field(default=None, description="The name for the service objective.", alias="serviceObjectiveName")
    __properties: ClassVar[List[str]] = ["description", "enabled", "isDefault", "isSystem", "serviceObjectiveName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceObjectiveProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "enabled",
            "is_default",
            "is_system",
            "service_objective_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceObjectiveProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "isDefault": obj.get("isDefault"),
            "isSystem": obj.get("isSystem"),
            "serviceObjectiveName": obj.get("serviceObjectiveName")
        })
        return _obj



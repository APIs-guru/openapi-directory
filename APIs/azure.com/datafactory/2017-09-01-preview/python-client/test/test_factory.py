# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.factory import Factory

class TestFactory(unittest.TestCase):
    """Factory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Factory:
        """Test Factory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Factory`
        """
        model = Factory()
        if include_optional:
            return Factory(
                identity = openapi_client.models.factory_identity.FactoryIdentity(
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', ),
                properties = openapi_client.models.factory_properties.FactoryProperties(
                    create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    provisioning_state = '', 
                    version = '', 
                    vsts_configuration = openapi_client.models.factory_vsts_configuration.FactoryVSTSConfiguration(
                        account_name = '', 
                        collaboration_branch = '', 
                        last_commit_id = '', 
                        project_name = '', 
                        repository_name = '', 
                        root_folder = '', 
                        tenant_id = '', ), ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return Factory(
        )
        """

    def testFactory(self):
        """Test Factory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pipeline_run_invoked_by import PipelineRunInvokedBy
from typing import Optional, Set
from typing_extensions import Self

class PipelineRun(BaseModel):
    """
    Information about a pipeline run.
    """ # noqa: E501
    duration_in_ms: Optional[StrictInt] = Field(default=None, description="The duration of a pipeline run.", alias="durationInMs")
    invoked_by: Optional[PipelineRunInvokedBy] = Field(default=None, alias="invokedBy")
    last_updated: Optional[datetime] = Field(default=None, description="The last updated timestamp for the pipeline run event in ISO8601 format.", alias="lastUpdated")
    message: Optional[StrictStr] = Field(default=None, description="The message from a pipeline run.")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="The full or partial list of parameter name, value pair used in the pipeline run.")
    pipeline_name: Optional[StrictStr] = Field(default=None, description="The pipeline name.", alias="pipelineName")
    run_end: Optional[datetime] = Field(default=None, description="The end time of a pipeline run in ISO8601 format.", alias="runEnd")
    run_id: Optional[StrictStr] = Field(default=None, description="Identifier of a run.", alias="runId")
    run_start: Optional[datetime] = Field(default=None, description="The start time of a pipeline run in ISO8601 format.", alias="runStart")
    status: Optional[StrictStr] = Field(default=None, description="The status of a pipeline run.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["durationInMs", "invokedBy", "lastUpdated", "message", "parameters", "pipelineName", "runEnd", "runId", "runStart", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "duration_in_ms",
            "last_updated",
            "message",
            "parameters",
            "pipeline_name",
            "run_end",
            "run_id",
            "run_start",
            "status",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoked_by
        if self.invoked_by:
            _dict['invokedBy'] = self.invoked_by.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "durationInMs": obj.get("durationInMs"),
            "invokedBy": PipelineRunInvokedBy.from_dict(obj["invokedBy"]) if obj.get("invokedBy") is not None else None,
            "lastUpdated": obj.get("lastUpdated"),
            "message": obj.get("message"),
            "parameters": obj.get("parameters"),
            "pipelineName": obj.get("pipelineName"),
            "runEnd": obj.get("runEnd"),
            "runId": obj.get("runId"),
            "runStart": obj.get("runStart"),
            "status": obj.get("status")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



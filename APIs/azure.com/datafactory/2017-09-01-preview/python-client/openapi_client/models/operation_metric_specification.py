# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.operation_metric_availability import OperationMetricAvailability
from typing import Optional, Set
from typing_extensions import Self

class OperationMetricSpecification(BaseModel):
    """
    Details about an operation related to metrics.
    """ # noqa: E501
    aggregation_type: Optional[StrictStr] = Field(default=None, description="The type of metric aggregation.", alias="aggregationType")
    availabilities: Optional[List[OperationMetricAvailability]] = Field(default=None, description="Defines how often data for metrics becomes available.")
    display_description: Optional[StrictStr] = Field(default=None, description="The description of the metric.", alias="displayDescription")
    display_name: Optional[StrictStr] = Field(default=None, description="Localized display name of the metric.", alias="displayName")
    enable_regional_mdm_account: Optional[StrictStr] = Field(default=None, description="Whether or not the service is using regional MDM accounts.", alias="enableRegionalMdmAccount")
    name: Optional[StrictStr] = Field(default=None, description="The name of the metric.")
    source_mdm_account: Optional[StrictStr] = Field(default=None, description="The name of the MDM account.", alias="sourceMdmAccount")
    source_mdm_namespace: Optional[StrictStr] = Field(default=None, description="The name of the MDM namespace.", alias="sourceMdmNamespace")
    unit: Optional[StrictStr] = Field(default=None, description="The unit that the metric is measured in.")
    __properties: ClassVar[List[str]] = ["aggregationType", "availabilities", "displayDescription", "displayName", "enableRegionalMdmAccount", "name", "sourceMdmAccount", "sourceMdmNamespace", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationMetricSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in availabilities (list)
        _items = []
        if self.availabilities:
            for _item_availabilities in self.availabilities:
                if _item_availabilities:
                    _items.append(_item_availabilities.to_dict())
            _dict['availabilities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationMetricSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationType": obj.get("aggregationType"),
            "availabilities": [OperationMetricAvailability.from_dict(_item) for _item in obj["availabilities"]] if obj.get("availabilities") is not None else None,
            "displayDescription": obj.get("displayDescription"),
            "displayName": obj.get("displayName"),
            "enableRegionalMdmAccount": obj.get("enableRegionalMdmAccount"),
            "name": obj.get("name"),
            "sourceMdmAccount": obj.get("sourceMdmAccount"),
            "sourceMdmNamespace": obj.get("sourceMdmNamespace"),
            "unit": obj.get("unit")
        })
        return _obj



# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_flow_debug_package_debug_settings import DataFlowDebugPackageDebugSettings
from openapi_client.models.data_flow_debug_resource import DataFlowDebugResource
from openapi_client.models.data_flow_staging_info import DataFlowStagingInfo
from openapi_client.models.dataset_debug_resource import DatasetDebugResource
from openapi_client.models.linked_service_debug_resource import LinkedServiceDebugResource
from typing import Optional, Set
from typing_extensions import Self

class DataFlowDebugPackage(BaseModel):
    """
    Request body structure for starting data flow debug session.
    """ # noqa: E501
    data_flow: Optional[DataFlowDebugResource] = Field(default=None, alias="dataFlow")
    datasets: Optional[List[DatasetDebugResource]] = Field(default=None, description="List of datasets.")
    debug_settings: Optional[DataFlowDebugPackageDebugSettings] = Field(default=None, alias="debugSettings")
    linked_services: Optional[List[LinkedServiceDebugResource]] = Field(default=None, description="List of linked services.", alias="linkedServices")
    session_id: Optional[StrictStr] = Field(default=None, description="The ID of data flow debug session.", alias="sessionId")
    staging: Optional[DataFlowStagingInfo] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["dataFlow", "datasets", "debugSettings", "linkedServices", "sessionId", "staging"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataFlowDebugPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_flow
        if self.data_flow:
            _dict['dataFlow'] = self.data_flow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of debug_settings
        if self.debug_settings:
            _dict['debugSettings'] = self.debug_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in linked_services (list)
        _items = []
        if self.linked_services:
            for _item_linked_services in self.linked_services:
                if _item_linked_services:
                    _items.append(_item_linked_services.to_dict())
            _dict['linkedServices'] = _items
        # override the default output from pydantic by calling `to_dict()` of staging
        if self.staging:
            _dict['staging'] = self.staging.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataFlowDebugPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataFlow": DataFlowDebugResource.from_dict(obj["dataFlow"]) if obj.get("dataFlow") is not None else None,
            "datasets": [DatasetDebugResource.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "debugSettings": DataFlowDebugPackageDebugSettings.from_dict(obj["debugSettings"]) if obj.get("debugSettings") is not None else None,
            "linkedServices": [LinkedServiceDebugResource.from_dict(_item) for _item in obj["linkedServices"]] if obj.get("linkedServices") is not None else None,
            "sessionId": obj.get("sessionId"),
            "staging": DataFlowStagingInfo.from_dict(obj["staging"]) if obj.get("staging") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityRun(BaseModel):
    """
    Information about an activity run in a pipeline.
    """ # noqa: E501
    activity_name: Optional[StrictStr] = Field(default=None, description="The name of the activity.", alias="activityName")
    activity_run_end: Optional[datetime] = Field(default=None, description="The end time of the activity run in 'ISO 8601' format.", alias="activityRunEnd")
    activity_run_id: Optional[StrictStr] = Field(default=None, description="The id of the activity run.", alias="activityRunId")
    activity_run_start: Optional[datetime] = Field(default=None, description="The start time of the activity run in 'ISO 8601' format.", alias="activityRunStart")
    activity_type: Optional[StrictStr] = Field(default=None, description="The type of the activity.", alias="activityType")
    duration_in_ms: Optional[StrictInt] = Field(default=None, description="The duration of the activity run.", alias="durationInMs")
    error: Optional[Dict[str, Any]] = Field(default=None, description="The error if any from the activity run.")
    input: Optional[Dict[str, Any]] = Field(default=None, description="The input for the activity.")
    linked_service_name: Optional[StrictStr] = Field(default=None, description="The name of the compute linked service.", alias="linkedServiceName")
    output: Optional[Dict[str, Any]] = Field(default=None, description="The output for the activity.")
    pipeline_name: Optional[StrictStr] = Field(default=None, description="The name of the pipeline.", alias="pipelineName")
    pipeline_run_id: Optional[StrictStr] = Field(default=None, description="The id of the pipeline run.", alias="pipelineRunId")
    status: Optional[StrictStr] = Field(default=None, description="The status of the activity run.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["activityName", "activityRunEnd", "activityRunId", "activityRunStart", "activityType", "durationInMs", "error", "input", "linkedServiceName", "output", "pipelineName", "pipelineRunId", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "activity_name",
            "activity_run_end",
            "activity_run_id",
            "activity_run_start",
            "activity_type",
            "duration_in_ms",
            "error",
            "input",
            "linked_service_name",
            "output",
            "pipeline_name",
            "pipeline_run_id",
            "status",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityName": obj.get("activityName"),
            "activityRunEnd": obj.get("activityRunEnd"),
            "activityRunId": obj.get("activityRunId"),
            "activityRunStart": obj.get("activityRunStart"),
            "activityType": obj.get("activityType"),
            "durationInMs": obj.get("durationInMs"),
            "error": obj.get("error"),
            "input": obj.get("input"),
            "linkedServiceName": obj.get("linkedServiceName"),
            "output": obj.get("output"),
            "pipelineName": obj.get("pipelineName"),
            "pipelineRunId": obj.get("pipelineRunId"),
            "status": obj.get("status")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



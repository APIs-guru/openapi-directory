# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataFlowDebugSessionInfo(BaseModel):
    """
    Data flow debug session info.
    """ # noqa: E501
    compute_type: Optional[StrictStr] = Field(default=None, description="Compute type of the cluster.", alias="computeType")
    core_count: Optional[StrictInt] = Field(default=None, description="Core count of the cluster.", alias="coreCount")
    data_flow_name: Optional[StrictStr] = Field(default=None, description="The name of the data flow.", alias="dataFlowName")
    integration_runtime_name: Optional[StrictStr] = Field(default=None, description="Attached integration runtime name of data flow debug session.", alias="integrationRuntimeName")
    last_activity_time: Optional[StrictStr] = Field(default=None, description="Last activity time of data flow debug session.", alias="lastActivityTime")
    node_count: Optional[StrictInt] = Field(default=None, description="Node count of the cluster. (deprecated property)", alias="nodeCount")
    session_id: Optional[StrictStr] = Field(default=None, description="The ID of data flow debug session.", alias="sessionId")
    start_time: Optional[StrictStr] = Field(default=None, description="Start time of data flow debug session.", alias="startTime")
    time_to_live_in_minutes: Optional[StrictInt] = Field(default=None, description="Compute type of the cluster.", alias="timeToLiveInMinutes")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["computeType", "coreCount", "dataFlowName", "integrationRuntimeName", "lastActivityTime", "nodeCount", "sessionId", "startTime", "timeToLiveInMinutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataFlowDebugSessionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataFlowDebugSessionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeType": obj.get("computeType"),
            "coreCount": obj.get("coreCount"),
            "dataFlowName": obj.get("dataFlowName"),
            "integrationRuntimeName": obj.get("integrationRuntimeName"),
            "lastActivityTime": obj.get("lastActivityTime"),
            "nodeCount": obj.get("nodeCount"),
            "sessionId": obj.get("sessionId"),
            "startTime": obj.get("startTime"),
            "timeToLiveInMinutes": obj.get("timeToLiveInMinutes")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



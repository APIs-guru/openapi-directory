# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntegrationRuntimeNodesGet200Response(BaseModel):
    """
    Properties of Self-hosted integration runtime node.
    """ # noqa: E501
    capabilities: Optional[Dict[str, StrictStr]] = Field(default=None, description="The integration runtime capabilities dictionary")
    concurrent_jobs_limit: Optional[StrictInt] = Field(default=None, description="Maximum concurrent jobs on the integration runtime node.", alias="concurrentJobsLimit")
    expiry_time: Optional[datetime] = Field(default=None, description="The time at which the integration runtime will expire in ISO8601 format.", alias="expiryTime")
    host_service_uri: Optional[StrictStr] = Field(default=None, description="URI for the host machine of the integration runtime.", alias="hostServiceUri")
    is_active_dispatcher: Optional[StrictBool] = Field(default=None, description="Indicates whether this node is the active dispatcher for integration runtime requests.", alias="isActiveDispatcher")
    last_connect_time: Optional[datetime] = Field(default=None, description="The most recent time at which the integration runtime was connected in ISO8601 format.", alias="lastConnectTime")
    last_end_update_time: Optional[datetime] = Field(default=None, description="The last time for the integration runtime node update end.", alias="lastEndUpdateTime")
    last_start_time: Optional[datetime] = Field(default=None, description="The time the node last started up.", alias="lastStartTime")
    last_start_update_time: Optional[datetime] = Field(default=None, description="The last time for the integration runtime node update start.", alias="lastStartUpdateTime")
    last_stop_time: Optional[datetime] = Field(default=None, description="The integration runtime node last stop time.", alias="lastStopTime")
    last_update_result: Optional[StrictStr] = Field(default=None, description="The result of the last integration runtime node update.", alias="lastUpdateResult")
    machine_name: Optional[StrictStr] = Field(default=None, description="Machine name of the integration runtime node.", alias="machineName")
    max_concurrent_jobs: Optional[StrictInt] = Field(default=None, description="The maximum concurrent jobs in this integration runtime.", alias="maxConcurrentJobs")
    node_name: Optional[StrictStr] = Field(default=None, description="Name of the integration runtime node.", alias="nodeName")
    register_time: Optional[datetime] = Field(default=None, description="The time at which the integration runtime node was registered in ISO8601 format.", alias="registerTime")
    status: Optional[StrictStr] = Field(default=None, description="Status of the integration runtime node.")
    version: Optional[StrictStr] = Field(default=None, description="Version of the integration runtime node.")
    version_status: Optional[StrictStr] = Field(default=None, description="Status of the integration runtime node version.", alias="versionStatus")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["capabilities", "concurrentJobsLimit", "expiryTime", "hostServiceUri", "isActiveDispatcher", "lastConnectTime", "lastEndUpdateTime", "lastStartTime", "lastStartUpdateTime", "lastStopTime", "lastUpdateResult", "machineName", "maxConcurrentJobs", "nodeName", "registerTime", "status", "version", "versionStatus"]

    @field_validator('last_update_result')
    def last_update_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Succeed', 'Fail']):
            raise ValueError("must be one of enum values ('None', 'Succeed', 'Fail')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NeedRegistration', 'Online', 'Limited', 'Offline', 'Upgrading', 'Initializing', 'InitializeFailed']):
            raise ValueError("must be one of enum values ('NeedRegistration', 'Online', 'Limited', 'Offline', 'Upgrading', 'Initializing', 'InitializeFailed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationRuntimeNodesGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "capabilities",
            "concurrent_jobs_limit",
            "expiry_time",
            "host_service_uri",
            "is_active_dispatcher",
            "last_connect_time",
            "last_end_update_time",
            "last_start_time",
            "last_start_update_time",
            "last_stop_time",
            "last_update_result",
            "machine_name",
            "max_concurrent_jobs",
            "node_name",
            "register_time",
            "status",
            "version",
            "version_status",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationRuntimeNodesGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": obj.get("capabilities"),
            "concurrentJobsLimit": obj.get("concurrentJobsLimit"),
            "expiryTime": obj.get("expiryTime"),
            "hostServiceUri": obj.get("hostServiceUri"),
            "isActiveDispatcher": obj.get("isActiveDispatcher"),
            "lastConnectTime": obj.get("lastConnectTime"),
            "lastEndUpdateTime": obj.get("lastEndUpdateTime"),
            "lastStartTime": obj.get("lastStartTime"),
            "lastStartUpdateTime": obj.get("lastStartUpdateTime"),
            "lastStopTime": obj.get("lastStopTime"),
            "lastUpdateResult": obj.get("lastUpdateResult"),
            "machineName": obj.get("machineName"),
            "maxConcurrentJobs": obj.get("maxConcurrentJobs"),
            "nodeName": obj.get("nodeName"),
            "registerTime": obj.get("registerTime"),
            "status": obj.get("status"),
            "version": obj.get("version"),
            "versionStatus": obj.get("versionStatus")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



# coding: utf-8

"""
    DataFactoryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TriggerRun(BaseModel):
    """
    Trigger runs.
    """ # noqa: E501
    dependency_status: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Status of the upstream pipelines.", alias="dependencyStatus")
    message: Optional[StrictStr] = Field(default=None, description="Trigger error message.")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of property name and value related to trigger run. Name, value pair depends on type of trigger.")
    run_dimension: Optional[Dict[str, StrictStr]] = Field(default=None, description="Run dimension for which trigger was fired.", alias="runDimension")
    status: Optional[StrictStr] = Field(default=None, description="Trigger run status.")
    trigger_name: Optional[StrictStr] = Field(default=None, description="Trigger name.", alias="triggerName")
    trigger_run_id: Optional[StrictStr] = Field(default=None, description="Trigger run id.", alias="triggerRunId")
    trigger_run_timestamp: Optional[datetime] = Field(default=None, description="Trigger run start time.", alias="triggerRunTimestamp")
    trigger_type: Optional[StrictStr] = Field(default=None, description="Trigger type.", alias="triggerType")
    triggered_pipelines: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of pipeline name and run Id triggered by the trigger run.", alias="triggeredPipelines")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["dependencyStatus", "message", "properties", "runDimension", "status", "triggerName", "triggerRunId", "triggerRunTimestamp", "triggerType", "triggeredPipelines"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Failed', 'Inprogress']):
            raise ValueError("must be one of enum values ('Succeeded', 'Failed', 'Inprogress')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TriggerRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "dependency_status",
            "message",
            "properties",
            "run_dimension",
            "status",
            "trigger_name",
            "trigger_run_id",
            "trigger_run_timestamp",
            "trigger_type",
            "triggered_pipelines",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TriggerRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dependencyStatus": obj.get("dependencyStatus"),
            "message": obj.get("message"),
            "properties": obj.get("properties"),
            "runDimension": obj.get("runDimension"),
            "status": obj.get("status"),
            "triggerName": obj.get("triggerName"),
            "triggerRunId": obj.get("triggerRunId"),
            "triggerRunTimestamp": obj.get("triggerRunTimestamp"),
            "triggerType": obj.get("triggerType"),
            "triggeredPipelines": obj.get("triggeredPipelines")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



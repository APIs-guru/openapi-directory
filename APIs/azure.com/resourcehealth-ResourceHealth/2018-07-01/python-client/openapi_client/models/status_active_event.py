# coding: utf-8

"""
    Microsoft.ResourceHealth

    The Resource Health Client.

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.emerging_issue_impact import EmergingIssueImpact
from typing import Optional, Set
from typing_extensions import Self

class StatusActiveEvent(BaseModel):
    """
    Active event type of emerging issue.
    """ # noqa: E501
    cloud: Optional[StrictStr] = Field(default=None, description="The cloud type of this active event.")
    description: Optional[StrictStr] = Field(default=None, description="The details of active event.")
    impacts: Optional[List[EmergingIssueImpact]] = Field(default=None, description="The list of emerging issues impacts.")
    last_modified_time: Optional[datetime] = Field(default=None, description="The last time modified on this banner.", alias="lastModifiedTime")
    published: Optional[StrictBool] = Field(default=None, description="The boolean value of this active event if published or not.")
    severity: Optional[StrictStr] = Field(default=None, description="The severity level of this active event.")
    stage: Optional[StrictStr] = Field(default=None, description="The stage of this active event.")
    start_time: Optional[datetime] = Field(default=None, description="The impact start time on this active event.", alias="startTime")
    title: Optional[StrictStr] = Field(default=None, description="The active event title.")
    tracking_id: Optional[StrictStr] = Field(default=None, description="The tracking id of this active event.", alias="trackingId")
    __properties: ClassVar[List[str]] = ["cloud", "description", "impacts", "lastModifiedTime", "published", "severity", "stage", "startTime", "title", "trackingId"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Information', 'Warning', 'Error']):
            raise ValueError("must be one of enum values ('Information', 'Warning', 'Error')")
        return value

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Resolve', 'Archived']):
            raise ValueError("must be one of enum values ('Active', 'Resolve', 'Archived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusActiveEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in impacts (list)
        _items = []
        if self.impacts:
            for _item_impacts in self.impacts:
                if _item_impacts:
                    _items.append(_item_impacts.to_dict())
            _dict['impacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusActiveEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloud": obj.get("cloud"),
            "description": obj.get("description"),
            "impacts": [EmergingIssueImpact.from_dict(_item) for _item in obj["impacts"]] if obj.get("impacts") is not None else None,
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "published": obj.get("published"),
            "severity": obj.get("severity"),
            "stage": obj.get("stage"),
            "startTime": obj.get("startTime"),
            "title": obj.get("title"),
            "trackingId": obj.get("trackingId")
        })
        return _obj



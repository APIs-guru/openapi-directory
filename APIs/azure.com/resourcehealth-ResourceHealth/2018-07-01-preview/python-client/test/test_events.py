# coding: utf-8

"""
    Microsoft.ResourceHealth

    The Resource Health Client.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.events import Events

class TestEvents(unittest.TestCase):
    """Events unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Events:
        """Test Events
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Events`
        """
        model = Events()
        if include_optional:
            return Events(
                next_link = '',
                value = [
                    openapi_client.models.event.event(
                        properties = openapi_client.models.properties.properties(
                            article = openapi_client.models.article.article(
                                article_content = '', ), 
                            enable_chat_with_us = True, 
                            enable_microsoft_support = True, 
                            event_level = 'Critical', 
                            event_source = 'ResourceHealth', 
                            event_type = 'ServiceIssue', 
                            faqs = [
                                openapi_client.models.faq.faq(
                                    answer = '', 
                                    locale_code = '', 
                                    question = '', )
                                ], 
                            header = '', 
                            hir_stage = '', 
                            impact = [
                                openapi_client.models.impact.impact(
                                    impacted_regions = [
                                        openapi_client.models.impacted_service_region.impactedServiceRegion(
                                            impacted_region = '', 
                                            impacted_subscriptions = [
                                                ''
                                                ], 
                                            last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            status = 'Active', 
                                            updates = [
                                                openapi_client.models.update.update(
                                                    summary = '', 
                                                    update_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                ], )
                                        ], 
                                    impacted_service = '', )
                                ], 
                            impact_mitigation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            impact_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            is_hir = True, 
                            last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            level = 'Critical', 
                            links = [
                                openapi_client.models.link.link(
                                    blade_name = '', 
                                    display_text = openapi_client.models.link_display_text.link_displayText(
                                        localized_value = '', 
                                        value = '', ), 
                                    extension_name = '', 
                                    parameters = openapi_client.models.parameters.parameters(), 
                                    type = 'Button', )
                                ], 
                            priority = 56, 
                            recommended_actions = openapi_client.models.recommended_actions.recommendedActions(
                                actions = [
                                    None
                                    ], 
                                locale_code = '', 
                                message = '', ), 
                            status = 'Active', 
                            summary = '', 
                            title = '', ), )
                    ]
            )
        else:
            return Events(
                value = [
                    openapi_client.models.event.event(
                        properties = openapi_client.models.properties.properties(
                            article = openapi_client.models.article.article(
                                article_content = '', ), 
                            enable_chat_with_us = True, 
                            enable_microsoft_support = True, 
                            event_level = 'Critical', 
                            event_source = 'ResourceHealth', 
                            event_type = 'ServiceIssue', 
                            faqs = [
                                openapi_client.models.faq.faq(
                                    answer = '', 
                                    locale_code = '', 
                                    question = '', )
                                ], 
                            header = '', 
                            hir_stage = '', 
                            impact = [
                                openapi_client.models.impact.impact(
                                    impacted_regions = [
                                        openapi_client.models.impacted_service_region.impactedServiceRegion(
                                            impacted_region = '', 
                                            impacted_subscriptions = [
                                                ''
                                                ], 
                                            last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            status = 'Active', 
                                            updates = [
                                                openapi_client.models.update.update(
                                                    summary = '', 
                                                    update_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                ], )
                                        ], 
                                    impacted_service = '', )
                                ], 
                            impact_mitigation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            impact_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            is_hir = True, 
                            last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            level = 'Critical', 
                            links = [
                                openapi_client.models.link.link(
                                    blade_name = '', 
                                    display_text = openapi_client.models.link_display_text.link_displayText(
                                        localized_value = '', 
                                        value = '', ), 
                                    extension_name = '', 
                                    parameters = openapi_client.models.parameters.parameters(), 
                                    type = 'Button', )
                                ], 
                            priority = 56, 
                            recommended_actions = openapi_client.models.recommended_actions.recommendedActions(
                                actions = [
                                    None
                                    ], 
                                locale_code = '', 
                                message = '', ), 
                            status = 'Active', 
                            summary = '', 
                            title = '', ), )
                    ],
        )
        """

    def testEvents(self):
        """Test Events"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Microsoft.ResourceHealth

    The Resource Health Client.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_impacting_event_incident_properties import ServiceImpactingEventIncidentProperties
from openapi_client.models.service_impacting_event_status import ServiceImpactingEventStatus
from typing import Optional, Set
from typing_extensions import Self

class ServiceImpactingEvent(BaseModel):
    """
    Lists the service impacting events that may be affecting the health of the resource.
    """ # noqa: E501
    correlation_id: Optional[StrictStr] = Field(default=None, description="Correlation id for the event", alias="correlationId")
    event_start_time: Optional[datetime] = Field(default=None, description="Timestamp for when the event started.", alias="eventStartTime")
    event_status_last_modified_time: Optional[datetime] = Field(default=None, description="Timestamp for when event was submitted/detected.", alias="eventStatusLastModifiedTime")
    incident_properties: Optional[ServiceImpactingEventIncidentProperties] = Field(default=None, alias="incidentProperties")
    status: Optional[ServiceImpactingEventStatus] = None
    __properties: ClassVar[List[str]] = ["correlationId", "eventStartTime", "eventStatusLastModifiedTime", "incidentProperties", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceImpactingEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of incident_properties
        if self.incident_properties:
            _dict['incidentProperties'] = self.incident_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceImpactingEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "correlationId": obj.get("correlationId"),
            "eventStartTime": obj.get("eventStartTime"),
            "eventStatusLastModifiedTime": obj.get("eventStatusLastModifiedTime"),
            "incidentProperties": ServiceImpactingEventIncidentProperties.from_dict(obj["incidentProperties"]) if obj.get("incidentProperties") is not None else None,
            "status": ServiceImpactingEventStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Microsoft.ResourceHealth

    The Resource Health Client.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.availability_status_properties_recently_resolved import AvailabilityStatusPropertiesRecentlyResolved
from openapi_client.models.recommended_action import RecommendedAction
from openapi_client.models.service_impacting_event import ServiceImpactingEvent
from typing import Optional, Set
from typing_extensions import Self

class AvailabilityStatusProperties(BaseModel):
    """
    Properties of availability state.
    """ # noqa: E501
    availability_state: Optional[StrictStr] = Field(default=None, description="Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event", alias="availabilityState")
    detailed_status: Optional[StrictStr] = Field(default=None, description="Details of the availability status.", alias="detailedStatus")
    health_event_category: Optional[StrictStr] = Field(default=None, description="In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.", alias="healthEventCategory")
    health_event_cause: Optional[StrictStr] = Field(default=None, description="In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.", alias="healthEventCause")
    health_event_id: Optional[StrictStr] = Field(default=None, description="It is a unique Id that identifies the event", alias="healthEventId")
    health_event_type: Optional[StrictStr] = Field(default=None, description="In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.", alias="healthEventType")
    occured_time: Optional[datetime] = Field(default=None, description="Timestamp for when last change in health status occurred.", alias="occuredTime")
    reason_chronicity: Optional[StrictStr] = Field(default=None, description="Chronicity of the availability transition.", alias="reasonChronicity")
    reason_type: Optional[StrictStr] = Field(default=None, description="When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.", alias="reasonType")
    recently_resolved: Optional[AvailabilityStatusPropertiesRecentlyResolved] = Field(default=None, alias="recentlyResolved")
    recommended_actions: Optional[List[RecommendedAction]] = Field(default=None, description="Lists actions the user can take based on the current availabilityState of the resource.", alias="recommendedActions")
    reported_time: Optional[datetime] = Field(default=None, description="Timestamp for when the health was last checked. ", alias="reportedTime")
    resolution_eta: Optional[datetime] = Field(default=None, description="When the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.", alias="resolutionETA")
    root_cause_attribution_time: Optional[datetime] = Field(default=None, description="When the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.", alias="rootCauseAttributionTime")
    service_impacting_events: Optional[List[ServiceImpactingEvent]] = Field(default=None, description="Lists the service impacting events that may be affecting the health of the resource.", alias="serviceImpactingEvents")
    summary: Optional[StrictStr] = Field(default=None, description="Summary description of the availability status.")
    __properties: ClassVar[List[str]] = ["availabilityState", "detailedStatus", "healthEventCategory", "healthEventCause", "healthEventId", "healthEventType", "occuredTime", "reasonChronicity", "reasonType", "recentlyResolved", "recommendedActions", "reportedTime", "resolutionETA", "rootCauseAttributionTime", "serviceImpactingEvents", "summary"]

    @field_validator('availability_state')
    def availability_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Available', 'Unavailable', 'Degraded', 'Unknown']):
            raise ValueError("must be one of enum values ('Available', 'Unavailable', 'Degraded', 'Unknown')")
        return value

    @field_validator('reason_chronicity')
    def reason_chronicity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Transient', 'Persistent']):
            raise ValueError("must be one of enum values ('Transient', 'Persistent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailabilityStatusProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recently_resolved
        if self.recently_resolved:
            _dict['recentlyResolved'] = self.recently_resolved.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recommended_actions (list)
        _items = []
        if self.recommended_actions:
            for _item_recommended_actions in self.recommended_actions:
                if _item_recommended_actions:
                    _items.append(_item_recommended_actions.to_dict())
            _dict['recommendedActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_impacting_events (list)
        _items = []
        if self.service_impacting_events:
            for _item_service_impacting_events in self.service_impacting_events:
                if _item_service_impacting_events:
                    _items.append(_item_service_impacting_events.to_dict())
            _dict['serviceImpactingEvents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailabilityStatusProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityState": obj.get("availabilityState"),
            "detailedStatus": obj.get("detailedStatus"),
            "healthEventCategory": obj.get("healthEventCategory"),
            "healthEventCause": obj.get("healthEventCause"),
            "healthEventId": obj.get("healthEventId"),
            "healthEventType": obj.get("healthEventType"),
            "occuredTime": obj.get("occuredTime"),
            "reasonChronicity": obj.get("reasonChronicity"),
            "reasonType": obj.get("reasonType"),
            "recentlyResolved": AvailabilityStatusPropertiesRecentlyResolved.from_dict(obj["recentlyResolved"]) if obj.get("recentlyResolved") is not None else None,
            "recommendedActions": [RecommendedAction.from_dict(_item) for _item in obj["recommendedActions"]] if obj.get("recommendedActions") is not None else None,
            "reportedTime": obj.get("reportedTime"),
            "resolutionETA": obj.get("resolutionETA"),
            "rootCauseAttributionTime": obj.get("rootCauseAttributionTime"),
            "serviceImpactingEvents": [ServiceImpactingEvent.from_dict(_item) for _item in obj["serviceImpactingEvents"]] if obj.get("serviceImpactingEvents") is not None else None,
            "summary": obj.get("summary")
        })
        return _obj



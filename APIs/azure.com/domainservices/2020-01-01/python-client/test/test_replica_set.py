# coding: utf-8

"""
    Domain Services Resource Provider

    The AAD Domain Services API.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.replica_set import ReplicaSet

class TestReplicaSet(unittest.TestCase):
    """ReplicaSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReplicaSet:
        """Test ReplicaSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReplicaSet`
        """
        model = ReplicaSet()
        if include_optional:
            return ReplicaSet(
                domain_controller_ip_address = [
                    ''
                    ],
                external_access_ip_address = '',
                health_alerts = [
                    openapi_client.models.health_alert.HealthAlert(
                        id = '', 
                        issue = '', 
                        last_detected = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        raised = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        resolution_uri = '', 
                        severity = '', )
                    ],
                health_last_evaluated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                health_monitors = [
                    openapi_client.models.health_monitor.HealthMonitor(
                        details = '', 
                        id = '', 
                        name = '', )
                    ],
                location = '',
                replica_set_id = '',
                service_status = '',
                subnet_id = '',
                vnet_site_id = ''
            )
        else:
            return ReplicaSet(
        )
        """

    def testReplicaSet(self):
        """Test ReplicaSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

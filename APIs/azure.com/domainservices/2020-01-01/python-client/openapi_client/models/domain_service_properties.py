# coding: utf-8

"""
    Domain Services Resource Provider

    The AAD Domain Services API.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.domain_security_settings import DomainSecuritySettings
from openapi_client.models.ldaps_settings import LdapsSettings
from openapi_client.models.notification_settings import NotificationSettings
from openapi_client.models.replica_set import ReplicaSet
from typing import Optional, Set
from typing_extensions import Self

class DomainServiceProperties(BaseModel):
    """
    Properties of the Domain Service.
    """ # noqa: E501
    deployment_id: Optional[StrictStr] = Field(default=None, description="Deployment Id", alias="deploymentId")
    domain_name: Optional[StrictStr] = Field(default=None, description="The name of the Azure domain that the user would like to deploy Domain Services to.", alias="domainName")
    domain_security_settings: Optional[DomainSecuritySettings] = Field(default=None, alias="domainSecuritySettings")
    filtered_sync: Optional[StrictStr] = Field(default=None, description="Enabled or Disabled flag to turn on Group-based filtered sync", alias="filteredSync")
    ldaps_settings: Optional[LdapsSettings] = Field(default=None, alias="ldapsSettings")
    notification_settings: Optional[NotificationSettings] = Field(default=None, alias="notificationSettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="the current deployment or provisioning state, which only appears in the response.", alias="provisioningState")
    replica_sets: Optional[List[ReplicaSet]] = Field(default=None, description="List of ReplicaSets", alias="replicaSets")
    sync_owner: Optional[StrictStr] = Field(default=None, description="SyncOwner ReplicaSet Id", alias="syncOwner")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Azure Active Directory Tenant Id", alias="tenantId")
    version: Optional[StrictInt] = Field(default=None, description="Data Model Version")
    __properties: ClassVar[List[str]] = ["deploymentId", "domainName", "domainSecuritySettings", "filteredSync", "ldapsSettings", "notificationSettings", "provisioningState", "replicaSets", "syncOwner", "tenantId", "version"]

    @field_validator('filtered_sync')
    def filtered_sync_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "deployment_id",
            "provisioning_state",
            "sync_owner",
            "tenant_id",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain_security_settings
        if self.domain_security_settings:
            _dict['domainSecuritySettings'] = self.domain_security_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldaps_settings
        if self.ldaps_settings:
            _dict['ldapsSettings'] = self.ldaps_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_settings
        if self.notification_settings:
            _dict['notificationSettings'] = self.notification_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in replica_sets (list)
        _items = []
        if self.replica_sets:
            for _item_replica_sets in self.replica_sets:
                if _item_replica_sets:
                    _items.append(_item_replica_sets.to_dict())
            _dict['replicaSets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deploymentId": obj.get("deploymentId"),
            "domainName": obj.get("domainName"),
            "domainSecuritySettings": DomainSecuritySettings.from_dict(obj["domainSecuritySettings"]) if obj.get("domainSecuritySettings") is not None else None,
            "filteredSync": obj.get("filteredSync"),
            "ldapsSettings": LdapsSettings.from_dict(obj["ldapsSettings"]) if obj.get("ldapsSettings") is not None else None,
            "notificationSettings": NotificationSettings.from_dict(obj["notificationSettings"]) if obj.get("notificationSettings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "replicaSets": [ReplicaSet.from_dict(_item) for _item in obj["replicaSets"]] if obj.get("replicaSets") is not None else None,
            "syncOwner": obj.get("syncOwner"),
            "tenantId": obj.get("tenantId"),
            "version": obj.get("version")
        })
        return _obj



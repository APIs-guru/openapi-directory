# coding: utf-8

"""
    Domain Services Resource Provider

    The AAD Domain Services API.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_alert import HealthAlert
from openapi_client.models.health_monitor import HealthMonitor
from typing import Optional, Set
from typing_extensions import Self

class ReplicaSet(BaseModel):
    """
    Replica Set Definition
    """ # noqa: E501
    domain_controller_ip_address: Optional[List[StrictStr]] = Field(default=None, description="List of Domain Controller IP Address", alias="domainControllerIpAddress")
    external_access_ip_address: Optional[StrictStr] = Field(default=None, description="External access ip address.", alias="externalAccessIpAddress")
    health_alerts: Optional[List[HealthAlert]] = Field(default=None, description="List of Domain Health Alerts", alias="healthAlerts")
    health_last_evaluated: Optional[datetime] = Field(default=None, description="Last domain evaluation run DateTime", alias="healthLastEvaluated")
    health_monitors: Optional[List[HealthMonitor]] = Field(default=None, description="List of Domain Health Monitors", alias="healthMonitors")
    location: Optional[StrictStr] = Field(default=None, description="Virtual network location")
    replica_set_id: Optional[StrictStr] = Field(default=None, description="ReplicaSet Id", alias="replicaSetId")
    service_status: Optional[StrictStr] = Field(default=None, description="Status of Domain Service instance", alias="serviceStatus")
    subnet_id: Optional[StrictStr] = Field(default=None, description="The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.", alias="subnetId")
    vnet_site_id: Optional[StrictStr] = Field(default=None, description="Virtual network site id", alias="vnetSiteId")
    __properties: ClassVar[List[str]] = ["domainControllerIpAddress", "externalAccessIpAddress", "healthAlerts", "healthLastEvaluated", "healthMonitors", "location", "replicaSetId", "serviceStatus", "subnetId", "vnetSiteId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicaSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "domain_controller_ip_address",
            "external_access_ip_address",
            "health_alerts",
            "health_last_evaluated",
            "health_monitors",
            "replica_set_id",
            "service_status",
            "vnet_site_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in health_alerts (list)
        _items = []
        if self.health_alerts:
            for _item_health_alerts in self.health_alerts:
                if _item_health_alerts:
                    _items.append(_item_health_alerts.to_dict())
            _dict['healthAlerts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in health_monitors (list)
        _items = []
        if self.health_monitors:
            for _item_health_monitors in self.health_monitors:
                if _item_health_monitors:
                    _items.append(_item_health_monitors.to_dict())
            _dict['healthMonitors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicaSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domainControllerIpAddress": obj.get("domainControllerIpAddress"),
            "externalAccessIpAddress": obj.get("externalAccessIpAddress"),
            "healthAlerts": [HealthAlert.from_dict(_item) for _item in obj["healthAlerts"]] if obj.get("healthAlerts") is not None else None,
            "healthLastEvaluated": obj.get("healthLastEvaluated"),
            "healthMonitors": [HealthMonitor.from_dict(_item) for _item in obj["healthMonitors"]] if obj.get("healthMonitors") is not None else None,
            "location": obj.get("location"),
            "replicaSetId": obj.get("replicaSetId"),
            "serviceStatus": obj.get("serviceStatus"),
            "subnetId": obj.get("subnetId"),
            "vnetSiteId": obj.get("vnetSiteId")
        })
        return _obj



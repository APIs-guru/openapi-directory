# coding: utf-8

"""
    Domain Services Resource Provider

    The AAD Domain Services API.

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.domain_service import DomainService

class TestDomainService(unittest.TestCase):
    """DomainService unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainService:
        """Test DomainService
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainService`
        """
        model = DomainService()
        if include_optional:
            return DomainService(
                properties = openapi_client.models.domain_service_properties.DomainServiceProperties(
                    domain_controller_ip_address = [
                        ''
                        ], 
                    domain_name = '', 
                    domain_security_settings = openapi_client.models.domain_security_settings.DomainSecuritySettings(
                        ntlm_v1 = 'Enabled', 
                        sync_ntlm_passwords = 'Enabled', 
                        tls_v1 = 'Enabled', ), 
                    filtered_sync = 'Enabled', 
                    health_alerts = [
                        openapi_client.models.health_alert.HealthAlert(
                            id = '', 
                            issue = '', 
                            last_detected = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            raised = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            resolution_uri = '', 
                            severity = '', )
                        ], 
                    health_last_evaluated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    health_monitors = [
                        openapi_client.models.health_monitor.HealthMonitor(
                            details = '', 
                            id = '', 
                            name = '', )
                        ], 
                    ldaps_settings = openapi_client.models.ldaps_settings.LdapsSettings(
                        certificate_not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        certificate_thumbprint = '', 
                        external_access = 'Enabled', 
                        external_access_ip_address = '', 
                        ldaps = 'Enabled', 
                        pfx_certificate = '', 
                        pfx_certificate_password = '', 
                        public_certificate = '', ), 
                    notification_settings = openapi_client.models.notification_settings.NotificationSettings(
                        additional_recipients = [
                            ''
                            ], 
                        notify_dc_admins = 'Enabled', 
                        notify_global_admins = 'Enabled', ), 
                    provisioning_state = '', 
                    service_status = '', 
                    subnet_id = '', 
                    tenant_id = '', 
                    vnet_site_id = '', ),
                etag = '',
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return DomainService(
        )
        """

    def testDomainService(self):
        """Test DomainService"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

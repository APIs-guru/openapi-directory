# coding: utf-8

"""
    Domain Services Resource Provider

    The AAD Domain Services API.

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LdapsSettings(BaseModel):
    """
    Secure LDAP Settings
    """ # noqa: E501
    certificate_not_after: Optional[datetime] = Field(default=None, description="NotAfter DateTime of configure ldaps certificate.", alias="certificateNotAfter")
    certificate_thumbprint: Optional[StrictStr] = Field(default=None, description="Thumbprint of configure ldaps certificate.", alias="certificateThumbprint")
    external_access: Optional[StrictStr] = Field(default=None, description="A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.", alias="externalAccess")
    external_access_ip_address: Optional[StrictStr] = Field(default=None, description="External access ip address.", alias="externalAccessIpAddress")
    ldaps: Optional[StrictStr] = Field(default=None, description="A flag to determine whether or not Secure LDAP is enabled or disabled.")
    pfx_certificate: Optional[StrictStr] = Field(default=None, description="The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.", alias="pfxCertificate")
    pfx_certificate_password: Optional[StrictStr] = Field(default=None, description="The password to decrypt the provided Secure LDAP certificate pfx file.", alias="pfxCertificatePassword")
    public_certificate: Optional[StrictStr] = Field(default=None, description="Public certificate used to configure secure ldap.", alias="publicCertificate")
    __properties: ClassVar[List[str]] = ["certificateNotAfter", "certificateThumbprint", "externalAccess", "externalAccessIpAddress", "ldaps", "pfxCertificate", "pfxCertificatePassword", "publicCertificate"]

    @field_validator('external_access')
    def external_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('ldaps')
    def ldaps_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LdapsSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "certificate_not_after",
            "certificate_thumbprint",
            "external_access_ip_address",
            "public_certificate",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LdapsSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateNotAfter": obj.get("certificateNotAfter"),
            "certificateThumbprint": obj.get("certificateThumbprint"),
            "externalAccess": obj.get("externalAccess"),
            "externalAccessIpAddress": obj.get("externalAccessIpAddress"),
            "ldaps": obj.get("ldaps"),
            "pfxCertificate": obj.get("pfxCertificate"),
            "pfxCertificatePassword": obj.get("pfxCertificatePassword"),
            "publicCertificate": obj.get("publicCertificate")
        })
        return _obj



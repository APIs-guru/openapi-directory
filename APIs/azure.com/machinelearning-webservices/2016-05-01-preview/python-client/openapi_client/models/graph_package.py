# coding: utf-8

"""
    Azure ML Web Services Management Client

    These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>

    The version of the OpenAPI document: 2016-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.graph_edge import GraphEdge
from openapi_client.models.graph_node import GraphNode
from openapi_client.models.graph_parameter import GraphParameter
from typing import Optional, Set
from typing_extensions import Self

class GraphPackage(BaseModel):
    """
    Defines the graph of modules making up the machine learning solution.
    """ # noqa: E501
    edges: Optional[List[GraphEdge]] = Field(default=None, description="The list of edges making up the graph.")
    graph_parameters: Optional[Dict[str, GraphParameter]] = Field(default=None, description="The collection of global parameters for the graph, given as a global parameter name to GraphParameter map. Each parameter here has a 1:1 match with the global parameters values map declared at the WebServiceProperties level.", alias="graphParameters")
    nodes: Optional[Dict[str, GraphNode]] = Field(default=None, description="The set of nodes making up the graph, provided as a nodeId to GraphNode map")
    __properties: ClassVar[List[str]] = ["edges", "graphParameters", "nodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GraphPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item_edges in self.edges:
                if _item_edges:
                    _items.append(_item_edges.to_dict())
            _dict['edges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in graph_parameters (dict)
        _field_dict = {}
        if self.graph_parameters:
            for _key_graph_parameters in self.graph_parameters:
                if self.graph_parameters[_key_graph_parameters]:
                    _field_dict[_key_graph_parameters] = self.graph_parameters[_key_graph_parameters].to_dict()
            _dict['graphParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in nodes (dict)
        _field_dict = {}
        if self.nodes:
            for _key_nodes in self.nodes:
                if self.nodes[_key_nodes]:
                    _field_dict[_key_nodes] = self.nodes[_key_nodes].to_dict()
            _dict['nodes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GraphPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "edges": [GraphEdge.from_dict(_item) for _item in obj["edges"]] if obj.get("edges") is not None else None,
            "graphParameters": dict(
                (_k, GraphParameter.from_dict(_v))
                for _k, _v in obj["graphParameters"].items()
            )
            if obj.get("graphParameters") is not None
            else None,
            "nodes": dict(
                (_k, GraphNode.from_dict(_v))
                for _k, _v in obj["nodes"].items()
            )
            if obj.get("nodes") is not None
            else None
        })
        return _obj



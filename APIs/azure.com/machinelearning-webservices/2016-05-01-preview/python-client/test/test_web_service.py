# coding: utf-8

"""
    Azure ML Web Services Management Client

    These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>

    The version of the OpenAPI document: 2016-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.web_service import WebService

class TestWebService(unittest.TestCase):
    """WebService unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebService:
        """Test WebService
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebService`
        """
        model = WebService()
        if include_optional:
            return WebService(
                properties = openapi_client.models.web_service_properties.WebServiceProperties(
                    assets = {
                        'key' : openapi_client.models.asset_item.AssetItem(
                            id = '', 
                            input_ports = {
                                'key' : openapi_client.models.input_port.InputPort(
                                    type = 'Dataset', )
                                }, 
                            location_info = openapi_client.models.asset_location.AssetLocation(
                                credentials = '', 
                                uri = '', ), 
                            metadata = {
                                'key' : ''
                                }, 
                            name = '', 
                            output_ports = {
                                'key' : openapi_client.models.output_port.OutputPort(
                                    type = 'Dataset', )
                                }, 
                            parameters = [
                                openapi_client.models.module_asset_parameter.ModuleAssetParameter(
                                    mode_values_info = {
                                        'key' : openapi_client.models.mode_value_info.ModeValueInfo(
                                            interface_string = '', )
                                        }, 
                                    name = '', 
                                    parameter_type = '', )
                                ], 
                            type = 'Module', )
                        }, 
                    commitment_plan = openapi_client.models.commitment_plan.CommitmentPlan(
                        id = '', ), 
                    created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    description = '', 
                    diagnostics = openapi_client.models.diagnostics_configuration.DiagnosticsConfiguration(
                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        level = 'None', ), 
                    example_request = openapi_client.models.example_request.ExampleRequest(
                        global_parameters = {
                            'key' : None
                            }, 
                        inputs = {
                            'key' : [
                                [
                                    None
                                    ]
                                ]
                            }, ), 
                    expose_sample_data = True, 
                    input = openapi_client.models.service_input_output_specification.ServiceInputOutputSpecification(
                        description = '', 
                        properties = {
                            'key' : openapi_client.models.table_specification.TableSpecification(
                                description = '', 
                                format = '', 
                                title = '', 
                                type = 'object', )
                            }, 
                        title = '', 
                        type = 'object', ), 
                    keys = openapi_client.models.web_service_keys.WebServiceKeys(
                        primary = '', 
                        secondary = '', ), 
                    machine_learning_workspace = openapi_client.models.machine_learning_workspace.MachineLearningWorkspace(
                        id = '', ), 
                    modified_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    output = openapi_client.models.service_input_output_specification.ServiceInputOutputSpecification(
                        description = '', 
                        properties = {
                            'key' : openapi_client.models.table_specification.TableSpecification(
                                description = '', 
                                format = '', 
                                title = '', 
                                type = 'object', )
                            }, 
                        title = '', 
                        type = 'object', ), 
                    package_type = 'Graph', 
                    parameters = {
                        'key' : ''
                        }, 
                    provisioning_state = 'Unknown', 
                    read_only = True, 
                    realtime_configuration = openapi_client.models.realtime_configuration.RealtimeConfiguration(
                        max_concurrent_calls = 4, ), 
                    storage_account = openapi_client.models.storage_account.StorageAccount(
                        key = '', 
                        name = '', ), 
                    swagger_location = '', 
                    title = '', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return WebService(
                properties = openapi_client.models.web_service_properties.WebServiceProperties(
                    assets = {
                        'key' : openapi_client.models.asset_item.AssetItem(
                            id = '', 
                            input_ports = {
                                'key' : openapi_client.models.input_port.InputPort(
                                    type = 'Dataset', )
                                }, 
                            location_info = openapi_client.models.asset_location.AssetLocation(
                                credentials = '', 
                                uri = '', ), 
                            metadata = {
                                'key' : ''
                                }, 
                            name = '', 
                            output_ports = {
                                'key' : openapi_client.models.output_port.OutputPort(
                                    type = 'Dataset', )
                                }, 
                            parameters = [
                                openapi_client.models.module_asset_parameter.ModuleAssetParameter(
                                    mode_values_info = {
                                        'key' : openapi_client.models.mode_value_info.ModeValueInfo(
                                            interface_string = '', )
                                        }, 
                                    name = '', 
                                    parameter_type = '', )
                                ], 
                            type = 'Module', )
                        }, 
                    commitment_plan = openapi_client.models.commitment_plan.CommitmentPlan(
                        id = '', ), 
                    created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    description = '', 
                    diagnostics = openapi_client.models.diagnostics_configuration.DiagnosticsConfiguration(
                        expiry = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        level = 'None', ), 
                    example_request = openapi_client.models.example_request.ExampleRequest(
                        global_parameters = {
                            'key' : None
                            }, 
                        inputs = {
                            'key' : [
                                [
                                    None
                                    ]
                                ]
                            }, ), 
                    expose_sample_data = True, 
                    input = openapi_client.models.service_input_output_specification.ServiceInputOutputSpecification(
                        description = '', 
                        properties = {
                            'key' : openapi_client.models.table_specification.TableSpecification(
                                description = '', 
                                format = '', 
                                title = '', 
                                type = 'object', )
                            }, 
                        title = '', 
                        type = 'object', ), 
                    keys = openapi_client.models.web_service_keys.WebServiceKeys(
                        primary = '', 
                        secondary = '', ), 
                    machine_learning_workspace = openapi_client.models.machine_learning_workspace.MachineLearningWorkspace(
                        id = '', ), 
                    modified_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    output = openapi_client.models.service_input_output_specification.ServiceInputOutputSpecification(
                        description = '', 
                        properties = {
                            'key' : openapi_client.models.table_specification.TableSpecification(
                                description = '', 
                                format = '', 
                                title = '', 
                                type = 'object', )
                            }, 
                        title = '', 
                        type = 'object', ), 
                    package_type = 'Graph', 
                    parameters = {
                        'key' : ''
                        }, 
                    provisioning_state = 'Unknown', 
                    read_only = True, 
                    realtime_configuration = openapi_client.models.realtime_configuration.RealtimeConfiguration(
                        max_concurrent_calls = 4, ), 
                    storage_account = openapi_client.models.storage_account.StorageAccount(
                        key = '', 
                        name = '', ), 
                    swagger_location = '', 
                    title = '', ),
                location = '',
        )
        """

    def testWebService(self):
        """Test WebService"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Azure ML Web Services Management Client

    These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.blob_location import BlobLocation
from openapi_client.models.input_port import InputPort
from openapi_client.models.module_asset_parameter import ModuleAssetParameter
from openapi_client.models.output_port import OutputPort
from typing import Optional, Set
from typing_extensions import Self

class AssetItem(BaseModel):
    """
    Information about an asset associated with the web service.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Asset's Id.")
    input_ports: Optional[Dict[str, InputPort]] = Field(default=None, description="Information about the asset's input ports.", alias="inputPorts")
    location_info: BlobLocation = Field(alias="locationInfo")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="If the asset is a custom module, this holds the module's metadata.")
    name: StrictStr = Field(description="Asset's friendly name.")
    output_ports: Optional[Dict[str, OutputPort]] = Field(default=None, description="Information about the asset's output ports.", alias="outputPorts")
    parameters: Optional[List[ModuleAssetParameter]] = Field(default=None, description="If the asset is a custom module, this holds the module's parameters.")
    type: StrictStr = Field(description="Asset's type.")
    __properties: ClassVar[List[str]] = ["id", "inputPorts", "locationInfo", "metadata", "name", "outputPorts", "parameters", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Module', 'Resource']):
            raise ValueError("must be one of enum values ('Module', 'Resource')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in input_ports (dict)
        _field_dict = {}
        if self.input_ports:
            for _key_input_ports in self.input_ports:
                if self.input_ports[_key_input_ports]:
                    _field_dict[_key_input_ports] = self.input_ports[_key_input_ports].to_dict()
            _dict['inputPorts'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of location_info
        if self.location_info:
            _dict['locationInfo'] = self.location_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in output_ports (dict)
        _field_dict = {}
        if self.output_ports:
            for _key_output_ports in self.output_ports:
                if self.output_ports[_key_output_ports]:
                    _field_dict[_key_output_ports] = self.output_ports[_key_output_ports].to_dict()
            _dict['outputPorts'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "inputPorts": dict(
                (_k, InputPort.from_dict(_v))
                for _k, _v in obj["inputPorts"].items()
            )
            if obj.get("inputPorts") is not None
            else None,
            "locationInfo": BlobLocation.from_dict(obj["locationInfo"]) if obj.get("locationInfo") is not None else None,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "outputPorts": dict(
                (_k, OutputPort.from_dict(_v))
                for _k, _v in obj["outputPorts"].items()
            )
            if obj.get("outputPorts") is not None
            else None,
            "parameters": [ModuleAssetParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "type": obj.get("type")
        })
        return _obj



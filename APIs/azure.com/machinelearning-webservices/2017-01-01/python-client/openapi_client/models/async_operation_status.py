# coding: utf-8

"""
    Azure ML Web Services Management Client

    These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.async_operation_error_info import AsyncOperationErrorInfo
from typing import Optional, Set
from typing_extensions import Self

class AsyncOperationStatus(BaseModel):
    """
    Azure async operation status.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="The date time that the async operation finished.", alias="endTime")
    error_info: Optional[AsyncOperationErrorInfo] = Field(default=None, alias="errorInfo")
    id: Optional[StrictStr] = Field(default=None, description="Async operation id.")
    name: Optional[StrictStr] = Field(default=None, description="Async operation name.")
    percent_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Async operation progress.", alias="percentComplete")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Read Only: The provisioning state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed.", alias="provisioningState")
    start_time: Optional[datetime] = Field(default=None, description="The date time that the async operation started.", alias="startTime")
    __properties: ClassVar[List[str]] = ["endTime", "errorInfo", "id", "name", "percentComplete", "provisioningState", "startTime"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Provisioning', 'Succeeded', 'Failed']):
            raise ValueError("must be one of enum values ('Unknown', 'Provisioning', 'Succeeded', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsyncOperationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "id",
            "name",
            "percent_complete",
            "provisioning_state",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_info
        if self.error_info:
            _dict['errorInfo'] = self.error_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsyncOperationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "errorInfo": AsyncOperationErrorInfo.from_dict(obj["errorInfo"]) if obj.get("errorInfo") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "percentComplete": obj.get("percentComplete"),
            "provisioningState": obj.get("provisioningState"),
            "startTime": obj.get("startTime")
        })
        return _obj



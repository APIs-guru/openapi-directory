# coding: utf-8

"""
    Azure ML Web Services Management Client

    These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.asset_item import AssetItem
from openapi_client.models.blob_location import BlobLocation
from openapi_client.models.commitment_plan import CommitmentPlan
from openapi_client.models.diagnostics_configuration import DiagnosticsConfiguration
from openapi_client.models.example_request import ExampleRequest
from openapi_client.models.machine_learning_workspace import MachineLearningWorkspace
from openapi_client.models.realtime_configuration import RealtimeConfiguration
from openapi_client.models.service_input_output_specification import ServiceInputOutputSpecification
from openapi_client.models.storage_account import StorageAccount
from openapi_client.models.web_service_keys import WebServiceKeys
from openapi_client.models.web_service_parameter import WebServiceParameter
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.web_service_properties_for_graph import WebServicePropertiesForGraph

class WebServiceProperties(BaseModel):
    """
    The set of properties specific to the Azure ML web service resource.
    """ # noqa: E501
    assets: Optional[Dict[str, AssetItem]] = Field(default=None, description="Contains user defined properties describing web service assets. Properties are expressed as Key/Value pairs.")
    commitment_plan: Optional[CommitmentPlan] = Field(default=None, alias="commitmentPlan")
    created_on: Optional[datetime] = Field(default=None, description="Read Only: The date and time when the web service was created.", alias="createdOn")
    description: Optional[StrictStr] = Field(default=None, description="The description of the web service.")
    diagnostics: Optional[DiagnosticsConfiguration] = None
    example_request: Optional[ExampleRequest] = Field(default=None, alias="exampleRequest")
    expose_sample_data: Optional[StrictBool] = Field(default=None, description="When set to true, sample data is included in the web service's swagger definition. The default value is true.", alias="exposeSampleData")
    input: Optional[ServiceInputOutputSpecification] = None
    keys: Optional[WebServiceKeys] = None
    machine_learning_workspace: Optional[MachineLearningWorkspace] = Field(default=None, alias="machineLearningWorkspace")
    modified_on: Optional[datetime] = Field(default=None, description="Read Only: The date and time when the web service was last modified.", alias="modifiedOn")
    output: Optional[ServiceInputOutputSpecification] = None
    package_type: StrictStr = Field(description="Specifies the package type. Valid values are Graph (Specifies a web service published through the Machine Learning Studio) and Code (Specifies a web service published using code such as Python). Note: Code is not supported at this time.", alias="packageType")
    parameters: Optional[Dict[str, WebServiceParameter]] = Field(default=None, description="The set of global parameters values defined for the web service, given as a global parameter name to default value map. If no default value is specified, the parameter is considered to be required.")
    payloads_in_blob_storage: Optional[StrictBool] = Field(default=None, description="When set to true, indicates that the payload size is larger than 3 MB. Otherwise false. If the payload size exceed 3 MB, the payload is stored in a blob and the PayloadsLocation parameter contains the URI of the blob. Otherwise, this will be set to false and Assets, Input, Output, Package, Parameters, ExampleRequest are inline. The Payload sizes is determined by adding the size of the Assets, Input, Output, Package, Parameters, and the ExampleRequest.", alias="payloadsInBlobStorage")
    payloads_location: Optional[BlobLocation] = Field(default=None, alias="payloadsLocation")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Read Only: The provision state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed.", alias="provisioningState")
    read_only: Optional[StrictBool] = Field(default=None, description="When set to true, indicates that the web service is read-only and can no longer be updated or patched, only removed. Default, is false. Note: Once set to true, you cannot change its value.", alias="readOnly")
    realtime_configuration: Optional[RealtimeConfiguration] = Field(default=None, alias="realtimeConfiguration")
    storage_account: Optional[StorageAccount] = Field(default=None, alias="storageAccount")
    swagger_location: Optional[StrictStr] = Field(default=None, description="Read Only: Contains the URI of the swagger spec associated with this web service.", alias="swaggerLocation")
    title: Optional[StrictStr] = Field(default=None, description="The title of the web service.")
    __properties: ClassVar[List[str]] = ["assets", "commitmentPlan", "createdOn", "description", "diagnostics", "exampleRequest", "exposeSampleData", "input", "keys", "machineLearningWorkspace", "modifiedOn", "output", "packageType", "parameters", "payloadsInBlobStorage", "payloadsLocation", "provisioningState", "readOnly", "realtimeConfiguration", "storageAccount", "swaggerLocation", "title"]

    @field_validator('package_type')
    def package_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Graph']):
            raise ValueError("must be one of enum values ('Graph')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Provisioning', 'Succeeded', 'Failed']):
            raise ValueError("must be one of enum values ('Unknown', 'Provisioning', 'Succeeded', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'packageType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'WebServicePropertiesForGraph': 'WebServicePropertiesForGraph'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[WebServicePropertiesForGraph]]:
        """Create an instance of WebServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_on",
            "modified_on",
            "provisioning_state",
            "swagger_location",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in assets (dict)
        _field_dict = {}
        if self.assets:
            for _key_assets in self.assets:
                if self.assets[_key_assets]:
                    _field_dict[_key_assets] = self.assets[_key_assets].to_dict()
            _dict['assets'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of commitment_plan
        if self.commitment_plan:
            _dict['commitmentPlan'] = self.commitment_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diagnostics
        if self.diagnostics:
            _dict['diagnostics'] = self.diagnostics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of example_request
        if self.example_request:
            _dict['exampleRequest'] = self.example_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keys
        if self.keys:
            _dict['keys'] = self.keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_learning_workspace
        if self.machine_learning_workspace:
            _dict['machineLearningWorkspace'] = self.machine_learning_workspace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of payloads_location
        if self.payloads_location:
            _dict['payloadsLocation'] = self.payloads_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of realtime_configuration
        if self.realtime_configuration:
            _dict['realtimeConfiguration'] = self.realtime_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_account
        if self.storage_account:
            _dict['storageAccount'] = self.storage_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[WebServicePropertiesForGraph]]:
        """Create an instance of WebServiceProperties from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'WebServicePropertiesForGraph':
            return import_module("openapi_client.models.web_service_properties_for_graph").WebServicePropertiesForGraph.from_dict(obj)

        raise ValueError("WebServiceProperties failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



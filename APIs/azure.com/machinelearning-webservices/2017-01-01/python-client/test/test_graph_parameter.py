# coding: utf-8

"""
    Azure ML Web Services Management Client

    These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>

    The version of the OpenAPI document: 2017-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.graph_parameter import GraphParameter

class TestGraphParameter(unittest.TestCase):
    """GraphParameter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GraphParameter:
        """Test GraphParameter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GraphParameter`
        """
        model = GraphParameter()
        if include_optional:
            return GraphParameter(
                description = '',
                links = [
                    openapi_client.models.graph_parameter_link.GraphParameterLink(
                        node_id = '', 
                        parameter_key = '', )
                    ],
                type = 'String'
            )
        else:
            return GraphParameter(
                links = [
                    openapi_client.models.graph_parameter_link.GraphParameterLink(
                        node_id = '', 
                        parameter_key = '', )
                    ],
                type = 'String',
        )
        """

    def testGraphParameter(self):
        """Test GraphParameter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

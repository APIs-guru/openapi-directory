# coding: utf-8

"""
    HealthcareApisClient

    Use this API to manage Microsoft HealthcareApis services in your Azure subscription.

    The version of the OpenAPI document: 2018-08-20-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.service_access_policy_entry import ServiceAccessPolicyEntry
from openapi_client.models.service_authentication_configuration_info import ServiceAuthenticationConfigurationInfo
from openapi_client.models.service_cors_configuration_info import ServiceCorsConfigurationInfo
from openapi_client.models.service_cosmos_db_configuration_info import ServiceCosmosDbConfigurationInfo
from typing import Optional, Set
from typing_extensions import Self

class ServicesProperties(BaseModel):
    """
    The properties of a service instance.
    """ # noqa: E501
    access_policies: Annotated[List[ServiceAccessPolicyEntry], Field(min_length=1)] = Field(description="The access policies of the service instance.", alias="accessPolicies")
    authentication_configuration: Optional[ServiceAuthenticationConfigurationInfo] = Field(default=None, alias="authenticationConfiguration")
    cors_configuration: Optional[ServiceCorsConfigurationInfo] = Field(default=None, alias="corsConfiguration")
    cosmos_db_configuration: Optional[ServiceCosmosDbConfigurationInfo] = Field(default=None, alias="cosmosDbConfiguration")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["accessPolicies", "authenticationConfiguration", "corsConfiguration", "cosmosDbConfiguration", "provisioningState"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Deleting', 'Succeeded', 'Creating', 'Accepted', 'Verifying', 'Updating', 'Failed', 'Canceled', 'Deprovisioned']):
            raise ValueError("must be one of enum values ('Deleting', 'Succeeded', 'Creating', 'Accepted', 'Verifying', 'Updating', 'Failed', 'Canceled', 'Deprovisioned')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServicesProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_policies (list)
        _items = []
        if self.access_policies:
            for _item_access_policies in self.access_policies:
                if _item_access_policies:
                    _items.append(_item_access_policies.to_dict())
            _dict['accessPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of authentication_configuration
        if self.authentication_configuration:
            _dict['authenticationConfiguration'] = self.authentication_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cors_configuration
        if self.cors_configuration:
            _dict['corsConfiguration'] = self.cors_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cosmos_db_configuration
        if self.cosmos_db_configuration:
            _dict['cosmosDbConfiguration'] = self.cosmos_db_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServicesProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessPolicies": [ServiceAccessPolicyEntry.from_dict(_item) for _item in obj["accessPolicies"]] if obj.get("accessPolicies") is not None else None,
            "authenticationConfiguration": ServiceAuthenticationConfigurationInfo.from_dict(obj["authenticationConfiguration"]) if obj.get("authenticationConfiguration") is not None else None,
            "corsConfiguration": ServiceCorsConfigurationInfo.from_dict(obj["corsConfiguration"]) if obj.get("corsConfiguration") is not None else None,
            "cosmosDbConfiguration": ServiceCosmosDbConfigurationInfo.from_dict(obj["cosmosDbConfiguration"]) if obj.get("cosmosDbConfiguration") is not None else None,
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



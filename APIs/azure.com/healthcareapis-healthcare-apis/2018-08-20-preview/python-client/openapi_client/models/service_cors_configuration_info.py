# coding: utf-8

"""
    HealthcareApisClient

    Use this API to manage Microsoft HealthcareApis services in your Azure subscription.

    The version of the OpenAPI document: 2018-08-20-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceCorsConfigurationInfo(BaseModel):
    """
    The settings for the CORS configuration of the service instance.
    """ # noqa: E501
    allow_credentials: Optional[StrictBool] = Field(default=None, description="If credentials are allowed via CORS.", alias="allowCredentials")
    headers: Optional[List[StrictStr]] = Field(default=None, description="The headers to be allowed via CORS.")
    max_age: Optional[Annotated[int, Field(le=99999, strict=True, ge=0)]] = Field(default=None, description="The max age to be allowed via CORS.", alias="maxAge")
    methods: Optional[List[StrictStr]] = Field(default=None, description="The methods to be allowed via CORS.")
    origins: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="The origins to be allowed via CORS.")
    __properties: ClassVar[List[str]] = ["allowCredentials", "headers", "maxAge", "methods", "origins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceCorsConfigurationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceCorsConfigurationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowCredentials": obj.get("allowCredentials"),
            "headers": obj.get("headers"),
            "maxAge": obj.get("maxAge"),
            "methods": obj.get("methods"),
            "origins": obj.get("origins")
        })
        return _obj



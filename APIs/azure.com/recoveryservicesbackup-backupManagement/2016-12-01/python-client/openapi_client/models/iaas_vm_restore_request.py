# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_details import EncryptionDetails
from openapi_client.models.restore_request import RestoreRequest
from typing import Optional, Set
from typing_extensions import Self

class IaasVMRestoreRequest(RestoreRequest):
    """
    IaaS VM workload-specific restore.
    """ # noqa: E501
    affinity_group: Optional[StrictStr] = Field(default=None, description="Affinity group associated to VM to be restored. Used only for Classic Compute Virtual Machines.", alias="affinityGroup")
    create_new_cloud_service: Optional[StrictBool] = Field(default=None, description="Should a new cloud service be created while restoring the VM. If this is false, VM will be restored to the same cloud service as it was at the time of backup.", alias="createNewCloudService")
    encryption_details: Optional[EncryptionDetails] = Field(default=None, alias="encryptionDetails")
    original_storage_account_option: Optional[StrictBool] = Field(default=None, alias="originalStorageAccountOption")
    recovery_point_id: Optional[StrictStr] = Field(default=None, description="ID of the backup copy to be recovered.", alias="recoveryPointId")
    recovery_type: Optional[StrictStr] = Field(default=None, description="Type of this recovery.", alias="recoveryType")
    region: Optional[StrictStr] = Field(default=None, description="Region in which the virtual machine is restored.")
    source_resource_id: Optional[StrictStr] = Field(default=None, description="Fully qualified ARM ID of the VM which is being recovered.", alias="sourceResourceId")
    storage_account_id: Optional[StrictStr] = Field(default=None, description="Fully qualified ARM ID of the storage account to which the VM has to be restored.", alias="storageAccountId")
    subnet_id: Optional[StrictStr] = Field(default=None, description="Subnet ID, is the subnet ID associated with the to be restored VM. For Classic VMs it would be {VnetID}/Subnet/{SubnetName} and, for the Azure Resource Manager VMs it would be ARM resource ID used to represent the subnet.", alias="subnetId")
    target_domain_name_id: Optional[StrictStr] = Field(default=None, description="Fully qualified ARM ID of the domain name to be associated to the VM being restored. This applies only to Classic Virtual Machines.", alias="targetDomainNameId")
    target_resource_group_id: Optional[StrictStr] = Field(default=None, description="This is the ARM Id of the resource group that you want to create for this Virtual machine and other artifacts.              For e.g. /subscriptions/{subId}/resourcegroups/{rg}", alias="targetResourceGroupId")
    target_virtual_machine_id: Optional[StrictStr] = Field(default=None, description="This is the complete ARM Id of the VM that will be created.              For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}", alias="targetVirtualMachineId")
    virtual_network_id: Optional[StrictStr] = Field(default=None, description="This is the virtual network Id of the vnet that will be attached to the virtual machine.              User will be validated for join action permissions in the linked access.", alias="virtualNetworkId")
    __properties: ClassVar[List[str]] = ["objectType"]

    @field_validator('recovery_type')
    def recovery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'OriginalLocation', 'AlternateLocation', 'RestoreDisks']):
            raise ValueError("must be one of enum values ('Invalid', 'OriginalLocation', 'AlternateLocation', 'RestoreDisks')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IaasVMRestoreRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IaasVMRestoreRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objectType": obj.get("objectType")
        })
        return _obj



# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schedule_policy import SchedulePolicy
from typing import Optional, Set
from typing_extensions import Self

class SimpleSchedulePolicy(SchedulePolicy):
    """
    Simple policy schedule.
    """ # noqa: E501
    schedule_run_days: Optional[List[StrictStr]] = Field(default=None, description="List of days of week this schedule has to be run.", alias="scheduleRunDays")
    schedule_run_frequency: Optional[StrictStr] = Field(default=None, description="Frequency of the schedule operation of this policy.", alias="scheduleRunFrequency")
    schedule_run_times: Optional[List[datetime]] = Field(default=None, description="List of times of day this schedule has to be run.", alias="scheduleRunTimes")
    schedule_weekly_frequency: Optional[StrictInt] = Field(default=None, description="At every number weeks this schedule has to be run.", alias="scheduleWeeklyFrequency")
    __properties: ClassVar[List[str]] = ["schedulePolicyType"]

    @field_validator('schedule_run_days')
    def schedule_run_days_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']):
                raise ValueError("each list item must be one of ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')")
        return value

    @field_validator('schedule_run_frequency')
    def schedule_run_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Daily', 'Weekly']):
            raise ValueError("must be one of enum values ('Invalid', 'Daily', 'Weekly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimpleSchedulePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimpleSchedulePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schedulePolicyType": obj.get("schedulePolicyType")
        })
        return _obj



# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.daily_retention_format import DailyRetentionFormat
from openapi_client.models.retention_duration import RetentionDuration
from openapi_client.models.weekly_retention_format import WeeklyRetentionFormat
from typing import Optional, Set
from typing_extensions import Self

class MonthlyRetentionSchedule(BaseModel):
    """
    Monthly retention schedule.
    """ # noqa: E501
    retention_duration: Optional[RetentionDuration] = Field(default=None, alias="retentionDuration")
    retention_schedule_daily: Optional[DailyRetentionFormat] = Field(default=None, alias="retentionScheduleDaily")
    retention_schedule_format_type: Optional[StrictStr] = Field(default=None, description="Retention schedule format type for monthly retention policy.", alias="retentionScheduleFormatType")
    retention_schedule_weekly: Optional[WeeklyRetentionFormat] = Field(default=None, alias="retentionScheduleWeekly")
    retention_times: Optional[List[datetime]] = Field(default=None, description="Retention times of retention policy.", alias="retentionTimes")
    __properties: ClassVar[List[str]] = ["retentionDuration", "retentionScheduleDaily", "retentionScheduleFormatType", "retentionScheduleWeekly", "retentionTimes"]

    @field_validator('retention_schedule_format_type')
    def retention_schedule_format_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'Daily', 'Weekly']):
            raise ValueError("must be one of enum values ('Invalid', 'Daily', 'Weekly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonthlyRetentionSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retention_duration
        if self.retention_duration:
            _dict['retentionDuration'] = self.retention_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retention_schedule_daily
        if self.retention_schedule_daily:
            _dict['retentionScheduleDaily'] = self.retention_schedule_daily.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retention_schedule_weekly
        if self.retention_schedule_weekly:
            _dict['retentionScheduleWeekly'] = self.retention_schedule_weekly.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonthlyRetentionSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "retentionDuration": RetentionDuration.from_dict(obj["retentionDuration"]) if obj.get("retentionDuration") is not None else None,
            "retentionScheduleDaily": DailyRetentionFormat.from_dict(obj["retentionScheduleDaily"]) if obj.get("retentionScheduleDaily") is not None else None,
            "retentionScheduleFormatType": obj.get("retentionScheduleFormatType"),
            "retentionScheduleWeekly": WeeklyRetentionFormat.from_dict(obj["retentionScheduleWeekly"]) if obj.get("retentionScheduleWeekly") is not None else None,
            "retentionTimes": obj.get("retentionTimes")
        })
        return _obj



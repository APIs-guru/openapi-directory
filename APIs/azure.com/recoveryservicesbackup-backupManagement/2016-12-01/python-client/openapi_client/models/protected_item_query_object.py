# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProtectedItemQueryObject(BaseModel):
    """
    Filters to list backup items.
    """ # noqa: E501
    backup_engine_name: Optional[StrictStr] = Field(default=None, description="Backup Engine name", alias="backupEngineName")
    backup_management_type: Optional[StrictStr] = Field(default=None, description="Backup management type for the backed up item.", alias="backupManagementType")
    container_name: Optional[StrictStr] = Field(default=None, description="Name of the container.", alias="containerName")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of protected item", alias="friendlyName")
    health_state: Optional[StrictStr] = Field(default=None, description="Health State for the backed up item.", alias="healthState")
    item_type: Optional[StrictStr] = Field(default=None, description="Type of workload this item represents.", alias="itemType")
    policy_name: Optional[StrictStr] = Field(default=None, description="Backup policy name associated with the backup item.", alias="policyName")
    __properties: ClassVar[List[str]] = ["backupEngineName", "backupManagementType", "containerName", "friendlyName", "healthState", "itemType", "policyName"]

    @field_validator('backup_management_type')
    def backup_management_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql']):
            raise ValueError("must be one of enum values ('Invalid', 'AzureIaasVM', 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql')")
        return value

    @field_validator('health_state')
    def health_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Passed', 'ActionRequired', 'ActionSuggested', 'Invalid']):
            raise ValueError("must be one of enum values ('Passed', 'ActionRequired', 'ActionSuggested', 'Invalid')")
        return value

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Invalid', 'VM', 'FileFolder', 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'VMwareVM', 'SystemState', 'Client', 'GenericDataSource']):
            raise ValueError("must be one of enum values ('Invalid', 'VM', 'FileFolder', 'AzureSqlDb', 'SQLDB', 'Exchange', 'Sharepoint', 'VMwareVM', 'SystemState', 'Client', 'GenericDataSource')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectedItemQueryObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectedItemQueryObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupEngineName": obj.get("backupEngineName"),
            "backupManagementType": obj.get("backupManagementType"),
            "containerName": obj.get("containerName"),
            "friendlyName": obj.get("friendlyName"),
            "healthState": obj.get("healthState"),
            "itemType": obj.get("itemType"),
            "policyName": obj.get("policyName")
        })
        return _obj



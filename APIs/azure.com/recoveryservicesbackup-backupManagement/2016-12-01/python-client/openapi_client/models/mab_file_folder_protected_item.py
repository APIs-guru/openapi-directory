# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mab_file_folder_protected_item_extended_info import MabFileFolderProtectedItemExtendedInfo
from openapi_client.models.protected_item import ProtectedItem
from typing import Optional, Set
from typing_extensions import Self

class MabFileFolderProtectedItem(ProtectedItem):
    """
    MAB workload-specific backup item.
    """ # noqa: E501
    computer_name: Optional[StrictStr] = Field(default=None, description="Name of the computer associated with this backup item.", alias="computerName")
    deferred_delete_sync_time_in_utc: Optional[StrictInt] = Field(default=None, description="Sync time for deferred deletion.", alias="deferredDeleteSyncTimeInUTC")
    extended_info: Optional[MabFileFolderProtectedItemExtendedInfo] = Field(default=None, alias="extendedInfo")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of this backup item.", alias="friendlyName")
    is_scheduled_for_deferred_delete: Optional[StrictBool] = Field(default=None, description="Specifies if the item is scheduled for deferred deletion.", alias="isScheduledForDeferredDelete")
    last_backup_status: Optional[StrictStr] = Field(default=None, description="Status of last backup operation.", alias="lastBackupStatus")
    protection_state: Optional[StrictStr] = Field(default=None, description="Protected, ProtectionStopped, IRPending or ProtectionError", alias="protectionState")
    __properties: ClassVar[List[str]] = ["backupManagementType", "containerName", "lastRecoveryPoint", "policyId", "protectedItemType", "sourceResourceId", "workloadType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MabFileFolderProtectedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MabFileFolderProtectedItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupManagementType": obj.get("backupManagementType"),
            "containerName": obj.get("containerName"),
            "lastRecoveryPoint": obj.get("lastRecoveryPoint"),
            "policyId": obj.get("policyId"),
            "protectedItemType": obj.get("protectedItemType"),
            "sourceResourceId": obj.get("sourceResourceId"),
            "workloadType": obj.get("workloadType")
        })
        return _obj



# coding: utf-8

"""
    RecoveryServicesBackupClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.operation_status import OperationStatus

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProtectedItemOperationStatusesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def protected_item_operation_statuses_get(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        vault_name: Annotated[StrictStr, Field(description="The name of the recovery services vault.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group where the recovery services vault is present.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription Id.")],
        fabric_name: Annotated[StrictStr, Field(description="Fabric name associated with the backup item.")],
        container_name: Annotated[StrictStr, Field(description="Container name associated with the backup item.")],
        protected_item_name: Annotated[StrictStr, Field(description="Backup item name whose details are to be fetched.")],
        operation_id: Annotated[StrictStr, Field(description="OperationID represents the operation whose status needs to be fetched.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationStatus:
        """protected_item_operation_statuses_get

        Fetches the status of an operation such as triggering a backup, restore. The status can be in progress, completed or failed. You can refer to the OperationStatus enum for all the possible states of the operation. Some operations create jobs. This method returns the list of jobs associated with the operation.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param vault_name: The name of the recovery services vault. (required)
        :type vault_name: str
        :param resource_group_name: The name of the resource group where the recovery services vault is present. (required)
        :type resource_group_name: str
        :param subscription_id: The subscription Id. (required)
        :type subscription_id: str
        :param fabric_name: Fabric name associated with the backup item. (required)
        :type fabric_name: str
        :param container_name: Container name associated with the backup item. (required)
        :type container_name: str
        :param protected_item_name: Backup item name whose details are to be fetched. (required)
        :type protected_item_name: str
        :param operation_id: OperationID represents the operation whose status needs to be fetched. (required)
        :type operation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._protected_item_operation_statuses_get_serialize(
            api_version=api_version,
            vault_name=vault_name,
            resource_group_name=resource_group_name,
            subscription_id=subscription_id,
            fabric_name=fabric_name,
            container_name=container_name,
            protected_item_name=protected_item_name,
            operation_id=operation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationStatus",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def protected_item_operation_statuses_get_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        vault_name: Annotated[StrictStr, Field(description="The name of the recovery services vault.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group where the recovery services vault is present.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription Id.")],
        fabric_name: Annotated[StrictStr, Field(description="Fabric name associated with the backup item.")],
        container_name: Annotated[StrictStr, Field(description="Container name associated with the backup item.")],
        protected_item_name: Annotated[StrictStr, Field(description="Backup item name whose details are to be fetched.")],
        operation_id: Annotated[StrictStr, Field(description="OperationID represents the operation whose status needs to be fetched.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationStatus]:
        """protected_item_operation_statuses_get

        Fetches the status of an operation such as triggering a backup, restore. The status can be in progress, completed or failed. You can refer to the OperationStatus enum for all the possible states of the operation. Some operations create jobs. This method returns the list of jobs associated with the operation.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param vault_name: The name of the recovery services vault. (required)
        :type vault_name: str
        :param resource_group_name: The name of the resource group where the recovery services vault is present. (required)
        :type resource_group_name: str
        :param subscription_id: The subscription Id. (required)
        :type subscription_id: str
        :param fabric_name: Fabric name associated with the backup item. (required)
        :type fabric_name: str
        :param container_name: Container name associated with the backup item. (required)
        :type container_name: str
        :param protected_item_name: Backup item name whose details are to be fetched. (required)
        :type protected_item_name: str
        :param operation_id: OperationID represents the operation whose status needs to be fetched. (required)
        :type operation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._protected_item_operation_statuses_get_serialize(
            api_version=api_version,
            vault_name=vault_name,
            resource_group_name=resource_group_name,
            subscription_id=subscription_id,
            fabric_name=fabric_name,
            container_name=container_name,
            protected_item_name=protected_item_name,
            operation_id=operation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationStatus",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def protected_item_operation_statuses_get_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        vault_name: Annotated[StrictStr, Field(description="The name of the recovery services vault.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group where the recovery services vault is present.")],
        subscription_id: Annotated[StrictStr, Field(description="The subscription Id.")],
        fabric_name: Annotated[StrictStr, Field(description="Fabric name associated with the backup item.")],
        container_name: Annotated[StrictStr, Field(description="Container name associated with the backup item.")],
        protected_item_name: Annotated[StrictStr, Field(description="Backup item name whose details are to be fetched.")],
        operation_id: Annotated[StrictStr, Field(description="OperationID represents the operation whose status needs to be fetched.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """protected_item_operation_statuses_get

        Fetches the status of an operation such as triggering a backup, restore. The status can be in progress, completed or failed. You can refer to the OperationStatus enum for all the possible states of the operation. Some operations create jobs. This method returns the list of jobs associated with the operation.

        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param vault_name: The name of the recovery services vault. (required)
        :type vault_name: str
        :param resource_group_name: The name of the resource group where the recovery services vault is present. (required)
        :type resource_group_name: str
        :param subscription_id: The subscription Id. (required)
        :type subscription_id: str
        :param fabric_name: Fabric name associated with the backup item. (required)
        :type fabric_name: str
        :param container_name: Container name associated with the backup item. (required)
        :type container_name: str
        :param protected_item_name: Backup item name whose details are to be fetched. (required)
        :type protected_item_name: str
        :param operation_id: OperationID represents the operation whose status needs to be fetched. (required)
        :type operation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._protected_item_operation_statuses_get_serialize(
            api_version=api_version,
            vault_name=vault_name,
            resource_group_name=resource_group_name,
            subscription_id=subscription_id,
            fabric_name=fabric_name,
            container_name=container_name,
            protected_item_name=protected_item_name,
            operation_id=operation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationStatus",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _protected_item_operation_statuses_get_serialize(
        self,
        api_version,
        vault_name,
        resource_group_name,
        subscription_id,
        fabric_name,
        container_name,
        protected_item_name,
        operation_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if vault_name is not None:
            _path_params['vaultName'] = vault_name
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if fabric_name is not None:
            _path_params['fabricName'] = fabric_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if protected_item_name is not None:
            _path_params['protectedItemName'] = protected_item_name
        if operation_id is not None:
            _path_params['operationId'] = operation_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/operationsStatus/{operationId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



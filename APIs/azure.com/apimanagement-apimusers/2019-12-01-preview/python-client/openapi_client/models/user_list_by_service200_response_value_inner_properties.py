# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_list_by_service200_response_value_inner_properties_groups_inner import UserListByService200ResponseValueInnerPropertiesGroupsInner
from typing import Optional, Set
from typing_extensions import Self

class UserListByService200ResponseValueInnerProperties(BaseModel):
    """
    User profile.
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Email address.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name.", alias="firstName")
    groups: Optional[List[UserListByService200ResponseValueInnerPropertiesGroupsInner]] = Field(default=None, description="Collection of groups user is part of.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name.", alias="lastName")
    registration_date: Optional[datetime] = Field(default=None, description="Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="registrationDate")
    __properties: ClassVar[List[str]] = ["email", "firstName", "groups", "lastName", "registrationDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserListByService200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "groups",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserListByService200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "groups": [UserListByService200ResponseValueInnerPropertiesGroupsInner.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "lastName": obj.get("lastName"),
            "registrationDate": obj.get("registrationDate")
        })
        return _obj



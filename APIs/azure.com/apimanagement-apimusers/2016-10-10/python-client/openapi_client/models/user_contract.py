# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.

    The version of the OpenAPI document: 2016-10-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_identity_contract import UserIdentityContract
from typing import Optional, Set
from typing_extensions import Self

class UserContract(BaseModel):
    """
    User profile.
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Email address.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name.", alias="firstName")
    id: Optional[StrictStr] = Field(default=None, description="User identifier path.")
    identities: Optional[List[UserIdentityContract]] = Field(default=None, description="Collection of user identities.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name.", alias="lastName")
    note: Optional[StrictStr] = Field(default=None, description="Administrator's note about given user.")
    registration_date: Optional[datetime] = Field(default=None, description="Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="registrationDate")
    state: Optional[StrictStr] = Field(default=None, description="User state.")
    __properties: ClassVar[List[str]] = ["email", "firstName", "id", "identities", "lastName", "note", "registrationDate", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Blocked']):
            raise ValueError("must be one of enum values ('Active', 'Blocked')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "identities",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in identities (list)
        _items = []
        if self.identities:
            for _item_identities in self.identities:
                if _item_identities:
                    _items.append(_item_identities.to_dict())
            _dict['identities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "id": obj.get("id"),
            "identities": [UserIdentityContract.from_dict(_item) for _item in obj["identities"]] if obj.get("identities") is not None else None,
            "lastName": obj.get("lastName"),
            "note": obj.get("note"),
            "registrationDate": obj.get("registrationDate"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UserSubscriptionList200ResponseValueInnerProperties(BaseModel):
    """
    Subscription details.
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, description="Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="createdDate")
    display_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, description="The name of the subscription, or null if the subscription has no name.", alias="displayName")
    end_date: Optional[datetime] = Field(default=None, description="Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="endDate")
    expiration_date: Optional[datetime] = Field(default=None, description="Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="expirationDate")
    notification_date: Optional[datetime] = Field(default=None, description="Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="notificationDate")
    primary_key: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="Subscription primary key.", alias="primaryKey")
    product_id: StrictStr = Field(description="The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.", alias="productId")
    secondary_key: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="Subscription secondary key.", alias="secondaryKey")
    start_date: Optional[datetime] = Field(default=None, description="Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="startDate")
    state: StrictStr = Field(description="Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.")
    state_comment: Optional[StrictStr] = Field(default=None, description="Optional subscription comment added by an administrator.", alias="stateComment")
    user_id: StrictStr = Field(description="The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.", alias="userId")
    __properties: ClassVar[List[str]] = ["createdDate", "displayName", "endDate", "expirationDate", "notificationDate", "primaryKey", "productId", "secondaryKey", "startDate", "state", "stateComment", "userId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled']):
            raise ValueError("must be one of enum values ('suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserSubscriptionList200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserSubscriptionList200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "displayName": obj.get("displayName"),
            "endDate": obj.get("endDate"),
            "expirationDate": obj.get("expirationDate"),
            "notificationDate": obj.get("notificationDate"),
            "primaryKey": obj.get("primaryKey"),
            "productId": obj.get("productId"),
            "secondaryKey": obj.get("secondaryKey"),
            "startDate": obj.get("startDate"),
            "state": obj.get("state"),
            "stateComment": obj.get("stateComment"),
            "userId": obj.get("userId")
        })
        return _obj



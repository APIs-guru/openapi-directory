# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on User entity in Azure API Management deployment. The User entity in API Management represents the developers that call the APIs of the products to which they are subscribed.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UserCreateOrUpdateRequestProperties(BaseModel):
    """
    Parameters supplied to the Create User operation.
    """ # noqa: E501
    confirmation: Optional[StrictStr] = Field(default=None, description="Determines the type of confirmation e-mail that will be sent to the newly created user.")
    email: Annotated[str, Field(min_length=1, strict=True, max_length=254)] = Field(description="Email address. Must not be empty and must be unique within the service instance.")
    first_name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="First name.", alias="firstName")
    last_name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Last name.", alias="lastName")
    password: Optional[StrictStr] = Field(default=None, description="User Password. If no value is provided, a default password is generated.")
    __properties: ClassVar[List[str]] = ["confirmation", "email", "firstName", "lastName", "password"]

    @field_validator('confirmation')
    def confirmation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['signup', 'invite']):
            raise ValueError("must be one of enum values ('signup', 'invite')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserCreateOrUpdateRequestProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserCreateOrUpdateRequestProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confirmation": obj.get("confirmation"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "password": obj.get("password")
        })
        return _obj



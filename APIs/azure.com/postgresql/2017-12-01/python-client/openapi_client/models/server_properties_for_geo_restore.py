# coding: utf-8

"""
    PostgreSQLManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.server_properties_for_create import ServerPropertiesForCreate
from openapi_client.models.server_version import ServerVersion
from openapi_client.models.ssl_enforcement import SslEnforcement
from openapi_client.models.storage_profile import StorageProfile
from typing import Optional, Set
from typing_extensions import Self

class ServerPropertiesForGeoRestore(ServerPropertiesForCreate):
    """
    The properties used to create a new server by restoring to a different region from a geo replicated backup.
    """ # noqa: E501
    source_server_id: StrictStr = Field(description="The source server id to restore from.", alias="sourceServerId")
    __properties: ClassVar[List[str]] = ["createMode", "sslEnforcement", "storageProfile", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerPropertiesForGeoRestore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerPropertiesForGeoRestore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createMode": obj.get("createMode"),
            "sslEnforcement": obj.get("sslEnforcement"),
            "storageProfile": StorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None,
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    PostgreSQLManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.

    The version of the OpenAPI document: 2017-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.server_version import ServerVersion
from openapi_client.models.ssl_enforcement import SslEnforcement
from openapi_client.models.storage_profile import StorageProfile
from typing import Optional, Set
from typing_extensions import Self

class ServerProperties(BaseModel):
    """
    The properties of a server.
    """ # noqa: E501
    administrator_login: Optional[StrictStr] = Field(default=None, description="The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).", alias="administratorLogin")
    earliest_restore_date: Optional[datetime] = Field(default=None, description="Earliest restore point creation time (ISO8601 format)", alias="earliestRestoreDate")
    fully_qualified_domain_name: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name of a server.", alias="fullyQualifiedDomainName")
    master_server_id: Optional[StrictStr] = Field(default=None, description="The master server id of a replica server.", alias="masterServerId")
    replica_capacity: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The maximum number of replicas that a master server can have.", alias="replicaCapacity")
    replication_role: Optional[StrictStr] = Field(default=None, description="The replication role of the server.", alias="replicationRole")
    ssl_enforcement: Optional[SslEnforcement] = Field(default=None, alias="sslEnforcement")
    storage_profile: Optional[StorageProfile] = Field(default=None, alias="storageProfile")
    user_visible_state: Optional[StrictStr] = Field(default=None, description="A state of a server that is visible to user.", alias="userVisibleState")
    version: Optional[ServerVersion] = None
    __properties: ClassVar[List[str]] = ["administratorLogin", "earliestRestoreDate", "fullyQualifiedDomainName", "masterServerId", "replicaCapacity", "replicationRole", "sslEnforcement", "storageProfile", "userVisibleState", "version"]

    @field_validator('user_visible_state')
    def user_visible_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Ready', 'Dropping', 'Disabled']):
            raise ValueError("must be one of enum values ('Ready', 'Dropping', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage_profile
        if self.storage_profile:
            _dict['storageProfile'] = self.storage_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administratorLogin": obj.get("administratorLogin"),
            "earliestRestoreDate": obj.get("earliestRestoreDate"),
            "fullyQualifiedDomainName": obj.get("fullyQualifiedDomainName"),
            "masterServerId": obj.get("masterServerId"),
            "replicaCapacity": obj.get("replicaCapacity"),
            "replicationRole": obj.get("replicationRole"),
            "sslEnforcement": obj.get("sslEnforcement"),
            "storageProfile": StorageProfile.from_dict(obj["storageProfile"]) if obj.get("storageProfile") is not None else None,
            "userVisibleState": obj.get("userVisibleState"),
            "version": obj.get("version")
        })
        return _obj



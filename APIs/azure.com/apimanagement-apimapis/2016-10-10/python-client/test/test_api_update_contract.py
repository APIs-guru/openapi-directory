# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2016-10-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_update_contract import ApiUpdateContract

class TestApiUpdateContract(unittest.TestCase):
    """ApiUpdateContract unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiUpdateContract:
        """Test ApiUpdateContract
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiUpdateContract`
        """
        model = ApiUpdateContract()
        if include_optional:
            return ApiUpdateContract(
                id = '',
                name = '0',
                path = '',
                protocols = [
                    'Http'
                    ],
                service_url = '0',
                authentication_settings = openapi_client.models.authentication_settings_contract.AuthenticationSettingsContract(
                    o_auth2 = openapi_client.models.o_auth2_authentication_settings_contract.OAuth2AuthenticationSettingsContract(
                        authorization_server_id = '', 
                        scope = '', ), ),
                description = '',
                subscription_key_parameter_names = {subscriptionKeyParameterNames={header=customHeaderParameterName, query=customQueryParameterName}},
                type = 'Http'
            )
        else:
            return ApiUpdateContract(
        )
        """

    def testApiUpdateContract(self):
        """Test ApiUpdateContract"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2016-10-10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.authentication_settings_contract import AuthenticationSettingsContract
from openapi_client.models.subscription_key_parameter_names_contract import SubscriptionKeyParameterNamesContract
from typing import Optional, Set
from typing_extensions import Self

class ApiUpdateContract(BaseModel):
    """
    API Update Contract details.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="API identifier path: /apis/{apiId}")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=300)]] = Field(default=None, description="API name.")
    path: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=400)]] = Field(default=None, description="Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.")
    protocols: Optional[List[StrictStr]] = Field(default=None, description="Describes on which protocols the operations in this API can be invoked.")
    service_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Absolute URL of the backend service implementing this API.", alias="serviceUrl")
    authentication_settings: Optional[AuthenticationSettingsContract] = Field(default=None, alias="authenticationSettings")
    description: Optional[StrictStr] = Field(default=None, description="Description of the API. May include HTML formatting tags.")
    subscription_key_parameter_names: Optional[SubscriptionKeyParameterNamesContract] = Field(default=None, alias="subscriptionKeyParameterNames")
    type: Optional[StrictStr] = Field(default=None, description="Type of API.")
    __properties: ClassVar[List[str]] = ["authenticationSettings", "description", "subscriptionKeyParameterNames", "type"]

    @field_validator('protocols')
    def protocols_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Http', 'Https']):
                raise ValueError("each list item must be one of ('Http', 'Https')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Http', 'Soap']):
            raise ValueError("must be one of enum values ('Http', 'Soap')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiUpdateContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authentication_settings
        if self.authentication_settings:
            _dict['authenticationSettings'] = self.authentication_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_key_parameter_names
        if self.subscription_key_parameter_names:
            _dict['subscriptionKeyParameterNames'] = self.subscription_key_parameter_names.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiUpdateContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationSettings": AuthenticationSettingsContract.from_dict(obj["authenticationSettings"]) if obj.get("authenticationSettings") is not None else None,
            "description": obj.get("description"),
            "subscriptionKeyParameterNames": SubscriptionKeyParameterNamesContract.from_dict(obj["subscriptionKeyParameterNames"]) if obj.get("subscriptionKeyParameterNames") is not None else None,
            "type": obj.get("type")
        })
        return _obj



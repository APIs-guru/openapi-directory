# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ApiRevisionContract(BaseModel):
    """
    Summary of revision metadata.
    """ # noqa: E501
    api_id: Optional[StrictStr] = Field(default=None, description="Identifier of the API Revision.", alias="apiId")
    api_revision: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(default=None, description="Revision number of API.", alias="apiRevision")
    created_date_time: Optional[datetime] = Field(default=None, description="The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.", alias="createdDateTime")
    description: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Description of the API Revision.")
    is_current: Optional[StrictBool] = Field(default=None, description="Indicates if API revision is accessible via the gateway.", alias="isCurrent")
    is_online: Optional[StrictBool] = Field(default=None, description="Indicates if API revision is the current api revision.", alias="isOnline")
    private_url: Optional[StrictStr] = Field(default=None, description="Gateway URL for accessing the non-current API Revision.", alias="privateUrl")
    updated_date_time: Optional[datetime] = Field(default=None, description="The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.", alias="updatedDateTime")
    __properties: ClassVar[List[str]] = ["apiId", "apiRevision", "createdDateTime", "description", "isCurrent", "isOnline", "privateUrl", "updatedDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiRevisionContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_id",
            "api_revision",
            "created_date_time",
            "description",
            "is_current",
            "is_online",
            "private_url",
            "updated_date_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiRevisionContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiId": obj.get("apiId"),
            "apiRevision": obj.get("apiRevision"),
            "createdDateTime": obj.get("createdDateTime"),
            "description": obj.get("description"),
            "isCurrent": obj.get("isCurrent"),
            "isOnline": obj.get("isOnline"),
            "privateUrl": obj.get("privateUrl"),
            "updatedDateTime": obj.get("updatedDateTime")
        })
        return _obj



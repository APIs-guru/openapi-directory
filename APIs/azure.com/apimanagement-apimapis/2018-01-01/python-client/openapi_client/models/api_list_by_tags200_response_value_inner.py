# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_list_by_tags200_response_value_inner_api import ApiListByTags200ResponseValueInnerApi
from openapi_client.models.api_list_by_tags200_response_value_inner_operation import ApiListByTags200ResponseValueInnerOperation
from openapi_client.models.api_list_by_tags200_response_value_inner_product import ApiListByTags200ResponseValueInnerProduct
from openapi_client.models.api_list_by_tags200_response_value_inner_tag import ApiListByTags200ResponseValueInnerTag
from typing import Optional, Set
from typing_extensions import Self

class ApiListByTags200ResponseValueInner(BaseModel):
    """
    TagResource contract properties.
    """ # noqa: E501
    api: Optional[ApiListByTags200ResponseValueInnerApi] = None
    operation: Optional[ApiListByTags200ResponseValueInnerOperation] = None
    product: Optional[ApiListByTags200ResponseValueInnerProduct] = None
    tag: ApiListByTags200ResponseValueInnerTag
    __properties: ClassVar[List[str]] = ["api", "operation", "product", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiListByTags200ResponseValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api
        if self.api:
            _dict['api'] = self.api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag
        if self.tag:
            _dict['tag'] = self.tag.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiListByTags200ResponseValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api": ApiListByTags200ResponseValueInnerApi.from_dict(obj["api"]) if obj.get("api") is not None else None,
            "operation": ApiListByTags200ResponseValueInnerOperation.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "product": ApiListByTags200ResponseValueInnerProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "tag": ApiListByTags200ResponseValueInnerTag.from_dict(obj["tag"]) if obj.get("tag") is not None else None
        })
        return _obj



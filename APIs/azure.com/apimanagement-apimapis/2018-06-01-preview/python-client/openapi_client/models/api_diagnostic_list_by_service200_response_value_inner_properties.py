# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_diagnostic_list_by_service200_response_value_inner_properties_backend import ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend
from openapi_client.models.api_diagnostic_list_by_service200_response_value_inner_properties_sampling import ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling
from typing import Optional, Set
from typing_extensions import Self

class ApiDiagnosticListByService200ResponseValueInnerProperties(BaseModel):
    """
    Diagnostic Entity Properties
    """ # noqa: E501
    always_log: Optional[StrictStr] = Field(default=None, description="Specifies for what type of messages sampling settings should not apply.", alias="alwaysLog")
    backend: Optional[ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend] = None
    enable_http_correlation_headers: Optional[StrictBool] = Field(default=None, description="Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.", alias="enableHttpCorrelationHeaders")
    frontend: Optional[ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend] = None
    logger_id: StrictStr = Field(description="Resource Id of a target logger.", alias="loggerId")
    sampling: Optional[ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling] = None
    __properties: ClassVar[List[str]] = ["alwaysLog", "backend", "enableHttpCorrelationHeaders", "frontend", "loggerId", "sampling"]

    @field_validator('always_log')
    def always_log_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allErrors']):
            raise ValueError("must be one of enum values ('allErrors')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiDiagnosticListByService200ResponseValueInnerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backend
        if self.backend:
            _dict['backend'] = self.backend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frontend
        if self.frontend:
            _dict['frontend'] = self.frontend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sampling
        if self.sampling:
            _dict['sampling'] = self.sampling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiDiagnosticListByService200ResponseValueInnerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alwaysLog": obj.get("alwaysLog"),
            "backend": ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend.from_dict(obj["backend"]) if obj.get("backend") is not None else None,
            "enableHttpCorrelationHeaders": obj.get("enableHttpCorrelationHeaders"),
            "frontend": ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend.from_dict(obj["frontend"]) if obj.get("frontend") is not None else None,
            "loggerId": obj.get("loggerId"),
            "sampling": ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.from_dict(obj["sampling"]) if obj.get("sampling") is not None else None
        })
        return _obj



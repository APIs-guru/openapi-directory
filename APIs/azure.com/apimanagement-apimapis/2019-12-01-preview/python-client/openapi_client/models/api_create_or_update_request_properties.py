# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_create_or_update_request_properties_wsdl_selector import ApiCreateOrUpdateRequestPropertiesWsdlSelector
from typing import Optional, Set
from typing_extensions import Self

class ApiCreateOrUpdateRequestProperties(BaseModel):
    """
    Api Create or Update Properties.
    """ # noqa: E501
    api_type: Optional[StrictStr] = Field(default=None, description="Type of Api to create.   * `http` creates a SOAP to REST API   * `soap` creates a SOAP pass-through API .", alias="apiType")
    format: Optional[StrictStr] = Field(default=None, description="Format of the Content in which the API is getting imported.")
    value: Optional[StrictStr] = Field(default=None, description="Content value when Importing an API.")
    wsdl_selector: Optional[ApiCreateOrUpdateRequestPropertiesWsdlSelector] = Field(default=None, alias="wsdlSelector")
    __properties: ClassVar[List[str]] = ["apiType", "format", "value", "wsdlSelector"]

    @field_validator('api_type')
    def api_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['http', 'soap']):
            raise ValueError("must be one of enum values ('http', 'soap')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['wadl-xml', 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link', 'openapi', 'openapi+json', 'openapi-link', 'openapi+json-link']):
            raise ValueError("must be one of enum values ('wadl-xml', 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link', 'openapi', 'openapi+json', 'openapi-link', 'openapi+json-link')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiCreateOrUpdateRequestProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wsdl_selector
        if self.wsdl_selector:
            _dict['wsdlSelector'] = self.wsdl_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiCreateOrUpdateRequestProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiType": obj.get("apiType"),
            "format": obj.get("format"),
            "value": obj.get("value"),
            "wsdlSelector": ApiCreateOrUpdateRequestPropertiesWsdlSelector.from_dict(obj["wsdlSelector"]) if obj.get("wsdlSelector") is not None else None
        })
        return _obj



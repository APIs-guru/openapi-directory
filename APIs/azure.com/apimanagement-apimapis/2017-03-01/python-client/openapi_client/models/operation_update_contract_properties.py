# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2017-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.parameter_contract import ParameterContract
from openapi_client.models.request_contract import RequestContract
from openapi_client.models.response_contract import ResponseContract
from typing import Optional, Set
from typing_extensions import Self

class OperationUpdateContractProperties(BaseModel):
    """
    Operation Update Contract Properties.
    """ # noqa: E501
    display_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=300)]] = Field(default=None, description="Operation Name.", alias="displayName")
    method: Optional[StrictStr] = Field(default=None, description="A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.")
    url_template: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1000)]] = Field(default=None, description="Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}", alias="urlTemplate")
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Description of the operation. May include HTML formatting tags.")
    policies: Optional[StrictStr] = Field(default=None, description="Operation Policies")
    request: Optional[RequestContract] = None
    responses: Optional[List[ResponseContract]] = Field(default=None, description="Array of Operation responses.")
    template_parameters: Optional[List[ParameterContract]] = Field(default=None, description="Collection of URL template parameters.", alias="templateParameters")
    __properties: ClassVar[List[str]] = ["description", "policies", "request", "responses", "templateParameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationUpdateContractProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in responses (list)
        _items = []
        if self.responses:
            for _item_responses in self.responses:
                if _item_responses:
                    _items.append(_item_responses.to_dict())
            _dict['responses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in template_parameters (list)
        _items = []
        if self.template_parameters:
            for _item_template_parameters in self.template_parameters:
                if _item_template_parameters:
                    _items.append(_item_template_parameters.to_dict())
            _dict['templateParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationUpdateContractProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "policies": obj.get("policies"),
            "request": RequestContract.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "responses": [ResponseContract.from_dict(_item) for _item in obj["responses"]] if obj.get("responses") is not None else None,
            "templateParameters": [ParameterContract.from_dict(_item) for _item in obj["templateParameters"]] if obj.get("templateParameters") is not None else None
        })
        return _obj



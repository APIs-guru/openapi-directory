# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2017-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parameter_contract import ParameterContract
from typing import Optional, Set
from typing_extensions import Self

class RepresentationContract(BaseModel):
    """
    Operation request/response representation details.
    """ # noqa: E501
    content_type: StrictStr = Field(description="Specifies a registered or custom content type for this representation, e.g. application/xml.", alias="contentType")
    form_parameters: Optional[List[ParameterContract]] = Field(default=None, description="Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..", alias="formParameters")
    sample: Optional[StrictStr] = Field(default=None, description="An example of the representation.")
    schema_id: Optional[StrictStr] = Field(default=None, description="Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.", alias="schemaId")
    type_name: Optional[StrictStr] = Field(default=None, description="Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.", alias="typeName")
    __properties: ClassVar[List[str]] = ["contentType", "formParameters", "sample", "schemaId", "typeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RepresentationContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in form_parameters (list)
        _items = []
        if self.form_parameters:
            for _item_form_parameters in self.form_parameters:
                if _item_form_parameters:
                    _items.append(_item_form_parameters.to_dict())
            _dict['formParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RepresentationContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentType": obj.get("contentType"),
            "formParameters": [ParameterContract.from_dict(_item) for _item in obj["formParameters"]] if obj.get("formParameters") is not None else None,
            "sample": obj.get("sample"),
            "schemaId": obj.get("schemaId"),
            "typeName": obj.get("typeName")
        })
        return _obj



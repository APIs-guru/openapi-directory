# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2017-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.api_list_by_tags200_response_value_inner_properties_api_properties_api_version_set_properties import ApiListByTags200ResponseValueInnerPropertiesApiPropertiesApiVersionSetProperties
from typing import Optional, Set
from typing_extensions import Self

class ApiRevisionInfoContract(BaseModel):
    """
    Object used to create an API Revision or Version based on an existing API Revision
    """ # noqa: E501
    api_revision_description: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Description of new API Revision.", alias="apiRevisionDescription")
    api_version_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Version identifier for the new API Version.", alias="apiVersionName")
    api_version_set: Optional[ApiListByTags200ResponseValueInnerPropertiesApiPropertiesApiVersionSetProperties] = Field(default=None, alias="apiVersionSet")
    source_api_id: Optional[StrictStr] = Field(default=None, description="Resource identifier of API to be used to create the revision from.", alias="sourceApiId")
    __properties: ClassVar[List[str]] = ["apiRevisionDescription", "apiVersionName", "apiVersionSet", "sourceApiId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiRevisionInfoContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_version_set
        if self.api_version_set:
            _dict['apiVersionSet'] = self.api_version_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiRevisionInfoContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiRevisionDescription": obj.get("apiRevisionDescription"),
            "apiVersionName": obj.get("apiVersionName"),
            "apiVersionSet": ApiListByTags200ResponseValueInnerPropertiesApiPropertiesApiVersionSetProperties.from_dict(obj["apiVersionSet"]) if obj.get("apiVersionSet") is not None else None,
            "sourceApiId": obj.get("sourceApiId")
        })
        return _obj



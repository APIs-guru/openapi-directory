# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights workbook type.

    The version of the OpenAPI document: 2018-06-17-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkbookProperties(BaseModel):
    """
    Properties that contain a workbook.
    """ # noqa: E501
    category: StrictStr = Field(description="Workbook category, as defined by the user at creation time.")
    display_name: StrictStr = Field(description="The user-defined name (display name) of the workbook.", alias="displayName")
    serialized_data: StrictStr = Field(description="Configuration of this particular workbook. Configuration data is a string containing valid JSON", alias="serializedData")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A list of 0 or more tags that are associated with this workbook definition")
    time_modified: Optional[StrictStr] = Field(default=None, description="Date and time in UTC of the last modification that was made to this workbook definition.", alias="timeModified")
    user_id: StrictStr = Field(description="Unique user id of the specific user that owns this workbook.", alias="userId")
    version: Optional[StrictStr] = Field(default=None, description="Workbook version")
    __properties: ClassVar[List[str]] = ["category", "displayName", "serializedData", "tags", "timeModified", "userId", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkbookProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "time_modified",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkbookProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "displayName": obj.get("displayName"),
            "serializedData": obj.get("serializedData"),
            "tags": obj.get("tags"),
            "timeModified": obj.get("timeModified"),
            "userId": obj.get("userId"),
            "version": obj.get("version")
        })
        return _obj



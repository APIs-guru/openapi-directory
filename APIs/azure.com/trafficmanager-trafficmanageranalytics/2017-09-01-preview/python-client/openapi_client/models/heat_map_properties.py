# coding: utf-8

"""
    TrafficManagerManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.heat_map_endpoint import HeatMapEndpoint
from openapi_client.models.traffic_flow import TrafficFlow
from typing import Optional, Set
from typing_extensions import Self

class HeatMapProperties(BaseModel):
    """
    Class representing a Traffic Manager HeatMap properties.
    """ # noqa: E501
    end_time: Optional[datetime] = Field(default=None, description="The ending of the time window for this HeatMap, exclusive.", alias="endTime")
    endpoints: Optional[List[HeatMapEndpoint]] = Field(default=None, description="The endpoints used in this HeatMap calculation.")
    start_time: Optional[datetime] = Field(default=None, description="The beginning of the time window for this HeatMap, inclusive.", alias="startTime")
    traffic_flows: Optional[List[TrafficFlow]] = Field(default=None, description="The traffic flows produced in this HeatMap calculation.", alias="trafficFlows")
    __properties: ClassVar[List[str]] = ["endTime", "endpoints", "startTime", "trafficFlows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeatMapProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in traffic_flows (list)
        _items = []
        if self.traffic_flows:
            for _item_traffic_flows in self.traffic_flows:
                if _item_traffic_flows:
                    _items.append(_item_traffic_flows.to_dict())
            _dict['trafficFlows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeatMapProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "endpoints": [HeatMapEndpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "startTime": obj.get("startTime"),
            "trafficFlows": [TrafficFlow.from_dict(_item) for _item in obj["trafficFlows"]] if obj.get("trafficFlows") is not None else None
        })
        return _obj



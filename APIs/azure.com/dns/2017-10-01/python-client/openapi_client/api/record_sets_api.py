# coding: utf-8

"""
    DnsManagementClient

    The DNS Management Client.

    The version of the OpenAPI document: 2017-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.record_set import RecordSet
from openapi_client.models.record_set_list_result import RecordSetListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class RecordSetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def record_sets_create_or_update(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[RecordSet, Field(description="Parameters supplied to the CreateOrUpdate operation.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecordSet:
        """record_sets_create_or_update

        Creates or updates a record set within a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created). (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to the CreateOrUpdate operation. (required)
        :type parameters: RecordSet
        :param if_match: The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.
        :type if_match: str
        :param if_none_match: Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_create_or_update_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            if_match=if_match,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
            '201': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_create_or_update_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[RecordSet, Field(description="Parameters supplied to the CreateOrUpdate operation.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecordSet]:
        """record_sets_create_or_update

        Creates or updates a record set within a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created). (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to the CreateOrUpdate operation. (required)
        :type parameters: RecordSet
        :param if_match: The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.
        :type if_match: str
        :param if_none_match: Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_create_or_update_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            if_match=if_match,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
            '201': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_create_or_update_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[RecordSet, Field(description="Parameters supplied to the CreateOrUpdate operation.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_create_or_update

        Creates or updates a record set within a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created). (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to the CreateOrUpdate operation. (required)
        :type parameters: RecordSet
        :param if_match: The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.
        :type if_match: str
        :param if_none_match: Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_create_or_update_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            if_match=if_match,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
            '201': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_create_or_update_serialize(
        self,
        resource_group_name,
        zone_name,
        relative_record_set_name,
        record_type,
        api_version,
        subscription_id,
        parameters,
        if_match,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if relative_record_set_name is not None:
            _path_params['relativeRecordSetName'] = relative_record_set_name
        if record_type is not None:
            _path_params['recordType'] = record_type
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def record_sets_delete(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """record_sets_delete

        Deletes a record set from a DNS zone. This operation cannot be undone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted). (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_delete_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_delete_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """record_sets_delete

        Deletes a record set from a DNS zone. This operation cannot be undone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted). (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_delete_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_delete_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_delete

        Deletes a record set from a DNS zone. This operation cannot be undone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted). (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param if_match: The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_delete_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_delete_serialize(
        self,
        resource_group_name,
        zone_name,
        relative_record_set_name,
        record_type,
        api_version,
        subscription_id,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if relative_record_set_name is not None:
            _path_params['relativeRecordSetName'] = relative_record_set_name
        if record_type is not None:
            _path_params['recordType'] = record_type
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def record_sets_get(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecordSet:
        """record_sets_get

        Gets a record set.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_get_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_get_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecordSet]:
        """record_sets_get

        Gets a record set.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_get_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_get_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_get

        Gets a record set.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_get_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_get_serialize(
        self,
        resource_group_name,
        zone_name,
        relative_record_set_name,
        record_type,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if relative_record_set_name is not None:
            _path_params['relativeRecordSetName'] = relative_record_set_name
        if record_type is not None:
            _path_params['recordType'] = record_type
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def record_sets_list_all_by_dns_zone(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecordSetListResult:
        """record_sets_list_all_by_dns_zone

        Lists all record sets in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_all_by_dns_zone_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_list_all_by_dns_zone_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecordSetListResult]:
        """record_sets_list_all_by_dns_zone

        Lists all record sets in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_all_by_dns_zone_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_list_all_by_dns_zone_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_list_all_by_dns_zone

        Lists all record sets in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_all_by_dns_zone_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_list_all_by_dns_zone_serialize(
        self,
        resource_group_name,
        zone_name,
        api_version,
        subscription_id,
        top,
        recordsetnamesuffix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if recordsetnamesuffix is not None:
            
            _query_params.append(('$recordsetnamesuffix', recordsetnamesuffix))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def record_sets_list_by_dns_zone(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecordSetListResult:
        """record_sets_list_by_dns_zone

        Lists all record sets in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_by_dns_zone_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_list_by_dns_zone_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecordSetListResult]:
        """record_sets_list_by_dns_zone

        Lists all record sets in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_by_dns_zone_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_list_by_dns_zone_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_list_by_dns_zone

        Lists all record sets in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_by_dns_zone_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_list_by_dns_zone_serialize(
        self,
        resource_group_name,
        zone_name,
        api_version,
        subscription_id,
        top,
        recordsetnamesuffix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if recordsetnamesuffix is not None:
            
            _query_params.append(('$recordsetnamesuffix', recordsetnamesuffix))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def record_sets_list_by_type(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        record_type: Annotated[StrictStr, Field(description="The type of record sets to enumerate.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecordSetListResult:
        """record_sets_list_by_type

        Lists the record sets of a specified type in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param record_type: The type of record sets to enumerate. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_by_type_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_list_by_type_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        record_type: Annotated[StrictStr, Field(description="The type of record sets to enumerate.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecordSetListResult]:
        """record_sets_list_by_type

        Lists the record sets of a specified type in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param record_type: The type of record sets to enumerate. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_by_type_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_list_by_type_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        record_type: Annotated[StrictStr, Field(description="The type of record sets to enumerate.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of record sets to return. If not specified, returns up to 100 record sets.")] = None,
        recordsetnamesuffix: Annotated[Optional[StrictStr], Field(description="The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_list_by_type

        Lists the record sets of a specified type in a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param record_type: The type of record sets to enumerate. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100 record sets.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
        :type recordsetnamesuffix: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_list_by_type_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            top=top,
            recordsetnamesuffix=recordsetnamesuffix,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSetListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_list_by_type_serialize(
        self,
        resource_group_name,
        zone_name,
        record_type,
        api_version,
        subscription_id,
        top,
        recordsetnamesuffix,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if record_type is not None:
            _path_params['recordType'] = record_type
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if recordsetnamesuffix is not None:
            
            _query_params.append(('$recordsetnamesuffix', recordsetnamesuffix))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def record_sets_update(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[RecordSet, Field(description="Parameters supplied to the Update operation.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecordSet:
        """record_sets_update

        Updates a record set within a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to the Update operation. (required)
        :type parameters: RecordSet
        :param if_match: The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_update_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def record_sets_update_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[RecordSet, Field(description="Parameters supplied to the Update operation.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecordSet]:
        """record_sets_update

        Updates a record set within a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to the Update operation. (required)
        :type parameters: RecordSet
        :param if_match: The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_update_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def record_sets_update_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="The name of the resource group. The name is case insensitive.")],
        zone_name: Annotated[StrictStr, Field(description="The name of the DNS zone (without a terminating dot).")],
        relative_record_set_name: Annotated[StrictStr, Field(description="The name of the record set, relative to the name of the zone.")],
        record_type: Annotated[StrictStr, Field(description="The type of DNS record in this record set.")],
        api_version: Annotated[str, Field(min_length=1, strict=True, description="The API version to use for this operation.")],
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        parameters: Annotated[RecordSet, Field(description="Parameters supplied to the Update operation.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """record_sets_update

        Updates a record set within a DNS zone.

        :param resource_group_name: The name of the resource group. The name is case insensitive. (required)
        :type resource_group_name: str
        :param zone_name: The name of the DNS zone (without a terminating dot). (required)
        :type zone_name: str
        :param relative_record_set_name: The name of the record set, relative to the name of the zone. (required)
        :type relative_record_set_name: str
        :param record_type: The type of DNS record in this record set. (required)
        :type record_type: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param parameters: Parameters supplied to the Update operation. (required)
        :type parameters: RecordSet
        :param if_match: The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.
        :type if_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._record_sets_update_serialize(
            resource_group_name=resource_group_name,
            zone_name=zone_name,
            relative_record_set_name=relative_record_set_name,
            record_type=record_type,
            api_version=api_version,
            subscription_id=subscription_id,
            parameters=parameters,
            if_match=if_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecordSet",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _record_sets_update_serialize(
        self,
        resource_group_name,
        zone_name,
        relative_record_set_name,
        record_type,
        api_version,
        subscription_id,
        parameters,
        if_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if zone_name is not None:
            _path_params['zoneName'] = zone_name
        if relative_record_set_name is not None:
            _path_params['relativeRecordSetName'] = relative_record_set_name
        if record_type is not None:
            _path_params['recordType'] = record_type
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if if_match is not None:
            _header_params['If-Match'] = if_match
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



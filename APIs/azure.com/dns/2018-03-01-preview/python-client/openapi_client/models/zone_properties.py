# coding: utf-8

"""
    DnsManagementClient

    The DNS Management Client.

    The version of the OpenAPI document: 2018-03-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sub_resource import SubResource
from typing import Optional, Set
from typing_extensions import Self

class ZoneProperties(BaseModel):
    """
    Represents the properties of the zone.
    """ # noqa: E501
    max_number_of_record_sets: Optional[StrictInt] = Field(default=None, description="The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.", alias="maxNumberOfRecordSets")
    name_servers: Optional[List[StrictStr]] = Field(default=None, description="The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.", alias="nameServers")
    number_of_record_sets: Optional[StrictInt] = Field(default=None, description="The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.", alias="numberOfRecordSets")
    registration_virtual_networks: Optional[List[SubResource]] = Field(default=None, description="A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.", alias="registrationVirtualNetworks")
    resolution_virtual_networks: Optional[List[SubResource]] = Field(default=None, description="A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.", alias="resolutionVirtualNetworks")
    zone_type: Optional[StrictStr] = Field(default='Public', description="The type of this DNS zone (Public or Private).", alias="zoneType")
    __properties: ClassVar[List[str]] = ["maxNumberOfRecordSets", "nameServers", "numberOfRecordSets", "registrationVirtualNetworks", "resolutionVirtualNetworks", "zoneType"]

    @field_validator('zone_type')
    def zone_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Public', 'Private']):
            raise ValueError("must be one of enum values ('Public', 'Private')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ZoneProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "max_number_of_record_sets",
            "name_servers",
            "number_of_record_sets",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in registration_virtual_networks (list)
        _items = []
        if self.registration_virtual_networks:
            for _item_registration_virtual_networks in self.registration_virtual_networks:
                if _item_registration_virtual_networks:
                    _items.append(_item_registration_virtual_networks.to_dict())
            _dict['registrationVirtualNetworks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resolution_virtual_networks (list)
        _items = []
        if self.resolution_virtual_networks:
            for _item_resolution_virtual_networks in self.resolution_virtual_networks:
                if _item_resolution_virtual_networks:
                    _items.append(_item_resolution_virtual_networks.to_dict())
            _dict['resolutionVirtualNetworks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ZoneProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxNumberOfRecordSets": obj.get("maxNumberOfRecordSets"),
            "nameServers": obj.get("nameServers"),
            "numberOfRecordSets": obj.get("numberOfRecordSets"),
            "registrationVirtualNetworks": [SubResource.from_dict(_item) for _item in obj["registrationVirtualNetworks"]] if obj.get("registrationVirtualNetworks") is not None else None,
            "resolutionVirtualNetworks": [SubResource.from_dict(_item) for _item in obj["resolutionVirtualNetworks"]] if obj.get("resolutionVirtualNetworks") is not None else None,
            "zoneType": obj.get("zoneType") if obj.get("zoneType") is not None else 'Public'
        })
        return _obj



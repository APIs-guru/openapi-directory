# coding: utf-8

"""
    DnsManagementClient

    The DNS Management Client.

    The version of the OpenAPI document: 2017-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.a_record import ARecord
from openapi_client.models.aaaa_record import AaaaRecord
from openapi_client.models.caa_record import CaaRecord
from openapi_client.models.cname_record import CnameRecord
from openapi_client.models.mx_record import MxRecord
from openapi_client.models.ns_record import NsRecord
from openapi_client.models.ptr_record import PtrRecord
from openapi_client.models.soa_record import SoaRecord
from openapi_client.models.srv_record import SrvRecord
from openapi_client.models.txt_record import TxtRecord
from typing import Optional, Set
from typing_extensions import Self

class RecordSetProperties(BaseModel):
    """
    Represents the properties of the records in the record set.
    """ # noqa: E501
    aaaa_records: Optional[List[AaaaRecord]] = Field(default=None, description="The list of AAAA records in the record set.", alias="AAAARecords")
    a_records: Optional[List[ARecord]] = Field(default=None, description="The list of A records in the record set.", alias="ARecords")
    cname_record: Optional[CnameRecord] = Field(default=None, alias="CNAMERecord")
    mx_records: Optional[List[MxRecord]] = Field(default=None, description="The list of MX records in the record set.", alias="MXRecords")
    ns_records: Optional[List[NsRecord]] = Field(default=None, description="The list of NS records in the record set.", alias="NSRecords")
    ptr_records: Optional[List[PtrRecord]] = Field(default=None, description="The list of PTR records in the record set.", alias="PTRRecords")
    soa_record: Optional[SoaRecord] = Field(default=None, alias="SOARecord")
    srv_records: Optional[List[SrvRecord]] = Field(default=None, description="The list of SRV records in the record set.", alias="SRVRecords")
    ttl: Optional[StrictInt] = Field(default=None, description="The TTL (time-to-live) of the records in the record set.", alias="TTL")
    txt_records: Optional[List[TxtRecord]] = Field(default=None, description="The list of TXT records in the record set.", alias="TXTRecords")
    caa_records: Optional[List[CaaRecord]] = Field(default=None, description="The list of CAA records in the record set.", alias="caaRecords")
    fqdn: Optional[StrictStr] = Field(default=None, description="Fully qualified domain name of the record set.")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="The metadata attached to the record set.")
    __properties: ClassVar[List[str]] = ["AAAARecords", "ARecords", "CNAMERecord", "MXRecords", "NSRecords", "PTRRecords", "SOARecord", "SRVRecords", "TTL", "TXTRecords", "caaRecords", "fqdn", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecordSetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "fqdn",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aaaa_records (list)
        _items = []
        if self.aaaa_records:
            for _item_aaaa_records in self.aaaa_records:
                if _item_aaaa_records:
                    _items.append(_item_aaaa_records.to_dict())
            _dict['AAAARecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_records (list)
        _items = []
        if self.a_records:
            for _item_a_records in self.a_records:
                if _item_a_records:
                    _items.append(_item_a_records.to_dict())
            _dict['ARecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of cname_record
        if self.cname_record:
            _dict['CNAMERecord'] = self.cname_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mx_records (list)
        _items = []
        if self.mx_records:
            for _item_mx_records in self.mx_records:
                if _item_mx_records:
                    _items.append(_item_mx_records.to_dict())
            _dict['MXRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ns_records (list)
        _items = []
        if self.ns_records:
            for _item_ns_records in self.ns_records:
                if _item_ns_records:
                    _items.append(_item_ns_records.to_dict())
            _dict['NSRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ptr_records (list)
        _items = []
        if self.ptr_records:
            for _item_ptr_records in self.ptr_records:
                if _item_ptr_records:
                    _items.append(_item_ptr_records.to_dict())
            _dict['PTRRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of soa_record
        if self.soa_record:
            _dict['SOARecord'] = self.soa_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in srv_records (list)
        _items = []
        if self.srv_records:
            for _item_srv_records in self.srv_records:
                if _item_srv_records:
                    _items.append(_item_srv_records.to_dict())
            _dict['SRVRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in txt_records (list)
        _items = []
        if self.txt_records:
            for _item_txt_records in self.txt_records:
                if _item_txt_records:
                    _items.append(_item_txt_records.to_dict())
            _dict['TXTRecords'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in caa_records (list)
        _items = []
        if self.caa_records:
            for _item_caa_records in self.caa_records:
                if _item_caa_records:
                    _items.append(_item_caa_records.to_dict())
            _dict['caaRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecordSetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AAAARecords": [AaaaRecord.from_dict(_item) for _item in obj["AAAARecords"]] if obj.get("AAAARecords") is not None else None,
            "ARecords": [ARecord.from_dict(_item) for _item in obj["ARecords"]] if obj.get("ARecords") is not None else None,
            "CNAMERecord": CnameRecord.from_dict(obj["CNAMERecord"]) if obj.get("CNAMERecord") is not None else None,
            "MXRecords": [MxRecord.from_dict(_item) for _item in obj["MXRecords"]] if obj.get("MXRecords") is not None else None,
            "NSRecords": [NsRecord.from_dict(_item) for _item in obj["NSRecords"]] if obj.get("NSRecords") is not None else None,
            "PTRRecords": [PtrRecord.from_dict(_item) for _item in obj["PTRRecords"]] if obj.get("PTRRecords") is not None else None,
            "SOARecord": SoaRecord.from_dict(obj["SOARecord"]) if obj.get("SOARecord") is not None else None,
            "SRVRecords": [SrvRecord.from_dict(_item) for _item in obj["SRVRecords"]] if obj.get("SRVRecords") is not None else None,
            "TTL": obj.get("TTL"),
            "TXTRecords": [TxtRecord.from_dict(_item) for _item in obj["TXTRecords"]] if obj.get("TXTRecords") is not None else None,
            "caaRecords": [CaaRecord.from_dict(_item) for _item in obj["caaRecords"]] if obj.get("caaRecords") is not None else None,
            "fqdn": obj.get("fqdn"),
            "metadata": obj.get("metadata")
        })
        return _obj



# coding: utf-8

"""
    BlueprintClient

    Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.

    The version of the OpenAPI document: 2018-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.blueprint_status import BlueprintStatus
from openapi_client.models.parameter_definition import ParameterDefinition
from openapi_client.models.resource_group_definition import ResourceGroupDefinition
from typing import Optional, Set
from typing_extensions import Self

class PublishedBlueprintProperties(BaseModel):
    """
    Schema for published blueprint definition properties.
    """ # noqa: E501
    blueprint_name: Optional[StrictStr] = Field(default=None, description="Name of the published blueprint definition.", alias="blueprintName")
    change_notes: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Version-specific change notes.", alias="changeNotes")
    parameters: Optional[Dict[str, ParameterDefinition]] = Field(default=None, description="A dictionary hold parameter name and its metadata.")
    resource_groups: Optional[Dict[str, ResourceGroupDefinition]] = Field(default=None, description="A dictionary which maps resource group placeholders to the resource groups which will be created.", alias="resourceGroups")
    status: Optional[BlueprintStatus] = None
    target_scope: Optional[StrictStr] = Field(default=None, description="The scope where this blueprint definition can be assigned.", alias="targetScope")
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Multi-line explain this resource.")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="One-liner string explain this resource.", alias="displayName")
    __properties: ClassVar[List[str]] = ["parameters", "resourceGroups", "status", "targetScope", "description", "displayName"]

    @field_validator('target_scope')
    def target_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['subscription', 'managementGroup']):
            raise ValueError("must be one of enum values ('subscription', 'managementGroup')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublishedBlueprintProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in resource_groups (dict)
        _field_dict = {}
        if self.resource_groups:
            for _key_resource_groups in self.resource_groups:
                if self.resource_groups[_key_resource_groups]:
                    _field_dict[_key_resource_groups] = self.resource_groups[_key_resource_groups].to_dict()
            _dict['resourceGroups'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublishedBlueprintProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parameters": dict(
                (_k, ParameterDefinition.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "resourceGroups": dict(
                (_k, ResourceGroupDefinition.from_dict(_v))
                for _k, _v in obj["resourceGroups"].items()
            )
            if obj.get("resourceGroups") is not None
            else None,
            "status": BlueprintStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "targetScope": obj.get("targetScope"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName")
        })
        return _obj



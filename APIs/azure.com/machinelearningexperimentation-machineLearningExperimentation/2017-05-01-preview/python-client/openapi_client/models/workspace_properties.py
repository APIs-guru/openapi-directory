# coding: utf-8

"""
    ML Team Account Management Client

    These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.

    The version of the OpenAPI document: 2017-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceProperties(BaseModel):
    """
    The properties of a machine learning team account workspace.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The immutable id of the team account which contains this workspace.", alias="accountId")
    creation_date: Optional[datetime] = Field(default=None, description="The creation date of the machine learning workspace in ISO8601 format.", alias="creationDate")
    description: Optional[StrictStr] = Field(default=None, description="The description of this workspace.")
    friendly_name: StrictStr = Field(description="The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created", alias="friendlyName")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment state of team account workspace resource. The provisioningState is to indicate states for resource provisioning.", alias="provisioningState")
    workspace_id: Optional[StrictStr] = Field(default=None, description="The immutable id of this workspace.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["accountId", "creationDate", "description", "friendlyName", "provisioningState", "workspaceId"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Succeeded', 'Updating', 'Deleting', 'Failed']):
            raise ValueError("must be one of enum values ('Creating', 'Succeeded', 'Updating', 'Deleting', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "creation_date",
            "provisioning_state",
            "workspace_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "creationDate": obj.get("creationDate"),
            "description": obj.get("description"),
            "friendlyName": obj.get("friendlyName"),
            "provisioningState": obj.get("provisioningState"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj



# coding: utf-8

"""
    ML Team Account Management Client

    These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.

    The version of the OpenAPI document: 2017-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing_extensions import Annotated
from openapi_client.models.workspace import Workspace
from openapi_client.models.workspace_list_result import WorkspaceListResult
from openapi_client.models.workspace_update_parameters import WorkspaceUpdateParameters

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WorkspacesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def workspaces_create_or_update(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        parameters: Annotated[Workspace, Field(description="The parameters for creating or updating a machine learning workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Workspace:
        """workspaces_create_or_update

        Creates or updates a machine learning workspace with the specified parameters.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param parameters: The parameters for creating or updating a machine learning workspace. (required)
        :type parameters: Workspace
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_create_or_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
            '201': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workspaces_create_or_update_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        parameters: Annotated[Workspace, Field(description="The parameters for creating or updating a machine learning workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Workspace]:
        """workspaces_create_or_update

        Creates or updates a machine learning workspace with the specified parameters.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param parameters: The parameters for creating or updating a machine learning workspace. (required)
        :type parameters: Workspace
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_create_or_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
            '201': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workspaces_create_or_update_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        parameters: Annotated[Workspace, Field(description="The parameters for creating or updating a machine learning workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workspaces_create_or_update

        Creates or updates a machine learning workspace with the specified parameters.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param parameters: The parameters for creating or updating a machine learning workspace. (required)
        :type parameters: Workspace
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_create_or_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
            '201': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_create_or_update_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        account_name,
        workspace_name,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workspaces_delete(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """workspaces_delete

        Deletes a machine learning workspace.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_delete_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workspaces_delete_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """workspaces_delete

        Deletes a machine learning workspace.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_delete_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workspaces_delete_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workspaces_delete

        Deletes a machine learning workspace.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_delete_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_delete_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        account_name,
        workspace_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workspaces_get(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Workspace:
        """workspaces_get

        Gets the properties of the specified machine learning workspace.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workspaces_get_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Workspace]:
        """workspaces_get

        Gets the properties of the specified machine learning workspace.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workspaces_get_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workspaces_get

        Gets the properties of the specified machine learning workspace.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_get_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_get_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        account_name,
        workspace_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workspaces_list_by_accounts(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkspaceListResult:
        """workspaces_list_by_accounts

        Lists all the available machine learning workspaces under the specified team account.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_list_by_accounts_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            account_name=account_name,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkspaceListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workspaces_list_by_accounts_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkspaceListResult]:
        """workspaces_list_by_accounts

        Lists all the available machine learning workspaces under the specified team account.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_list_by_accounts_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            account_name=account_name,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkspaceListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workspaces_list_by_accounts_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workspaces_list_by_accounts

        Lists all the available machine learning workspaces under the specified team account.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_list_by_accounts_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            account_name=account_name,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkspaceListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_list_by_accounts_serialize(
        self,
        api_version,
        subscription_id,
        account_name,
        resource_group_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if account_name is not None:
            _path_params['accountName'] = account_name
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workspaces_update(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        parameters: Annotated[WorkspaceUpdateParameters, Field(description="The parameters for updating a machine learning workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Workspace:
        """workspaces_update

        Updates a machine learning workspace with the specified parameters.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param parameters: The parameters for updating a machine learning workspace. (required)
        :type parameters: WorkspaceUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workspaces_update_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        parameters: Annotated[WorkspaceUpdateParameters, Field(description="The parameters for updating a machine learning workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Workspace]:
        """workspaces_update

        Updates a machine learning workspace with the specified parameters.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param parameters: The parameters for updating a machine learning workspace. (required)
        :type parameters: WorkspaceUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workspaces_update_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The client API version.")],
        subscription_id: Annotated[StrictStr, Field(description="The Microsoft Azure subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group to which the machine learning team account belongs.")],
        account_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account.")],
        workspace_name: Annotated[str, Field(min_length=5, strict=True, max_length=50, description="The name of the machine learning team account workspace.")],
        parameters: Annotated[WorkspaceUpdateParameters, Field(description="The parameters for updating a machine learning workspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """workspaces_update

        Updates a machine learning workspace with the specified parameters.

        :param api_version: The client API version. (required)
        :type api_version: str
        :param subscription_id: The Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group to which the machine learning team account belongs. (required)
        :type resource_group_name: str
        :param account_name: The name of the machine learning team account. (required)
        :type account_name: str
        :param workspace_name: The name of the machine learning team account workspace. (required)
        :type workspace_name: str
        :param parameters: The parameters for updating a machine learning workspace. (required)
        :type parameters: WorkspaceUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_update_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            workspace_name=workspace_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Workspace",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_update_serialize(
        self,
        api_version,
        subscription_id,
        resource_group_name,
        account_name,
        workspace_name,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if workspace_name is not None:
            _path_params['workspaceName'] = workspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



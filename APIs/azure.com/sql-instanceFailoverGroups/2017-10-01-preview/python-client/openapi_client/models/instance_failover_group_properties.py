# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2017-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_failover_group_read_only_endpoint import InstanceFailoverGroupReadOnlyEndpoint
from openapi_client.models.instance_failover_group_read_write_endpoint import InstanceFailoverGroupReadWriteEndpoint
from openapi_client.models.managed_instance_pair_info import ManagedInstancePairInfo
from openapi_client.models.partner_region_info import PartnerRegionInfo
from typing import Optional, Set
from typing_extensions import Self

class InstanceFailoverGroupProperties(BaseModel):
    """
    Properties of a instance failover group.
    """ # noqa: E501
    managed_instance_pairs: List[ManagedInstancePairInfo] = Field(description="List of managed instance pairs in the failover group.", alias="managedInstancePairs")
    partner_regions: List[PartnerRegionInfo] = Field(description="Partner region information for the failover group.", alias="partnerRegions")
    read_only_endpoint: Optional[InstanceFailoverGroupReadOnlyEndpoint] = Field(default=None, alias="readOnlyEndpoint")
    read_write_endpoint: InstanceFailoverGroupReadWriteEndpoint = Field(alias="readWriteEndpoint")
    replication_role: Optional[StrictStr] = Field(default=None, description="Local replication role of the failover group instance.", alias="replicationRole")
    replication_state: Optional[StrictStr] = Field(default=None, description="Replication state of the failover group instance.", alias="replicationState")
    __properties: ClassVar[List[str]] = ["managedInstancePairs", "partnerRegions", "readOnlyEndpoint", "readWriteEndpoint", "replicationRole", "replicationState"]

    @field_validator('replication_role')
    def replication_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Primary', 'Secondary']):
            raise ValueError("must be one of enum values ('Primary', 'Secondary')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceFailoverGroupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "replication_role",
            "replication_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in managed_instance_pairs (list)
        _items = []
        if self.managed_instance_pairs:
            for _item_managed_instance_pairs in self.managed_instance_pairs:
                if _item_managed_instance_pairs:
                    _items.append(_item_managed_instance_pairs.to_dict())
            _dict['managedInstancePairs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in partner_regions (list)
        _items = []
        if self.partner_regions:
            for _item_partner_regions in self.partner_regions:
                if _item_partner_regions:
                    _items.append(_item_partner_regions.to_dict())
            _dict['partnerRegions'] = _items
        # override the default output from pydantic by calling `to_dict()` of read_only_endpoint
        if self.read_only_endpoint:
            _dict['readOnlyEndpoint'] = self.read_only_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_write_endpoint
        if self.read_write_endpoint:
            _dict['readWriteEndpoint'] = self.read_write_endpoint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceFailoverGroupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "managedInstancePairs": [ManagedInstancePairInfo.from_dict(_item) for _item in obj["managedInstancePairs"]] if obj.get("managedInstancePairs") is not None else None,
            "partnerRegions": [PartnerRegionInfo.from_dict(_item) for _item in obj["partnerRegions"]] if obj.get("partnerRegions") is not None else None,
            "readOnlyEndpoint": InstanceFailoverGroupReadOnlyEndpoint.from_dict(obj["readOnlyEndpoint"]) if obj.get("readOnlyEndpoint") is not None else None,
            "readWriteEndpoint": InstanceFailoverGroupReadWriteEndpoint.from_dict(obj["readWriteEndpoint"]) if obj.get("readWriteEndpoint") is not None else None,
            "replicationRole": obj.get("replicationRole"),
            "replicationState": obj.get("replicationState")
        })
        return _obj



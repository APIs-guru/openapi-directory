# coding: utf-8

"""
    AzureBridgeAdminClient

    AzureBridge Admin Client.

    The version of the OpenAPI document: 2016-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.downloaded_product_all_of_compatibility import DownloadedProductAllOfCompatibility
from openapi_client.models.downloaded_product_all_of_icon_uris import DownloadedProductAllOfIconUris
from openapi_client.models.downloaded_product_all_of_product_properties import DownloadedProductAllOfProductProperties
from typing import Optional, Set
from typing_extensions import Self

class ProductBase(BaseModel):
    """
    Base object for all product classes.
    """ # noqa: E501
    billing_part_number: Optional[StrictStr] = Field(default=None, description="Billing part number.", alias="billingPartNumber")
    compatibility: Optional[DownloadedProductAllOfCompatibility] = None
    description: Optional[StrictStr] = Field(default=None, description="Description of the product.")
    display_name: Optional[StrictStr] = Field(default=None, description="Name displayed for the product.", alias="displayName")
    gallery_item_identity: Optional[StrictStr] = Field(default=None, description="Gallery item identity.", alias="galleryItemIdentity")
    icon_uris: Optional[DownloadedProductAllOfIconUris] = Field(default=None, alias="iconUris")
    offer: Optional[StrictStr] = Field(default=None, description="Offer name.")
    offer_version: Optional[StrictStr] = Field(default=None, description="Offer version.", alias="offerVersion")
    payload_length: Optional[StrictInt] = Field(default=None, description="Size in bytes.", alias="payloadLength")
    product_kind: Optional[StrictStr] = Field(default=None, description="The kind. E.g. VirtualMachineProductProperties.ProductKind or WebApp, SolutionTemplate.", alias="productKind")
    product_properties: Optional[DownloadedProductAllOfProductProperties] = Field(default=None, alias="productProperties")
    publisher_display_name: Optional[StrictStr] = Field(default=None, description="Name of publisher.", alias="publisherDisplayName")
    publisher_identifier: Optional[StrictStr] = Field(default=None, description="Publisher identifier.", alias="publisherIdentifier")
    sku: Optional[StrictStr] = Field(default=None, description="Product SKU.")
    __properties: ClassVar[List[str]] = ["billingPartNumber", "compatibility", "description", "displayName", "galleryItemIdentity", "iconUris", "offer", "offerVersion", "payloadLength", "productKind", "productProperties", "publisherDisplayName", "publisherIdentifier", "sku"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compatibility
        if self.compatibility:
            _dict['compatibility'] = self.compatibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icon_uris
        if self.icon_uris:
            _dict['iconUris'] = self.icon_uris.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_properties
        if self.product_properties:
            _dict['productProperties'] = self.product_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingPartNumber": obj.get("billingPartNumber"),
            "compatibility": DownloadedProductAllOfCompatibility.from_dict(obj["compatibility"]) if obj.get("compatibility") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "galleryItemIdentity": obj.get("galleryItemIdentity"),
            "iconUris": DownloadedProductAllOfIconUris.from_dict(obj["iconUris"]) if obj.get("iconUris") is not None else None,
            "offer": obj.get("offer"),
            "offerVersion": obj.get("offerVersion"),
            "payloadLength": obj.get("payloadLength"),
            "productKind": obj.get("productKind"),
            "productProperties": DownloadedProductAllOfProductProperties.from_dict(obj["productProperties"]) if obj.get("productProperties") is not None else None,
            "publisherDisplayName": obj.get("publisherDisplayName"),
            "publisherIdentifier": obj.get("publisherIdentifier"),
            "sku": obj.get("sku")
        })
        return _obj



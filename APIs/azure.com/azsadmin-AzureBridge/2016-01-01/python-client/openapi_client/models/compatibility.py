# coding: utf-8

"""
    AzureBridgeAdminClient

    AzureBridge Admin Client.

    The version of the OpenAPI document: 2016-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Compatibility(BaseModel):
    """
    Product compatibility
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Full error message if any compatibility issues are found")
    is_compatible: Optional[StrictBool] = Field(default=None, description="Tells if product is compatible with current device", alias="isCompatible")
    issues: Optional[List[StrictStr]] = Field(default=None, description="List of all issues found")
    message: Optional[StrictStr] = Field(default=None, description="Short error message if any compatibility issues are found")
    __properties: ClassVar[List[str]] = ["description", "isCompatible", "issues", "message"]

    @field_validator('issues')
    def issues_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['HigherDeviceVersionRequired', 'LowerDeviceVersionRequired', 'CapacityBillingModelRequired', 'PayAsYouGoBillingModelRequired', 'DevelopmentBillingModelRequired', 'AzureADIdentitySystemRequired', 'ADFSIdentitySystemRequired', 'ConnectionToInternetRequired', 'ConnectionToAzureRequired', 'DisconnectedEnvironmentRequired']):
                raise ValueError("each list item must be one of ('HigherDeviceVersionRequired', 'LowerDeviceVersionRequired', 'CapacityBillingModelRequired', 'PayAsYouGoBillingModelRequired', 'DevelopmentBillingModelRequired', 'AzureADIdentitySystemRequired', 'ADFSIdentitySystemRequired', 'ConnectionToInternetRequired', 'ConnectionToAzureRequired', 'DisconnectedEnvironmentRequired')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Compatibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Compatibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "isCompatible": obj.get("isCompatible"),
            "issues": obj.get("issues"),
            "message": obj.get("message")
        })
        return _obj



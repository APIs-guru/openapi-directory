# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_network_gateway_connection_properties_format import VirtualNetworkGatewayConnectionPropertiesFormat

class TestVirtualNetworkGatewayConnectionPropertiesFormat(unittest.TestCase):
    """VirtualNetworkGatewayConnectionPropertiesFormat unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualNetworkGatewayConnectionPropertiesFormat:
        """Test VirtualNetworkGatewayConnectionPropertiesFormat
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualNetworkGatewayConnectionPropertiesFormat`
        """
        model = VirtualNetworkGatewayConnectionPropertiesFormat()
        if include_optional:
            return VirtualNetworkGatewayConnectionPropertiesFormat(
                authorization_key = '',
                connection_status = 'Unknown',
                connection_type = 'IPsec',
                egress_bytes_transferred = 56,
                enable_bgp = True,
                ingress_bytes_transferred = 56,
                local_network_gateway2 = openapi_client.models.local_network_gateway.LocalNetworkGateway(
                    etag = '', 
                    properties = openapi_client.models.local_network_gateway_properties_format.LocalNetworkGatewayPropertiesFormat(
                        bgp_settings = openapi_client.models.bgp_settings.BgpSettings(
                            asn = 56, 
                            bgp_peering_address = '', 
                            peer_weight = 56, ), 
                        gateway_ip_address = '', 
                        local_network_address_space = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(
                            address_prefixes = [
                                ''
                                ], ), 
                        provisioning_state = '', 
                        resource_guid = '', ), ),
                peer = openapi_client.models.virtual_network_gateway_connection_properties_format_peer.VirtualNetworkGatewayConnectionPropertiesFormat_peer(
                    id = '', ),
                provisioning_state = '',
                resource_guid = '',
                routing_weight = 56,
                shared_key = '',
                tunnel_connection_status = [
                    openapi_client.models.tunnel_connection_health.TunnelConnectionHealth(
                        connection_status = 'Unknown', 
                        egress_bytes_transferred = 56, 
                        ingress_bytes_transferred = 56, 
                        last_connection_established_utc_time = '', 
                        tunnel = '', )
                    ],
                virtual_network_gateway1 = openapi_client.models.virtual_network_gateway.VirtualNetworkGateway(
                    etag = '', 
                    properties = openapi_client.models.virtual_network_gateway_properties_format.VirtualNetworkGatewayPropertiesFormat(
                        active_active = True, 
                        bgp_settings = openapi_client.models.bgp_settings.BgpSettings(
                            asn = 56, 
                            bgp_peering_address = '', 
                            peer_weight = 56, ), 
                        enable_bgp = True, 
                        gateway_default_site = openapi_client.models.virtual_network_gateway_connection_properties_format_peer.VirtualNetworkGatewayConnectionPropertiesFormat_peer(
                            id = '', ), 
                        gateway_type = 'Vpn', 
                        ip_configurations = [
                            openapi_client.models.virtual_network_gateway_ip_configuration.VirtualNetworkGatewayIPConfiguration(
                                etag = '', 
                                name = '', )
                            ], 
                        provisioning_state = '', 
                        resource_guid = '', 
                        sku = openapi_client.models.virtual_network_gateway_sku.VirtualNetworkGatewaySku(
                            capacity = 56, 
                            name = 'Basic', 
                            tier = 'Basic', ), 
                        vpn_client_configuration = openapi_client.models.vpn_client_configuration.VpnClientConfiguration(
                            vpn_client_address_pool = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(
                                address_prefixes = [
                                    ''
                                    ], ), 
                            vpn_client_revoked_certificates = [
                                openapi_client.models.vpn_client_revoked_certificate.VpnClientRevokedCertificate(
                                    etag = '', 
                                    name = '', )
                                ], 
                            vpn_client_root_certificates = [
                                openapi_client.models.vpn_client_root_certificate.VpnClientRootCertificate(
                                    etag = '', 
                                    name = '', 
                                    properties = openapi_client.models.vpn_client_root_certificate_properties_format.VpnClientRootCertificatePropertiesFormat(
                                        provisioning_state = '', 
                                        public_cert_data = '', ), )
                                ], ), 
                        vpn_type = 'PolicyBased', ), ),
                virtual_network_gateway2 = openapi_client.models.virtual_network_gateway.VirtualNetworkGateway(
                    etag = '', 
                    properties = openapi_client.models.virtual_network_gateway_properties_format.VirtualNetworkGatewayPropertiesFormat(
                        active_active = True, 
                        bgp_settings = openapi_client.models.bgp_settings.BgpSettings(
                            asn = 56, 
                            bgp_peering_address = '', 
                            peer_weight = 56, ), 
                        enable_bgp = True, 
                        gateway_default_site = openapi_client.models.virtual_network_gateway_connection_properties_format_peer.VirtualNetworkGatewayConnectionPropertiesFormat_peer(
                            id = '', ), 
                        gateway_type = 'Vpn', 
                        ip_configurations = [
                            openapi_client.models.virtual_network_gateway_ip_configuration.VirtualNetworkGatewayIPConfiguration(
                                etag = '', 
                                name = '', )
                            ], 
                        provisioning_state = '', 
                        resource_guid = '', 
                        sku = openapi_client.models.virtual_network_gateway_sku.VirtualNetworkGatewaySku(
                            capacity = 56, 
                            name = 'Basic', 
                            tier = 'Basic', ), 
                        vpn_client_configuration = openapi_client.models.vpn_client_configuration.VpnClientConfiguration(
                            vpn_client_address_pool = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(
                                address_prefixes = [
                                    ''
                                    ], ), 
                            vpn_client_revoked_certificates = [
                                openapi_client.models.vpn_client_revoked_certificate.VpnClientRevokedCertificate(
                                    etag = '', 
                                    name = '', )
                                ], 
                            vpn_client_root_certificates = [
                                openapi_client.models.vpn_client_root_certificate.VpnClientRootCertificate(
                                    etag = '', 
                                    name = '', 
                                    properties = openapi_client.models.vpn_client_root_certificate_properties_format.VpnClientRootCertificatePropertiesFormat(
                                        provisioning_state = '', 
                                        public_cert_data = '', ), )
                                ], ), 
                        vpn_type = 'PolicyBased', ), )
            )
        else:
            return VirtualNetworkGatewayConnectionPropertiesFormat(
                connection_type = 'IPsec',
                virtual_network_gateway1 = openapi_client.models.virtual_network_gateway.VirtualNetworkGateway(
                    etag = '', 
                    properties = openapi_client.models.virtual_network_gateway_properties_format.VirtualNetworkGatewayPropertiesFormat(
                        active_active = True, 
                        bgp_settings = openapi_client.models.bgp_settings.BgpSettings(
                            asn = 56, 
                            bgp_peering_address = '', 
                            peer_weight = 56, ), 
                        enable_bgp = True, 
                        gateway_default_site = openapi_client.models.virtual_network_gateway_connection_properties_format_peer.VirtualNetworkGatewayConnectionPropertiesFormat_peer(
                            id = '', ), 
                        gateway_type = 'Vpn', 
                        ip_configurations = [
                            openapi_client.models.virtual_network_gateway_ip_configuration.VirtualNetworkGatewayIPConfiguration(
                                etag = '', 
                                name = '', )
                            ], 
                        provisioning_state = '', 
                        resource_guid = '', 
                        sku = openapi_client.models.virtual_network_gateway_sku.VirtualNetworkGatewaySku(
                            capacity = 56, 
                            name = 'Basic', 
                            tier = 'Basic', ), 
                        vpn_client_configuration = openapi_client.models.vpn_client_configuration.VpnClientConfiguration(
                            vpn_client_address_pool = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(
                                address_prefixes = [
                                    ''
                                    ], ), 
                            vpn_client_revoked_certificates = [
                                openapi_client.models.vpn_client_revoked_certificate.VpnClientRevokedCertificate(
                                    etag = '', 
                                    name = '', )
                                ], 
                            vpn_client_root_certificates = [
                                openapi_client.models.vpn_client_root_certificate.VpnClientRootCertificate(
                                    etag = '', 
                                    name = '', 
                                    properties = openapi_client.models.vpn_client_root_certificate_properties_format.VpnClientRootCertificatePropertiesFormat(
                                        provisioning_state = '', 
                                        public_cert_data = '', ), )
                                ], ), 
                        vpn_type = 'PolicyBased', ), ),
        )
        """

    def testVirtualNetworkGatewayConnectionPropertiesFormat(self):
        """Test VirtualNetworkGatewayConnectionPropertiesFormat"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

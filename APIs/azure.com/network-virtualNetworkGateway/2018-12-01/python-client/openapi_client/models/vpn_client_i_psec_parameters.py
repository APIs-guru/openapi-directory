# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class VpnClientIPsecParameters(BaseModel):
    """
    An IPSec parameters for a virtual network gateway P2S connection.
    """ # noqa: E501
    dh_group: StrictStr = Field(description="The DH Groups used in IKE Phase 1 for initial SA.", alias="dhGroup")
    ike_encryption: StrictStr = Field(description="The IKE encryption algorithm (IKE phase 2).", alias="ikeEncryption")
    ike_integrity: StrictStr = Field(description="The IKE integrity algorithm (IKE phase 2).", alias="ikeIntegrity")
    ipsec_encryption: StrictStr = Field(description="The IPSec encryption algorithm (IKE phase 1).", alias="ipsecEncryption")
    ipsec_integrity: StrictStr = Field(description="The IPSec integrity algorithm (IKE phase 1).", alias="ipsecIntegrity")
    pfs_group: StrictStr = Field(description="The Pfs Groups used in IKE Phase 2 for new child SA.", alias="pfsGroup")
    sa_data_size_kilobytes: StrictInt = Field(description="The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for P2S client..", alias="saDataSizeKilobytes")
    sa_life_time_seconds: StrictInt = Field(description="The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client.", alias="saLifeTimeSeconds")
    __properties: ClassVar[List[str]] = ["dhGroup", "ikeEncryption", "ikeIntegrity", "ipsecEncryption", "ipsecIntegrity", "pfsGroup", "saDataSizeKilobytes", "saLifeTimeSeconds"]

    @field_validator('dh_group')
    def dh_group_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'DHGroup1', 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24']):
            raise ValueError("must be one of enum values ('None', 'DHGroup1', 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24')")
        return value

    @field_validator('ike_encryption')
    def ike_encryption_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES256', 'GCMAES128']):
            raise ValueError("must be one of enum values ('DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES256', 'GCMAES128')")
        return value

    @field_validator('ike_integrity')
    def ike_integrity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MD5', 'SHA1', 'SHA256', 'SHA384', 'GCMAES256', 'GCMAES128']):
            raise ValueError("must be one of enum values ('MD5', 'SHA1', 'SHA256', 'SHA384', 'GCMAES256', 'GCMAES128')")
        return value

    @field_validator('ipsec_encryption')
    def ipsec_encryption_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256']):
            raise ValueError("must be one of enum values ('None', 'DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256')")
        return value

    @field_validator('ipsec_integrity')
    def ipsec_integrity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192', 'GCMAES256']):
            raise ValueError("must be one of enum values ('MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192', 'GCMAES256')")
        return value

    @field_validator('pfs_group')
    def pfs_group_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24', 'PFS14', 'PFSMM']):
            raise ValueError("must be one of enum values ('None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24', 'PFS14', 'PFSMM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VpnClientIPsecParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VpnClientIPsecParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dhGroup": obj.get("dhGroup"),
            "ikeEncryption": obj.get("ikeEncryption"),
            "ikeIntegrity": obj.get("ikeIntegrity"),
            "ipsecEncryption": obj.get("ipsecEncryption"),
            "ipsecIntegrity": obj.get("ipsecIntegrity"),
            "pfsGroup": obj.get("pfsGroup"),
            "saDataSizeKilobytes": obj.get("saDataSizeKilobytes"),
            "saLifeTimeSeconds": obj.get("saLifeTimeSeconds")
        })
        return _obj



# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ipsec_policy import IpsecPolicy
from openapi_client.models.local_network_gateway import LocalNetworkGateway
from openapi_client.models.tunnel_connection_health import TunnelConnectionHealth
from openapi_client.models.virtual_network_gateway import VirtualNetworkGateway
from openapi_client.models.virtual_network_gateway_connection_list_entity_properties_format_peer import VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer
from typing import Optional, Set
from typing_extensions import Self

class VirtualNetworkGatewayConnectionPropertiesFormat(BaseModel):
    """
    VirtualNetworkGatewayConnection properties
    """ # noqa: E501
    authorization_key: Optional[StrictStr] = Field(default=None, description="The authorizationKey.", alias="authorizationKey")
    connection_status: Optional[StrictStr] = Field(default=None, description="Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'.", alias="connectionStatus")
    connection_type: StrictStr = Field(description="Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient.", alias="connectionType")
    egress_bytes_transferred: Optional[StrictInt] = Field(default=None, description="The egress bytes transferred in this connection.", alias="egressBytesTransferred")
    enable_bgp: Optional[StrictBool] = Field(default=None, description="EnableBgp flag", alias="enableBgp")
    ingress_bytes_transferred: Optional[StrictInt] = Field(default=None, description="The ingress bytes transferred in this connection.", alias="ingressBytesTransferred")
    ipsec_policies: Optional[List[IpsecPolicy]] = Field(default=None, description="The IPSec Policies to be considered by this connection.", alias="ipsecPolicies")
    local_network_gateway2: Optional[LocalNetworkGateway] = Field(default=None, alias="localNetworkGateway2")
    peer: Optional[VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer] = None
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the VirtualNetworkGatewayConnection resource.", alias="resourceGuid")
    routing_weight: Optional[StrictInt] = Field(default=None, description="The routing weight.", alias="routingWeight")
    shared_key: Optional[StrictStr] = Field(default=None, description="The IPSec shared key.", alias="sharedKey")
    tunnel_connection_status: Optional[List[TunnelConnectionHealth]] = Field(default=None, description="Collection of all tunnels' connection health status.", alias="tunnelConnectionStatus")
    use_policy_based_traffic_selectors: Optional[StrictBool] = Field(default=None, description="Enable policy-based traffic selectors.", alias="usePolicyBasedTrafficSelectors")
    virtual_network_gateway1: VirtualNetworkGateway = Field(alias="virtualNetworkGateway1")
    virtual_network_gateway2: Optional[VirtualNetworkGateway] = Field(default=None, alias="virtualNetworkGateway2")
    __properties: ClassVar[List[str]] = ["authorizationKey", "connectionStatus", "connectionType", "egressBytesTransferred", "enableBgp", "ingressBytesTransferred", "ipsecPolicies", "localNetworkGateway2", "peer", "provisioningState", "resourceGuid", "routingWeight", "sharedKey", "tunnelConnectionStatus", "usePolicyBasedTrafficSelectors", "virtualNetworkGateway1", "virtualNetworkGateway2"]

    @field_validator('connection_status')
    def connection_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Connecting', 'Connected', 'NotConnected']):
            raise ValueError("must be one of enum values ('Unknown', 'Connecting', 'Connected', 'NotConnected')")
        return value

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient']):
            raise ValueError("must be one of enum values ('IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNetworkGatewayConnectionPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection_status",
            "egress_bytes_transferred",
            "ingress_bytes_transferred",
            "provisioning_state",
            "tunnel_connection_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ipsec_policies (list)
        _items = []
        if self.ipsec_policies:
            for _item_ipsec_policies in self.ipsec_policies:
                if _item_ipsec_policies:
                    _items.append(_item_ipsec_policies.to_dict())
            _dict['ipsecPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of local_network_gateway2
        if self.local_network_gateway2:
            _dict['localNetworkGateway2'] = self.local_network_gateway2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of peer
        if self.peer:
            _dict['peer'] = self.peer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tunnel_connection_status (list)
        _items = []
        if self.tunnel_connection_status:
            for _item_tunnel_connection_status in self.tunnel_connection_status:
                if _item_tunnel_connection_status:
                    _items.append(_item_tunnel_connection_status.to_dict())
            _dict['tunnelConnectionStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of virtual_network_gateway1
        if self.virtual_network_gateway1:
            _dict['virtualNetworkGateway1'] = self.virtual_network_gateway1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_network_gateway2
        if self.virtual_network_gateway2:
            _dict['virtualNetworkGateway2'] = self.virtual_network_gateway2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNetworkGatewayConnectionPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationKey": obj.get("authorizationKey"),
            "connectionStatus": obj.get("connectionStatus"),
            "connectionType": obj.get("connectionType"),
            "egressBytesTransferred": obj.get("egressBytesTransferred"),
            "enableBgp": obj.get("enableBgp"),
            "ingressBytesTransferred": obj.get("ingressBytesTransferred"),
            "ipsecPolicies": [IpsecPolicy.from_dict(_item) for _item in obj["ipsecPolicies"]] if obj.get("ipsecPolicies") is not None else None,
            "localNetworkGateway2": LocalNetworkGateway.from_dict(obj["localNetworkGateway2"]) if obj.get("localNetworkGateway2") is not None else None,
            "peer": VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer.from_dict(obj["peer"]) if obj.get("peer") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid"),
            "routingWeight": obj.get("routingWeight"),
            "sharedKey": obj.get("sharedKey"),
            "tunnelConnectionStatus": [TunnelConnectionHealth.from_dict(_item) for _item in obj["tunnelConnectionStatus"]] if obj.get("tunnelConnectionStatus") is not None else None,
            "usePolicyBasedTrafficSelectors": obj.get("usePolicyBasedTrafficSelectors"),
            "virtualNetworkGateway1": VirtualNetworkGateway.from_dict(obj["virtualNetworkGateway1"]) if obj.get("virtualNetworkGateway1") is not None else None,
            "virtualNetworkGateway2": VirtualNetworkGateway.from_dict(obj["virtualNetworkGateway2"]) if obj.get("virtualNetworkGateway2") is not None else None
        })
        return _obj



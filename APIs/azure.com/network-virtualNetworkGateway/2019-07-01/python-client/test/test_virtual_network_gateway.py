# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2019-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_network_gateway import VirtualNetworkGateway

class TestVirtualNetworkGateway(unittest.TestCase):
    """VirtualNetworkGateway unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualNetworkGateway:
        """Test VirtualNetworkGateway
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualNetworkGateway`
        """
        model = VirtualNetworkGateway()
        if include_optional:
            return VirtualNetworkGateway(
                etag = '',
                properties = openapi_client.models.virtual_network_gateway_properties_format.VirtualNetworkGatewayPropertiesFormat(
                    active_active = True, 
                    bgp_settings = openapi_client.models.bgp_settings.BgpSettings(
                        asn = 56, 
                        bgp_peering_address = '', 
                        peer_weight = 56, ), 
                    custom_routes = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(
                        address_prefixes = [
                            ''
                            ], ), 
                    enable_bgp = True, 
                    gateway_default_site = openapi_client.models.virtual_network_gateway_connection_list_entity_properties_format_peer.VirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer(
                        id = '', ), 
                    gateway_type = 'Vpn', 
                    ip_configurations = [
                        openapi_client.models.virtual_network_gateway_ip_configuration.VirtualNetworkGatewayIPConfiguration(
                            etag = '', 
                            name = '', 
                            properties = openapi_client.models.virtual_network_gateway_ip_configuration_properties_format.VirtualNetworkGatewayIPConfigurationPropertiesFormat(
                                private_ip_allocation_method = 'Static', 
                                provisioning_state = 'Succeeded', 
                                public_ip_address = openapi_client.models.virtual_network_gateway_connection_list_entity_properties_format_peer.VirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer(
                                    id = '', ), 
                                subnet = , ), )
                        ], 
                    provisioning_state = 'Succeeded', 
                    resource_guid = '', 
                    sku = openapi_client.models.virtual_network_gateway_sku.VirtualNetworkGatewaySku(
                        capacity = 56, 
                        name = 'Basic', 
                        tier = 'Basic', ), 
                    vpn_client_configuration = openapi_client.models.vpn_client_configuration.VpnClientConfiguration(
                        aad_audience = '', 
                        aad_issuer = '', 
                        aad_tenant = '', 
                        radius_server_address = '', 
                        radius_server_secret = '', 
                        vpn_client_address_pool = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(), 
                        vpn_client_ipsec_policies = [
                            openapi_client.models.ipsec_policy.IpsecPolicy(
                                dh_group = 'None', 
                                ike_encryption = 'DES', 
                                ike_integrity = 'MD5', 
                                ipsec_encryption = 'None', 
                                ipsec_integrity = 'MD5', 
                                pfs_group = 'None', 
                                sa_data_size_kilobytes = 56, 
                                sa_life_time_seconds = 56, )
                            ], 
                        vpn_client_protocols = [
                            'IkeV2'
                            ], 
                        vpn_client_revoked_certificates = [
                            openapi_client.models.vpn_client_revoked_certificate.VpnClientRevokedCertificate(
                                etag = '', 
                                name = '', )
                            ], 
                        vpn_client_root_certificates = [
                            openapi_client.models.vpn_client_root_certificate.VpnClientRootCertificate(
                                etag = '', 
                                name = '', 
                                properties = openapi_client.models.vpn_client_root_certificate_properties_format.VpnClientRootCertificatePropertiesFormat(
                                    provisioning_state = 'Succeeded', 
                                    public_cert_data = '', ), )
                            ], ), 
                    vpn_gateway_generation = 'None', 
                    vpn_type = 'PolicyBased', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return VirtualNetworkGateway(
                properties = openapi_client.models.virtual_network_gateway_properties_format.VirtualNetworkGatewayPropertiesFormat(
                    active_active = True, 
                    bgp_settings = openapi_client.models.bgp_settings.BgpSettings(
                        asn = 56, 
                        bgp_peering_address = '', 
                        peer_weight = 56, ), 
                    custom_routes = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(
                        address_prefixes = [
                            ''
                            ], ), 
                    enable_bgp = True, 
                    gateway_default_site = openapi_client.models.virtual_network_gateway_connection_list_entity_properties_format_peer.VirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer(
                        id = '', ), 
                    gateway_type = 'Vpn', 
                    ip_configurations = [
                        openapi_client.models.virtual_network_gateway_ip_configuration.VirtualNetworkGatewayIPConfiguration(
                            etag = '', 
                            name = '', 
                            properties = openapi_client.models.virtual_network_gateway_ip_configuration_properties_format.VirtualNetworkGatewayIPConfigurationPropertiesFormat(
                                private_ip_allocation_method = 'Static', 
                                provisioning_state = 'Succeeded', 
                                public_ip_address = openapi_client.models.virtual_network_gateway_connection_list_entity_properties_format_peer.VirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer(
                                    id = '', ), 
                                subnet = , ), )
                        ], 
                    provisioning_state = 'Succeeded', 
                    resource_guid = '', 
                    sku = openapi_client.models.virtual_network_gateway_sku.VirtualNetworkGatewaySku(
                        capacity = 56, 
                        name = 'Basic', 
                        tier = 'Basic', ), 
                    vpn_client_configuration = openapi_client.models.vpn_client_configuration.VpnClientConfiguration(
                        aad_audience = '', 
                        aad_issuer = '', 
                        aad_tenant = '', 
                        radius_server_address = '', 
                        radius_server_secret = '', 
                        vpn_client_address_pool = openapi_client.models.local_network_gateway_properties_format_local_network_address_space.LocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace(), 
                        vpn_client_ipsec_policies = [
                            openapi_client.models.ipsec_policy.IpsecPolicy(
                                dh_group = 'None', 
                                ike_encryption = 'DES', 
                                ike_integrity = 'MD5', 
                                ipsec_encryption = 'None', 
                                ipsec_integrity = 'MD5', 
                                pfs_group = 'None', 
                                sa_data_size_kilobytes = 56, 
                                sa_life_time_seconds = 56, )
                            ], 
                        vpn_client_protocols = [
                            'IkeV2'
                            ], 
                        vpn_client_revoked_certificates = [
                            openapi_client.models.vpn_client_revoked_certificate.VpnClientRevokedCertificate(
                                etag = '', 
                                name = '', )
                            ], 
                        vpn_client_root_certificates = [
                            openapi_client.models.vpn_client_root_certificate.VpnClientRootCertificate(
                                etag = '', 
                                name = '', 
                                properties = openapi_client.models.vpn_client_root_certificate_properties_format.VpnClientRootCertificatePropertiesFormat(
                                    provisioning_state = 'Succeeded', 
                                    public_cert_data = '', ), )
                            ], ), 
                    vpn_gateway_generation = 'None', 
                    vpn_type = 'PolicyBased', ),
        )
        """

    def testVirtualNetworkGateway(self):
        """Test VirtualNetworkGateway"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

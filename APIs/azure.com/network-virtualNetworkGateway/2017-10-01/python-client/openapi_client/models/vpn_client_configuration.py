# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2017-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.local_network_gateway_properties_format_local_network_address_space import LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace
from openapi_client.models.vpn_client_revoked_certificate import VpnClientRevokedCertificate
from openapi_client.models.vpn_client_root_certificate import VpnClientRootCertificate
from typing import Optional, Set
from typing_extensions import Self

class VpnClientConfiguration(BaseModel):
    """
    VpnClientConfiguration for P2S client.
    """ # noqa: E501
    radius_server_address: Optional[StrictStr] = Field(default=None, description="The radius server address property of the VirtualNetworkGateway resource for vpn client connection.", alias="radiusServerAddress")
    radius_server_secret: Optional[StrictStr] = Field(default=None, description="The radius secret property of the VirtualNetworkGateway resource for vpn client connection.", alias="radiusServerSecret")
    vpn_client_address_pool: Optional[LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace] = Field(default=None, alias="vpnClientAddressPool")
    vpn_client_protocols: Optional[List[StrictStr]] = Field(default=None, description="VpnClientProtocols for Virtual network gateway.", alias="vpnClientProtocols")
    vpn_client_revoked_certificates: Optional[List[VpnClientRevokedCertificate]] = Field(default=None, description="VpnClientRevokedCertificate for Virtual network gateway.", alias="vpnClientRevokedCertificates")
    vpn_client_root_certificates: Optional[List[VpnClientRootCertificate]] = Field(default=None, description="VpnClientRootCertificate for virtual network gateway.", alias="vpnClientRootCertificates")
    __properties: ClassVar[List[str]] = ["radiusServerAddress", "radiusServerSecret", "vpnClientAddressPool", "vpnClientProtocols", "vpnClientRevokedCertificates", "vpnClientRootCertificates"]

    @field_validator('vpn_client_protocols')
    def vpn_client_protocols_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['IkeV2', 'SSTP']):
                raise ValueError("each list item must be one of ('IkeV2', 'SSTP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VpnClientConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vpn_client_address_pool
        if self.vpn_client_address_pool:
            _dict['vpnClientAddressPool'] = self.vpn_client_address_pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vpn_client_revoked_certificates (list)
        _items = []
        if self.vpn_client_revoked_certificates:
            for _item_vpn_client_revoked_certificates in self.vpn_client_revoked_certificates:
                if _item_vpn_client_revoked_certificates:
                    _items.append(_item_vpn_client_revoked_certificates.to_dict())
            _dict['vpnClientRevokedCertificates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vpn_client_root_certificates (list)
        _items = []
        if self.vpn_client_root_certificates:
            for _item_vpn_client_root_certificates in self.vpn_client_root_certificates:
                if _item_vpn_client_root_certificates:
                    _items.append(_item_vpn_client_root_certificates.to_dict())
            _dict['vpnClientRootCertificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VpnClientConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "radiusServerAddress": obj.get("radiusServerAddress"),
            "radiusServerSecret": obj.get("radiusServerSecret"),
            "vpnClientAddressPool": LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace.from_dict(obj["vpnClientAddressPool"]) if obj.get("vpnClientAddressPool") is not None else None,
            "vpnClientProtocols": obj.get("vpnClientProtocols"),
            "vpnClientRevokedCertificates": [VpnClientRevokedCertificate.from_dict(_item) for _item in obj["vpnClientRevokedCertificates"]] if obj.get("vpnClientRevokedCertificates") is not None else None,
            "vpnClientRootCertificates": [VpnClientRootCertificate.from_dict(_item) for _item in obj["vpnClientRootCertificates"]] if obj.get("vpnClientRootCertificates") is not None else None
        })
        return _obj



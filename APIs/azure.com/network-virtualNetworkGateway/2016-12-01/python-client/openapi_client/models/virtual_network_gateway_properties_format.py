# coding: utf-8

"""
    NetworkManagementClient

    The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.

    The version of the OpenAPI document: 2016-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bgp_settings import BgpSettings
from openapi_client.models.virtual_network_gateway_connection_properties_format_peer import VirtualNetworkGatewayConnectionPropertiesFormatPeer
from openapi_client.models.virtual_network_gateway_ip_configuration import VirtualNetworkGatewayIPConfiguration
from openapi_client.models.virtual_network_gateway_sku import VirtualNetworkGatewaySku
from openapi_client.models.vpn_client_configuration import VpnClientConfiguration
from typing import Optional, Set
from typing_extensions import Self

class VirtualNetworkGatewayPropertiesFormat(BaseModel):
    """
    VirtualNetworkGateway properties
    """ # noqa: E501
    active_active: Optional[StrictBool] = Field(default=None, description="ActiveActive flag", alias="activeActive")
    bgp_settings: Optional[BgpSettings] = Field(default=None, alias="bgpSettings")
    enable_bgp: Optional[StrictBool] = Field(default=None, description="Whether BGP is enabled for this virtual network gateway or not.", alias="enableBgp")
    gateway_default_site: Optional[VirtualNetworkGatewayConnectionPropertiesFormatPeer] = Field(default=None, alias="gatewayDefaultSite")
    gateway_type: Optional[StrictStr] = Field(default=None, description="The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.", alias="gatewayType")
    ip_configurations: Optional[List[VirtualNetworkGatewayIPConfiguration]] = Field(default=None, description="IP configurations for virtual network gateway.", alias="ipConfigurations")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.", alias="provisioningState")
    resource_guid: Optional[StrictStr] = Field(default=None, description="The resource GUID property of the VirtualNetworkGateway resource.", alias="resourceGuid")
    sku: Optional[VirtualNetworkGatewaySku] = None
    vpn_client_configuration: Optional[VpnClientConfiguration] = Field(default=None, alias="vpnClientConfiguration")
    vpn_type: Optional[StrictStr] = Field(default=None, description="The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.", alias="vpnType")
    __properties: ClassVar[List[str]] = ["activeActive", "bgpSettings", "enableBgp", "gatewayDefaultSite", "gatewayType", "ipConfigurations", "provisioningState", "resourceGuid", "sku", "vpnClientConfiguration", "vpnType"]

    @field_validator('gateway_type')
    def gateway_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Vpn', 'ExpressRoute']):
            raise ValueError("must be one of enum values ('Vpn', 'ExpressRoute')")
        return value

    @field_validator('vpn_type')
    def vpn_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PolicyBased', 'RouteBased']):
            raise ValueError("must be one of enum values ('PolicyBased', 'RouteBased')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNetworkGatewayPropertiesFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bgp_settings
        if self.bgp_settings:
            _dict['bgpSettings'] = self.bgp_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gateway_default_site
        if self.gateway_default_site:
            _dict['gatewayDefaultSite'] = self.gateway_default_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_configurations (list)
        _items = []
        if self.ip_configurations:
            for _item_ip_configurations in self.ip_configurations:
                if _item_ip_configurations:
                    _items.append(_item_ip_configurations.to_dict())
            _dict['ipConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vpn_client_configuration
        if self.vpn_client_configuration:
            _dict['vpnClientConfiguration'] = self.vpn_client_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNetworkGatewayPropertiesFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeActive": obj.get("activeActive"),
            "bgpSettings": BgpSettings.from_dict(obj["bgpSettings"]) if obj.get("bgpSettings") is not None else None,
            "enableBgp": obj.get("enableBgp"),
            "gatewayDefaultSite": VirtualNetworkGatewayConnectionPropertiesFormatPeer.from_dict(obj["gatewayDefaultSite"]) if obj.get("gatewayDefaultSite") is not None else None,
            "gatewayType": obj.get("gatewayType"),
            "ipConfigurations": [VirtualNetworkGatewayIPConfiguration.from_dict(_item) for _item in obj["ipConfigurations"]] if obj.get("ipConfigurations") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceGuid": obj.get("resourceGuid"),
            "sku": VirtualNetworkGatewaySku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "vpnClientConfiguration": VpnClientConfiguration.from_dict(obj["vpnClientConfiguration"]) if obj.get("vpnClientConfiguration") is not None else None,
            "vpnType": obj.get("vpnType")
        })
        return _obj



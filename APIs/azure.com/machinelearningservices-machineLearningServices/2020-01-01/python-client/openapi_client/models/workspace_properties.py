# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_property import EncryptionProperty
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceProperties(BaseModel):
    """
    The properties of a machine learning workspace.
    """ # noqa: E501
    application_insights: Optional[StrictStr] = Field(default=None, description="ARM id of the application insights associated with this workspace. This cannot be changed once the workspace has been created", alias="applicationInsights")
    container_registry: Optional[StrictStr] = Field(default=None, description="ARM id of the container registry associated with this workspace. This cannot be changed once the workspace has been created", alias="containerRegistry")
    creation_time: Optional[datetime] = Field(default=None, description="The creation time of the machine learning workspace in ISO8601 format.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="The description of this workspace.")
    discovery_url: Optional[StrictStr] = Field(default=None, description="Url for the discovery service to identify regional endpoints for machine learning experimentation services", alias="discoveryUrl")
    encryption: Optional[EncryptionProperty] = None
    friendly_name: Optional[StrictStr] = Field(default=None, description="The friendly name for this workspace. This name in mutable", alias="friendlyName")
    hbi_workspace: Optional[StrictBool] = Field(default=False, description="The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service", alias="hbiWorkspace")
    key_vault: Optional[StrictStr] = Field(default=None, description="ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created", alias="keyVault")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.", alias="provisioningState")
    service_provisioned_resource_group: Optional[StrictStr] = Field(default=None, description="The name of the managed resource group created by workspace RP in customer subscription if the workspace is CMK workspace", alias="serviceProvisionedResourceGroup")
    storage_account: Optional[StrictStr] = Field(default=None, description="ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created", alias="storageAccount")
    workspace_id: Optional[StrictStr] = Field(default=None, description="The immutable id associated with this workspace.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["applicationInsights", "containerRegistry", "creationTime", "description", "discoveryUrl", "encryption", "friendlyName", "hbiWorkspace", "keyVault", "provisioningState", "serviceProvisionedResourceGroup", "storageAccount", "workspaceId"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Updating', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Unknown', 'Updating', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "provisioning_state",
            "service_provisioned_resource_group",
            "workspace_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationInsights": obj.get("applicationInsights"),
            "containerRegistry": obj.get("containerRegistry"),
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "discoveryUrl": obj.get("discoveryUrl"),
            "encryption": EncryptionProperty.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "friendlyName": obj.get("friendlyName"),
            "hbiWorkspace": obj.get("hbiWorkspace") if obj.get("hbiWorkspace") is not None else False,
            "keyVault": obj.get("keyVault"),
            "provisioningState": obj.get("provisioningState"),
            "serviceProvisionedResourceGroup": obj.get("serviceProvisionedResourceGroup"),
            "storageAccount": obj.get("storageAccount"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj



# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2018-11-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.machine_learning_service_error import MachineLearningServiceError
from openapi_client.models.node_state_counts import NodeStateCounts
from openapi_client.models.resource_id import ResourceId
from openapi_client.models.scale_settings import ScaleSettings
from openapi_client.models.user_account_credentials import UserAccountCredentials
from typing import Optional, Set
from typing_extensions import Self

class AmlComputeAllOfProperties(BaseModel):
    """
    AML Compute properties
    """ # noqa: E501
    allocation_state: Optional[StrictStr] = Field(default=None, description="Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.", alias="allocationState")
    allocation_state_transition_time: Optional[datetime] = Field(default=None, description="The time at which the compute entered its current allocation state.", alias="allocationStateTransitionTime")
    current_node_count: Optional[StrictInt] = Field(default=None, description="The number of compute nodes currently assigned to the compute.", alias="currentNodeCount")
    errors: Optional[List[MachineLearningServiceError]] = Field(default=None, description="Collection of errors encountered by various compute nodes during node setup.")
    node_state_counts: Optional[NodeStateCounts] = Field(default=None, alias="nodeStateCounts")
    scale_settings: Optional[ScaleSettings] = Field(default=None, alias="scaleSettings")
    subnet: Optional[ResourceId] = None
    target_node_count: Optional[StrictInt] = Field(default=None, description="The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.", alias="targetNodeCount")
    user_account_credentials: Optional[UserAccountCredentials] = Field(default=None, alias="userAccountCredentials")
    vm_priority: Optional[StrictStr] = Field(default=None, description="Virtual Machine priority", alias="vmPriority")
    vm_size: Optional[StrictStr] = Field(default=None, description="Virtual Machine Size", alias="vmSize")
    __properties: ClassVar[List[str]] = ["allocationState", "allocationStateTransitionTime", "currentNodeCount", "errors", "nodeStateCounts", "scaleSettings", "subnet", "targetNodeCount", "userAccountCredentials", "vmPriority", "vmSize"]

    @field_validator('allocation_state')
    def allocation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Steady', 'Resizing']):
            raise ValueError("must be one of enum values ('Steady', 'Resizing')")
        return value

    @field_validator('vm_priority')
    def vm_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Dedicated', 'LowPriority']):
            raise ValueError("must be one of enum values ('Dedicated', 'LowPriority')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmlComputeAllOfProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allocation_state",
            "allocation_state_transition_time",
            "current_node_count",
            "errors",
            "target_node_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of node_state_counts
        if self.node_state_counts:
            _dict['nodeStateCounts'] = self.node_state_counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_settings
        if self.scale_settings:
            _dict['scaleSettings'] = self.scale_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet:
            _dict['subnet'] = self.subnet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_account_credentials
        if self.user_account_credentials:
            _dict['userAccountCredentials'] = self.user_account_credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmlComputeAllOfProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocationState": obj.get("allocationState"),
            "allocationStateTransitionTime": obj.get("allocationStateTransitionTime"),
            "currentNodeCount": obj.get("currentNodeCount"),
            "errors": [MachineLearningServiceError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "nodeStateCounts": NodeStateCounts.from_dict(obj["nodeStateCounts"]) if obj.get("nodeStateCounts") is not None else None,
            "scaleSettings": ScaleSettings.from_dict(obj["scaleSettings"]) if obj.get("scaleSettings") is not None else None,
            "subnet": ResourceId.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None,
            "targetNodeCount": obj.get("targetNodeCount"),
            "userAccountCredentials": UserAccountCredentials.from_dict(obj["userAccountCredentials"]) if obj.get("userAccountCredentials") is not None else None,
            "vmPriority": obj.get("vmPriority"),
            "vmSize": obj.get("vmSize")
        })
        return _obj



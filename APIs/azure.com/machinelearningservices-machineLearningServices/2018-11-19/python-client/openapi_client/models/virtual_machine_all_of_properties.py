# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2018-11-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.virtual_machine_ssh_credentials import VirtualMachineSshCredentials
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineAllOfProperties(BaseModel):
    """
    VirtualMachineAllOfProperties
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Public IP address of the virtual machine.")
    administrator_account: Optional[VirtualMachineSshCredentials] = Field(default=None, alias="administratorAccount")
    ssh_port: Optional[StrictInt] = Field(default=None, description="Port open for ssh connections.", alias="sshPort")
    virtual_machine_size: Optional[StrictStr] = Field(default=None, description="Virtual Machine size", alias="virtualMachineSize")
    __properties: ClassVar[List[str]] = ["address", "administratorAccount", "sshPort", "virtualMachineSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineAllOfProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of administrator_account
        if self.administrator_account:
            _dict['administratorAccount'] = self.administrator_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineAllOfProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "administratorAccount": VirtualMachineSshCredentials.from_dict(obj["administratorAccount"]) if obj.get("administratorAccount") is not None else None,
            "sshPort": obj.get("sshPort"),
            "virtualMachineSize": obj.get("virtualMachineSize")
        })
        return _obj



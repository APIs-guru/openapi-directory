# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.compute_type import ComputeType
from openapi_client.models.machine_learning_service_error import MachineLearningServiceError
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.aks import AKS
    from openapi_client.models.aml_compute import AmlCompute
    from openapi_client.models.data_factory import DataFactory
    from openapi_client.models.data_lake_analytics import DataLakeAnalytics
    from openapi_client.models.databricks import Databricks
    from openapi_client.models.hd_insight import HDInsight
    from openapi_client.models.virtual_machine import VirtualMachine

class Compute(BaseModel):
    """
    Machine Learning compute object.
    """ # noqa: E501
    compute_location: Optional[StrictStr] = Field(default=None, description="Location for the underlying compute", alias="computeLocation")
    compute_type: ComputeType = Field(alias="computeType")
    created_on: Optional[datetime] = Field(default=None, description="The date and time when the compute was created.", alias="createdOn")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Machine Learning compute.")
    is_attached_compute: Optional[StrictBool] = Field(default=None, description="Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.", alias="isAttachedCompute")
    modified_on: Optional[datetime] = Field(default=None, description="The date and time when the compute was last modified.", alias="modifiedOn")
    provisioning_errors: Optional[List[MachineLearningServiceError]] = Field(default=None, description="Errors during provisioning", alias="provisioningErrors")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.", alias="provisioningState")
    resource_id: Optional[StrictStr] = Field(default=None, description="ARM resource id of the underlying compute", alias="resourceId")
    __properties: ClassVar[List[str]] = ["computeLocation", "computeType", "createdOn", "description", "isAttachedCompute", "modifiedOn", "provisioningErrors", "provisioningState", "resourceId"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Updating', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Unknown', 'Updating', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'computeType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AKS': 'AKS','AmlCompute': 'AmlCompute','DataFactory': 'DataFactory','DataLakeAnalytics': 'DataLakeAnalytics','Databricks': 'Databricks','HDInsight': 'HDInsight','VirtualMachine': 'VirtualMachine'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AKS, AmlCompute, DataFactory, DataLakeAnalytics, Databricks, HDInsight, VirtualMachine]]:
        """Create an instance of Compute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_on",
            "is_attached_compute",
            "modified_on",
            "provisioning_errors",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provisioning_errors (list)
        _items = []
        if self.provisioning_errors:
            for _item_provisioning_errors in self.provisioning_errors:
                if _item_provisioning_errors:
                    _items.append(_item_provisioning_errors.to_dict())
            _dict['provisioningErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AKS, AmlCompute, DataFactory, DataLakeAnalytics, Databricks, HDInsight, VirtualMachine]]:
        """Create an instance of Compute from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AKS':
            return import_module("openapi_client.models.aks").AKS.from_dict(obj)
        if object_type ==  'AmlCompute':
            return import_module("openapi_client.models.aml_compute").AmlCompute.from_dict(obj)
        if object_type ==  'DataFactory':
            return import_module("openapi_client.models.data_factory").DataFactory.from_dict(obj)
        if object_type ==  'DataLakeAnalytics':
            return import_module("openapi_client.models.data_lake_analytics").DataLakeAnalytics.from_dict(obj)
        if object_type ==  'Databricks':
            return import_module("openapi_client.models.databricks").Databricks.from_dict(obj)
        if object_type ==  'HDInsight':
            return import_module("openapi_client.models.hd_insight").HDInsight.from_dict(obj)
        if object_type ==  'VirtualMachine':
            return import_module("openapi_client.models.virtual_machine").VirtualMachine.from_dict(obj)

        raise ValueError("Compute failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineSize(BaseModel):
    """
    Describes the properties of a VM size.
    """ # noqa: E501
    family: Optional[StrictStr] = Field(default=None, description="The family name of the virtual machine size.")
    low_priority_capable: Optional[StrictBool] = Field(default=None, description="Specifies if the virtual machine size supports low priority VMs.", alias="lowPriorityCapable")
    max_resource_volume_mb: Optional[StrictInt] = Field(default=None, description="The resource volume size, in MB, allowed by the virtual machine size.", alias="maxResourceVolumeMB")
    memory_gb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of memory, in GB, supported by the virtual machine size.", alias="memoryGB")
    name: Optional[StrictStr] = Field(default=None, description="The name of the virtual machine size.")
    os_vhd_size_mb: Optional[StrictInt] = Field(default=None, description="The OS VHD disk size, in MB, allowed by the virtual machine size.", alias="osVhdSizeMB")
    premium_io: Optional[StrictBool] = Field(default=None, description="Specifies if the virtual machine size supports premium IO.", alias="premiumIO")
    v_cpus: Optional[StrictInt] = Field(default=None, description="The number of vCPUs supported by the virtual machine size.", alias="vCPUs")
    __properties: ClassVar[List[str]] = ["family", "lowPriorityCapable", "maxResourceVolumeMB", "memoryGB", "name", "osVhdSizeMB", "premiumIO", "vCPUs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineSize from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "family",
            "low_priority_capable",
            "max_resource_volume_mb",
            "memory_gb",
            "name",
            "os_vhd_size_mb",
            "premium_io",
            "v_cpus",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineSize from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "family": obj.get("family"),
            "lowPriorityCapable": obj.get("lowPriorityCapable"),
            "maxResourceVolumeMB": obj.get("maxResourceVolumeMB"),
            "memoryGB": obj.get("memoryGB"),
            "name": obj.get("name"),
            "osVhdSizeMB": obj.get("osVhdSizeMB"),
            "premiumIO": obj.get("premiumIO"),
            "vCPUs": obj.get("vCPUs")
        })
        return _obj



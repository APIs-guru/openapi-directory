# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.aks_networking_configuration import AksNetworkingConfiguration
from openapi_client.models.ssl_configuration import SslConfiguration
from openapi_client.models.system_service import SystemService
from typing import Optional, Set
from typing_extensions import Self

class AKSAllOfProperties(BaseModel):
    """
    AKS properties
    """ # noqa: E501
    agent_count: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Number of agents", alias="agentCount")
    agent_vm_size: Optional[StrictStr] = Field(default=None, description="Agent virtual machine size", alias="agentVMSize")
    aks_networking_configuration: Optional[AksNetworkingConfiguration] = Field(default=None, alias="aksNetworkingConfiguration")
    cluster_fqdn: Optional[StrictStr] = Field(default=None, description="Cluster full qualified domain name", alias="clusterFqdn")
    ssl_configuration: Optional[SslConfiguration] = Field(default=None, alias="sslConfiguration")
    system_services: Optional[List[SystemService]] = Field(default=None, description="System services", alias="systemServices")
    __properties: ClassVar[List[str]] = ["agentCount", "agentVMSize", "aksNetworkingConfiguration", "clusterFqdn", "sslConfiguration", "systemServices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AKSAllOfProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "system_services",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aks_networking_configuration
        if self.aks_networking_configuration:
            _dict['aksNetworkingConfiguration'] = self.aks_networking_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssl_configuration
        if self.ssl_configuration:
            _dict['sslConfiguration'] = self.ssl_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in system_services (list)
        _items = []
        if self.system_services:
            for _item_system_services in self.system_services:
                if _item_system_services:
                    _items.append(_item_system_services.to_dict())
            _dict['systemServices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AKSAllOfProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentCount": obj.get("agentCount"),
            "agentVMSize": obj.get("agentVMSize"),
            "aksNetworkingConfiguration": AksNetworkingConfiguration.from_dict(obj["aksNetworkingConfiguration"]) if obj.get("aksNetworkingConfiguration") is not None else None,
            "clusterFqdn": obj.get("clusterFqdn"),
            "sslConfiguration": SslConfiguration.from_dict(obj["sslConfiguration"]) if obj.get("sslConfiguration") is not None else None,
            "systemServices": [SystemService.from_dict(_item) for _item in obj["systemServices"]] if obj.get("systemServices") is not None else None
        })
        return _obj



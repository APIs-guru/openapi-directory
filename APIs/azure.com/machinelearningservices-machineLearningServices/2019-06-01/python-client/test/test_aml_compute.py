# coding: utf-8

"""
    Azure Machine Learning Workspaces

    These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.aml_compute import AmlCompute

class TestAmlCompute(unittest.TestCase):
    """AmlCompute unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AmlCompute:
        """Test AmlCompute
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AmlCompute`
        """
        model = AmlCompute()
        if include_optional:
            return AmlCompute(
                properties = openapi_client.models.aml_compute_all_of_properties.AmlCompute_allOf_properties(
                    allocation_state = 'Steady', 
                    allocation_state_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    current_node_count = 56, 
                    errors = [
                        openapi_client.models.machine_learning_service_error.MachineLearningServiceError(
                            error = openapi_client.models.error_response.ErrorResponse(
                                code = '', 
                                details = [
                                    openapi_client.models.error_detail.ErrorDetail(
                                        code = '', 
                                        message = '', )
                                    ], 
                                message = '', ), )
                        ], 
                    node_state_counts = openapi_client.models.node_state_counts.NodeStateCounts(
                        idle_node_count = 56, 
                        leaving_node_count = 56, 
                        preempted_node_count = 56, 
                        preparing_node_count = 56, 
                        running_node_count = 56, 
                        unusable_node_count = 56, ), 
                    remote_login_port_public_access = 'NotSpecified', 
                    scale_settings = openapi_client.models.scale_settings.ScaleSettings(
                        max_node_count = 56, 
                        min_node_count = 56, 
                        node_idle_time_before_scale_down = '', ), 
                    subnet = openapi_client.models.resource_id.ResourceId(
                        id = '', ), 
                    target_node_count = 56, 
                    user_account_credentials = openapi_client.models.user_account_credentials.UserAccountCredentials(
                        admin_user_name = '', 
                        admin_user_password = '', 
                        admin_user_ssh_public_key = '', ), 
                    vm_priority = 'Dedicated', 
                    vm_size = '', )
            )
        else:
            return AmlCompute(
        )
        """

    def testAmlCompute(self):
        """Test AmlCompute"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

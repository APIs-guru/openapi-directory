# coding: utf-8

"""
    Workload Monitor

    APIs for workload monitoring

    The version of the OpenAPI document: 2018-08-31-preview
    Contact: wlmengg@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_state_change import HealthStateChange
from typing import Optional, Set
from typing_extensions import Self

class MonitorInstanceProperties(BaseModel):
    """
    Model for properties of a monitor instance.
    """ # noqa: E501
    aggregate_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Properties requested in aggregation queries.", alias="aggregateProperties")
    alert_generation: Optional[StrictStr] = Field(default=None, description="Generates alert or not.", alias="alertGeneration")
    children: Optional[List[MonitorInstance]] = Field(default=None, description="Health instance children.")
    component_id: Optional[StrictStr] = Field(default=None, description="ID of the component.", alias="componentId")
    component_name: Optional[StrictStr] = Field(default=None, description="Name of the component.", alias="componentName")
    component_type_id: Optional[StrictStr] = Field(default=None, description="ID of the component type.", alias="componentTypeId")
    component_type_name: Optional[StrictStr] = Field(default=None, description="Name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.", alias="componentTypeName")
    health_state: Optional[StrictStr] = Field(default=None, description="Health state of monitor instance.", alias="healthState")
    health_state_category: Optional[StrictStr] = Field(default=None, description="Category of monitor instance's health state.", alias="healthStateCategory")
    health_state_changes: Optional[List[HealthStateChange]] = Field(default=None, description="Health state changes.", alias="healthStateChanges")
    health_state_changes_end_time: Optional[datetime] = Field(default=None, description="End time for health state changes.", alias="healthStateChangesEndTime")
    health_state_changes_start_time: Optional[datetime] = Field(default=None, description="Start time for health state changes.", alias="healthStateChangesStartTime")
    last_health_state_change_time: Optional[datetime] = Field(default=None, description="Time of last health state change.", alias="lastHealthStateChangeTime")
    monitor_category: Optional[StrictStr] = Field(default=None, description="Monitor type category. Indicates the attribute of the component that the health criteria monitors such as Performance, Availability, etc.", alias="monitorCategory")
    monitor_id: Optional[StrictStr] = Field(default=None, description="ID of the monitor instance.", alias="monitorId")
    monitor_name: Optional[StrictStr] = Field(default=None, description="Name of the monitor.", alias="monitorName")
    monitor_type: Optional[StrictStr] = Field(default=None, description="Type of the monitor. The qualifier for the health criteria depending on the functionality it performs such as Unit, Aggregate, Dependency.", alias="monitorType")
    solution_id: Optional[StrictStr] = Field(default=None, description="ID of the OMS solution this health instance belong to.", alias="solutionId")
    workload_type: Optional[StrictStr] = Field(default=None, description="Type of the workload.", alias="workloadType")
    workspace_id: Optional[StrictStr] = Field(default=None, description="ID of the workspace.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["aggregateProperties", "alertGeneration", "children", "componentId", "componentName", "componentTypeId", "componentTypeName", "healthState", "healthStateCategory", "healthStateChanges", "healthStateChangesEndTime", "healthStateChangesStartTime", "lastHealthStateChangeTime", "monitorCategory", "monitorId", "monitorName", "monitorType", "solutionId", "workloadType", "workspaceId"]

    @field_validator('alert_generation')
    def alert_generation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('health_state')
    def health_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Error', 'Warning', 'Success', 'Unknown', 'Uninitialized']):
            raise ValueError("must be one of enum values ('Error', 'Warning', 'Success', 'Unknown', 'Uninitialized')")
        return value

    @field_validator('health_state_category')
    def health_state_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Identity', 'CustomGroup']):
            raise ValueError("must be one of enum values ('Identity', 'CustomGroup')")
        return value

    @field_validator('monitor_category')
    def monitor_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AvailabilityHealth', 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security']):
            raise ValueError("must be one of enum values ('AvailabilityHealth', 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security')")
        return value

    @field_validator('monitor_type')
    def monitor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Aggregate', 'Dependency', 'Unit']):
            raise ValueError("must be one of enum values ('Aggregate', 'Dependency', 'Unit')")
        return value

    @field_validator('workload_type')
    def workload_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BaseOS', 'SQL', 'IIS', 'Apache']):
            raise ValueError("must be one of enum values ('BaseOS', 'SQL', 'IIS', 'Apache')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitorInstanceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "aggregate_properties",
            "alert_generation",
            "children",
            "component_id",
            "component_name",
            "component_type_id",
            "component_type_name",
            "health_state",
            "health_state_category",
            "health_state_changes",
            "health_state_changes_end_time",
            "health_state_changes_start_time",
            "last_health_state_change_time",
            "monitor_category",
            "monitor_id",
            "monitor_name",
            "monitor_type",
            "solution_id",
            "workload_type",
            "workspace_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in health_state_changes (list)
        _items = []
        if self.health_state_changes:
            for _item_health_state_changes in self.health_state_changes:
                if _item_health_state_changes:
                    _items.append(_item_health_state_changes.to_dict())
            _dict['healthStateChanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitorInstanceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateProperties": obj.get("aggregateProperties"),
            "alertGeneration": obj.get("alertGeneration"),
            "children": [MonitorInstance.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "componentId": obj.get("componentId"),
            "componentName": obj.get("componentName"),
            "componentTypeId": obj.get("componentTypeId"),
            "componentTypeName": obj.get("componentTypeName"),
            "healthState": obj.get("healthState"),
            "healthStateCategory": obj.get("healthStateCategory"),
            "healthStateChanges": [HealthStateChange.from_dict(_item) for _item in obj["healthStateChanges"]] if obj.get("healthStateChanges") is not None else None,
            "healthStateChangesEndTime": obj.get("healthStateChangesEndTime"),
            "healthStateChangesStartTime": obj.get("healthStateChangesStartTime"),
            "lastHealthStateChangeTime": obj.get("lastHealthStateChangeTime"),
            "monitorCategory": obj.get("monitorCategory"),
            "monitorId": obj.get("monitorId"),
            "monitorName": obj.get("monitorName"),
            "monitorType": obj.get("monitorType"),
            "solutionId": obj.get("solutionId"),
            "workloadType": obj.get("workloadType"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj

from openapi_client.models.monitor_instance import MonitorInstance
# TODO: Rewrite to not use raise_errors
MonitorInstanceProperties.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Workload Monitor

    APIs for workload monitoring

    The version of the OpenAPI document: 2018-08-31-preview
    Contact: wlmengg@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.monitor_criteria import MonitorCriteria
from typing import Optional, Set
from typing_extensions import Self

class MonitorProperties(BaseModel):
    """
    Model for properties of a Monitor.
    """ # noqa: E501
    alert_generation: Optional[StrictStr] = Field(default=None, description="Generates alerts or not", alias="alertGeneration")
    component_type_display_name: Optional[StrictStr] = Field(default=None, description="Component Type Display Name of the monitor", alias="componentTypeDisplayName")
    component_type_id: Optional[StrictStr] = Field(default=None, description="Component Type Id of monitor", alias="componentTypeId")
    component_type_name: Optional[StrictStr] = Field(default=None, description="Component Type Name of monitor", alias="componentTypeName")
    criteria: Optional[List[MonitorCriteria]] = Field(default=None, description="Collection of MonitorCriteria. For PATCH calls, instead of partial list, complete list of expected criteria should be passed for proper updating.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the monitor")
    documentation_url: Optional[StrictStr] = Field(default=None, description="URL pointing to the documentation of the monitor", alias="documentationURL")
    frequency: Optional[StrictInt] = Field(default=None, description="Frequency at which monitor condition is evaluated")
    lookback_duration: Optional[StrictInt] = Field(default=None, description="The duration in minutes in the past during which the monitor is evaluated", alias="lookbackDuration")
    monitor_category: Optional[StrictStr] = Field(default=None, description="Category of the monitor", alias="monitorCategory")
    monitor_display_name: Optional[StrictStr] = Field(default=None, description="User friendly display name of the monitor", alias="monitorDisplayName")
    monitor_id: Optional[StrictStr] = Field(default=None, description="ID of the monitor", alias="monitorId")
    monitor_name: Optional[StrictStr] = Field(default=None, description="Name of the monitor", alias="monitorName")
    monitor_state: Optional[StrictStr] = Field(default=None, description="Is the monitor state enabled or disabled", alias="monitorState")
    monitor_type: Optional[StrictStr] = Field(default=None, description="Type of the monitor", alias="monitorType")
    parent_monitor_display_name: Optional[StrictStr] = Field(default=None, description="User friendly display name of the parent monitor", alias="parentMonitorDisplayName")
    parent_monitor_name: Optional[StrictStr] = Field(default=None, description="Name of the parent monitor", alias="parentMonitorName")
    signal_name: Optional[StrictStr] = Field(default=None, description="Name of the signal on which this monitor is configured.", alias="signalName")
    signal_type: Optional[StrictStr] = Field(default=None, description="Type of the signal on which this monitor is configured.", alias="signalType")
    __properties: ClassVar[List[str]] = ["alertGeneration", "componentTypeDisplayName", "componentTypeId", "componentTypeName", "criteria", "description", "documentationURL", "frequency", "lookbackDuration", "monitorCategory", "monitorDisplayName", "monitorId", "monitorName", "monitorState", "monitorType", "parentMonitorDisplayName", "parentMonitorName", "signalName", "signalType"]

    @field_validator('alert_generation')
    def alert_generation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('monitor_category')
    def monitor_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AvailabilityHealth', 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security']):
            raise ValueError("must be one of enum values ('AvailabilityHealth', 'Configuration', 'EntityHealth', 'PerformanceHealth', 'Security')")
        return value

    @field_validator('monitor_state')
    def monitor_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('monitor_type')
    def monitor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Aggregate', 'Dependency', 'Unit']):
            raise ValueError("must be one of enum values ('Aggregate', 'Dependency', 'Unit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitorProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "alert_generation",
            "component_type_display_name",
            "component_type_id",
            "component_type_name",
            "criteria",
            "description",
            "documentation_url",
            "frequency",
            "lookback_duration",
            "monitor_category",
            "monitor_display_name",
            "monitor_id",
            "monitor_name",
            "monitor_state",
            "monitor_type",
            "parent_monitor_display_name",
            "parent_monitor_name",
            "signal_name",
            "signal_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in criteria (list)
        _items = []
        if self.criteria:
            for _item_criteria in self.criteria:
                if _item_criteria:
                    _items.append(_item_criteria.to_dict())
            _dict['criteria'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitorProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertGeneration": obj.get("alertGeneration"),
            "componentTypeDisplayName": obj.get("componentTypeDisplayName"),
            "componentTypeId": obj.get("componentTypeId"),
            "componentTypeName": obj.get("componentTypeName"),
            "criteria": [MonitorCriteria.from_dict(_item) for _item in obj["criteria"]] if obj.get("criteria") is not None else None,
            "description": obj.get("description"),
            "documentationURL": obj.get("documentationURL"),
            "frequency": obj.get("frequency"),
            "lookbackDuration": obj.get("lookbackDuration"),
            "monitorCategory": obj.get("monitorCategory"),
            "monitorDisplayName": obj.get("monitorDisplayName"),
            "monitorId": obj.get("monitorId"),
            "monitorName": obj.get("monitorName"),
            "monitorState": obj.get("monitorState"),
            "monitorType": obj.get("monitorType"),
            "parentMonitorDisplayName": obj.get("parentMonitorDisplayName"),
            "parentMonitorName": obj.get("parentMonitorName"),
            "signalName": obj.get("signalName"),
            "signalType": obj.get("signalType")
        })
        return _obj



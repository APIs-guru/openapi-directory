# coding: utf-8

"""
    Workload Monitor

    APIs for workload monitoring

    The version of the OpenAPI document: 2018-08-31-preview
    Contact: wlmengg@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ComponentProperties(BaseModel):
    """
    Model for properties of a component.
    """ # noqa: E501
    aggregate_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Properties requested in aggregation queries.", alias="aggregateProperties")
    children: Optional[List[Component]] = Field(default=None, description="component children.")
    component_name: Optional[StrictStr] = Field(default=None, description="Name of the component.", alias="componentName")
    component_type_group_category: Optional[StrictStr] = Field(default=None, description="Component type group category. Classification of component type groups into a logical category. e.g. Network, Disk, Memory, CPU.", alias="componentTypeGroupCategory")
    component_type_id: Optional[StrictStr] = Field(default=None, description="ID of the component type.", alias="componentTypeId")
    component_type_name: Optional[StrictStr] = Field(default=None, description="Name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.", alias="componentTypeName")
    health_state: Optional[StrictStr] = Field(default=None, description="Health state of the component.", alias="healthState")
    health_state_category: Optional[StrictStr] = Field(default=None, description="Category of component's health state.", alias="healthStateCategory")
    health_state_changes_end_time: Optional[datetime] = Field(default=None, description="End time for health state changes.", alias="healthStateChangesEndTime")
    health_state_changes_start_time: Optional[datetime] = Field(default=None, description="Start time for health state changes.", alias="healthStateChangesStartTime")
    last_health_state_change_time: Optional[datetime] = Field(default=None, description="Time of last health state change.", alias="lastHealthStateChangeTime")
    solution_id: Optional[StrictStr] = Field(default=None, description="ID of the OMS solution this component belong to.", alias="solutionId")
    vm_id: Optional[StrictStr] = Field(default=None, description="ID of the VM this component belongs to.", alias="vmId")
    vm_name: Optional[StrictStr] = Field(default=None, description="Name of the VM this component belongs to.", alias="vmName")
    vm_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Tags on the VM this component belongs to.", alias="vmTags")
    workload_type: Optional[StrictStr] = Field(default=None, description="Type of the workload.", alias="workloadType")
    workspace_id: Optional[StrictStr] = Field(default=None, description="ID of the workspace.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["aggregateProperties", "children", "componentName", "componentTypeGroupCategory", "componentTypeId", "componentTypeName", "healthState", "healthStateCategory", "healthStateChangesEndTime", "healthStateChangesStartTime", "lastHealthStateChangeTime", "solutionId", "vmId", "vmName", "vmTags", "workloadType", "workspaceId"]

    @field_validator('health_state')
    def health_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Error', 'Warning', 'Success', 'Unknown', 'Uninitialized']):
            raise ValueError("must be one of enum values ('Error', 'Warning', 'Success', 'Unknown', 'Uninitialized')")
        return value

    @field_validator('health_state_category')
    def health_state_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Identity', 'CustomGroup']):
            raise ValueError("must be one of enum values ('Identity', 'CustomGroup')")
        return value

    @field_validator('workload_type')
    def workload_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BaseOS', 'SQL', 'IIS', 'Apache']):
            raise ValueError("must be one of enum values ('BaseOS', 'SQL', 'IIS', 'Apache')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComponentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "aggregate_properties",
            "children",
            "component_name",
            "component_type_group_category",
            "component_type_id",
            "component_type_name",
            "health_state",
            "health_state_category",
            "health_state_changes_end_time",
            "health_state_changes_start_time",
            "last_health_state_change_time",
            "solution_id",
            "vm_id",
            "vm_name",
            "vm_tags",
            "workload_type",
            "workspace_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComponentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateProperties": obj.get("aggregateProperties"),
            "children": [Component.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "componentName": obj.get("componentName"),
            "componentTypeGroupCategory": obj.get("componentTypeGroupCategory"),
            "componentTypeId": obj.get("componentTypeId"),
            "componentTypeName": obj.get("componentTypeName"),
            "healthState": obj.get("healthState"),
            "healthStateCategory": obj.get("healthStateCategory"),
            "healthStateChangesEndTime": obj.get("healthStateChangesEndTime"),
            "healthStateChangesStartTime": obj.get("healthStateChangesStartTime"),
            "lastHealthStateChangeTime": obj.get("lastHealthStateChangeTime"),
            "solutionId": obj.get("solutionId"),
            "vmId": obj.get("vmId"),
            "vmName": obj.get("vmName"),
            "vmTags": obj.get("vmTags"),
            "workloadType": obj.get("workloadType"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj

from openapi_client.models.component import Component
# TODO: Rewrite to not use raise_errors
ComponentProperties.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Workload Monitor

    APIs for workload monitoring

    The version of the OpenAPI document: 2018-08-31-preview
    Contact: wlmengg@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.components_collection import ComponentsCollection
from openapi_client.models.monitor_instances_collection import MonitorInstancesCollection
from openapi_client.models.operation_list_result import OperationListResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WorkloadInsightsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def components_summary_list(
        self,
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        select: Annotated[Optional[StrictStr], Field(description="Properties to be returned in the response.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter to be applied on the operation.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="Apply aggregation.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Sort the result on one or more properties.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Include properties inline in the response.")] = None,
        top: Annotated[Optional[StrictStr], Field(description="Limit the result to the specified number of rows.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ComponentsCollection:
        """Get subscription wide details of components.


        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param select: Properties to be returned in the response.
        :type select: str
        :param filter: Filter to be applied on the operation.
        :type filter: str
        :param apply: Apply aggregation.
        :type apply: str
        :param orderby: Sort the result on one or more properties.
        :type orderby: str
        :param expand: Include properties inline in the response.
        :type expand: str
        :param top: Limit the result to the specified number of rows.
        :type top: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._components_summary_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            select=select,
            filter=filter,
            apply=apply,
            orderby=orderby,
            expand=expand,
            top=top,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComponentsCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def components_summary_list_with_http_info(
        self,
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        select: Annotated[Optional[StrictStr], Field(description="Properties to be returned in the response.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter to be applied on the operation.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="Apply aggregation.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Sort the result on one or more properties.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Include properties inline in the response.")] = None,
        top: Annotated[Optional[StrictStr], Field(description="Limit the result to the specified number of rows.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ComponentsCollection]:
        """Get subscription wide details of components.


        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param select: Properties to be returned in the response.
        :type select: str
        :param filter: Filter to be applied on the operation.
        :type filter: str
        :param apply: Apply aggregation.
        :type apply: str
        :param orderby: Sort the result on one or more properties.
        :type orderby: str
        :param expand: Include properties inline in the response.
        :type expand: str
        :param top: Limit the result to the specified number of rows.
        :type top: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._components_summary_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            select=select,
            filter=filter,
            apply=apply,
            orderby=orderby,
            expand=expand,
            top=top,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComponentsCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def components_summary_list_without_preload_content(
        self,
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        select: Annotated[Optional[StrictStr], Field(description="Properties to be returned in the response.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter to be applied on the operation.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="Apply aggregation.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Sort the result on one or more properties.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Include properties inline in the response.")] = None,
        top: Annotated[Optional[StrictStr], Field(description="Limit the result to the specified number of rows.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get subscription wide details of components.


        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param select: Properties to be returned in the response.
        :type select: str
        :param filter: Filter to be applied on the operation.
        :type filter: str
        :param apply: Apply aggregation.
        :type apply: str
        :param orderby: Sort the result on one or more properties.
        :type orderby: str
        :param expand: Include properties inline in the response.
        :type expand: str
        :param top: Limit the result to the specified number of rows.
        :type top: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._components_summary_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            select=select,
            filter=filter,
            apply=apply,
            orderby=orderby,
            expand=expand,
            top=top,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComponentsCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _components_summary_list_serialize(
        self,
        subscription_id,
        api_version,
        select,
        filter,
        apply,
        orderby,
        expand,
        top,
        skiptoken,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.WorkloadMonitor/componentsSummary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def monitor_instances_summary_list(
        self,
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        select: Annotated[Optional[StrictStr], Field(description="Properties to be returned in the response.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter to be applied on the operation.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="Apply aggregation.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Sort the result on one or more properties.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Include properties inline in the response.")] = None,
        top: Annotated[Optional[StrictStr], Field(description="Limit the result to the specified number of rows.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MonitorInstancesCollection:
        """Get subscription wide health instances.


        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param select: Properties to be returned in the response.
        :type select: str
        :param filter: Filter to be applied on the operation.
        :type filter: str
        :param apply: Apply aggregation.
        :type apply: str
        :param orderby: Sort the result on one or more properties.
        :type orderby: str
        :param expand: Include properties inline in the response.
        :type expand: str
        :param top: Limit the result to the specified number of rows.
        :type top: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._monitor_instances_summary_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            select=select,
            filter=filter,
            apply=apply,
            orderby=orderby,
            expand=expand,
            top=top,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MonitorInstancesCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def monitor_instances_summary_list_with_http_info(
        self,
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        select: Annotated[Optional[StrictStr], Field(description="Properties to be returned in the response.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter to be applied on the operation.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="Apply aggregation.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Sort the result on one or more properties.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Include properties inline in the response.")] = None,
        top: Annotated[Optional[StrictStr], Field(description="Limit the result to the specified number of rows.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MonitorInstancesCollection]:
        """Get subscription wide health instances.


        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param select: Properties to be returned in the response.
        :type select: str
        :param filter: Filter to be applied on the operation.
        :type filter: str
        :param apply: Apply aggregation.
        :type apply: str
        :param orderby: Sort the result on one or more properties.
        :type orderby: str
        :param expand: Include properties inline in the response.
        :type expand: str
        :param top: Limit the result to the specified number of rows.
        :type top: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._monitor_instances_summary_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            select=select,
            filter=filter,
            apply=apply,
            orderby=orderby,
            expand=expand,
            top=top,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MonitorInstancesCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def monitor_instances_summary_list_without_preload_content(
        self,
        subscription_id: Annotated[str, Field(min_length=1, strict=True, description="The ID of the target subscription.")],
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        select: Annotated[Optional[StrictStr], Field(description="Properties to be returned in the response.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter to be applied on the operation.")] = None,
        apply: Annotated[Optional[StrictStr], Field(description="Apply aggregation.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="Sort the result on one or more properties.")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Include properties inline in the response.")] = None,
        top: Annotated[Optional[StrictStr], Field(description="Limit the result to the specified number of rows.")] = None,
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get subscription wide health instances.


        :param subscription_id: The ID of the target subscription. (required)
        :type subscription_id: str
        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param select: Properties to be returned in the response.
        :type select: str
        :param filter: Filter to be applied on the operation.
        :type filter: str
        :param apply: Apply aggregation.
        :type apply: str
        :param orderby: Sort the result on one or more properties.
        :type orderby: str
        :param expand: Include properties inline in the response.
        :type expand: str
        :param top: Limit the result to the specified number of rows.
        :type top: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._monitor_instances_summary_list_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            select=select,
            filter=filter,
            apply=apply,
            orderby=orderby,
            expand=expand,
            top=top,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MonitorInstancesCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _monitor_instances_summary_list_serialize(
        self,
        subscription_id,
        api_version,
        select,
        filter,
        apply,
        orderby,
        expand,
        top,
        skiptoken,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if select is not None:
            
            _query_params.append(('$select', select))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if apply is not None:
            
            _query_params.append(('$apply', apply))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.WorkloadMonitor/monitorInstancesSummary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_list(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationListResult:
        """Gets the details of all operations possible on the resource provider.


        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationListResult]:
        """Gets the details of all operations possible on the resource provider.


        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="The API version to use for this operation.")],
        skiptoken: Annotated[Optional[StrictStr], Field(description="The page-continuation token to use with a paged version of this API.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the details of all operations possible on the resource provider.


        :param api_version: The API version to use for this operation. (required)
        :type api_version: str
        :param skiptoken: The page-continuation token to use with a paged version of this API.
        :type skiptoken: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            skiptoken=skiptoken,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_list_serialize(
        self,
        api_version,
        skiptoken,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if skiptoken is not None:
            
            _query_params.append(('$skiptoken', skiptoken))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.WorkloadMonitor/operations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Workload Monitor

    APIs for workload monitoring

    The version of the OpenAPI document: 2018-08-31-preview
    Contact: wlmengg@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.monitor_instances_collection import MonitorInstancesCollection

class TestMonitorInstancesCollection(unittest.TestCase):
    """MonitorInstancesCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MonitorInstancesCollection:
        """Test MonitorInstancesCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MonitorInstancesCollection`
        """
        model = MonitorInstancesCollection()
        if include_optional:
            return MonitorInstancesCollection(
                next_link = '',
                value = [
                    openapi_client.models.monitor_instance.MonitorInstance(
                        etag = '', 
                        properties = openapi_client.models.monitor_instance_properties.MonitorInstanceProperties(
                            aggregate_properties = {
                                'key' : ''
                                }, 
                            alert_generation = 'Enabled', 
                            children = [
                                openapi_client.models.monitor_instance.MonitorInstance(
                                    etag = '', )
                                ], 
                            component_id = '', 
                            component_name = '', 
                            component_type_id = '', 
                            component_type_name = '', 
                            health_state = 'Error', 
                            health_state_category = 'Identity', 
                            health_state_changes = [
                                openapi_client.models.health_state_change.HealthStateChange(
                                    health_state = 'Error', 
                                    health_state_change_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            health_state_changes_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            health_state_changes_start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_health_state_change_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            monitor_category = 'AvailabilityHealth', 
                            monitor_id = '', 
                            monitor_name = '', 
                            monitor_type = 'Aggregate', 
                            solution_id = '', 
                            workload_type = 'BaseOS', 
                            workspace_id = '', ), )
                    ]
            )
        else:
            return MonitorInstancesCollection(
        )
        """

    def testMonitorInstancesCollection(self):
        """Test MonitorInstancesCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

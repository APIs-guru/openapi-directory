# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.

    The version of the OpenAPI document: 2016-04-02
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_string_caching_behavior import QueryStringCachingBehavior
from typing import Optional, Set
from typing_extensions import Self

class EndpointPropertiesUpdateParameters(BaseModel):
    """
    EndpointPropertiesUpdateParameters
    """ # noqa: E501
    content_types_to_compress: Optional[List[StrictStr]] = Field(default=None, description="List of content types on which compression will be applied. The value for the elements should be a valid MIME type.", alias="contentTypesToCompress")
    is_compression_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether content compression is enabled. Default value is false. If compression is enabled, the content transferred from the CDN endpoint to the end user will be compressed. The requested content must be larger than 1 byte and smaller than 1 MB.", alias="isCompressionEnabled")
    is_http_allowed: Optional[StrictBool] = Field(default=None, description="Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.", alias="isHttpAllowed")
    is_https_allowed: Optional[StrictBool] = Field(default=None, description="Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.", alias="isHttpsAllowed")
    origin_host_header: Optional[StrictStr] = Field(default=None, description="The host header the CDN provider will send along with content requests to origins. The default value is the host name of the origin.", alias="originHostHeader")
    origin_path: Optional[StrictStr] = Field(default=None, description="The path used for origin requests.", alias="originPath")
    query_string_caching_behavior: Optional[QueryStringCachingBehavior] = Field(default=None, alias="queryStringCachingBehavior")
    __properties: ClassVar[List[str]] = ["contentTypesToCompress", "isCompressionEnabled", "isHttpAllowed", "isHttpsAllowed", "originHostHeader", "originPath", "queryStringCachingBehavior"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointPropertiesUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointPropertiesUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentTypesToCompress": obj.get("contentTypesToCompress"),
            "isCompressionEnabled": obj.get("isCompressionEnabled"),
            "isHttpAllowed": obj.get("isHttpAllowed"),
            "isHttpsAllowed": obj.get("isHttpsAllowed"),
            "originHostHeader": obj.get("originHostHeader"),
            "originPath": obj.get("originPath"),
            "queryStringCachingBehavior": obj.get("queryStringCachingBehavior")
        })
        return _obj



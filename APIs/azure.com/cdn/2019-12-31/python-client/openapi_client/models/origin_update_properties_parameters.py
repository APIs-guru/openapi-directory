# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-12-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OriginUpdatePropertiesParameters(BaseModel):
    """
    The JSON object that contains the properties of the origin.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Origin is enabled for load balancing or not")
    host_name: Optional[StrictStr] = Field(default=None, description="The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint.", alias="hostName")
    http_port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="The value of the HTTP port. Must be between 1 and 65535.", alias="httpPort")
    https_port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="The value of the HTTPS port. Must be between 1 and 65535.", alias="httpsPort")
    origin_host_header: Optional[StrictStr] = Field(default=None, description="The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint", alias="originHostHeader")
    priority: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = Field(default=None, description="Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5")
    weight: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = Field(default=None, description="Weight of the origin in given origin group for load balancing. Must be between 1 and 1000")
    __properties: ClassVar[List[str]] = ["enabled", "hostName", "httpPort", "httpsPort", "originHostHeader", "priority", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OriginUpdatePropertiesParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OriginUpdatePropertiesParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "hostName": obj.get("hostName"),
            "httpPort": obj.get("httpPort"),
            "httpsPort": obj.get("httpsPort"),
            "originHostHeader": obj.get("originHostHeader"),
            "priority": obj.get("priority"),
            "weight": obj.get("weight")
        })
        return _obj



# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-12-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HealthProbeParameters(BaseModel):
    """
    The JSON object that contains the properties to send health probes to origin.
    """ # noqa: E501
    probe_interval_in_seconds: Optional[Annotated[int, Field(le=255, strict=True, ge=1)]] = Field(default=None, description="The number of seconds between health probes.Default is 240sec.", alias="probeIntervalInSeconds")
    probe_path: Optional[StrictStr] = Field(default=None, description="The path relative to the origin that is used to determine the health of the origin.", alias="probePath")
    probe_protocol: Optional[StrictStr] = Field(default=None, description="Protocol to use for health probe.", alias="probeProtocol")
    probe_request_type: Optional[StrictStr] = Field(default=None, description="The type of health probe request that is made.", alias="probeRequestType")
    __properties: ClassVar[List[str]] = ["probeIntervalInSeconds", "probePath", "probeProtocol", "probeRequestType"]

    @field_validator('probe_protocol')
    def probe_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Http', 'Https']):
            raise ValueError("must be one of enum values ('NotSet', 'Http', 'Https')")
        return value

    @field_validator('probe_request_type')
    def probe_request_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'GET', 'HEAD']):
            raise ValueError("must be one of enum values ('NotSet', 'GET', 'HEAD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthProbeParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthProbeParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "probeIntervalInSeconds": obj.get("probeIntervalInSeconds"),
            "probePath": obj.get("probePath"),
            "probeProtocol": obj.get("probeProtocol"),
            "probeRequestType": obj.get("probeRequestType")
        })
        return _obj



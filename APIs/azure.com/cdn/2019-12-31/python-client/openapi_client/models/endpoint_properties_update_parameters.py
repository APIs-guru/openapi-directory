# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-12-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.endpoint_properties_update_parameters_delivery_policy import EndpointPropertiesUpdateParametersDeliveryPolicy
from openapi_client.models.geo_filter import GeoFilter
from openapi_client.models.optimization_type import OptimizationType
from openapi_client.models.query_string_caching_behavior import QueryStringCachingBehavior
from openapi_client.models.resource_reference import ResourceReference
from typing import Optional, Set
from typing_extensions import Self

class EndpointPropertiesUpdateParameters(BaseModel):
    """
    The JSON object containing endpoint update parameters.
    """ # noqa: E501
    content_types_to_compress: Optional[List[StrictStr]] = Field(default=None, description="List of content types on which compression applies. The value should be a valid MIME type.", alias="contentTypesToCompress")
    default_origin_group: Optional[ResourceReference] = Field(default=None, alias="defaultOriginGroup")
    delivery_policy: Optional[EndpointPropertiesUpdateParametersDeliveryPolicy] = Field(default=None, alias="deliveryPolicy")
    geo_filters: Optional[List[GeoFilter]] = Field(default=None, description="List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/", alias="geoFilters")
    is_compression_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.", alias="isCompressionEnabled")
    is_http_allowed: Optional[StrictBool] = Field(default=None, description="Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.", alias="isHttpAllowed")
    is_https_allowed: Optional[StrictBool] = Field(default=None, description="Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.", alias="isHttpsAllowed")
    optimization_type: Optional[OptimizationType] = Field(default=None, alias="optimizationType")
    origin_host_header: Optional[StrictStr] = Field(default=None, description="The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.", alias="originHostHeader")
    origin_path: Optional[StrictStr] = Field(default=None, description="A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.", alias="originPath")
    probe_path: Optional[StrictStr] = Field(default=None, description="Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.", alias="probePath")
    query_string_caching_behavior: Optional[QueryStringCachingBehavior] = Field(default=None, alias="queryStringCachingBehavior")
    __properties: ClassVar[List[str]] = ["contentTypesToCompress", "defaultOriginGroup", "deliveryPolicy", "geoFilters", "isCompressionEnabled", "isHttpAllowed", "isHttpsAllowed", "optimizationType", "originHostHeader", "originPath", "probePath", "queryStringCachingBehavior"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointPropertiesUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_origin_group
        if self.default_origin_group:
            _dict['defaultOriginGroup'] = self.default_origin_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_policy
        if self.delivery_policy:
            _dict['deliveryPolicy'] = self.delivery_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in geo_filters (list)
        _items = []
        if self.geo_filters:
            for _item_geo_filters in self.geo_filters:
                if _item_geo_filters:
                    _items.append(_item_geo_filters.to_dict())
            _dict['geoFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointPropertiesUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentTypesToCompress": obj.get("contentTypesToCompress"),
            "defaultOriginGroup": ResourceReference.from_dict(obj["defaultOriginGroup"]) if obj.get("defaultOriginGroup") is not None else None,
            "deliveryPolicy": EndpointPropertiesUpdateParametersDeliveryPolicy.from_dict(obj["deliveryPolicy"]) if obj.get("deliveryPolicy") is not None else None,
            "geoFilters": [GeoFilter.from_dict(_item) for _item in obj["geoFilters"]] if obj.get("geoFilters") is not None else None,
            "isCompressionEnabled": obj.get("isCompressionEnabled"),
            "isHttpAllowed": obj.get("isHttpAllowed"),
            "isHttpsAllowed": obj.get("isHttpsAllowed"),
            "optimizationType": obj.get("optimizationType"),
            "originHostHeader": obj.get("originHostHeader"),
            "originPath": obj.get("originPath"),
            "probePath": obj.get("probePath"),
            "queryStringCachingBehavior": obj.get("queryStringCachingBehavior")
        })
        return _obj



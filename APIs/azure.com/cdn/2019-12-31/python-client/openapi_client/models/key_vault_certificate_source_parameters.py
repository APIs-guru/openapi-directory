# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-12-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class KeyVaultCertificateSourceParameters(BaseModel):
    """
    Describes the parameters for using a user's KeyVault certificate for securing custom domain.
    """ # noqa: E501
    odata_type: StrictStr = Field(alias="@odata.type")
    delete_rule: StrictStr = Field(description="Describes the action that shall be taken when the certificate is removed from Key Vault.", alias="deleteRule")
    resource_group_name: StrictStr = Field(description="Resource group of the user's Key Vault containing the SSL certificate", alias="resourceGroupName")
    secret_name: StrictStr = Field(description="The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.", alias="secretName")
    secret_version: StrictStr = Field(description="The version(GUID) of Key Vault Secret in Key Vault.", alias="secretVersion")
    subscription_id: StrictStr = Field(description="Subscription Id of the user's Key Vault containing the SSL certificate", alias="subscriptionId")
    update_rule: StrictStr = Field(description="Describes the action that shall be taken when the certificate is updated in Key Vault.", alias="updateRule")
    vault_name: StrictStr = Field(description="The name of the user's Key Vault containing the SSL certificate", alias="vaultName")
    __properties: ClassVar[List[str]] = ["@odata.type", "deleteRule", "resourceGroupName", "secretName", "secretVersion", "subscriptionId", "updateRule", "vaultName"]

    @field_validator('odata_type')
    def odata_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters']):
            raise ValueError("must be one of enum values ('#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters')")
        return value

    @field_validator('delete_rule')
    def delete_rule_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NoAction']):
            raise ValueError("must be one of enum values ('NoAction')")
        return value

    @field_validator('update_rule')
    def update_rule_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NoAction']):
            raise ValueError("must be one of enum values ('NoAction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyVaultCertificateSourceParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyVaultCertificateSourceParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.type": obj.get("@odata.type"),
            "deleteRule": obj.get("deleteRule"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "secretName": obj.get("secretName"),
            "secretVersion": obj.get("secretVersion"),
            "subscriptionId": obj.get("subscriptionId"),
            "updateRule": obj.get("updateRule"),
            "vaultName": obj.get("vaultName")
        })
        return _obj



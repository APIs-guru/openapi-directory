# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-12-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.http_error_range_parameters import HttpErrorRangeParameters
from typing import Optional, Set
from typing_extensions import Self

class ResponseBasedOriginErrorDetectionParameters(BaseModel):
    """
    The JSON object that contains the properties to determine origin health using real requests/responses.
    """ # noqa: E501
    http_error_ranges: Optional[List[HttpErrorRangeParameters]] = Field(default=None, description="The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy.", alias="httpErrorRanges")
    response_based_detected_error_types: Optional[StrictStr] = Field(default=None, description="Type of response errors for real user requests for which origin will be deemed unhealthy", alias="responseBasedDetectedErrorTypes")
    response_based_failover_threshold_percentage: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="The percentage of failed requests in the sample where failover should trigger.", alias="responseBasedFailoverThresholdPercentage")
    __properties: ClassVar[List[str]] = ["httpErrorRanges", "responseBasedDetectedErrorTypes", "responseBasedFailoverThresholdPercentage"]

    @field_validator('response_based_detected_error_types')
    def response_based_detected_error_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'TcpErrorsOnly', 'TcpAndHttpErrors']):
            raise ValueError("must be one of enum values ('None', 'TcpErrorsOnly', 'TcpAndHttpErrors')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseBasedOriginErrorDetectionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in http_error_ranges (list)
        _items = []
        if self.http_error_ranges:
            for _item_http_error_ranges in self.http_error_ranges:
                if _item_http_error_ranges:
                    _items.append(_item_http_error_ranges.to_dict())
            _dict['httpErrorRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseBasedOriginErrorDetectionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "httpErrorRanges": [HttpErrorRangeParameters.from_dict(_item) for _item in obj["httpErrorRanges"]] if obj.get("httpErrorRanges") is not None else None,
            "responseBasedDetectedErrorTypes": obj.get("responseBasedDetectedErrorTypes"),
            "responseBasedFailoverThresholdPercentage": obj.get("responseBasedFailoverThresholdPercentage")
        })
        return _obj



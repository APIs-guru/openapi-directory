# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2017-10-12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class UrlPathConditionParameters(BaseModel):
    """
    Defines the parameters for the URL path condition.
    """ # noqa: E501
    odata_type: StrictStr = Field(alias="@odata.type")
    match_type: StrictStr = Field(description="The match type for the condition of the delivery rule", alias="matchType")
    path: StrictStr = Field(description="A URL path for the condition of the delivery rule")
    __properties: ClassVar[List[str]] = ["@odata.type", "matchType", "path"]

    @field_validator('odata_type')
    def odata_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Microsoft.Azure.Cdn.Models.DeliveryRuleUrlPathConditionParameters']):
            raise ValueError("must be one of enum values ('Microsoft.Azure.Cdn.Models.DeliveryRuleUrlPathConditionParameters')")
        return value

    @field_validator('match_type')
    def match_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Literal', 'Wildcard']):
            raise ValueError("must be one of enum values ('Literal', 'Wildcard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UrlPathConditionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UrlPathConditionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.type": obj.get("@odata.type"),
            "matchType": obj.get("matchType"),
            "path": obj.get("path")
        })
        return _obj



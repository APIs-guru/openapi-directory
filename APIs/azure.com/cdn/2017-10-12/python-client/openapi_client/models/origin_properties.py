# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2017-10-12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OriginProperties(BaseModel):
    """
    The JSON object that contains the properties of the origin.
    """ # noqa: E501
    host_name: StrictStr = Field(description="The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.", alias="hostName")
    http_port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="The value of the HTTP port. Must be between 1 and 65535.", alias="httpPort")
    https_port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, description="The value of the https port. Must be between 1 and 65535.", alias="httpsPort")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning status of the origin.", alias="provisioningState")
    resource_state: Optional[StrictStr] = Field(default=None, description="Resource status of the origin.", alias="resourceState")
    __properties: ClassVar[List[str]] = ["hostName", "httpPort", "httpsPort", "provisioningState", "resourceState"]

    @field_validator('resource_state')
    def resource_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Active', 'Deleting']):
            raise ValueError("must be one of enum values ('Creating', 'Active', 'Deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OriginProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
            "resource_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OriginProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostName": obj.get("hostName"),
            "httpPort": obj.get("httpPort"),
            "httpsPort": obj.get("httpsPort"),
            "provisioningState": obj.get("provisioningState"),
            "resourceState": obj.get("resourceState")
        })
        return _obj



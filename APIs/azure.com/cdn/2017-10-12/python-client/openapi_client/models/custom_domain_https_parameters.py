# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2017-10-12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.cdn_managed_https_parameters import CdnManagedHttpsParameters
    from openapi_client.models.user_managed_https_parameters import UserManagedHttpsParameters

class CustomDomainHttpsParameters(BaseModel):
    """
    The JSON object that contains the properties to secure a custom domain.
    """ # noqa: E501
    certificate_source: StrictStr = Field(description="Defines the source of the SSL certificate.", alias="certificateSource")
    protocol_type: StrictStr = Field(description="Defines the TLS extension protocol that is used for secure delivery.", alias="protocolType")
    __properties: ClassVar[List[str]] = ["certificateSource", "protocolType"]

    @field_validator('certificate_source')
    def certificate_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AzureKeyVault', 'Cdn']):
            raise ValueError("must be one of enum values ('AzureKeyVault', 'Cdn')")
        return value

    @field_validator('protocol_type')
    def protocol_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ServerNameIndication', 'IPBased']):
            raise ValueError("must be one of enum values ('ServerNameIndication', 'IPBased')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'certificateSource'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'CdnManagedHttpsParameters': 'CdnManagedHttpsParameters','UserManagedHttpsParameters': 'UserManagedHttpsParameters'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[CdnManagedHttpsParameters, UserManagedHttpsParameters]]:
        """Create an instance of CustomDomainHttpsParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[CdnManagedHttpsParameters, UserManagedHttpsParameters]]:
        """Create an instance of CustomDomainHttpsParameters from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'CdnManagedHttpsParameters':
            return import_module("openapi_client.models.cdn_managed_https_parameters").CdnManagedHttpsParameters.from_dict(obj)
        if object_type ==  'UserManagedHttpsParameters':
            return import_module("openapi_client.models.user_managed_https_parameters").UserManagedHttpsParameters.from_dict(obj)

        raise ValueError("CustomDomainHttpsParameters failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-04-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CacheKeyQueryStringActionParameters(BaseModel):
    """
    Defines the parameters for the cache-key query string action.
    """ # noqa: E501
    odata_type: StrictStr = Field(alias="@odata.type")
    query_parameters: Optional[StrictStr] = Field(default=None, description="query parameters to include or exclude (comma separated).", alias="queryParameters")
    query_string_behavior: StrictStr = Field(description="Caching behavior for the requests", alias="queryStringBehavior")
    __properties: ClassVar[List[str]] = ["@odata.type", "queryParameters", "queryStringBehavior"]

    @field_validator('odata_type')
    def odata_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheKeyQueryStringBehaviorActionParameters']):
            raise ValueError("must be one of enum values ('#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheKeyQueryStringBehaviorActionParameters')")
        return value

    @field_validator('query_string_behavior')
    def query_string_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Include', 'IncludeAll', 'Exclude', 'ExcludeAll']):
            raise ValueError("must be one of enum values ('Include', 'IncludeAll', 'Exclude', 'ExcludeAll')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CacheKeyQueryStringActionParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if query_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.query_parameters is None and "query_parameters" in self.model_fields_set:
            _dict['queryParameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CacheKeyQueryStringActionParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@odata.type": obj.get("@odata.type"),
            "queryParameters": obj.get("queryParameters"),
            "queryStringBehavior": obj.get("queryStringBehavior")
        })
        return _obj



# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-04-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_domain_https_parameters import CustomDomainHttpsParameters
from typing import Optional, Set
from typing_extensions import Self

class CustomDomainProperties(BaseModel):
    """
    The JSON object that contains the properties of the custom domain to create.
    """ # noqa: E501
    custom_https_parameters: Optional[CustomDomainHttpsParameters] = Field(default=None, alias="customHttpsParameters")
    custom_https_provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning status of Custom Https of the custom domain.", alias="customHttpsProvisioningState")
    custom_https_provisioning_substate: Optional[StrictStr] = Field(default=None, description="Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.", alias="customHttpsProvisioningSubstate")
    host_name: StrictStr = Field(description="The host name of the custom domain. Must be a domain name.", alias="hostName")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning status of the custom domain.", alias="provisioningState")
    resource_state: Optional[StrictStr] = Field(default=None, description="Resource status of the custom domain.", alias="resourceState")
    validation_data: Optional[StrictStr] = Field(default=None, description="Special validation or data may be required when delivering CDN to some regions due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in China.", alias="validationData")
    __properties: ClassVar[List[str]] = ["customHttpsParameters", "customHttpsProvisioningState", "customHttpsProvisioningSubstate", "hostName", "provisioningState", "resourceState", "validationData"]

    @field_validator('custom_https_provisioning_state')
    def custom_https_provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabling', 'Enabled', 'Disabling', 'Disabled', 'Failed']):
            raise ValueError("must be one of enum values ('Enabling', 'Enabled', 'Disabling', 'Disabled', 'Failed')")
        return value

    @field_validator('custom_https_provisioning_substate')
    def custom_https_provisioning_substate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SubmittingDomainControlValidationRequest', 'PendingDomainControlValidationREquestApproval', 'DomainControlValidationRequestApproved', 'DomainControlValidationRequestRejected', 'DomainControlValidationRequestTimedOut', 'IssuingCertificate', 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate', 'CertificateDeleted']):
            raise ValueError("must be one of enum values ('SubmittingDomainControlValidationRequest', 'PendingDomainControlValidationREquestApproval', 'DomainControlValidationRequestApproved', 'DomainControlValidationRequestRejected', 'DomainControlValidationRequestTimedOut', 'IssuingCertificate', 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate', 'CertificateDeleted')")
        return value

    @field_validator('resource_state')
    def resource_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Active', 'Deleting']):
            raise ValueError("must be one of enum values ('Creating', 'Active', 'Deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomDomainProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "custom_https_provisioning_state",
            "custom_https_provisioning_substate",
            "provisioning_state",
            "resource_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_https_parameters
        if self.custom_https_parameters:
            _dict['customHttpsParameters'] = self.custom_https_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomDomainProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customHttpsParameters": CustomDomainHttpsParameters.from_dict(obj["customHttpsParameters"]) if obj.get("customHttpsParameters") is not None else None,
            "customHttpsProvisioningState": obj.get("customHttpsProvisioningState"),
            "customHttpsProvisioningSubstate": obj.get("customHttpsProvisioningSubstate"),
            "hostName": obj.get("hostName"),
            "provisioningState": obj.get("provisioningState"),
            "resourceState": obj.get("resourceState"),
            "validationData": obj.get("validationData")
        })
        return _obj



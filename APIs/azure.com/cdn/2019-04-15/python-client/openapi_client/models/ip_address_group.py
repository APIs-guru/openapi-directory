# coding: utf-8

"""
    CdnManagementClient

    Use these APIs to manage Azure CDN resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.

    The version of the OpenAPI document: 2019-04-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cidr_ip_address import CidrIpAddress
from typing import Optional, Set
from typing_extensions import Self

class IpAddressGroup(BaseModel):
    """
    CDN Ip address group
    """ # noqa: E501
    delivery_region: Optional[StrictStr] = Field(default=None, description="The delivery region of the ip address group", alias="deliveryRegion")
    ipv4_addresses: Optional[List[CidrIpAddress]] = Field(default=None, description="The list of ip v4 addresses.", alias="ipv4Addresses")
    ipv6_addresses: Optional[List[CidrIpAddress]] = Field(default=None, description="The list of ip v6 addresses.", alias="ipv6Addresses")
    __properties: ClassVar[List[str]] = ["deliveryRegion", "ipv4Addresses", "ipv6Addresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IpAddressGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ipv4_addresses (list)
        _items = []
        if self.ipv4_addresses:
            for _item_ipv4_addresses in self.ipv4_addresses:
                if _item_ipv4_addresses:
                    _items.append(_item_ipv4_addresses.to_dict())
            _dict['ipv4Addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ipv6_addresses (list)
        _items = []
        if self.ipv6_addresses:
            for _item_ipv6_addresses in self.ipv6_addresses:
                if _item_ipv6_addresses:
                    _items.append(_item_ipv6_addresses.to_dict())
            _dict['ipv6Addresses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IpAddressGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deliveryRegion": obj.get("deliveryRegion"),
            "ipv4Addresses": [CidrIpAddress.from_dict(_item) for _item in obj["ipv4Addresses"]] if obj.get("ipv4Addresses") is not None else None,
            "ipv6Addresses": [CidrIpAddress.from_dict(_item) for _item in obj["ipv6Addresses"]] if obj.get("ipv6Addresses") is not None else None
        })
        return _obj



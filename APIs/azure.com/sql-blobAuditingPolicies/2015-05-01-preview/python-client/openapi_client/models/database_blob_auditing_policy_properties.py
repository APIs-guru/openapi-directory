# coding: utf-8

"""
    SqlManagementClient

    The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.

    The version of the OpenAPI document: 2015-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatabaseBlobAuditingPolicyProperties(BaseModel):
    """
    Properties of a database blob auditing policy.
    """ # noqa: E501
    audit_actions_and_groups: Optional[List[StrictStr]] = Field(default=None, description="Specifies the Actions and Actions-Groups to audit.", alias="auditActionsAndGroups")
    is_storage_secondary_key_in_use: Optional[StrictBool] = Field(default=None, description="Specifies whether storageAccountAccessKey value is the storageâ€™s secondary key.", alias="isStorageSecondaryKeyInUse")
    retention_days: Optional[StrictInt] = Field(default=None, description="Specifies the number of days to keep in the audit logs.", alias="retentionDays")
    state: StrictStr = Field(description="Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.")
    storage_account_access_key: Optional[StrictStr] = Field(default=None, description="Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.", alias="storageAccountAccessKey")
    storage_account_subscription_id: Optional[StrictStr] = Field(default=None, description="Specifies the blob storage subscription Id.", alias="storageAccountSubscriptionId")
    storage_endpoint: Optional[StrictStr] = Field(default=None, description="Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.", alias="storageEndpoint")
    __properties: ClassVar[List[str]] = ["auditActionsAndGroups", "isStorageSecondaryKeyInUse", "retentionDays", "state", "storageAccountAccessKey", "storageAccountSubscriptionId", "storageEndpoint"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseBlobAuditingPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseBlobAuditingPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auditActionsAndGroups": obj.get("auditActionsAndGroups"),
            "isStorageSecondaryKeyInUse": obj.get("isStorageSecondaryKeyInUse"),
            "retentionDays": obj.get("retentionDays"),
            "state": obj.get("state"),
            "storageAccountAccessKey": obj.get("storageAccountAccessKey"),
            "storageAccountSubscriptionId": obj.get("storageAccountSubscriptionId"),
            "storageEndpoint": obj.get("storageEndpoint")
        })
        return _obj



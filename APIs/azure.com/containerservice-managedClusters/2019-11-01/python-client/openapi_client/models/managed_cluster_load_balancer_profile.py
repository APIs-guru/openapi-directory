# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2019-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.managed_cluster_load_balancer_profile_managed_outbound_ips import ManagedClusterLoadBalancerProfileManagedOutboundIPs
from openapi_client.models.managed_cluster_load_balancer_profile_outbound_ip_prefixes import ManagedClusterLoadBalancerProfileOutboundIPPrefixes
from openapi_client.models.managed_cluster_load_balancer_profile_outbound_ips import ManagedClusterLoadBalancerProfileOutboundIPs
from openapi_client.models.resource_reference import ResourceReference
from typing import Optional, Set
from typing_extensions import Self

class ManagedClusterLoadBalancerProfile(BaseModel):
    """
    Profile of the managed cluster load balancer.
    """ # noqa: E501
    allocated_outbound_ports: Optional[Annotated[int, Field(le=64000, strict=True, ge=0)]] = Field(default=0, description="Desired number of allocated SNAT ports per VM. Allowed values must be in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.", alias="allocatedOutboundPorts")
    effective_outbound_ips: Optional[List[ResourceReference]] = Field(default=None, description="The effective outbound IP resources of the cluster load balancer.", alias="effectiveOutboundIPs")
    idle_timeout_in_minutes: Optional[Annotated[int, Field(le=120, strict=True, ge=4)]] = Field(default=30, description="Desired outbound flow idle timeout in minutes. Allowed values must be in the range of 4 to 120 (inclusive). The default value is 30 minutes.", alias="idleTimeoutInMinutes")
    managed_outbound_ips: Optional[ManagedClusterLoadBalancerProfileManagedOutboundIPs] = Field(default=None, alias="managedOutboundIPs")
    outbound_ip_prefixes: Optional[ManagedClusterLoadBalancerProfileOutboundIPPrefixes] = Field(default=None, alias="outboundIPPrefixes")
    outbound_ips: Optional[ManagedClusterLoadBalancerProfileOutboundIPs] = Field(default=None, alias="outboundIPs")
    __properties: ClassVar[List[str]] = ["allocatedOutboundPorts", "effectiveOutboundIPs", "idleTimeoutInMinutes", "managedOutboundIPs", "outboundIPPrefixes", "outboundIPs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedClusterLoadBalancerProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in effective_outbound_ips (list)
        _items = []
        if self.effective_outbound_ips:
            for _item_effective_outbound_ips in self.effective_outbound_ips:
                if _item_effective_outbound_ips:
                    _items.append(_item_effective_outbound_ips.to_dict())
            _dict['effectiveOutboundIPs'] = _items
        # override the default output from pydantic by calling `to_dict()` of managed_outbound_ips
        if self.managed_outbound_ips:
            _dict['managedOutboundIPs'] = self.managed_outbound_ips.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outbound_ip_prefixes
        if self.outbound_ip_prefixes:
            _dict['outboundIPPrefixes'] = self.outbound_ip_prefixes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outbound_ips
        if self.outbound_ips:
            _dict['outboundIPs'] = self.outbound_ips.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedClusterLoadBalancerProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocatedOutboundPorts": obj.get("allocatedOutboundPorts") if obj.get("allocatedOutboundPorts") is not None else 0,
            "effectiveOutboundIPs": [ResourceReference.from_dict(_item) for _item in obj["effectiveOutboundIPs"]] if obj.get("effectiveOutboundIPs") is not None else None,
            "idleTimeoutInMinutes": obj.get("idleTimeoutInMinutes") if obj.get("idleTimeoutInMinutes") is not None else 30,
            "managedOutboundIPs": ManagedClusterLoadBalancerProfileManagedOutboundIPs.from_dict(obj["managedOutboundIPs"]) if obj.get("managedOutboundIPs") is not None else None,
            "outboundIPPrefixes": ManagedClusterLoadBalancerProfileOutboundIPPrefixes.from_dict(obj["outboundIPPrefixes"]) if obj.get("outboundIPPrefixes") is not None else None,
            "outboundIPs": ManagedClusterLoadBalancerProfileOutboundIPs.from_dict(obj["outboundIPs"]) if obj.get("outboundIPs") is not None else None
        })
        return _obj



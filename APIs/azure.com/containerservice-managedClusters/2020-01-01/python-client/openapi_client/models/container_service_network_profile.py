# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2020-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.managed_cluster_load_balancer_profile import ManagedClusterLoadBalancerProfile
from typing import Optional, Set
from typing_extensions import Self

class ContainerServiceNetworkProfile(BaseModel):
    """
    Profile of network configuration.
    """ # noqa: E501
    dns_service_ip: Optional[Annotated[str, Field(strict=True)]] = Field(default='10.0.0.10', description="An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.", alias="dnsServiceIP")
    docker_bridge_cidr: Optional[Annotated[str, Field(strict=True)]] = Field(default='172.17.0.1/16', description="A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.", alias="dockerBridgeCidr")
    load_balancer_profile: Optional[ManagedClusterLoadBalancerProfile] = Field(default=None, alias="loadBalancerProfile")
    load_balancer_sku: Optional[StrictStr] = Field(default=None, description="The load balancer sku for the managed cluster.", alias="loadBalancerSku")
    network_plugin: Optional[StrictStr] = Field(default='kubenet', description="Network plugin used for building Kubernetes network.", alias="networkPlugin")
    network_policy: Optional[StrictStr] = Field(default=None, description="Network policy used for building Kubernetes network.", alias="networkPolicy")
    outbound_type: Optional[StrictStr] = Field(default='loadBalancer', description="The outbound (egress) routing method.", alias="outboundType")
    pod_cidr: Optional[Annotated[str, Field(strict=True)]] = Field(default='10.244.0.0/16', description="A CIDR notation IP range from which to assign pod IPs when kubenet is used.", alias="podCidr")
    service_cidr: Optional[Annotated[str, Field(strict=True)]] = Field(default='10.0.0.0/16', description="A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.", alias="serviceCidr")
    __properties: ClassVar[List[str]] = ["dnsServiceIP", "dockerBridgeCidr", "loadBalancerProfile", "loadBalancerSku", "networkPlugin", "networkPolicy", "outboundType", "podCidr", "serviceCidr"]

    @field_validator('dns_service_ip')
    def dns_service_ip_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", value):
            raise ValueError(r"must validate the regular expression /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/")
        return value

    @field_validator('docker_bridge_cidr')
    def docker_bridge_cidr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/")
        return value

    @field_validator('load_balancer_sku')
    def load_balancer_sku_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['standard', 'basic']):
            raise ValueError("must be one of enum values ('standard', 'basic')")
        return value

    @field_validator('network_plugin')
    def network_plugin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['azure', 'kubenet']):
            raise ValueError("must be one of enum values ('azure', 'kubenet')")
        return value

    @field_validator('network_policy')
    def network_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['calico', 'azure']):
            raise ValueError("must be one of enum values ('calico', 'azure')")
        return value

    @field_validator('outbound_type')
    def outbound_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['loadBalancer', 'userDefinedRouting']):
            raise ValueError("must be one of enum values ('loadBalancer', 'userDefinedRouting')")
        return value

    @field_validator('pod_cidr')
    def pod_cidr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/")
        return value

    @field_validator('service_cidr')
    def service_cidr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerServiceNetworkProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of load_balancer_profile
        if self.load_balancer_profile:
            _dict['loadBalancerProfile'] = self.load_balancer_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerServiceNetworkProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsServiceIP": obj.get("dnsServiceIP") if obj.get("dnsServiceIP") is not None else '10.0.0.10',
            "dockerBridgeCidr": obj.get("dockerBridgeCidr") if obj.get("dockerBridgeCidr") is not None else '172.17.0.1/16',
            "loadBalancerProfile": ManagedClusterLoadBalancerProfile.from_dict(obj["loadBalancerProfile"]) if obj.get("loadBalancerProfile") is not None else None,
            "loadBalancerSku": obj.get("loadBalancerSku"),
            "networkPlugin": obj.get("networkPlugin") if obj.get("networkPlugin") is not None else 'kubenet',
            "networkPolicy": obj.get("networkPolicy"),
            "outboundType": obj.get("outboundType") if obj.get("outboundType") is not None else 'loadBalancer',
            "podCidr": obj.get("podCidr") if obj.get("podCidr") is not None else '10.244.0.0/16',
            "serviceCidr": obj.get("serviceCidr") if obj.get("serviceCidr") is not None else '10.0.0.0/16'
        })
        return _obj



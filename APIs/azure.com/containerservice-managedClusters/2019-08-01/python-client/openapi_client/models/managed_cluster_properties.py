# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_service_linux_profile import ContainerServiceLinuxProfile
from openapi_client.models.container_service_network_profile import ContainerServiceNetworkProfile
from openapi_client.models.managed_cluster_aad_profile import ManagedClusterAADProfile
from openapi_client.models.managed_cluster_agent_pool_profile import ManagedClusterAgentPoolProfile
from openapi_client.models.managed_cluster_api_server_access_profile import ManagedClusterAPIServerAccessProfile
from openapi_client.models.managed_cluster_service_principal_profile import ManagedClusterServicePrincipalProfile
from openapi_client.models.managed_cluster_windows_profile import ManagedClusterWindowsProfile
from typing import Optional, Set
from typing_extensions import Self

class ManagedClusterProperties(BaseModel):
    """
    Properties of the managed cluster.
    """ # noqa: E501
    aad_profile: Optional[ManagedClusterAADProfile] = Field(default=None, alias="aadProfile")
    addon_profiles: Optional[Dict[str, Any]] = Field(default=None, description="Profile of managed cluster add-on.", alias="addonProfiles")
    agent_pool_profiles: Optional[List[ManagedClusterAgentPoolProfile]] = Field(default=None, description="Properties of the agent pool.", alias="agentPoolProfiles")
    api_server_access_profile: Optional[ManagedClusterAPIServerAccessProfile] = Field(default=None, alias="apiServerAccessProfile")
    dns_prefix: Optional[StrictStr] = Field(default=None, description="DNS prefix specified when creating the managed cluster.", alias="dnsPrefix")
    enable_pod_security_policy: Optional[StrictBool] = Field(default=None, description="(PREVIEW) Whether to enable Kubernetes Pod security policy.", alias="enablePodSecurityPolicy")
    enable_rbac: Optional[StrictBool] = Field(default=None, description="Whether to enable Kubernetes Role-Based Access Control.", alias="enableRBAC")
    fqdn: Optional[StrictStr] = Field(default=None, description="FQDN for the master pool.")
    kubernetes_version: Optional[StrictStr] = Field(default=None, description="Version of Kubernetes specified when creating the managed cluster.", alias="kubernetesVersion")
    linux_profile: Optional[ContainerServiceLinuxProfile] = Field(default=None, alias="linuxProfile")
    max_agent_pools: Optional[StrictInt] = Field(default=None, description="The max number of agent pools for the managed cluster.", alias="maxAgentPools")
    network_profile: Optional[ContainerServiceNetworkProfile] = Field(default=None, alias="networkProfile")
    node_resource_group: Optional[StrictStr] = Field(default=None, description="Name of the resource group containing agent pool nodes.", alias="nodeResourceGroup")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The current deployment or provisioning state, which only appears in the response.", alias="provisioningState")
    service_principal_profile: Optional[ManagedClusterServicePrincipalProfile] = Field(default=None, alias="servicePrincipalProfile")
    windows_profile: Optional[ManagedClusterWindowsProfile] = Field(default=None, alias="windowsProfile")
    __properties: ClassVar[List[str]] = ["aadProfile", "addonProfiles", "agentPoolProfiles", "apiServerAccessProfile", "dnsPrefix", "enablePodSecurityPolicy", "enableRBAC", "fqdn", "kubernetesVersion", "linuxProfile", "maxAgentPools", "networkProfile", "nodeResourceGroup", "provisioningState", "servicePrincipalProfile", "windowsProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "fqdn",
            "max_agent_pools",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aad_profile
        if self.aad_profile:
            _dict['aadProfile'] = self.aad_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in agent_pool_profiles (list)
        _items = []
        if self.agent_pool_profiles:
            for _item_agent_pool_profiles in self.agent_pool_profiles:
                if _item_agent_pool_profiles:
                    _items.append(_item_agent_pool_profiles.to_dict())
            _dict['agentPoolProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of api_server_access_profile
        if self.api_server_access_profile:
            _dict['apiServerAccessProfile'] = self.api_server_access_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linux_profile
        if self.linux_profile:
            _dict['linuxProfile'] = self.linux_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_profile
        if self.network_profile:
            _dict['networkProfile'] = self.network_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_principal_profile
        if self.service_principal_profile:
            _dict['servicePrincipalProfile'] = self.service_principal_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_profile
        if self.windows_profile:
            _dict['windowsProfile'] = self.windows_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aadProfile": ManagedClusterAADProfile.from_dict(obj["aadProfile"]) if obj.get("aadProfile") is not None else None,
            "addonProfiles": obj.get("addonProfiles"),
            "agentPoolProfiles": [ManagedClusterAgentPoolProfile.from_dict(_item) for _item in obj["agentPoolProfiles"]] if obj.get("agentPoolProfiles") is not None else None,
            "apiServerAccessProfile": ManagedClusterAPIServerAccessProfile.from_dict(obj["apiServerAccessProfile"]) if obj.get("apiServerAccessProfile") is not None else None,
            "dnsPrefix": obj.get("dnsPrefix"),
            "enablePodSecurityPolicy": obj.get("enablePodSecurityPolicy"),
            "enableRBAC": obj.get("enableRBAC"),
            "fqdn": obj.get("fqdn"),
            "kubernetesVersion": obj.get("kubernetesVersion"),
            "linuxProfile": ContainerServiceLinuxProfile.from_dict(obj["linuxProfile"]) if obj.get("linuxProfile") is not None else None,
            "maxAgentPools": obj.get("maxAgentPools"),
            "networkProfile": ContainerServiceNetworkProfile.from_dict(obj["networkProfile"]) if obj.get("networkProfile") is not None else None,
            "nodeResourceGroup": obj.get("nodeResourceGroup"),
            "provisioningState": obj.get("provisioningState"),
            "servicePrincipalProfile": ManagedClusterServicePrincipalProfile.from_dict(obj["servicePrincipalProfile"]) if obj.get("servicePrincipalProfile") is not None else None,
            "windowsProfile": ManagedClusterWindowsProfile.from_dict(obj["windowsProfile"]) if obj.get("windowsProfile") is not None else None
        })
        return _obj



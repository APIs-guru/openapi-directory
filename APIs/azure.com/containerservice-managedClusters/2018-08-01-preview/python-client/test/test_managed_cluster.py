# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2018-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.managed_cluster import ManagedCluster

class TestManagedCluster(unittest.TestCase):
    """ManagedCluster unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagedCluster:
        """Test ManagedCluster
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagedCluster`
        """
        model = ManagedCluster()
        if include_optional:
            return ManagedCluster(
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = '',
                properties = openapi_client.models.managed_cluster_properties.ManagedClusterProperties(
                    aad_profile = openapi_client.models.managed_cluster_aad_profile.ManagedClusterAADProfile(
                        client_app_id = '', 
                        server_app_id = '', 
                        server_app_secret = '', 
                        tenant_id = '', ), 
                    addon_profiles = openapi_client.models.addon_profiles.addonProfiles(), 
                    agent_pool_profiles = [
                        openapi_client.models.managed_cluster_agent_pool_profile.ManagedClusterAgentPoolProfile(
                            count = 1, 
                            enable_auto_scaling = True, 
                            max_count = 56, 
                            max_pods = 56, 
                            min_count = 56, 
                            name = '', 
                            os_disk_size_gb = 0, 
                            os_type = 'Linux', 
                            type = 'VirtualMachineScaleSets', 
                            vm_size = 'Standard_A1', 
                            vnet_subnet_id = '', )
                        ], 
                    dns_prefix = '', 
                    enable_rbac = True, 
                    fqdn = '', 
                    kubernetes_version = '', 
                    linux_profile = openapi_client.models.container_service_linux_profile.ContainerServiceLinuxProfile(
                        admin_username = 'ABAMDTMv2D2ylmgd10Z3UB6UkJSIS', 
                        ssh = openapi_client.models.container_service_ssh_configuration.ContainerServiceSshConfiguration(
                            public_keys = [
                                openapi_client.models.container_service_ssh_public_key.ContainerServiceSshPublicKey(
                                    key_data = '', )
                                ], ), ), 
                    network_profile = openapi_client.models.container_service_network_profile.ContainerServiceNetworkProfile(
                        dns_service_ip = '10.0.0.10', 
                        docker_bridge_cidr = '172.17.0.1/16', 
                        network_plugin = 'kubenet', 
                        network_policy = 'calico', 
                        pod_cidr = '10.244.0.0/16', 
                        service_cidr = '10.0.0.0/16', ), 
                    node_resource_group = '', 
                    provisioning_state = '', 
                    service_principal_profile = openapi_client.models.managed_cluster_service_principal_profile.ManagedClusterServicePrincipalProfile(
                        client_id = '', 
                        secret = '', ), )
            )
        else:
            return ManagedCluster(
                location = '',
        )
        """

    def testManagedCluster(self):
        """Test ManagedCluster"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ContainerServiceClient

    The Container Service Client.

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.container_service_storage_profile import ContainerServiceStorageProfile
from openapi_client.models.container_service_vm_size import ContainerServiceVMSize
from typing import Optional, Set
from typing_extensions import Self

class ContainerServiceMasterProfile(BaseModel):
    """
    Profile for the container service master.
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=1, description="Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.")
    dns_prefix: StrictStr = Field(description="DNS prefix to be used to create the FQDN for the master pool.", alias="dnsPrefix")
    first_consecutive_static_ip: Optional[StrictStr] = Field(default='10.240.255.5', description="FirstConsecutiveStaticIP used to specify the first static ip of masters.", alias="firstConsecutiveStaticIP")
    fqdn: Optional[StrictStr] = Field(default=None, description="FQDN for the master pool.")
    os_disk_size_gb: Optional[Annotated[int, Field(le=1023, strict=True, ge=0)]] = Field(default=None, description="OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.", alias="osDiskSizeGB")
    storage_profile: Optional[ContainerServiceStorageProfile] = Field(default=None, alias="storageProfile")
    vm_size: ContainerServiceVMSize = Field(alias="vmSize")
    vnet_subnet_id: Optional[StrictStr] = Field(default=None, description="VNet SubnetID specifies the VNet's subnet identifier.", alias="vnetSubnetID")
    __properties: ClassVar[List[str]] = ["count", "dnsPrefix", "firstConsecutiveStaticIP", "fqdn", "osDiskSizeGB", "storageProfile", "vmSize", "vnetSubnetID"]

    @field_validator('count')
    def count_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 3, 5]):
            raise ValueError("must be one of enum values (1, 3, 5)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerServiceMasterProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "fqdn",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerServiceMasterProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count") if obj.get("count") is not None else 1,
            "dnsPrefix": obj.get("dnsPrefix"),
            "firstConsecutiveStaticIP": obj.get("firstConsecutiveStaticIP") if obj.get("firstConsecutiveStaticIP") is not None else '10.240.255.5',
            "fqdn": obj.get("fqdn"),
            "osDiskSizeGB": obj.get("osDiskSizeGB"),
            "storageProfile": obj.get("storageProfile"),
            "vmSize": obj.get("vmSize"),
            "vnetSubnetID": obj.get("vnetSubnetID")
        })
        return _obj



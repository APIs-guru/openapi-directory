# coding: utf-8

"""
    AppServicePlans API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_service_plans_get200_response import AppServicePlansGet200Response

class TestAppServicePlansGet200Response(unittest.TestCase):
    """AppServicePlansGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppServicePlansGet200Response:
        """Test AppServicePlansGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppServicePlansGet200Response`
        """
        model = AppServicePlansGet200Response()
        if include_optional:
            return AppServicePlansGet200Response(
                properties = openapi_client.models.app_service_plans_list_200_response_value_inner_properties.AppServicePlans_List_200_response_value_inner_properties(
                    free_offer_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    geo_region = '', 
                    hosting_environment_profile = openapi_client.models.app_service_plans_list_200_response_value_inner_properties_hosting_environment_profile.AppServicePlans_List_200_response_value_inner_properties_hostingEnvironmentProfile(
                        id = '', 
                        name = '', 
                        type = '', ), 
                    hyper_v = True, 
                    is_spot = True, 
                    is_xenon = True, 
                    maximum_elastic_worker_count = 56, 
                    maximum_number_of_workers = 56, 
                    number_of_sites = 56, 
                    per_site_scaling = True, 
                    provisioning_state = 'Succeeded', 
                    reserved = True, 
                    resource_group = '', 
                    spot_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'Ready', 
                    subscription = '', 
                    target_worker_count = 56, 
                    target_worker_size_id = 56, 
                    worker_tier_name = '', ),
                sku = openapi_client.models.app_service_plans_list_200_response_value_inner_sku.AppServicePlans_List_200_response_value_inner_sku(
                    capabilities = [
                        openapi_client.models.app_service_plans_list_200_response_value_inner_sku_capabilities_inner.AppServicePlans_List_200_response_value_inner_sku_capabilities_inner(
                            name = '', 
                            reason = '', 
                            value = '', )
                        ], 
                    capacity = 56, 
                    family = '', 
                    locations = [
                        ''
                        ], 
                    name = '', 
                    size = '', 
                    sku_capacity = openapi_client.models.app_service_plans_list_200_response_value_inner_sku_sku_capacity.AppServicePlans_List_200_response_value_inner_sku_skuCapacity(
                        default = 56, 
                        maximum = 56, 
                        minimum = 56, 
                        scale_type = '', ), 
                    tier = '', ),
                id = '',
                kind = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return AppServicePlansGet200Response(
                location = '',
        )
        """

    def testAppServicePlansGet200Response(self):
        """Test AppServicePlansGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    AppServicePlans API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppServicePlansListWebApps200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner(BaseModel):
    """
    IP security restriction on an app.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Allow or Deny access for this IP range.")
    description: Optional[StrictStr] = Field(default=None, description="IP restriction rule description.")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified.", alias="ipAddress")
    name: Optional[StrictStr] = Field(default=None, description="IP restriction rule name.")
    priority: Optional[StrictInt] = Field(default=None, description="Priority of IP restriction rule.")
    subnet_mask: Optional[StrictStr] = Field(default=None, description="Subnet mask for the range of IP addresses the restriction is valid for.", alias="subnetMask")
    subnet_traffic_tag: Optional[StrictInt] = Field(default=None, description="(internal) Subnet traffic tag", alias="subnetTrafficTag")
    tag: Optional[StrictStr] = Field(default=None, description="Defines what this IP filter will be used for. This is to support IP filtering on proxies.")
    vnet_subnet_resource_id: Optional[StrictStr] = Field(default=None, description="Virtual network resource id", alias="vnetSubnetResourceId")
    vnet_traffic_tag: Optional[StrictInt] = Field(default=None, description="(internal) Vnet traffic tag", alias="vnetTrafficTag")
    __properties: ClassVar[List[str]] = ["action", "description", "ipAddress", "name", "priority", "subnetMask", "subnetTrafficTag", "tag", "vnetSubnetResourceId", "vnetTrafficTag"]

    @field_validator('tag')
    def tag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'XffProxy']):
            raise ValueError("must be one of enum values ('Default', 'XffProxy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppServicePlansListWebApps200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppServicePlansListWebApps200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "description": obj.get("description"),
            "ipAddress": obj.get("ipAddress"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "subnetMask": obj.get("subnetMask"),
            "subnetTrafficTag": obj.get("subnetTrafficTag"),
            "tag": obj.get("tag"),
            "vnetSubnetResourceId": obj.get("vnetSubnetResourceId"),
            "vnetTrafficTag": obj.get("vnetTrafficTag")
        })
        return _obj



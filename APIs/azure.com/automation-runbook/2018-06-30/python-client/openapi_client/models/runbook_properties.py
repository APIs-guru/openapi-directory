# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-06-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_link import ContentLink
from openapi_client.models.runbook_draft import RunbookDraft
from openapi_client.models.runbook_parameter import RunbookParameter
from typing import Optional, Set
from typing_extensions import Self

class RunbookProperties(BaseModel):
    """
    Definition of the runbook property type.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="Gets or sets the creation time.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets the description.")
    draft: Optional[RunbookDraft] = None
    job_count: Optional[StrictInt] = Field(default=None, description="Gets or sets the job count of the runbook.", alias="jobCount")
    last_modified_by: Optional[StrictStr] = Field(default=None, description="Gets or sets the last modified by.", alias="lastModifiedBy")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last modified time.", alias="lastModifiedTime")
    log_activity_trace: Optional[StrictInt] = Field(default=None, description="Gets or sets the option to log activity trace of the runbook.", alias="logActivityTrace")
    log_progress: Optional[StrictBool] = Field(default=None, description="Gets or sets progress log option.", alias="logProgress")
    log_verbose: Optional[StrictBool] = Field(default=None, description="Gets or sets verbose log option.", alias="logVerbose")
    output_types: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the runbook output types.", alias="outputTypes")
    parameters: Optional[Dict[str, RunbookParameter]] = Field(default=None, description="Gets or sets the runbook parameters.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets or sets the provisioning state of the runbook.", alias="provisioningState")
    publish_content_link: Optional[ContentLink] = Field(default=None, alias="publishContentLink")
    runbook_type: Optional[StrictStr] = Field(default=None, description="Gets or sets the type of the runbook.", alias="runbookType")
    state: Optional[StrictStr] = Field(default=None, description="Gets or sets the state of the runbook.")
    __properties: ClassVar[List[str]] = ["creationTime", "description", "draft", "jobCount", "lastModifiedBy", "lastModifiedTime", "logActivityTrace", "logProgress", "logVerbose", "outputTypes", "parameters", "provisioningState", "publishContentLink", "runbookType", "state"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded']):
            raise ValueError("must be one of enum values ('Succeeded')")
        return value

    @field_validator('runbook_type')
    def runbook_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', 'GraphPowerShellWorkflow', 'GraphPowerShell']):
            raise ValueError("must be one of enum values ('Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', 'GraphPowerShellWorkflow', 'GraphPowerShell')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['New', 'Edit', 'Published']):
            raise ValueError("must be one of enum values ('New', 'Edit', 'Published')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbookProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of draft
        if self.draft:
            _dict['draft'] = self.draft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of publish_content_link
        if self.publish_content_link:
            _dict['publishContentLink'] = self.publish_content_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbookProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "draft": RunbookDraft.from_dict(obj["draft"]) if obj.get("draft") is not None else None,
            "jobCount": obj.get("jobCount"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "logActivityTrace": obj.get("logActivityTrace"),
            "logProgress": obj.get("logProgress"),
            "logVerbose": obj.get("logVerbose"),
            "outputTypes": obj.get("outputTypes"),
            "parameters": dict(
                (_k, RunbookParameter.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "provisioningState": obj.get("provisioningState"),
            "publishContentLink": ContentLink.from_dict(obj["publishContentLink"]) if obj.get("publishContentLink") is not None else None,
            "runbookType": obj.get("runbookType"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TestJob(BaseModel):
    """
    Definition of the test job.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="Gets or sets the creation time of the test job.", alias="creationTime")
    end_time: Optional[datetime] = Field(default=None, description="Gets or sets the end time of the test job.", alias="endTime")
    exception: Optional[StrictStr] = Field(default=None, description="Gets or sets the exception of the test job.")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last modified time of the test job.", alias="lastModifiedTime")
    last_status_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last status modified time of the test job.", alias="lastStatusModifiedTime")
    log_activity_trace: Optional[StrictInt] = Field(default=None, description="The activity-level tracing options of the runbook.", alias="logActivityTrace")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets the parameters of the test job.")
    run_on: Optional[StrictStr] = Field(default=None, description="Gets or sets the runOn which specifies the group name where the job is to be executed.", alias="runOn")
    start_time: Optional[datetime] = Field(default=None, description="Gets or sets the start time of the test job.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Gets or sets the status of the test job.")
    status_details: Optional[StrictStr] = Field(default=None, description="Gets or sets the status details of the test job.", alias="statusDetails")
    __properties: ClassVar[List[str]] = ["creationTime", "endTime", "exception", "lastModifiedTime", "lastStatusModifiedTime", "logActivityTrace", "parameters", "runOn", "startTime", "status", "statusDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        # set to None if last_status_modified_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_status_modified_time is None and "last_status_modified_time" in self.model_fields_set:
            _dict['lastStatusModifiedTime'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "endTime": obj.get("endTime"),
            "exception": obj.get("exception"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "lastStatusModifiedTime": obj.get("lastStatusModifiedTime"),
            "logActivityTrace": obj.get("logActivityTrace"),
            "parameters": obj.get("parameters"),
            "runOn": obj.get("runOn"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "statusDetails": obj.get("statusDetails")
        })
        return _obj



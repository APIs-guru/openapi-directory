# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_link import ContentLink
from openapi_client.models.runbook_parameter import RunbookParameter
from typing import Optional, Set
from typing_extensions import Self

class RunbookDraft(BaseModel):
    """
    RunbookDraft
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="Gets or sets the creation time of the runbook draft.", alias="creationTime")
    draft_content_link: Optional[ContentLink] = Field(default=None, alias="draftContentLink")
    in_edit: Optional[StrictBool] = Field(default=None, description="Gets or sets whether runbook is in edit mode.", alias="inEdit")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last modified time of the runbook draft.", alias="lastModifiedTime")
    output_types: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the runbook output types.", alias="outputTypes")
    parameters: Optional[Dict[str, RunbookParameter]] = Field(default=None, description="Gets or sets the runbook draft parameters.")
    __properties: ClassVar[List[str]] = ["creationTime", "draftContentLink", "inEdit", "lastModifiedTime", "outputTypes", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunbookDraft from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of draft_content_link
        if self.draft_content_link:
            _dict['draftContentLink'] = self.draft_content_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunbookDraft from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "draftContentLink": ContentLink.from_dict(obj["draftContentLink"]) if obj.get("draftContentLink") is not None else None,
            "inEdit": obj.get("inEdit"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "outputTypes": obj.get("outputTypes"),
            "parameters": dict(
                (_k, RunbookParameter.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None
        })
        return _obj



# coding: utf-8

"""
    Run History APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryParams(BaseModel):
    """
    The set of supported filters.
    """ # noqa: E501
    continuation_token: Optional[StrictStr] = Field(default=None, description="The continuation token to use for getting the next set of resources.", alias="continuationToken")
    filter: Optional[StrictStr] = Field(default=None, description="Allows for filtering the collection of resources.  The expression specified is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response.  See https://docs.microsoft.com/en-us/azure/search/query-odata-filter-orderby-syntax for details on the expression syntax.")
    order_by: Optional[StrictStr] = Field(default=None, description="The comma separated list of resource properties to use for sorting the requested resources.  Optionally, can be followed by either 'asc' or 'desc'", alias="orderBy")
    top: Optional[StrictInt] = Field(default=None, description="The maximum number of items in the resource collection to be included in the result.  If not specified, all items are returned.")
    __properties: ClassVar[List[str]] = ["continuationToken", "filter", "orderBy", "top"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "continuationToken": obj.get("continuationToken"),
            "filter": obj.get("filter"),
            "orderBy": obj.get("orderBy"),
            "top": obj.get("top")
        })
        return _obj



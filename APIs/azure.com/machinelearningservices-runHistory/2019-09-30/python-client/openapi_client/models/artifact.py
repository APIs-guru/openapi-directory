# coding: utf-8

"""
    Run History APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_path import DataPath
from typing import Optional, Set
from typing_extensions import Self

class Artifact(BaseModel):
    """
    Details of an Artifact.
    """ # noqa: E501
    artifact_id: Optional[StrictStr] = Field(default=None, description="The identifier of an Artifact. Format of ArtifactId - {Origin}/{Container}/{Path}.", alias="artifactId")
    container: StrictStr = Field(description="The name of container. Artifacts can be grouped by container.")
    created_time: Optional[datetime] = Field(default=None, description="The Date and Time at which the Artifact is created. The DateTime is in UTC.", alias="createdTime")
    data_path: Optional[DataPath] = Field(default=None, alias="dataPath")
    etag: Optional[StrictStr] = Field(default=None, description="The Etag of the Artifact.")
    origin: StrictStr = Field(description="The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.")
    path: StrictStr = Field(description="The path to the Artifact in a container.")
    __properties: ClassVar[List[str]] = ["artifactId", "container", "createdTime", "dataPath", "etag", "origin", "path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Artifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_time",
            "etag",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_path
        if self.data_path:
            _dict['dataPath'] = self.data_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Artifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactId": obj.get("artifactId"),
            "container": obj.get("container"),
            "createdTime": obj.get("createdTime"),
            "dataPath": DataPath.from_dict(obj["dataPath"]) if obj.get("dataPath") is not None else None,
            "etag": obj.get("etag"),
            "origin": obj.get("origin"),
            "path": obj.get("path")
        })
        return _obj



# coding: utf-8

"""
    Run History APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_response import ErrorResponse
from openapi_client.models.run_details_warning import RunDetailsWarning
from typing import Optional, Set
from typing_extensions import Self

class RunDetails(BaseModel):
    """
    The details of the run.
    """ # noqa: E501
    end_time_utc: Optional[datetime] = Field(default=None, description="The end time of the run in UTC.", alias="endTimeUtc")
    error: Optional[ErrorResponse] = None
    log_files: Optional[Dict[str, StrictStr]] = Field(default=None, alias="logFiles")
    parent_run_id: Optional[StrictStr] = Field(default=None, description="The parent of the run if the run is hierarchical.", alias="parentRunId")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="The properties dictionary for the run. Properties are immutable.")
    revision: Optional[StrictInt] = None
    run_definition: Optional[Dict[str, Any]] = Field(default=None, description="The run definition specification.", alias="runDefinition")
    run_id: Optional[StrictStr] = Field(default=None, description="The identifier for the run.", alias="runId")
    start_time_utc: Optional[datetime] = Field(default=None, description="The start time of the run in UTC.", alias="startTimeUtc")
    status: Optional[StrictStr] = Field(default=None, description="The status of the run. The Status string value maps to the RunStatus Enum.")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The tag dictionary for the run. Tags are mutable.")
    target: Optional[StrictStr] = Field(default=None, description="The name of the compute target where the run is executed.")
    warnings: Optional[List[RunDetailsWarning]] = Field(default=None, description="A list of warnings that occurred during the run.")
    __properties: ClassVar[List[str]] = ["endTimeUtc", "error", "logFiles", "parentRunId", "properties", "revision", "runDefinition", "runId", "startTimeUtc", "status", "tags", "target", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeUtc": obj.get("endTimeUtc"),
            "error": ErrorResponse.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "logFiles": obj.get("logFiles"),
            "parentRunId": obj.get("parentRunId"),
            "properties": obj.get("properties"),
            "revision": obj.get("revision"),
            "runDefinition": obj.get("runDefinition"),
            "runId": obj.get("runId"),
            "startTimeUtc": obj.get("startTimeUtc"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "target": obj.get("target"),
            "warnings": [RunDetailsWarning.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



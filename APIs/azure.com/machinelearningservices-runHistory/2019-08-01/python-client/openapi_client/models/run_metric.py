# coding: utf-8

"""
    Run History APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_schema import MetricSchema
from typing import Optional, Set
from typing_extensions import Self

class RunMetric(BaseModel):
    """
    RunMetric
    """ # noqa: E501
    cells: Optional[List[Dict[str, Dict[str, Any]]]] = None
    created_utc: Optional[datetime] = Field(default=None, alias="createdUtc")
    data_container_id: Optional[StrictStr] = Field(default=None, alias="dataContainerId")
    data_location: Optional[StrictStr] = Field(default=None, alias="dataLocation")
    description: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    metric_id: Optional[StrictStr] = Field(default=None, alias="metricId")
    metric_type: Optional[StrictStr] = Field(default=None, alias="metricType")
    name: Optional[StrictStr] = None
    num_cells: Optional[StrictInt] = Field(default=None, alias="numCells")
    run_id: Optional[StrictStr] = Field(default=None, alias="runId")
    var_schema: Optional[MetricSchema] = Field(default=None, alias="schema")
    __properties: ClassVar[List[str]] = ["cells", "createdUtc", "dataContainerId", "dataLocation", "description", "label", "metricId", "metricType", "name", "numCells", "runId", "schema"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cells": obj.get("cells"),
            "createdUtc": obj.get("createdUtc"),
            "dataContainerId": obj.get("dataContainerId"),
            "dataLocation": obj.get("dataLocation"),
            "description": obj.get("description"),
            "label": obj.get("label"),
            "metricId": obj.get("metricId"),
            "metricType": obj.get("metricType"),
            "name": obj.get("name"),
            "numCells": obj.get("numCells"),
            "runId": obj.get("runId"),
            "schema": MetricSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None
        })
        return _obj



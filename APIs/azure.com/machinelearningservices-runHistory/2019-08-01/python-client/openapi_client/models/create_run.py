# coding: utf-8

"""
    Run History APIs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.created_from import CreatedFrom
from openapi_client.models.run_options import RunOptions
from typing import Optional, Set
from typing_extensions import Self

class CreateRun(BaseModel):
    """
    CreateRun
    """ # noqa: E501
    cancel_uri: Optional[StrictStr] = Field(default=None, alias="cancelUri")
    created_from: Optional[CreatedFrom] = Field(default=None, alias="createdFrom")
    data_container_id: Optional[StrictStr] = Field(default=None, alias="dataContainerId")
    description: Optional[StrictStr] = None
    diagnostics_uri: Optional[StrictStr] = Field(default=None, alias="diagnosticsUri")
    end_time_utc: Optional[datetime] = Field(default=None, description="The end time of the run in UTC.", alias="endTimeUtc")
    heartbeat_enabled: Optional[StrictBool] = Field(default=None, alias="heartbeatEnabled")
    hidden: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    options: Optional[RunOptions] = None
    parent_run_id: Optional[StrictStr] = Field(default=None, description="The parent of the run if the run is hierarchical; otherwise, Null.", alias="parentRunId")
    properties: Optional[Dict[str, StrictStr]] = None
    run_definition: Optional[Dict[str, Any]] = Field(default=None, alias="runDefinition")
    run_id: Optional[StrictStr] = Field(default=None, description="The identifier for the run. Run IDs must be less than 256 characters and contain only alphanumeric characters with dashes and underscores.", alias="runId")
    run_type: Optional[StrictStr] = Field(default=None, alias="runType")
    script_name: Optional[StrictStr] = Field(default=None, alias="scriptName")
    start_time_utc: Optional[datetime] = Field(default=None, description="The start time of the run in UTC.", alias="startTimeUtc")
    status: Optional[StrictStr] = Field(default=None, description="The status of the run. The Status string value maps to the RunStatus Enum.")
    tags: Optional[Dict[str, StrictStr]] = None
    target: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cancelUri", "createdFrom", "dataContainerId", "description", "diagnosticsUri", "endTimeUtc", "heartbeatEnabled", "hidden", "name", "options", "parentRunId", "properties", "runDefinition", "runId", "runType", "scriptName", "startTimeUtc", "status", "tags", "target"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_from
        if self.created_from:
            _dict['createdFrom'] = self.created_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancelUri": obj.get("cancelUri"),
            "createdFrom": CreatedFrom.from_dict(obj["createdFrom"]) if obj.get("createdFrom") is not None else None,
            "dataContainerId": obj.get("dataContainerId"),
            "description": obj.get("description"),
            "diagnosticsUri": obj.get("diagnosticsUri"),
            "endTimeUtc": obj.get("endTimeUtc"),
            "heartbeatEnabled": obj.get("heartbeatEnabled"),
            "hidden": obj.get("hidden"),
            "name": obj.get("name"),
            "options": RunOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "parentRunId": obj.get("parentRunId"),
            "properties": obj.get("properties"),
            "runDefinition": obj.get("runDefinition"),
            "runId": obj.get("runId"),
            "runType": obj.get("runType"),
            "scriptName": obj.get("scriptName"),
            "startTimeUtc": obj.get("startTimeUtc"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "target": obj.get("target")
        })
        return _obj



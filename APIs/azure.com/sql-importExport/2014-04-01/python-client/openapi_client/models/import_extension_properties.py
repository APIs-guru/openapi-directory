# coding: utf-8

"""
    Azure SQL Database Import/Export spec

    Provides create and read functionality for Import/Export operations on Azure SQL databases.

    The version of the OpenAPI document: 2014-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ImportExtensionProperties(BaseModel):
    """
    Represents the properties for an import operation
    """ # noqa: E501
    operation_mode: StrictStr = Field(description="The type of import operation being performed. This is always Import.", alias="operationMode")
    administrator_login: StrictStr = Field(description="The name of the SQL administrator.", alias="administratorLogin")
    administrator_login_password: StrictStr = Field(description="The password of the SQL administrator.", alias="administratorLoginPassword")
    authentication_type: Optional[StrictStr] = Field(default='SQL', description="The authentication type.", alias="authenticationType")
    storage_key: StrictStr = Field(description="The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"", alias="storageKey")
    storage_key_type: StrictStr = Field(description="The type of the storage key to use.", alias="storageKeyType")
    storage_uri: StrictStr = Field(description="The storage uri to use.", alias="storageUri")
    __properties: ClassVar[List[str]] = ["administratorLogin", "administratorLoginPassword", "authenticationType", "storageKey", "storageKeyType", "storageUri"]

    @field_validator('operation_mode')
    def operation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Import']):
            raise ValueError("must be one of enum values ('Import')")
        return value

    @field_validator('authentication_type')
    def authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL', 'ADPassword']):
            raise ValueError("must be one of enum values ('SQL', 'ADPassword')")
        return value

    @field_validator('storage_key_type')
    def storage_key_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['StorageAccessKey', 'SharedAccessKey']):
            raise ValueError("must be one of enum values ('StorageAccessKey', 'SharedAccessKey')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportExtensionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportExtensionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administratorLogin": obj.get("administratorLogin"),
            "administratorLoginPassword": obj.get("administratorLoginPassword"),
            "authenticationType": obj.get("authenticationType") if obj.get("authenticationType") is not None else 'SQL',
            "storageKey": obj.get("storageKey"),
            "storageKeyType": obj.get("storageKeyType"),
            "storageUri": obj.get("storageUri")
        })
        return _obj



# coding: utf-8

"""
    DataLakeAnalyticsAccountManagementClient

    Creates an Azure Data Lake Analytics account management client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_details import ErrorDetails
from openapi_client.models.inner_error import InnerError
from typing import Optional, Set
from typing_extensions import Self

class Error(BaseModel):
    """
    Generic resource error information.
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="the HTTP status code or error code associated with this error")
    details: Optional[List[ErrorDetails]] = Field(default=None, description="the list of error details")
    inner_error: Optional[InnerError] = Field(default=None, alias="innerError")
    message: Optional[StrictStr] = Field(default=None, description="the error message to display.")
    target: Optional[StrictStr] = Field(default=None, description="the target of the error.")
    __properties: ClassVar[List[str]] = ["code", "details", "innerError", "message", "target"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code",
            "details",
            "message",
            "target",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of inner_error
        if self.inner_error:
            _dict['innerError'] = self.inner_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "details": [ErrorDetails.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "innerError": InnerError.from_dict(obj["innerError"]) if obj.get("innerError") is not None else None,
            "message": obj.get("message"),
            "target": obj.get("target")
        })
        return _obj



# coding: utf-8

"""
    DataLakeAnalyticsAccountManagementClient

    Creates an Azure Data Lake Analytics account management client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_lake_store_account_info import DataLakeStoreAccountInfo
from openapi_client.models.storage_account_info import StorageAccountInfo
from typing import Optional, Set
from typing_extensions import Self

class DataLakeAnalyticsAccountProperties(BaseModel):
    """
    The account specific properties that are associated with an underlying Data Lake Analytics account.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="the account creation time.", alias="creationTime")
    data_lake_store_accounts: Optional[List[DataLakeStoreAccountInfo]] = Field(default=None, description="the list of Data Lake storage accounts associated with this account.", alias="dataLakeStoreAccounts")
    default_data_lake_store_account: Optional[StrictStr] = Field(default=None, description="the default data lake storage account associated with this Data Lake Analytics account.", alias="defaultDataLakeStoreAccount")
    endpoint: Optional[StrictStr] = Field(default=None, description="the full CName endpoint for this account.")
    last_modified_time: Optional[datetime] = Field(default=None, description="the account last modified time.", alias="lastModifiedTime")
    max_degree_of_parallelism: Optional[StrictInt] = Field(default=None, description="the maximum supported degree of parallelism for this account.", alias="maxDegreeOfParallelism")
    max_job_count: Optional[StrictInt] = Field(default=None, description="the maximum supported jobs running under the account at the same time.", alias="maxJobCount")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="the provisioning status of the Data Lake Analytics account.", alias="provisioningState")
    state: Optional[StrictStr] = Field(default=None, description="the state of the Data Lake Analytics account.")
    storage_accounts: Optional[List[StorageAccountInfo]] = Field(default=None, description="the list of Azure Blob storage accounts associated with this account.", alias="storageAccounts")
    __properties: ClassVar[List[str]] = ["creationTime", "dataLakeStoreAccounts", "defaultDataLakeStoreAccount", "endpoint", "lastModifiedTime", "maxDegreeOfParallelism", "maxJobCount", "provisioningState", "state", "storageAccounts"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted']):
            raise ValueError("must be one of enum values ('Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'suspended']):
            raise ValueError("must be one of enum values ('active', 'suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataLakeAnalyticsAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "endpoint",
            "last_modified_time",
            "provisioning_state",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_lake_store_accounts (list)
        _items = []
        if self.data_lake_store_accounts:
            for _item_data_lake_store_accounts in self.data_lake_store_accounts:
                if _item_data_lake_store_accounts:
                    _items.append(_item_data_lake_store_accounts.to_dict())
            _dict['dataLakeStoreAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in storage_accounts (list)
        _items = []
        if self.storage_accounts:
            for _item_storage_accounts in self.storage_accounts:
                if _item_storage_accounts:
                    _items.append(_item_storage_accounts.to_dict())
            _dict['storageAccounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataLakeAnalyticsAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "dataLakeStoreAccounts": [DataLakeStoreAccountInfo.from_dict(_item) for _item in obj["dataLakeStoreAccounts"]] if obj.get("dataLakeStoreAccounts") is not None else None,
            "defaultDataLakeStoreAccount": obj.get("defaultDataLakeStoreAccount"),
            "endpoint": obj.get("endpoint"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "maxDegreeOfParallelism": obj.get("maxDegreeOfParallelism"),
            "maxJobCount": obj.get("maxJobCount"),
            "provisioningState": obj.get("provisioningState"),
            "state": obj.get("state"),
            "storageAccounts": [StorageAccountInfo.from_dict(_item) for _item in obj["storageAccounts"]] if obj.get("storageAccounts") is not None else None
        })
        return _obj



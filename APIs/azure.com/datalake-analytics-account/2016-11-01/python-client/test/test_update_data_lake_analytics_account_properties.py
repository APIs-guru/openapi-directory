# coding: utf-8

"""
    DataLakeAnalyticsAccountManagementClient

    Creates an Azure Data Lake Analytics account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_data_lake_analytics_account_properties import UpdateDataLakeAnalyticsAccountProperties

class TestUpdateDataLakeAnalyticsAccountProperties(unittest.TestCase):
    """UpdateDataLakeAnalyticsAccountProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateDataLakeAnalyticsAccountProperties:
        """Test UpdateDataLakeAnalyticsAccountProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateDataLakeAnalyticsAccountProperties`
        """
        model = UpdateDataLakeAnalyticsAccountProperties()
        if include_optional:
            return UpdateDataLakeAnalyticsAccountProperties(
                compute_policies = [
                    openapi_client.models.update_compute_policy_with_account_parameters.UpdateComputePolicyWithAccountParameters(
                        name = '', 
                        properties = openapi_client.models.update_compute_policy_properties.UpdateComputePolicyProperties(
                            max_degree_of_parallelism_per_job = 1, 
                            min_priority_per_job = 1, 
                            object_id = '', 
                            object_type = 'User', ), )
                    ],
                data_lake_store_accounts = [
                    openapi_client.models.update_data_lake_store_with_account_parameters.UpdateDataLakeStoreWithAccountParameters(
                        name = '', 
                        properties = openapi_client.models.update_data_lake_store_properties.UpdateDataLakeStoreProperties(
                            suffix = '', ), )
                    ],
                firewall_allow_azure_ips = 'Enabled',
                firewall_rules = [
                    openapi_client.models.update_firewall_rule_with_account_parameters.UpdateFirewallRuleWithAccountParameters(
                        name = '', 
                        properties = openapi_client.models.update_firewall_rule_properties.UpdateFirewallRuleProperties(
                            end_ip_address = '', 
                            start_ip_address = '', ), )
                    ],
                firewall_state = 'Enabled',
                max_degree_of_parallelism = 1,
                max_degree_of_parallelism_per_job = 1,
                max_job_count = 1,
                min_priority_per_job = 1,
                new_tier = 'Consumption',
                query_store_retention = 1,
                storage_accounts = [
                    openapi_client.models.update_storage_account_with_account_parameters.UpdateStorageAccountWithAccountParameters(
                        name = '', 
                        properties = openapi_client.models.update_storage_account_properties.UpdateStorageAccountProperties(
                            access_key = '', 
                            suffix = '', ), )
                    ]
            )
        else:
            return UpdateDataLakeAnalyticsAccountProperties(
        )
        """

    def testUpdateDataLakeAnalyticsAccountProperties(self):
        """Test UpdateDataLakeAnalyticsAccountProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DataLakeAnalyticsAccountManagementClient

    Creates an Azure Data Lake Analytics account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data_lake_analytics_account_properties import DataLakeAnalyticsAccountProperties

class TestDataLakeAnalyticsAccountProperties(unittest.TestCase):
    """DataLakeAnalyticsAccountProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataLakeAnalyticsAccountProperties:
        """Test DataLakeAnalyticsAccountProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataLakeAnalyticsAccountProperties`
        """
        model = DataLakeAnalyticsAccountProperties()
        if include_optional:
            return DataLakeAnalyticsAccountProperties(
                compute_policies = [
                    openapi_client.models.compute_policy.ComputePolicy(
                        properties = openapi_client.models.compute_policy_properties.ComputePolicyProperties(
                            max_degree_of_parallelism_per_job = 1, 
                            min_priority_per_job = 1, 
                            object_id = '', 
                            object_type = 'User', ), )
                    ],
                current_tier = 'Consumption',
                data_lake_store_accounts = [
                    openapi_client.models.data_lake_store_account_information.DataLakeStoreAccountInformation(
                        properties = openapi_client.models.data_lake_store_account_information_properties.DataLakeStoreAccountInformationProperties(
                            suffix = '', ), )
                    ],
                default_data_lake_store_account = '',
                firewall_allow_azure_ips = 'Enabled',
                firewall_rules = [
                    openapi_client.models.firewall_rule.FirewallRule(
                        properties = openapi_client.models.firewall_rule_properties.FirewallRuleProperties(
                            end_ip_address = '', 
                            start_ip_address = '', ), )
                    ],
                firewall_state = 'Enabled',
                max_degree_of_parallelism = 1,
                max_degree_of_parallelism_per_job = 1,
                max_job_count = 1,
                min_priority_per_job = 1,
                new_tier = 'Consumption',
                query_store_retention = 1,
                storage_accounts = [
                    openapi_client.models.storage_account_information.StorageAccountInformation(
                        properties = openapi_client.models.storage_account_information_properties.StorageAccountInformationProperties(
                            suffix = '', ), )
                    ],
                system_max_degree_of_parallelism = 56,
                system_max_job_count = 56,
                account_id = '',
                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                endpoint = '',
                last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                provisioning_state = 'Failed',
                state = 'Active'
            )
        else:
            return DataLakeAnalyticsAccountProperties(
        )
        """

    def testDataLakeAnalyticsAccountProperties(self):
        """Test DataLakeAnalyticsAccountProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

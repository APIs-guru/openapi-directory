# coding: utf-8

"""
    DataLakeAnalyticsAccountManagementClient

    Creates an Azure Data Lake Analytics account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.update_compute_policy_with_account_parameters import UpdateComputePolicyWithAccountParameters
from openapi_client.models.update_data_lake_store_with_account_parameters import UpdateDataLakeStoreWithAccountParameters
from openapi_client.models.update_firewall_rule_with_account_parameters import UpdateFirewallRuleWithAccountParameters
from openapi_client.models.update_storage_account_with_account_parameters import UpdateStorageAccountWithAccountParameters
from typing import Optional, Set
from typing_extensions import Self

class UpdateDataLakeAnalyticsAccountProperties(BaseModel):
    """
    The properties to update that are associated with an underlying Data Lake Analytics account.
    """ # noqa: E501
    compute_policies: Optional[List[UpdateComputePolicyWithAccountParameters]] = Field(default=None, description="The list of compute policies associated with this account.", alias="computePolicies")
    data_lake_store_accounts: Optional[List[UpdateDataLakeStoreWithAccountParameters]] = Field(default=None, description="The list of Data Lake Store accounts associated with this account.", alias="dataLakeStoreAccounts")
    firewall_allow_azure_ips: Optional[StrictStr] = Field(default=None, description="The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.", alias="firewallAllowAzureIps")
    firewall_rules: Optional[List[UpdateFirewallRuleWithAccountParameters]] = Field(default=None, description="The list of firewall rules associated with this account.", alias="firewallRules")
    firewall_state: Optional[StrictStr] = Field(default=None, description="The current state of the IP address firewall for this account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.", alias="firewallState")
    max_degree_of_parallelism: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The maximum supported degree of parallelism for this account.", alias="maxDegreeOfParallelism")
    max_degree_of_parallelism_per_job: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The maximum supported degree of parallelism per job for this account.", alias="maxDegreeOfParallelismPerJob")
    max_job_count: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The maximum supported jobs running under the account at the same time.", alias="maxJobCount")
    min_priority_per_job: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The minimum supported priority per job for this account.", alias="minPriorityPerJob")
    new_tier: Optional[StrictStr] = Field(default=None, description="The commitment tier to use for next month.", alias="newTier")
    query_store_retention: Optional[Annotated[int, Field(le=180, strict=True, ge=1)]] = Field(default=None, description="The number of days that job metadata is retained.", alias="queryStoreRetention")
    storage_accounts: Optional[List[UpdateStorageAccountWithAccountParameters]] = Field(default=None, description="The list of Azure Blob storage accounts associated with this account.", alias="storageAccounts")
    __properties: ClassVar[List[str]] = ["computePolicies", "dataLakeStoreAccounts", "firewallAllowAzureIps", "firewallRules", "firewallState", "maxDegreeOfParallelism", "maxDegreeOfParallelismPerJob", "maxJobCount", "minPriorityPerJob", "newTier", "queryStoreRetention", "storageAccounts"]

    @field_validator('firewall_allow_azure_ips')
    def firewall_allow_azure_ips_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('firewall_state')
    def firewall_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('new_tier')
    def new_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Consumption', 'Commitment_100AUHours', 'Commitment_500AUHours', 'Commitment_1000AUHours', 'Commitment_5000AUHours', 'Commitment_10000AUHours', 'Commitment_50000AUHours', 'Commitment_100000AUHours', 'Commitment_500000AUHours']):
            raise ValueError("must be one of enum values ('Consumption', 'Commitment_100AUHours', 'Commitment_500AUHours', 'Commitment_1000AUHours', 'Commitment_5000AUHours', 'Commitment_10000AUHours', 'Commitment_50000AUHours', 'Commitment_100000AUHours', 'Commitment_500000AUHours')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDataLakeAnalyticsAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compute_policies (list)
        _items = []
        if self.compute_policies:
            for _item_compute_policies in self.compute_policies:
                if _item_compute_policies:
                    _items.append(_item_compute_policies.to_dict())
            _dict['computePolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_lake_store_accounts (list)
        _items = []
        if self.data_lake_store_accounts:
            for _item_data_lake_store_accounts in self.data_lake_store_accounts:
                if _item_data_lake_store_accounts:
                    _items.append(_item_data_lake_store_accounts.to_dict())
            _dict['dataLakeStoreAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in firewall_rules (list)
        _items = []
        if self.firewall_rules:
            for _item_firewall_rules in self.firewall_rules:
                if _item_firewall_rules:
                    _items.append(_item_firewall_rules.to_dict())
            _dict['firewallRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in storage_accounts (list)
        _items = []
        if self.storage_accounts:
            for _item_storage_accounts in self.storage_accounts:
                if _item_storage_accounts:
                    _items.append(_item_storage_accounts.to_dict())
            _dict['storageAccounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDataLakeAnalyticsAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computePolicies": [UpdateComputePolicyWithAccountParameters.from_dict(_item) for _item in obj["computePolicies"]] if obj.get("computePolicies") is not None else None,
            "dataLakeStoreAccounts": [UpdateDataLakeStoreWithAccountParameters.from_dict(_item) for _item in obj["dataLakeStoreAccounts"]] if obj.get("dataLakeStoreAccounts") is not None else None,
            "firewallAllowAzureIps": obj.get("firewallAllowAzureIps"),
            "firewallRules": [UpdateFirewallRuleWithAccountParameters.from_dict(_item) for _item in obj["firewallRules"]] if obj.get("firewallRules") is not None else None,
            "firewallState": obj.get("firewallState"),
            "maxDegreeOfParallelism": obj.get("maxDegreeOfParallelism"),
            "maxDegreeOfParallelismPerJob": obj.get("maxDegreeOfParallelismPerJob"),
            "maxJobCount": obj.get("maxJobCount"),
            "minPriorityPerJob": obj.get("minPriorityPerJob"),
            "newTier": obj.get("newTier"),
            "queryStoreRetention": obj.get("queryStoreRetention"),
            "storageAccounts": [UpdateStorageAccountWithAccountParameters.from_dict(_item) for _item in obj["storageAccounts"]] if obj.get("storageAccounts") is not None else None
        })
        return _obj



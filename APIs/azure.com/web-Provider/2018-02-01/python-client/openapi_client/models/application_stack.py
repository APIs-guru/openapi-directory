# coding: utf-8

"""
    Provider API Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.stack_major_version import StackMajorVersion
from typing import Optional, Set
from typing_extensions import Self

class ApplicationStack(BaseModel):
    """
    Application stack.
    """ # noqa: E501
    dependency: Optional[StrictStr] = Field(default=None, description="Application stack dependency.")
    display: Optional[StrictStr] = Field(default=None, description="Application stack display name.")
    frameworks: Optional[List[ApplicationStack]] = Field(default=None, description="List of frameworks associated with application stack.")
    major_versions: Optional[List[StackMajorVersion]] = Field(default=None, description="List of major versions available.", alias="majorVersions")
    name: Optional[StrictStr] = Field(default=None, description="Application stack name.")
    __properties: ClassVar[List[str]] = ["dependency", "display", "frameworks", "majorVersions", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationStack from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in frameworks (list)
        _items = []
        if self.frameworks:
            for _item_frameworks in self.frameworks:
                if _item_frameworks:
                    _items.append(_item_frameworks.to_dict())
            _dict['frameworks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in major_versions (list)
        _items = []
        if self.major_versions:
            for _item_major_versions in self.major_versions:
                if _item_major_versions:
                    _items.append(_item_major_versions.to_dict())
            _dict['majorVersions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationStack from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dependency": obj.get("dependency"),
            "display": obj.get("display"),
            "frameworks": [ApplicationStack.from_dict(_item) for _item in obj["frameworks"]] if obj.get("frameworks") is not None else None,
            "majorVersions": [StackMajorVersion.from_dict(_item) for _item in obj["majorVersions"]] if obj.get("majorVersions") is not None else None,
            "name": obj.get("name")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ApplicationStack.model_rebuild(raise_errors=False)


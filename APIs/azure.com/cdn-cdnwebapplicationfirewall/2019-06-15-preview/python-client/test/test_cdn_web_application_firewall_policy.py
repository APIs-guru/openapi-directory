# coding: utf-8

"""
    Azure CDN WebApplicationFirewallManagement

    APIs to manage web application firewall rules for Azure CDN

    The version of the OpenAPI document: 2019-06-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cdn_web_application_firewall_policy import CdnWebApplicationFirewallPolicy

class TestCdnWebApplicationFirewallPolicy(unittest.TestCase):
    """CdnWebApplicationFirewallPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CdnWebApplicationFirewallPolicy:
        """Test CdnWebApplicationFirewallPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CdnWebApplicationFirewallPolicy`
        """
        model = CdnWebApplicationFirewallPolicy()
        if include_optional:
            return CdnWebApplicationFirewallPolicy(
                etag = '',
                properties = openapi_client.models.cdn_web_application_firewall_policy_properties.CdnWebApplicationFirewallPolicyProperties(
                    custom_rules = openapi_client.models.custom_rule_list.CustomRuleList(
                        rules = [
                            openapi_client.models.custom_rule.CustomRule(
                                action = 'Allow', 
                                enabled_state = 'Disabled', 
                                match_conditions = [
                                    openapi_client.models.match_condition.MatchCondition(
                                        match_value = [
                                            ''
                                            ], 
                                        match_variable = 'RemoteAddr', 
                                        negate_condition = True, 
                                        operator = 'Any', 
                                        selector = '', 
                                        transforms = [
                                            'Lowercase'
                                            ], )
                                    ], 
                                name = '', 
                                priority = 0, )
                            ], ), 
                    endpoint_links = [
                        openapi_client.models.cdn_endpoint.CdnEndpoint(
                            id = '', )
                        ], 
                    managed_rules = openapi_client.models.managed_rule_set_list.ManagedRuleSetList(
                        managed_rule_sets = [
                            openapi_client.models.managed_rule_set.ManagedRuleSet(
                                anomaly_score = 0, 
                                rule_group_overrides = [
                                    openapi_client.models.managed_rule_group_override.ManagedRuleGroupOverride(
                                        rule_group_name = '', )
                                    ], 
                                rule_set_type = '', 
                                rule_set_version = '', )
                            ], ), 
                    policy_settings = openapi_client.models.policy_settings.policySettings(
                        default_custom_block_response_body = 'zA9LCSLv1C1ylmgd0/Y2TA5TkIRHRRA401iz1CiIykN3HUO6XMsJPGh8AsaLONiNuo2ZPKNpkAmJHONf1Elbsh0SQR//', 
                        default_custom_block_response_status_code = 2E+2, 
                        default_redirect_url = '', 
                        enabled_state = 'Disabled', 
                        mode = 'Prevention', ), 
                    provisioning_state = 'Creating', 
                    rate_limit_rules = openapi_client.models.rate_limit_rule_list.RateLimitRuleList(), 
                    resource_state = 'Creating', ),
                sku = None,
                location = '',
                tags = {
                    'key' : ''
                    },
                id = '',
                name = '',
                type = ''
            )
        else:
            return CdnWebApplicationFirewallPolicy(
                sku = None,
                location = '',
        )
        """

    def testCdnWebApplicationFirewallPolicy(self):
        """Test CdnWebApplicationFirewallPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

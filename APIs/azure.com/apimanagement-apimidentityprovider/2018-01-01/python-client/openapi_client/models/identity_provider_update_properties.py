# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IdentityProviderUpdateProperties(BaseModel):
    """
    Parameters supplied to the Update Identity Provider operation.
    """ # noqa: E501
    client_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.", alias="clientId")
    client_secret: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.", alias="clientSecret")
    allowed_tenants: Optional[Annotated[List[StrictStr], Field(max_length=32)]] = Field(default=None, description="List of Allowed Tenants when configuring Azure Active Directory login.", alias="allowedTenants")
    password_reset_policy_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Password Reset Policy Name. Only applies to AAD B2C Identity Provider.", alias="passwordResetPolicyName")
    profile_editing_policy_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.", alias="profileEditingPolicyName")
    signin_policy_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Signin Policy Name. Only applies to AAD B2C Identity Provider.", alias="signinPolicyName")
    signup_policy_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Signup Policy Name. Only applies to AAD B2C Identity Provider.", alias="signupPolicyName")
    type: Optional[StrictStr] = Field(default=None, description="Identity Provider Type identifier.")
    __properties: ClassVar[List[str]] = ["allowedTenants", "passwordResetPolicyName", "profileEditingPolicyName", "signinPolicyName", "signupPolicyName", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C']):
            raise ValueError("must be one of enum values ('facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityProviderUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityProviderUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedTenants": obj.get("allowedTenants"),
            "passwordResetPolicyName": obj.get("passwordResetPolicyName"),
            "profileEditingPolicyName": obj.get("profileEditingPolicyName"),
            "signinPolicyName": obj.get("signinPolicyName"),
            "signupPolicyName": obj.get("signupPolicyName"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WatcherProperties(BaseModel):
    """
    Definition of the watcher properties
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="Gets or sets the creation time.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets the description.")
    execution_frequency_in_seconds: Optional[StrictInt] = Field(default=None, description="Gets or sets the frequency at which the watcher is invoked.", alias="executionFrequencyInSeconds")
    last_modified_by: Optional[StrictStr] = Field(default=None, description="Details of the user who last modified the watcher.", alias="lastModifiedBy")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last modified time.", alias="lastModifiedTime")
    script_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.", alias="scriptName")
    script_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets the parameters of the script.", alias="scriptParameters")
    script_run_on: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the hybrid worker group the watcher will run on.", alias="scriptRunOn")
    status: Optional[StrictStr] = Field(default=None, description="Gets the current status of the watcher.")
    __properties: ClassVar[List[str]] = ["creationTime", "description", "executionFrequencyInSeconds", "lastModifiedBy", "lastModifiedTime", "scriptName", "scriptParameters", "scriptRunOn", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WatcherProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "last_modified_by",
            "last_modified_time",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WatcherProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "executionFrequencyInSeconds": obj.get("executionFrequencyInSeconds"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "scriptName": obj.get("scriptName"),
            "scriptParameters": obj.get("scriptParameters"),
            "scriptRunOn": obj.get("scriptRunOn"),
            "status": obj.get("status")
        })
        return _obj



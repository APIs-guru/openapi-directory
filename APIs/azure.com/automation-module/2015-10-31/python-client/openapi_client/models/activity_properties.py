# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_output_type import ActivityOutputType
from openapi_client.models.activity_parameter_set import ActivityParameterSet
from typing import Optional, Set
from typing_extensions import Self

class ActivityProperties(BaseModel):
    """
    Properties of the activity.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="Gets or sets the creation time.", alias="creationTime")
    definition: Optional[StrictStr] = Field(default=None, description="Gets or sets the user name of the activity.")
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets the description.")
    last_modified_time: Optional[datetime] = Field(default=None, description="Gets or sets the last modified time.", alias="lastModifiedTime")
    output_types: Optional[List[ActivityOutputType]] = Field(default=None, description="Gets or sets the output types of the activity.", alias="outputTypes")
    parameter_sets: Optional[List[ActivityParameterSet]] = Field(default=None, description="Gets or sets the parameter sets of the activity.", alias="parameterSets")
    __properties: ClassVar[List[str]] = ["creationTime", "definition", "description", "lastModifiedTime", "outputTypes", "parameterSets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in output_types (list)
        _items = []
        if self.output_types:
            for _item_output_types in self.output_types:
                if _item_output_types:
                    _items.append(_item_output_types.to_dict())
            _dict['outputTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_sets (list)
        _items = []
        if self.parameter_sets:
            for _item_parameter_sets in self.parameter_sets:
                if _item_parameter_sets:
                    _items.append(_item_parameter_sets.to_dict())
            _dict['parameterSets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "definition": obj.get("definition"),
            "description": obj.get("description"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "outputTypes": [ActivityOutputType.from_dict(_item) for _item in obj["outputTypes"]] if obj.get("outputTypes") is not None else None,
            "parameterSets": [ActivityParameterSet.from_dict(_item) for _item in obj["parameterSets"]] if obj.get("parameterSets") is not None else None
        })
        return _obj



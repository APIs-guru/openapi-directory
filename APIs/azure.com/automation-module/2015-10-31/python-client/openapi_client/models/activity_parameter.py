# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2015-10-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_parameter_validation_set import ActivityParameterValidationSet
from typing import Optional, Set
from typing_extensions import Self

class ActivityParameter(BaseModel):
    """
    Definition of the activity parameter.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets the description of the activity parameter.")
    is_dynamic: Optional[StrictBool] = Field(default=None, description="Gets or sets a Boolean value that indicates true if the parameter is dynamic.", alias="isDynamic")
    is_mandatory: Optional[StrictBool] = Field(default=None, description="Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.", alias="isMandatory")
    name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the activity parameter.")
    position: Optional[StrictInt] = Field(default=None, description="Gets or sets the position of the activity parameter.")
    type: Optional[StrictStr] = Field(default=None, description="Gets or sets the type of the activity parameter.")
    validation_set: Optional[List[ActivityParameterValidationSet]] = Field(default=None, description="Gets or sets the validation set of activity parameter.", alias="validationSet")
    value_from_pipeline: Optional[StrictBool] = Field(default=None, description="Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.", alias="valueFromPipeline")
    value_from_pipeline_by_property_name: Optional[StrictBool] = Field(default=None, description="Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. ", alias="valueFromPipelineByPropertyName")
    value_from_remaining_arguments: Optional[StrictBool] = Field(default=None, description="Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.", alias="valueFromRemainingArguments")
    __properties: ClassVar[List[str]] = ["description", "isDynamic", "isMandatory", "name", "position", "type", "validationSet", "valueFromPipeline", "valueFromPipelineByPropertyName", "valueFromRemainingArguments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in validation_set (list)
        _items = []
        if self.validation_set:
            for _item_validation_set in self.validation_set:
                if _item_validation_set:
                    _items.append(_item_validation_set.to_dict())
            _dict['validationSet'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "isDynamic": obj.get("isDynamic"),
            "isMandatory": obj.get("isMandatory"),
            "name": obj.get("name"),
            "position": obj.get("position"),
            "type": obj.get("type"),
            "validationSet": [ActivityParameterValidationSet.from_dict(_item) for _item in obj["validationSet"]] if obj.get("validationSet") is not None else None,
            "valueFromPipeline": obj.get("valueFromPipeline"),
            "valueFromPipelineByPropertyName": obj.get("valueFromPipelineByPropertyName"),
            "valueFromRemainingArguments": obj.get("valueFromRemainingArguments")
        })
        return _obj



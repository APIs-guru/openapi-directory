# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.retention_policy import RetentionPolicy
from typing import Optional, Set
from typing_extensions import Self

class LogProfileProperties(BaseModel):
    """
    The log profile properties.
    """ # noqa: E501
    categories: List[StrictStr] = Field(description="the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'")
    locations: List[StrictStr] = Field(description="List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.")
    retention_policy: RetentionPolicy = Field(alias="retentionPolicy")
    service_bus_rule_id: Optional[StrictStr] = Field(default=None, description="The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.", alias="serviceBusRuleId")
    storage_account_id: Optional[StrictStr] = Field(default=None, description="the resource id of the storage account to which you would like to send the Activity Log.", alias="storageAccountId")
    __properties: ClassVar[List[str]] = ["categories", "locations", "retentionPolicy", "serviceBusRuleId", "storageAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogProfileProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retention_policy
        if self.retention_policy:
            _dict['retentionPolicy'] = self.retention_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogProfileProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": obj.get("categories"),
            "locations": obj.get("locations"),
            "retentionPolicy": RetentionPolicy.from_dict(obj["retentionPolicy"]) if obj.get("retentionPolicy") is not None else None,
            "serviceBusRuleId": obj.get("serviceBusRuleId"),
            "storageAccountId": obj.get("storageAccountId")
        })
        return _obj



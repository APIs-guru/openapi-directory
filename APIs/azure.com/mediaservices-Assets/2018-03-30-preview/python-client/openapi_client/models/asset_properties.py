# coding: utf-8

"""
    Azure Media Services

    This Swagger was generated by the API Framework.

    The version of the OpenAPI document: 2018-03-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssetProperties(BaseModel):
    """
    The Asset properties.
    """ # noqa: E501
    alternate_id: Optional[StrictStr] = Field(default=None, description="The alternate ID of the Asset.", alias="alternateId")
    asset_id: Optional[StrictStr] = Field(default=None, description="The Asset ID.", alias="assetId")
    container: Optional[StrictStr] = Field(default=None, description="The name of the asset blob container.")
    created: Optional[datetime] = Field(default=None, description="The creation date of the Asset.")
    description: Optional[StrictStr] = Field(default=None, description="The Asset description.")
    last_modified: Optional[datetime] = Field(default=None, description="The last modified date of the Asset.", alias="lastModified")
    storage_account_name: Optional[StrictStr] = Field(default=None, description="The name of the storage account.", alias="storageAccountName")
    storage_encryption_format: Optional[StrictStr] = Field(default=None, description="The Asset encryption format. One of None or MediaStorageEncryption.", alias="storageEncryptionFormat")
    __properties: ClassVar[List[str]] = ["alternateId", "assetId", "container", "created", "description", "lastModified", "storageAccountName", "storageEncryptionFormat"]

    @field_validator('storage_encryption_format')
    def storage_encryption_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'MediaStorageClientEncryption']):
            raise ValueError("must be one of enum values ('None', 'MediaStorageClientEncryption')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "asset_id",
            "created",
            "last_modified",
            "storage_encryption_format",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateId": obj.get("alternateId"),
            "assetId": obj.get("assetId"),
            "container": obj.get("container"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "lastModified": obj.get("lastModified"),
            "storageAccountName": obj.get("storageAccountName"),
            "storageEncryptionFormat": obj.get("storageEncryptionFormat")
        })
        return _obj



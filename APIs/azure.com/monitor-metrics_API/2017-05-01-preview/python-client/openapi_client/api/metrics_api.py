# coding: utf-8

"""
    MonitorManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.response import Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MetricsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def metrics_list(
        self,
        resource_uri: Annotated[StrictStr, Field(description="The identifier of the resource.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        timespan: Annotated[Optional[StrictStr], Field(description="The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="The interval (i.e. timegrain) of the query.")] = None,
        metric: Annotated[Optional[StrictStr], Field(description="The name of the metric to retrieve.")] = None,
        aggregation: Annotated[Optional[StrictStr], Field(description="The list of aggregation types (comma separated) to retrieve.")] = None,
        top: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.")] = None,
        result_type: Annotated[Optional[StrictStr], Field(description="Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Response:
        """metrics_list

        **Lists the metric values for a resource**.

        :param resource_uri: The identifier of the resource. (required)
        :type resource_uri: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param timespan: The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        :type timespan: str
        :param interval: The interval (i.e. timegrain) of the query.
        :type interval: str
        :param metric: The name of the metric to retrieve.
        :type metric: str
        :param aggregation: The list of aggregation types (comma separated) to retrieve.
        :type aggregation: str
        :param top: The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.
        :type top: float
        :param orderby: The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.
        :type orderby: str
        :param filter: The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
        :type filter: str
        :param result_type: Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        :type result_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metrics_list_serialize(
            resource_uri=resource_uri,
            api_version=api_version,
            timespan=timespan,
            interval=interval,
            metric=metric,
            aggregation=aggregation,
            top=top,
            orderby=orderby,
            filter=filter,
            result_type=result_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metrics_list_with_http_info(
        self,
        resource_uri: Annotated[StrictStr, Field(description="The identifier of the resource.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        timespan: Annotated[Optional[StrictStr], Field(description="The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="The interval (i.e. timegrain) of the query.")] = None,
        metric: Annotated[Optional[StrictStr], Field(description="The name of the metric to retrieve.")] = None,
        aggregation: Annotated[Optional[StrictStr], Field(description="The list of aggregation types (comma separated) to retrieve.")] = None,
        top: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.")] = None,
        result_type: Annotated[Optional[StrictStr], Field(description="Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Response]:
        """metrics_list

        **Lists the metric values for a resource**.

        :param resource_uri: The identifier of the resource. (required)
        :type resource_uri: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param timespan: The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        :type timespan: str
        :param interval: The interval (i.e. timegrain) of the query.
        :type interval: str
        :param metric: The name of the metric to retrieve.
        :type metric: str
        :param aggregation: The list of aggregation types (comma separated) to retrieve.
        :type aggregation: str
        :param top: The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.
        :type top: float
        :param orderby: The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.
        :type orderby: str
        :param filter: The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
        :type filter: str
        :param result_type: Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        :type result_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metrics_list_serialize(
            resource_uri=resource_uri,
            api_version=api_version,
            timespan=timespan,
            interval=interval,
            metric=metric,
            aggregation=aggregation,
            top=top,
            orderby=orderby,
            filter=filter,
            result_type=result_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metrics_list_without_preload_content(
        self,
        resource_uri: Annotated[StrictStr, Field(description="The identifier of the resource.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        timespan: Annotated[Optional[StrictStr], Field(description="The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="The interval (i.e. timegrain) of the query.")] = None,
        metric: Annotated[Optional[StrictStr], Field(description="The name of the metric to retrieve.")] = None,
        aggregation: Annotated[Optional[StrictStr], Field(description="The list of aggregation types (comma separated) to retrieve.")] = None,
        top: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.")] = None,
        result_type: Annotated[Optional[StrictStr], Field(description="Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """metrics_list

        **Lists the metric values for a resource**.

        :param resource_uri: The identifier of the resource. (required)
        :type resource_uri: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param timespan: The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        :type timespan: str
        :param interval: The interval (i.e. timegrain) of the query.
        :type interval: str
        :param metric: The name of the metric to retrieve.
        :type metric: str
        :param aggregation: The list of aggregation types (comma separated) to retrieve.
        :type aggregation: str
        :param top: The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.
        :type top: float
        :param orderby: The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.
        :type orderby: str
        :param filter: The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
        :type filter: str
        :param result_type: Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        :type result_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metrics_list_serialize(
            resource_uri=resource_uri,
            api_version=api_version,
            timespan=timespan,
            interval=interval,
            metric=metric,
            aggregation=aggregation,
            top=top,
            orderby=orderby,
            filter=filter,
            result_type=result_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metrics_list_serialize(
        self,
        resource_uri,
        api_version,
        timespan,
        interval,
        metric,
        aggregation,
        top,
        orderby,
        filter,
        result_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_uri is not None:
            _path_params['resourceUri'] = resource_uri
        # process the query parameters
        if timespan is not None:
            
            _query_params.append(('timespan', timespan))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if metric is not None:
            
            _query_params.append(('metric', metric))
            
        if aggregation is not None:
            
            _query_params.append(('aggregation', aggregation))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if result_type is not None:
            
            _query_params.append(('resultType', result_type))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{resourceUri}/providers/microsoft.insights/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



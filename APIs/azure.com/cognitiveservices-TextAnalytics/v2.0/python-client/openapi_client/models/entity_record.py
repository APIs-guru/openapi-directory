# coding: utf-8

"""
    Text Analytics Client

    The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview

    The version of the OpenAPI document: v2.0
    Contact: mlapi@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.match_record import MatchRecord
from typing import Optional, Set
from typing_extensions import Self

class EntityRecord(BaseModel):
    """
    EntityRecord
    """ # noqa: E501
    bing_id: Optional[StrictStr] = Field(default=None, description="Bing unique identifier of the recognized entity. Use in conjunction with the Bing Entity Search API to fetch additional relevant information.", alias="bingId")
    matches: Optional[List[MatchRecord]] = Field(default=None, description="List of instances this entity appears in the text.")
    name: Optional[StrictStr] = Field(default=None, description="Entity formal name.")
    wikipedia_id: Optional[StrictStr] = Field(default=None, description="Wikipedia unique identifier of the recognized entity.", alias="wikipediaId")
    wikipedia_language: Optional[StrictStr] = Field(default=None, description="Wikipedia language for which the WikipediaId and WikipediaUrl refers to.", alias="wikipediaLanguage")
    wikipedia_url: Optional[StrictStr] = Field(default=None, description="URL for the entity's English Wikipedia page.", alias="wikipediaUrl")
    __properties: ClassVar[List[str]] = ["bingId", "matches", "name", "wikipediaId", "wikipediaLanguage", "wikipediaUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "matches",
            "wikipedia_url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matches (list)
        _items = []
        if self.matches:
            for _item_matches in self.matches:
                if _item_matches:
                    _items.append(_item_matches.to_dict())
            _dict['matches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bingId": obj.get("bingId"),
            "matches": [MatchRecord.from_dict(_item) for _item in obj["matches"]] if obj.get("matches") is not None else None,
            "name": obj.get("name"),
            "wikipediaId": obj.get("wikipediaId"),
            "wikipediaLanguage": obj.get("wikipediaLanguage"),
            "wikipediaUrl": obj.get("wikipediaUrl")
        })
        return _obj



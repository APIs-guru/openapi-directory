# coding: utf-8

"""
    Microsoft Insights

    Azure Monitor client to create/update/delete Scheduled Query Rules

    The version of the OpenAPI document: 2018-04-16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from openapi_client.models.schedule import Schedule
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class LogSearchRule(BaseModel):
    """
    Log Search Rule Definition
    """ # noqa: E501
    action: Action
    description: Optional[StrictStr] = Field(default=None, description="The description of the Log Search rule.")
    enabled: Optional[StrictStr] = Field(default=None, description="The flag which indicates whether the Log Search rule is enabled. Value should be true or false")
    last_updated_time: Optional[datetime] = Field(default=None, description="Last time the rule was updated in IS08601 format.", alias="lastUpdatedTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the scheduled query rule", alias="provisioningState")
    schedule: Optional[Schedule] = None
    source: Source
    __properties: ClassVar[List[str]] = ["action", "description", "enabled", "lastUpdatedTime", "provisioningState", "schedule", "source"]

    @field_validator('enabled')
    def enabled_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Succeeded', 'Deploying', 'Canceled', 'Failed']):
            raise ValueError("must be one of enum values ('Succeeded', 'Deploying', 'Canceled', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogSearchRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_updated_time",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogSearchRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": Action.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "provisioningState": obj.get("provisioningState"),
            "schedule": Schedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Azure Machine Learning Datastore Management Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.client_credentials import ClientCredentials
from typing import Optional, Set
from typing_extensions import Self

class AzureStorage(BaseModel):
    """
    AzureStorage
    """ # noqa: E501
    account_key: Optional[StrictStr] = Field(default=None, description="Storage Account Key (Deprecated)", alias="accountKey")
    account_name: Optional[StrictStr] = Field(default=None, description="Storage Account Name", alias="accountName")
    are_workspace_managed_identities_allowed: Optional[StrictBool] = Field(default=None, description="Indicate if we are using Workspace ManagedIdentities/MSI token", alias="areWorkspaceManagedIdentitiesAllowed")
    blob_cache_timeout: Optional[StrictInt] = Field(default=None, description="If this is an Microsoft.MachineLearning.DataStore.Contracts.DataStoreType.AzureBlob, the length of time (in seconds) to cache files locally after they are accessed (downloaded).", alias="blobCacheTimeout")
    client_credentials: Optional[ClientCredentials] = Field(default=None, alias="clientCredentials")
    container_name: Optional[StrictStr] = Field(default=None, description="The storage container name", alias="containerName")
    credential: Optional[StrictStr] = Field(default=None, description="The credential")
    credential_type: Optional[StrictStr] = Field(default=None, description="The credential type", alias="credentialType")
    endpoint: Optional[StrictStr] = Field(default=None, description="The host of the container")
    is_sas: Optional[StrictBool] = Field(default=None, description="Indicate if we are using SAS token or Account Key (Deprecated)", alias="isSas")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol to use. Defaults to https")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource Group Name", alias="resourceGroup")
    sas_token: Optional[StrictStr] = Field(default=None, description="SAS Token for the container (Deprecated)", alias="sasToken")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription Id", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["accountKey", "accountName", "areWorkspaceManagedIdentitiesAllowed", "blobCacheTimeout", "clientCredentials", "containerName", "credential", "credentialType", "endpoint", "isSas", "protocol", "resourceGroup", "sasToken", "subscriptionId"]

    @field_validator('credential_type')
    def credential_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Sas', 'AccountKey', 'ClientCredentials']):
            raise ValueError("must be one of enum values ('None', 'Sas', 'AccountKey', 'ClientCredentials')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureStorage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_credentials
        if self.client_credentials:
            _dict['clientCredentials'] = self.client_credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureStorage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountKey": obj.get("accountKey"),
            "accountName": obj.get("accountName"),
            "areWorkspaceManagedIdentitiesAllowed": obj.get("areWorkspaceManagedIdentitiesAllowed"),
            "blobCacheTimeout": obj.get("blobCacheTimeout"),
            "clientCredentials": ClientCredentials.from_dict(obj["clientCredentials"]) if obj.get("clientCredentials") is not None else None,
            "containerName": obj.get("containerName"),
            "credential": obj.get("credential"),
            "credentialType": obj.get("credentialType"),
            "endpoint": obj.get("endpoint"),
            "isSas": obj.get("isSas"),
            "protocol": obj.get("protocol"),
            "resourceGroup": obj.get("resourceGroup"),
            "sasToken": obj.get("sasToken"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj



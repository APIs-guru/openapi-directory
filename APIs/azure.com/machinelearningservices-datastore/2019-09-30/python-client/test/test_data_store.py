# coding: utf-8

"""
    Azure Machine Learning Datastore Management Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data_store import DataStore

class TestDataStore(unittest.TestCase):
    """DataStore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataStore:
        """Test DataStore
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataStore`
        """
        model = DataStore()
        if include_optional:
            return DataStore(
                azure_data_lake_section = openapi_client.models.azure_data_lake.AzureDataLake(
                    authority_url = '', 
                    certificate = '', 
                    client_id = '', 
                    client_secret = '', 
                    is_cert_auth = True, 
                    resource_group = '', 
                    resource_uri = '', 
                    store_name = '', 
                    subscription_id = '', 
                    tenant_id = '', 
                    thumbprint = '', ),
                azure_postgre_sql_section = openapi_client.models.azure_postgre_sql.AzurePostgreSql(
                    database_name = '', 
                    endpoint = '', 
                    port_number = '', 
                    resource_group = '', 
                    server_name = '', 
                    subscription_id = '', 
                    user_id = '', 
                    user_password = '', ),
                azure_sql_database_section = openapi_client.models.azure_sql_database.AzureSqlDatabase(
                    authority_url = '', 
                    certificate = '', 
                    client_id = '', 
                    client_secret = '', 
                    database_name = '', 
                    endpoint = '', 
                    is_cert_auth = True, 
                    resource_group = '', 
                    resource_uri = '', 
                    server_name = '', 
                    subscription_id = '', 
                    tenant_id = '', 
                    thumbprint = '', ),
                azure_storage_section = openapi_client.models.azure_storage.AzureStorage(
                    account_key = '', 
                    account_name = '', 
                    are_workspace_managed_identities_allowed = True, 
                    blob_cache_timeout = 56, 
                    client_credentials = openapi_client.models.client_credentials.ClientCredentials(
                        authority_url = '', 
                        certificate = '', 
                        client_id = '', 
                        client_secret = '', 
                        is_cert_auth = True, 
                        resource_group = '', 
                        resource_uri = '', 
                        subscription_id = '', 
                        tenant_id = '', 
                        thumbprint = '', ), 
                    container_name = '', 
                    credential = '', 
                    credential_type = 'None', 
                    endpoint = '', 
                    is_sas = True, 
                    protocol = '', 
                    resource_group = '', 
                    sas_token = '', 
                    subscription_id = '', ),
                data_store_type = 'AzureBlob',
                gluster_fs_section = openapi_client.models.gluster_fs.GlusterFs(
                    server_address = '', 
                    volume_name = '', ),
                has_been_validated = True,
                name = '',
                tags = {
                    'key' : ''
                    }
            )
        else:
            return DataStore(
        )
        """

    def testDataStore(self):
        """Test DataStore"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

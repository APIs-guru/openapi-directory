# coding: utf-8

"""
    Azure Machine Learning Datastore Management Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.azure_data_lake import AzureDataLake
from openapi_client.models.azure_postgre_sql import AzurePostgreSql
from openapi_client.models.azure_sql_database import AzureSqlDatabase
from openapi_client.models.azure_storage import AzureStorage
from openapi_client.models.gluster_fs import GlusterFs
from typing import Optional, Set
from typing_extensions import Self

class DataStore(BaseModel):
    """
    DataStore
    """ # noqa: E501
    azure_data_lake_section: Optional[AzureDataLake] = Field(default=None, alias="azureDataLakeSection")
    azure_postgre_sql_section: Optional[AzurePostgreSql] = Field(default=None, alias="azurePostgreSqlSection")
    azure_sql_database_section: Optional[AzureSqlDatabase] = Field(default=None, alias="azureSqlDatabaseSection")
    azure_storage_section: Optional[AzureStorage] = Field(default=None, alias="azureStorageSection")
    data_store_type: Optional[StrictStr] = Field(default=None, description="The Azure storage service this datastore points to.", alias="dataStoreType")
    gluster_fs_section: Optional[GlusterFs] = Field(default=None, alias="glusterFsSection")
    has_been_validated: Optional[StrictBool] = Field(default=None, description="A read only property that denotes whether the service datastore has been validated with credentials.", alias="hasBeenValidated")
    name: Optional[StrictStr] = Field(default=None, description="Name of the datastore")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Tags to datastore")
    __properties: ClassVar[List[str]] = ["azureDataLakeSection", "azurePostgreSqlSection", "azureSqlDatabaseSection", "azureStorageSection", "dataStoreType", "glusterFsSection", "hasBeenValidated", "name", "tags"]

    @field_validator('data_store_type')
    def data_store_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AzureBlob', 'AzureFile', 'AzureDataLake', 'AzureSqlDatabase', 'AzurePostgreSql', 'DBFS', 'AzureDataLakeGen2', 'GlusterFs']):
            raise ValueError("must be one of enum values ('AzureBlob', 'AzureFile', 'AzureDataLake', 'AzureSqlDatabase', 'AzurePostgreSql', 'DBFS', 'AzureDataLakeGen2', 'GlusterFs')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataStore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of azure_data_lake_section
        if self.azure_data_lake_section:
            _dict['azureDataLakeSection'] = self.azure_data_lake_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_postgre_sql_section
        if self.azure_postgre_sql_section:
            _dict['azurePostgreSqlSection'] = self.azure_postgre_sql_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_sql_database_section
        if self.azure_sql_database_section:
            _dict['azureSqlDatabaseSection'] = self.azure_sql_database_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_storage_section
        if self.azure_storage_section:
            _dict['azureStorageSection'] = self.azure_storage_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gluster_fs_section
        if self.gluster_fs_section:
            _dict['glusterFsSection'] = self.gluster_fs_section.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataStore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureDataLakeSection": AzureDataLake.from_dict(obj["azureDataLakeSection"]) if obj.get("azureDataLakeSection") is not None else None,
            "azurePostgreSqlSection": AzurePostgreSql.from_dict(obj["azurePostgreSqlSection"]) if obj.get("azurePostgreSqlSection") is not None else None,
            "azureSqlDatabaseSection": AzureSqlDatabase.from_dict(obj["azureSqlDatabaseSection"]) if obj.get("azureSqlDatabaseSection") is not None else None,
            "azureStorageSection": AzureStorage.from_dict(obj["azureStorageSection"]) if obj.get("azureStorageSection") is not None else None,
            "dataStoreType": obj.get("dataStoreType"),
            "glusterFsSection": GlusterFs.from_dict(obj["glusterFsSection"]) if obj.get("glusterFsSection") is not None else None,
            "hasBeenValidated": obj.get("hasBeenValidated"),
            "name": obj.get("name"),
            "tags": obj.get("tags")
        })
        return _obj



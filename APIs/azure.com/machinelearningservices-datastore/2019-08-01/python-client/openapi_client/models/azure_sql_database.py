# coding: utf-8

"""
    Azure Machine Learning Datastore Management Client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureSqlDatabase(BaseModel):
    """
    AzureSqlDatabase
    """ # noqa: E501
    authority_url: Optional[StrictStr] = Field(default=None, description="The authority URL used for authentication", alias="authorityUrl")
    certificate: Optional[StrictStr] = Field(default=None, description="The content of the certificate used for authentication")
    client_id: Optional[StrictStr] = Field(default=None, description="The Client ID/Application ID", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="The client secret", alias="clientSecret")
    database_name: Optional[StrictStr] = Field(default=None, description="The Azure SQL database name", alias="databaseName")
    endpoint: Optional[StrictStr] = Field(default=None, description="The server host endpoint")
    is_cert_auth: Optional[StrictBool] = Field(default=None, description="Is it using certificate to authenticate. If false then use client secret", alias="isCertAuth")
    resource_group: Optional[StrictStr] = Field(default=None, description="Resource Group Name", alias="resourceGroup")
    resource_uri: Optional[StrictStr] = Field(default=None, description="The resource the service principal/app has access to", alias="resourceUri")
    server_name: Optional[StrictStr] = Field(default=None, description="The Azure SQL server name", alias="serverName")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription Id", alias="subscriptionId")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The ID of the tenant the service principal/app belongs to", alias="tenantId")
    thumbprint: Optional[StrictStr] = Field(default=None, description="The thumbprint of the certificate above")
    __properties: ClassVar[List[str]] = ["authorityUrl", "certificate", "clientId", "clientSecret", "databaseName", "endpoint", "isCertAuth", "resourceGroup", "resourceUri", "serverName", "subscriptionId", "tenantId", "thumbprint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureSqlDatabase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureSqlDatabase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorityUrl": obj.get("authorityUrl"),
            "certificate": obj.get("certificate"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "databaseName": obj.get("databaseName"),
            "endpoint": obj.get("endpoint"),
            "isCertAuth": obj.get("isCertAuth"),
            "resourceGroup": obj.get("resourceGroup"),
            "resourceUri": obj.get("resourceUri"),
            "serverName": obj.get("serverName"),
            "subscriptionId": obj.get("subscriptionId"),
            "tenantId": obj.get("tenantId"),
            "thumbprint": obj.get("thumbprint")
        })
        return _obj



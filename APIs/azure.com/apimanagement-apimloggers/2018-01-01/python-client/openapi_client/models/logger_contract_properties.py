# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class LoggerContractProperties(BaseModel):
    """
    The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.
    """ # noqa: E501
    credentials: Dict[str, StrictStr] = Field(description="The name and SendRule connection string of the event hub for azureEventHub logger. Instrumentation key for applicationInsights logger.")
    description: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Logger description.")
    is_buffered: Optional[StrictBool] = Field(default=None, description="Whether records are buffered in the logger before publishing. Default is assumed to be true.", alias="isBuffered")
    logger_type: StrictStr = Field(description="Logger type.", alias="loggerType")
    __properties: ClassVar[List[str]] = ["credentials", "description", "isBuffered", "loggerType"]

    @field_validator('logger_type')
    def logger_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['azureEventHub', 'applicationInsights']):
            raise ValueError("must be one of enum values ('azureEventHub', 'applicationInsights')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoggerContractProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoggerContractProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credentials": obj.get("credentials"),
            "description": obj.get("description"),
            "isBuffered": obj.get("isBuffered"),
            "loggerType": obj.get("loggerType")
        })
        return _obj



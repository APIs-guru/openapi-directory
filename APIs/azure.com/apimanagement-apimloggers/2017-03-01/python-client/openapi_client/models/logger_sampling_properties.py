# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on logger entity Azure API Management deployment.The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure EventHub.

    The version of the OpenAPI document: 2017-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class LoggerSamplingProperties(BaseModel):
    """
    Sampling settings for an ApplicationInsights logger.
    """ # noqa: E501
    evaluation_interval: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Rate re-evaluation interval in ISO8601 format.", alias="evaluationInterval")
    initial_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Initial sampling rate.", alias="initialPercentage")
    max_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum allowed rate of sampling.", alias="maxPercentage")
    max_telemetry_items_per_second: Optional[StrictInt] = Field(default=None, description="Target rate of telemetry items per second.", alias="maxTelemetryItemsPerSecond")
    min_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum allowed rate of sampling.", alias="minPercentage")
    moving_average_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Moving average ration assigned to most recent value.", alias="movingAverageRatio")
    percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate of sampling for fixed-rate sampling.")
    percentage_decrease_timeout: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Duration in ISO8601 format after which it's allowed to lower the sampling rate.", alias="percentageDecreaseTimeout")
    percentage_increase_timeout: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, description="Duration in ISO8601 format after which it's allowed to increase the sampling rate.", alias="percentageIncreaseTimeout")
    sampling_type: Optional[StrictStr] = Field(default=None, description="Sampling type.", alias="samplingType")
    __properties: ClassVar[List[str]] = ["evaluationInterval", "initialPercentage", "maxPercentage", "maxTelemetryItemsPerSecond", "minPercentage", "movingAverageRatio", "percentage", "percentageDecreaseTimeout", "percentageIncreaseTimeout", "samplingType"]

    @field_validator('sampling_type')
    def sampling_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fixed', 'adaptive']):
            raise ValueError("must be one of enum values ('fixed', 'adaptive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoggerSamplingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoggerSamplingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "evaluationInterval": obj.get("evaluationInterval"),
            "initialPercentage": obj.get("initialPercentage"),
            "maxPercentage": obj.get("maxPercentage"),
            "maxTelemetryItemsPerSecond": obj.get("maxTelemetryItemsPerSecond"),
            "minPercentage": obj.get("minPercentage"),
            "movingAverageRatio": obj.get("movingAverageRatio"),
            "percentage": obj.get("percentage"),
            "percentageDecreaseTimeout": obj.get("percentageDecreaseTimeout"),
            "percentageIncreaseTimeout": obj.get("percentageIncreaseTimeout"),
            "samplingType": obj.get("samplingType")
        })
        return _obj



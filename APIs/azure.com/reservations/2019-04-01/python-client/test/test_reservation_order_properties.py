# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.reservation_order_properties import ReservationOrderProperties

class TestReservationOrderProperties(unittest.TestCase):
    """ReservationOrderProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReservationOrderProperties:
        """Test ReservationOrderProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReservationOrderProperties`
        """
        model = ReservationOrderProperties()
        if include_optional:
            return ReservationOrderProperties(
                billing_plan = 'Upfront',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                display_name = '',
                expiry_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                original_quantity = 56,
                plan_information = openapi_client.models.reservation_order_billing_plan_information.ReservationOrderBillingPlanInformation(
                    next_payment_due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    pricing_currency_total = openapi_client.models.price.Price(
                        amount = 1.337, 
                        currency_code = '', ), 
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    transactions = [
                        openapi_client.models.payment_detail.PaymentDetail(
                            billing_account = '', 
                            billing_currency_total = openapi_client.models.price.Price(
                                amount = 1.337, 
                                currency_code = '', ), 
                            due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            extended_status_info = openapi_client.models.extended_status_info.ExtendedStatusInfo(
                                message = '', 
                                status_code = 'None', ), 
                            payment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            status = 'Succeeded', )
                        ], ),
                provisioning_state = '',
                request_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                reservations = [
                    openapi_client.models.reservation_response.ReservationResponse(
                        etag = 56, 
                        id = '', 
                        location = '', 
                        name = '', 
                        properties = openapi_client.models.reservation_properties.ReservationProperties(
                            applied_scope_type = 'Single', 
                            applied_scopes = [
                                ''
                                ], 
                            billing_plan = 'Upfront', 
                            billing_scope_id = '', 
                            display_name = '', 
                            effective_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            expiry_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            extended_status_info = openapi_client.models.extended_status_info.ExtendedStatusInfo(
                                message = '', 
                                status_code = 'None', ), 
                            instance_flexibility = 'On', 
                            last_updated_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            merge_properties = openapi_client.models.reservation_merge_properties.ReservationMergeProperties(
                                merge_destination = '', 
                                merge_sources = [
                                    ''
                                    ], ), 
                            provisioning_state = '', 
                            quantity = 56, 
                            renew = True, 
                            renew_destination = '', 
                            renew_properties = openapi_client.models.renew_properties_response.RenewPropertiesResponse(
                                billing_currency_total = openapi_client.models.renew_properties_response_billing_currency_total.RenewPropertiesResponse_billingCurrencyTotal(
                                    amount = 1.337, 
                                    currency_code = '', ), 
                                pricing_currency_total = openapi_client.models.renew_properties_response_pricing_currency_total.RenewPropertiesResponse_pricingCurrencyTotal(
                                    amount = 1.337, 
                                    currency_code = '', ), 
                                purchase_properties = openapi_client.models.purchase_request.PurchaseRequest(
                                    location = '', 
                                    sku = openapi_client.models.sku_name.SkuName(
                                        name = '', ), ), ), 
                            renew_source = '', 
                            reserved_resource_type = 'VirtualMachines', 
                            sku_description = '', 
                            split_properties = openapi_client.models.reservation_split_properties.ReservationSplitProperties(
                                split_destinations = [
                                    ''
                                    ], 
                                split_source = '', ), 
                            term = 'P1Y', ), 
                        sku = openapi_client.models.sku_name.SkuName(
                            name = '', ), 
                        type = '', )
                    ],
                term = 'P1Y'
            )
        else:
            return ReservationOrderProperties(
        )
        """

    def testReservationOrderProperties(self):
        """Test ReservationOrderProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

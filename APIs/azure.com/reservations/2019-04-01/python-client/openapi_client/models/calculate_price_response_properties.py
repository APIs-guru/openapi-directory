# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.calculate_price_response_properties_billing_currency_total import CalculatePriceResponsePropertiesBillingCurrencyTotal
from openapi_client.models.calculate_price_response_properties_pricing_currency_total import CalculatePriceResponsePropertiesPricingCurrencyTotal
from openapi_client.models.payment_detail import PaymentDetail
from typing import Optional, Set
from typing_extensions import Self

class CalculatePriceResponseProperties(BaseModel):
    """
    CalculatePriceResponseProperties
    """ # noqa: E501
    billing_currency_total: Optional[CalculatePriceResponsePropertiesBillingCurrencyTotal] = Field(default=None, alias="billingCurrencyTotal")
    is_billing_partner_managed: Optional[StrictBool] = Field(default=None, description="True if billing is managed by Microsoft Partner. Used only for CSP accounts.", alias="isBillingPartnerManaged")
    payment_schedule: Optional[List[PaymentDetail]] = Field(default=None, alias="paymentSchedule")
    pricing_currency_total: Optional[CalculatePriceResponsePropertiesPricingCurrencyTotal] = Field(default=None, alias="pricingCurrencyTotal")
    reservation_order_id: Optional[StrictStr] = Field(default=None, description="GUID that represents reservation order that can be placed after calculating price.", alias="reservationOrderId")
    sku_description: Optional[StrictStr] = Field(default=None, description="Description of SKU that is being purchased.", alias="skuDescription")
    sku_title: Optional[StrictStr] = Field(default=None, description="Title of SKU that is being purchased.", alias="skuTitle")
    __properties: ClassVar[List[str]] = ["billingCurrencyTotal", "isBillingPartnerManaged", "paymentSchedule", "pricingCurrencyTotal", "reservationOrderId", "skuDescription", "skuTitle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculatePriceResponseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_currency_total
        if self.billing_currency_total:
            _dict['billingCurrencyTotal'] = self.billing_currency_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_schedule (list)
        _items = []
        if self.payment_schedule:
            for _item_payment_schedule in self.payment_schedule:
                if _item_payment_schedule:
                    _items.append(_item_payment_schedule.to_dict())
            _dict['paymentSchedule'] = _items
        # override the default output from pydantic by calling `to_dict()` of pricing_currency_total
        if self.pricing_currency_total:
            _dict['pricingCurrencyTotal'] = self.pricing_currency_total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculatePriceResponseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingCurrencyTotal": CalculatePriceResponsePropertiesBillingCurrencyTotal.from_dict(obj["billingCurrencyTotal"]) if obj.get("billingCurrencyTotal") is not None else None,
            "isBillingPartnerManaged": obj.get("isBillingPartnerManaged"),
            "paymentSchedule": [PaymentDetail.from_dict(_item) for _item in obj["paymentSchedule"]] if obj.get("paymentSchedule") is not None else None,
            "pricingCurrencyTotal": CalculatePriceResponsePropertiesPricingCurrencyTotal.from_dict(obj["pricingCurrencyTotal"]) if obj.get("pricingCurrencyTotal") is not None else None,
            "reservationOrderId": obj.get("reservationOrderId"),
            "skuDescription": obj.get("skuDescription"),
            "skuTitle": obj.get("skuTitle")
        })
        return _obj



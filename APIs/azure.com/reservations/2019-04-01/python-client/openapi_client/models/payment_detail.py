# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.extended_status_info import ExtendedStatusInfo
from openapi_client.models.payment_status import PaymentStatus
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class PaymentDetail(BaseModel):
    """
    Information about payment related to a reservation order.
    """ # noqa: E501
    billing_account: Optional[StrictStr] = Field(default=None, description="Shows the Account that is charged for this payment.", alias="billingAccount")
    billing_currency_total: Optional[Price] = Field(default=None, alias="billingCurrencyTotal")
    due_date: Optional[date] = Field(default=None, description="Date when the payment needs to be done.", alias="dueDate")
    extended_status_info: Optional[ExtendedStatusInfo] = Field(default=None, alias="extendedStatusInfo")
    payment_date: Optional[date] = Field(default=None, description="Date when the transaction is completed. Is null when it is scheduled.", alias="paymentDate")
    pricing_currency_total: Optional[Price] = Field(default=None, alias="pricingCurrencyTotal")
    status: Optional[PaymentStatus] = None
    __properties: ClassVar[List[str]] = ["billingAccount", "billingCurrencyTotal", "dueDate", "extendedStatusInfo", "paymentDate", "pricingCurrencyTotal", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_currency_total
        if self.billing_currency_total:
            _dict['billingCurrencyTotal'] = self.billing_currency_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extended_status_info
        if self.extended_status_info:
            _dict['extendedStatusInfo'] = self.extended_status_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_currency_total
        if self.pricing_currency_total:
            _dict['pricingCurrencyTotal'] = self.pricing_currency_total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccount": obj.get("billingAccount"),
            "billingCurrencyTotal": Price.from_dict(obj["billingCurrencyTotal"]) if obj.get("billingCurrencyTotal") is not None else None,
            "dueDate": obj.get("dueDate"),
            "extendedStatusInfo": ExtendedStatusInfo.from_dict(obj["extendedStatusInfo"]) if obj.get("extendedStatusInfo") is not None else None,
            "paymentDate": obj.get("paymentDate"),
            "pricingCurrencyTotal": Price.from_dict(obj["pricingCurrencyTotal"]) if obj.get("pricingCurrencyTotal") is not None else None,
            "status": obj.get("status")
        })
        return _obj



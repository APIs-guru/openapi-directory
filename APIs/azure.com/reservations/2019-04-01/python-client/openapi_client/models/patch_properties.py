# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.applied_scope_type import AppliedScopeType
from openapi_client.models.instance_flexibility import InstanceFlexibility
from openapi_client.models.patch_properties_renew_properties import PatchPropertiesRenewProperties
from typing import Optional, Set
from typing_extensions import Self

class PatchProperties(BaseModel):
    """
    PatchProperties
    """ # noqa: E501
    applied_scope_type: Optional[AppliedScopeType] = Field(default=None, alias="appliedScopeType")
    applied_scopes: Optional[List[StrictStr]] = Field(default=None, description="List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.", alias="appliedScopes")
    instance_flexibility: Optional[InstanceFlexibility] = Field(default=None, alias="instanceFlexibility")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Reservation")
    renew: Optional[StrictBool] = Field(default=False, description="Setting this to true will automatically purchase a new reservation on the expiration date time.")
    renew_properties: Optional[PatchPropertiesRenewProperties] = Field(default=None, alias="renewProperties")
    __properties: ClassVar[List[str]] = ["appliedScopeType", "appliedScopes", "instanceFlexibility", "name", "renew", "renewProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of renew_properties
        if self.renew_properties:
            _dict['renewProperties'] = self.renew_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedScopeType": obj.get("appliedScopeType"),
            "appliedScopes": obj.get("appliedScopes"),
            "instanceFlexibility": obj.get("instanceFlexibility"),
            "name": obj.get("name"),
            "renew": obj.get("renew") if obj.get("renew") is not None else False,
            "renewProperties": PatchPropertiesRenewProperties.from_dict(obj["renewProperties"]) if obj.get("renewProperties") is not None else None
        })
        return _obj



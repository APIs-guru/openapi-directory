# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.applied_scope_type import AppliedScopeType
from openapi_client.models.purchase_request_properties_reserved_resource_properties import PurchaseRequestPropertiesReservedResourceProperties
from openapi_client.models.reservation_billing_plan import ReservationBillingPlan
from openapi_client.models.reservation_term import ReservationTerm
from openapi_client.models.reserved_resource_type import ReservedResourceType
from typing import Optional, Set
from typing_extensions import Self

class PurchaseRequestProperties(BaseModel):
    """
    PurchaseRequestProperties
    """ # noqa: E501
    applied_scope_type: Optional[AppliedScopeType] = Field(default=None, alias="appliedScopeType")
    applied_scopes: Optional[List[StrictStr]] = Field(default=None, description="List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.", alias="appliedScopes")
    billing_plan: Optional[ReservationBillingPlan] = Field(default=None, alias="billingPlan")
    billing_scope_id: Optional[StrictStr] = Field(default=None, description="Subscription that will be charged for purchasing Reservation", alias="billingScopeId")
    display_name: Optional[StrictStr] = Field(default=None, description="Friendly name of the Reservation", alias="displayName")
    quantity: Optional[StrictInt] = Field(default=None, description="Quantity of the SKUs that are part of the Reservation. Must be greater than zero.")
    renew: Optional[StrictBool] = Field(default=False, description="Setting this to true will automatically purchase a new reservation on the expiration date time.")
    reserved_resource_properties: Optional[PurchaseRequestPropertiesReservedResourceProperties] = Field(default=None, alias="reservedResourceProperties")
    reserved_resource_type: Optional[ReservedResourceType] = Field(default=None, alias="reservedResourceType")
    term: Optional[ReservationTerm] = None
    __properties: ClassVar[List[str]] = ["appliedScopeType", "appliedScopes", "billingPlan", "billingScopeId", "displayName", "quantity", "renew", "reservedResourceProperties", "reservedResourceType", "term"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseRequestProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reserved_resource_properties
        if self.reserved_resource_properties:
            _dict['reservedResourceProperties'] = self.reserved_resource_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseRequestProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedScopeType": obj.get("appliedScopeType"),
            "appliedScopes": obj.get("appliedScopes"),
            "billingPlan": obj.get("billingPlan"),
            "billingScopeId": obj.get("billingScopeId"),
            "displayName": obj.get("displayName"),
            "quantity": obj.get("quantity"),
            "renew": obj.get("renew") if obj.get("renew") is not None else False,
            "reservedResourceProperties": PurchaseRequestPropertiesReservedResourceProperties.from_dict(obj["reservedResourceProperties"]) if obj.get("reservedResourceProperties") is not None else None,
            "reservedResourceType": obj.get("reservedResourceType"),
            "term": obj.get("term")
        })
        return _obj



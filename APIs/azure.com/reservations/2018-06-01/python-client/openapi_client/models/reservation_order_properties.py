# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reservation_response import ReservationResponse
from openapi_client.models.reservation_term import ReservationTerm
from typing import Optional, Set
from typing_extensions import Self

class ReservationOrderProperties(BaseModel):
    """
    ReservationOrderProperties
    """ # noqa: E501
    created_date_time: Optional[datetime] = Field(default=None, description="This is the DateTime when the reservation was created.", alias="createdDateTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Friendly name for user to easily identified the reservation.", alias="displayName")
    expiry_date: Optional[date] = Field(default=None, description="This is the date when the Reservation will expire.", alias="expiryDate")
    original_quantity: Optional[StrictInt] = Field(default=None, description="Total Quantity of the SKUs purchased in the Reservation.", alias="originalQuantity")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Current state of the reservation.", alias="provisioningState")
    request_date_time: Optional[datetime] = Field(default=None, description="This is the DateTime when the reservation was initially requested for purchase.", alias="requestDateTime")
    reservations: Optional[List[ReservationResponse]] = None
    term: Optional[ReservationTerm] = None
    __properties: ClassVar[List[str]] = ["createdDateTime", "displayName", "expiryDate", "originalQuantity", "provisioningState", "requestDateTime", "reservations", "term"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReservationOrderProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reservations (list)
        _items = []
        if self.reservations:
            for _item_reservations in self.reservations:
                if _item_reservations:
                    _items.append(_item_reservations.to_dict())
            _dict['reservations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReservationOrderProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDateTime": obj.get("createdDateTime"),
            "displayName": obj.get("displayName"),
            "expiryDate": obj.get("expiryDate"),
            "originalQuantity": obj.get("originalQuantity"),
            "provisioningState": obj.get("provisioningState"),
            "requestDateTime": obj.get("requestDateTime"),
            "reservations": [ReservationResponse.from_dict(_item) for _item in obj["reservations"]] if obj.get("reservations") is not None else None,
            "term": obj.get("term")
        })
        return _obj



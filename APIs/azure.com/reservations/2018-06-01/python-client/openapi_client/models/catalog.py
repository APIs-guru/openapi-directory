# coding: utf-8

"""
    Azure Reservation

    This API describe Azure Reservation

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reservation_term import ReservationTerm
from openapi_client.models.sku_property import SkuProperty
from openapi_client.models.sku_restriction import SkuRestriction
from typing import Optional, Set
from typing_extensions import Self

class Catalog(BaseModel):
    """
    Catalog
    """ # noqa: E501
    locations: Optional[List[StrictStr]] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of SKU")
    resource_type: Optional[StrictStr] = Field(default=None, description="The type of resource the SKU applies to.", alias="resourceType")
    restrictions: Optional[List[SkuRestriction]] = None
    sku_properties: Optional[List[SkuProperty]] = Field(default=None, alias="skuProperties")
    terms: Optional[List[ReservationTerm]] = Field(default=None, description="Available reservation terms for this resource")
    __properties: ClassVar[List[str]] = ["locations", "name", "resourceType", "restrictions", "skuProperties", "terms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Catalog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "locations",
            "name",
            "resource_type",
            "restrictions",
            "sku_properties",
            "terms",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sku_properties (list)
        _items = []
        if self.sku_properties:
            for _item_sku_properties in self.sku_properties:
                if _item_sku_properties:
                    _items.append(_item_sku_properties.to_dict())
            _dict['skuProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Catalog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "resourceType": obj.get("resourceType"),
            "restrictions": [SkuRestriction.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "skuProperties": [SkuProperty.from_dict(_item) for _item in obj["skuProperties"]] if obj.get("skuProperties") is not None else None,
            "terms": obj.get("terms")
        })
        return _obj



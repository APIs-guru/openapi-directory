# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.contact_details import ContactDetails
from openapi_client.models.copy_log_details import CopyLogDetails
from openapi_client.models.destination_account_details import DestinationAccountDetails
from openapi_client.models.job_error_details import JobErrorDetails
from openapi_client.models.job_stages import JobStages
from openapi_client.models.package_shipping_details import PackageShippingDetails
from openapi_client.models.preferences import Preferences
from openapi_client.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.data_box_disk_job_details import DataBoxDiskJobDetails
    from openapi_client.models.data_box_heavy_job_details import DataBoxHeavyJobDetails
    from openapi_client.models.data_box_job_details import DataBoxJobDetails

class JobDetails(BaseModel):
    """
    Job details.
    """ # noqa: E501
    chain_of_custody_sas_key: Optional[StrictStr] = Field(default=None, description="Shared access key to download the chain of custody logs", alias="chainOfCustodySasKey")
    contact_details: ContactDetails = Field(alias="contactDetails")
    copy_log_details: Optional[List[CopyLogDetails]] = Field(default=None, description="List of copy log details.", alias="copyLogDetails")
    delivery_package: Optional[PackageShippingDetails] = Field(default=None, alias="deliveryPackage")
    destination_account_details: List[DestinationAccountDetails] = Field(description="Destination account details.", alias="destinationAccountDetails")
    error_details: Optional[List[JobErrorDetails]] = Field(default=None, description="Error details for failure. This is optional.", alias="errorDetails")
    expected_data_size_in_tera_bytes: Optional[StrictInt] = Field(default=None, description="The expected size of the data, which needs to be transferred in this job, in terabytes.", alias="expectedDataSizeInTeraBytes")
    job_details_type: StrictStr = Field(description="Indicates the type of job details.", alias="jobDetailsType")
    job_stages: Optional[List[JobStages]] = Field(default=None, description="List of stages that run in the job.", alias="jobStages")
    preferences: Optional[Preferences] = None
    return_package: Optional[PackageShippingDetails] = Field(default=None, alias="returnPackage")
    reverse_shipment_label_sas_key: Optional[StrictStr] = Field(default=None, description="Shared access key to download the return shipment label", alias="reverseShipmentLabelSasKey")
    shipping_address: ShippingAddress = Field(alias="shippingAddress")
    __properties: ClassVar[List[str]] = ["chainOfCustodySasKey", "contactDetails", "copyLogDetails", "deliveryPackage", "destinationAccountDetails", "errorDetails", "expectedDataSizeInTeraBytes", "jobDetailsType", "jobStages", "preferences", "returnPackage", "reverseShipmentLabelSasKey", "shippingAddress"]

    @field_validator('job_details_type')
    def job_details_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DataBox', 'DataBoxDisk', 'DataBoxHeavy']):
            raise ValueError("must be one of enum values ('DataBox', 'DataBoxDisk', 'DataBoxHeavy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'jobDetailsType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'DataBoxDiskJobDetails': 'DataBoxDiskJobDetails','DataBoxHeavyJobDetails': 'DataBoxHeavyJobDetails','DataBoxJobDetails': 'DataBoxJobDetails'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[DataBoxDiskJobDetails, DataBoxHeavyJobDetails, DataBoxJobDetails]]:
        """Create an instance of JobDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "chain_of_custody_sas_key",
            "copy_log_details",
            "error_details",
            "job_stages",
            "reverse_shipment_label_sas_key",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_details
        if self.contact_details:
            _dict['contactDetails'] = self.contact_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in copy_log_details (list)
        _items = []
        if self.copy_log_details:
            for _item_copy_log_details in self.copy_log_details:
                if _item_copy_log_details:
                    _items.append(_item_copy_log_details.to_dict())
            _dict['copyLogDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery_package
        if self.delivery_package:
            _dict['deliveryPackage'] = self.delivery_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destination_account_details (list)
        _items = []
        if self.destination_account_details:
            for _item_destination_account_details in self.destination_account_details:
                if _item_destination_account_details:
                    _items.append(_item_destination_account_details.to_dict())
            _dict['destinationAccountDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in error_details (list)
        _items = []
        if self.error_details:
            for _item_error_details in self.error_details:
                if _item_error_details:
                    _items.append(_item_error_details.to_dict())
            _dict['errorDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in job_stages (list)
        _items = []
        if self.job_stages:
            for _item_job_stages in self.job_stages:
                if _item_job_stages:
                    _items.append(_item_job_stages.to_dict())
            _dict['jobStages'] = _items
        # override the default output from pydantic by calling `to_dict()` of preferences
        if self.preferences:
            _dict['preferences'] = self.preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_package
        if self.return_package:
            _dict['returnPackage'] = self.return_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[DataBoxDiskJobDetails, DataBoxHeavyJobDetails, DataBoxJobDetails]]:
        """Create an instance of JobDetails from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'DataBoxDiskJobDetails':
            return import_module("openapi_client.models.data_box_disk_job_details").DataBoxDiskJobDetails.from_dict(obj)
        if object_type ==  'DataBoxHeavyJobDetails':
            return import_module("openapi_client.models.data_box_heavy_job_details").DataBoxHeavyJobDetails.from_dict(obj)
        if object_type ==  'DataBoxJobDetails':
            return import_module("openapi_client.models.data_box_job_details").DataBoxJobDetails.from_dict(obj)

        raise ValueError("JobDetails failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



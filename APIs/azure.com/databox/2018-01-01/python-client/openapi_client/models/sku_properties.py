# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.destination_to_service_location_map import DestinationToServiceLocationMap
from openapi_client.models.sku_capacity import SkuCapacity
from openapi_client.models.sku_cost import SkuCost
from typing import Optional, Set
from typing_extensions import Self

class SkuProperties(BaseModel):
    """
    Properties of the sku.
    """ # noqa: E501
    api_versions: Optional[List[StrictStr]] = Field(default=None, description="Api versions that support this Sku.", alias="apiVersions")
    capacity: Optional[SkuCapacity] = None
    costs: Optional[List[SkuCost]] = Field(default=None, description="Cost of the Sku.")
    destination_to_service_location_map: Optional[List[DestinationToServiceLocationMap]] = Field(default=None, description="The map of destination location to service location.", alias="destinationToServiceLocationMap")
    disabled_reason: Optional[StrictStr] = Field(default=None, description="Reason why the Sku is disabled.", alias="disabledReason")
    disabled_reason_message: Optional[StrictStr] = Field(default=None, description="Message for why the Sku is disabled.", alias="disabledReasonMessage")
    required_feature: Optional[StrictStr] = Field(default=None, description="Required feature to access the sku.", alias="requiredFeature")
    __properties: ClassVar[List[str]] = ["apiVersions", "capacity", "costs", "destinationToServiceLocationMap", "disabledReason", "disabledReasonMessage", "requiredFeature"]

    @field_validator('disabled_reason')
    def disabled_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Country', 'Region', 'Feature', 'OfferType', 'NoSubscriptionInfo']):
            raise ValueError("must be one of enum values ('None', 'Country', 'Region', 'Feature', 'OfferType', 'NoSubscriptionInfo')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkuProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_versions",
            "costs",
            "destination_to_service_location_map",
            "disabled_reason",
            "disabled_reason_message",
            "required_feature",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity:
            _dict['capacity'] = self.capacity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in costs (list)
        _items = []
        if self.costs:
            for _item_costs in self.costs:
                if _item_costs:
                    _items.append(_item_costs.to_dict())
            _dict['costs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destination_to_service_location_map (list)
        _items = []
        if self.destination_to_service_location_map:
            for _item_destination_to_service_location_map in self.destination_to_service_location_map:
                if _item_destination_to_service_location_map:
                    _items.append(_item_destination_to_service_location_map.to_dict())
            _dict['destinationToServiceLocationMap'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkuProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiVersions": obj.get("apiVersions"),
            "capacity": SkuCapacity.from_dict(obj["capacity"]) if obj.get("capacity") is not None else None,
            "costs": [SkuCost.from_dict(_item) for _item in obj["costs"]] if obj.get("costs") is not None else None,
            "destinationToServiceLocationMap": [DestinationToServiceLocationMap.from_dict(_item) for _item in obj["destinationToServiceLocationMap"]] if obj.get("destinationToServiceLocationMap") is not None else None,
            "disabledReason": obj.get("disabledReason"),
            "disabledReasonMessage": obj.get("disabledReasonMessage"),
            "requiredFeature": obj.get("requiredFeature")
        })
        return _obj



# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShippingAddress(BaseModel):
    """
    Shipping address where customer wishes to receive the device.
    """ # noqa: E501
    address_type: Optional[StrictStr] = Field(default=None, description="Type of address.", alias="addressType")
    city: Optional[StrictStr] = Field(default=None, description="Name of the City.")
    company_name: Optional[StrictStr] = Field(default=None, description="Name of the company.", alias="companyName")
    country: StrictStr = Field(description="Name of the Country.")
    postal_code: StrictStr = Field(description="Postal code.", alias="postalCode")
    state_or_province: Optional[StrictStr] = Field(default=None, description="Name of the State or Province.", alias="stateOrProvince")
    street_address1: StrictStr = Field(description="Street Address line 1.", alias="streetAddress1")
    street_address2: Optional[StrictStr] = Field(default=None, description="Street Address line 2.", alias="streetAddress2")
    street_address3: Optional[StrictStr] = Field(default=None, description="Street Address line 3.", alias="streetAddress3")
    zip_extended_code: Optional[StrictStr] = Field(default=None, description="Extended Zip Code.", alias="zipExtendedCode")
    __properties: ClassVar[List[str]] = ["addressType", "city", "companyName", "country", "postalCode", "stateOrProvince", "streetAddress1", "streetAddress2", "streetAddress3", "zipExtendedCode"]

    @field_validator('address_type')
    def address_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Residential', 'Commercial']):
            raise ValueError("must be one of enum values ('None', 'Residential', 'Commercial')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressType": obj.get("addressType"),
            "city": obj.get("city"),
            "companyName": obj.get("companyName"),
            "country": obj.get("country"),
            "postalCode": obj.get("postalCode"),
            "stateOrProvince": obj.get("stateOrProvince"),
            "streetAddress1": obj.get("streetAddress1"),
            "streetAddress2": obj.get("streetAddress2"),
            "streetAddress3": obj.get("streetAddress3"),
            "zipExtendedCode": obj.get("zipExtendedCode")
        })
        return _obj



# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_details import ContactDetails
from openapi_client.models.copy_log_details import CopyLogDetails
from openapi_client.models.data_box_disk_copy_progress import DataBoxDiskCopyProgress
from openapi_client.models.destination_account_details import DestinationAccountDetails
from openapi_client.models.job_details import JobDetails
from openapi_client.models.job_error_details import JobErrorDetails
from openapi_client.models.job_stages import JobStages
from openapi_client.models.package_shipping_details import PackageShippingDetails
from openapi_client.models.preferences import Preferences
from openapi_client.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class DataBoxDiskJobDetails(JobDetails):
    """
    DataBox Disk Job Details.
    """ # noqa: E501
    copy_progress: Optional[List[DataBoxDiskCopyProgress]] = Field(default=None, description="Copy progress per disk.", alias="copyProgress")
    disks_and_size_details: Optional[Dict[str, StrictInt]] = Field(default=None, description="Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.", alias="disksAndSizeDetails")
    passkey: Optional[StrictStr] = Field(default=None, description="User entered passkey for DataBox Disk job.")
    preferred_disks: Optional[Dict[str, StrictInt]] = Field(default=None, description="User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.", alias="preferredDisks")
    __properties: ClassVar[List[str]] = ["chainOfCustodySasKey", "contactDetails", "copyLogDetails", "deliveryPackage", "destinationAccountDetails", "errorDetails", "expectedDataSizeInTerabytes", "jobDetailsType", "jobStages", "preferences", "returnPackage", "reverseShipmentLabelSasKey", "shippingAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataBoxDiskJobDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "copy_progress",
            "disks_and_size_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_details
        if self.contact_details:
            _dict['contactDetails'] = self.contact_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in copy_log_details (list)
        _items = []
        if self.copy_log_details:
            for _item_copy_log_details in self.copy_log_details:
                if _item_copy_log_details:
                    _items.append(_item_copy_log_details.to_dict())
            _dict['copyLogDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery_package
        if self.delivery_package:
            _dict['deliveryPackage'] = self.delivery_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destination_account_details (list)
        _items = []
        if self.destination_account_details:
            for _item_destination_account_details in self.destination_account_details:
                if _item_destination_account_details:
                    _items.append(_item_destination_account_details.to_dict())
            _dict['destinationAccountDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in error_details (list)
        _items = []
        if self.error_details:
            for _item_error_details in self.error_details:
                if _item_error_details:
                    _items.append(_item_error_details.to_dict())
            _dict['errorDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in job_stages (list)
        _items = []
        if self.job_stages:
            for _item_job_stages in self.job_stages:
                if _item_job_stages:
                    _items.append(_item_job_stages.to_dict())
            _dict['jobStages'] = _items
        # override the default output from pydantic by calling `to_dict()` of preferences
        if self.preferences:
            _dict['preferences'] = self.preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_package
        if self.return_package:
            _dict['returnPackage'] = self.return_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataBoxDiskJobDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chainOfCustodySasKey": obj.get("chainOfCustodySasKey"),
            "contactDetails": ContactDetails.from_dict(obj["contactDetails"]) if obj.get("contactDetails") is not None else None,
            "copyLogDetails": [CopyLogDetails.from_dict(_item) for _item in obj["copyLogDetails"]] if obj.get("copyLogDetails") is not None else None,
            "deliveryPackage": PackageShippingDetails.from_dict(obj["deliveryPackage"]) if obj.get("deliveryPackage") is not None else None,
            "destinationAccountDetails": [DestinationAccountDetails.from_dict(_item) for _item in obj["destinationAccountDetails"]] if obj.get("destinationAccountDetails") is not None else None,
            "errorDetails": [JobErrorDetails.from_dict(_item) for _item in obj["errorDetails"]] if obj.get("errorDetails") is not None else None,
            "expectedDataSizeInTerabytes": obj.get("expectedDataSizeInTerabytes"),
            "jobDetailsType": obj.get("jobDetailsType"),
            "jobStages": [JobStages.from_dict(_item) for _item in obj["jobStages"]] if obj.get("jobStages") is not None else None,
            "preferences": Preferences.from_dict(obj["preferences"]) if obj.get("preferences") is not None else None,
            "returnPackage": PackageShippingDetails.from_dict(obj["returnPackage"]) if obj.get("returnPackage") is not None else None,
            "reverseShipmentLabelSasKey": obj.get("reverseShipmentLabelSasKey"),
            "shippingAddress": ShippingAddress.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None
        })
        return _obj



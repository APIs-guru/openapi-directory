# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.error import Error
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.address_validation_properties import AddressValidationProperties
    from openapi_client.models.create_order_limit_for_subscription_validation_response_properties import CreateOrderLimitForSubscriptionValidationResponseProperties
    from openapi_client.models.data_destination_details_validation_response_properties import DataDestinationDetailsValidationResponseProperties
    from openapi_client.models.preferences_validation_response_properties import PreferencesValidationResponseProperties
    from openapi_client.models.sku_availability_validation_response_properties import SkuAvailabilityValidationResponseProperties
    from openapi_client.models.subscription_is_allowed_to_create_job_validation_response_properties import SubscriptionIsAllowedToCreateJobValidationResponseProperties

class ValidationInputResponse(BaseModel):
    """
    Minimum properties that should be present in each individual validation response.
    """ # noqa: E501
    error: Optional[Error] = None
    validation_type: StrictStr = Field(description="Identifies the type of validation response.", alias="validationType")
    __properties: ClassVar[List[str]] = ["error", "validationType"]

    @field_validator('validation_type')
    def validation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ValidateAddress', 'ValidateDataDestinationDetails', 'ValidateSubscriptionIsAllowedToCreateJob', 'ValidatePreferences', 'ValidateCreateOrderLimit', 'ValidateSkuAvailability']):
            raise ValueError("must be one of enum values ('ValidateAddress', 'ValidateDataDestinationDetails', 'ValidateSubscriptionIsAllowedToCreateJob', 'ValidatePreferences', 'ValidateCreateOrderLimit', 'ValidateSkuAvailability')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'validationType'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AddressValidationProperties': 'AddressValidationProperties','CreateOrderLimitForSubscriptionValidationResponseProperties': 'CreateOrderLimitForSubscriptionValidationResponseProperties','DataDestinationDetailsValidationResponseProperties': 'DataDestinationDetailsValidationResponseProperties','PreferencesValidationResponseProperties': 'PreferencesValidationResponseProperties','SkuAvailabilityValidationResponseProperties': 'SkuAvailabilityValidationResponseProperties','SubscriptionIsAllowedToCreateJobValidationResponseProperties': 'SubscriptionIsAllowedToCreateJobValidationResponseProperties'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AddressValidationProperties, CreateOrderLimitForSubscriptionValidationResponseProperties, DataDestinationDetailsValidationResponseProperties, PreferencesValidationResponseProperties, SkuAvailabilityValidationResponseProperties, SubscriptionIsAllowedToCreateJobValidationResponseProperties]]:
        """Create an instance of ValidationInputResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AddressValidationProperties, CreateOrderLimitForSubscriptionValidationResponseProperties, DataDestinationDetailsValidationResponseProperties, PreferencesValidationResponseProperties, SkuAvailabilityValidationResponseProperties, SubscriptionIsAllowedToCreateJobValidationResponseProperties]]:
        """Create an instance of ValidationInputResponse from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AddressValidationProperties':
            return import_module("openapi_client.models.address_validation_properties").AddressValidationProperties.from_dict(obj)
        if object_type ==  'CreateOrderLimitForSubscriptionValidationResponseProperties':
            return import_module("openapi_client.models.create_order_limit_for_subscription_validation_response_properties").CreateOrderLimitForSubscriptionValidationResponseProperties.from_dict(obj)
        if object_type ==  'DataDestinationDetailsValidationResponseProperties':
            return import_module("openapi_client.models.data_destination_details_validation_response_properties").DataDestinationDetailsValidationResponseProperties.from_dict(obj)
        if object_type ==  'PreferencesValidationResponseProperties':
            return import_module("openapi_client.models.preferences_validation_response_properties").PreferencesValidationResponseProperties.from_dict(obj)
        if object_type ==  'SkuAvailabilityValidationResponseProperties':
            return import_module("openapi_client.models.sku_availability_validation_response_properties").SkuAvailabilityValidationResponseProperties.from_dict(obj)
        if object_type ==  'SubscriptionIsAllowedToCreateJobValidationResponseProperties':
            return import_module("openapi_client.models.subscription_is_allowed_to_create_job_validation_response_properties").SubscriptionIsAllowedToCreateJobValidationResponseProperties.from_dict(obj)

        raise ValueError("ValidationInputResponse failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



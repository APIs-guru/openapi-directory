# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AvailableSkuRequest(BaseModel):
    """
    The filters for showing the available skus.
    """ # noqa: E501
    country: StrictStr = Field(description="ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements")
    location: StrictStr = Field(description="Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01")
    sku_names: Optional[List[StrictStr]] = Field(default=None, description="Sku Names to filter for available skus", alias="skuNames")
    transfer_type: StrictStr = Field(description="Type of the transfer.", alias="transferType")
    __properties: ClassVar[List[str]] = ["country", "location", "skuNames", "transferType"]

    @field_validator('sku_names')
    def sku_names_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DataBox', 'DataBoxDisk', 'DataBoxHeavy']):
                raise ValueError("each list item must be one of ('DataBox', 'DataBoxDisk', 'DataBoxHeavy')")
        return value

    @field_validator('transfer_type')
    def transfer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ImportToAzure']):
            raise ValueError("must be one of enum values ('ImportToAzure')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableSkuRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableSkuRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "location": obj.get("location"),
            "skuNames": obj.get("skuNames"),
            "transferType": obj.get("transferType")
        })
        return _obj



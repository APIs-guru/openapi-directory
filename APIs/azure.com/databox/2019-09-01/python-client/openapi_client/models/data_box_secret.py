# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_credential_details import AccountCredentialDetails
from openapi_client.models.appliance_network_configuration import ApplianceNetworkConfiguration
from typing import Optional, Set
from typing_extensions import Self

class DataBoxSecret(BaseModel):
    """
    The secrets related to a DataBox.
    """ # noqa: E501
    account_credential_details: Optional[List[AccountCredentialDetails]] = Field(default=None, description="Per account level access credentials.", alias="accountCredentialDetails")
    device_password: Optional[StrictStr] = Field(default=None, description="Password for out of the box experience on device.", alias="devicePassword")
    device_serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the assigned device.", alias="deviceSerialNumber")
    encoded_validation_cert_pub_key: Optional[StrictStr] = Field(default=None, description="The base 64 encoded public key to authenticate with the device", alias="encodedValidationCertPubKey")
    network_configurations: Optional[List[ApplianceNetworkConfiguration]] = Field(default=None, description="Network configuration of the appliance.", alias="networkConfigurations")
    __properties: ClassVar[List[str]] = ["accountCredentialDetails", "devicePassword", "deviceSerialNumber", "encodedValidationCertPubKey", "networkConfigurations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataBoxSecret from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_credential_details",
            "device_password",
            "device_serial_number",
            "encoded_validation_cert_pub_key",
            "network_configurations",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account_credential_details (list)
        _items = []
        if self.account_credential_details:
            for _item_account_credential_details in self.account_credential_details:
                if _item_account_credential_details:
                    _items.append(_item_account_credential_details.to_dict())
            _dict['accountCredentialDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_configurations (list)
        _items = []
        if self.network_configurations:
            for _item_network_configurations in self.network_configurations:
                if _item_network_configurations:
                    _items.append(_item_network_configurations.to_dict())
            _dict['networkConfigurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataBoxSecret from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountCredentialDetails": [AccountCredentialDetails.from_dict(_item) for _item in obj["accountCredentialDetails"]] if obj.get("accountCredentialDetails") is not None else None,
            "devicePassword": obj.get("devicePassword"),
            "deviceSerialNumber": obj.get("deviceSerialNumber"),
            "encodedValidationCertPubKey": obj.get("encodedValidationCertPubKey"),
            "networkConfigurations": [ApplianceNetworkConfiguration.from_dict(_item) for _item in obj["networkConfigurations"]] if obj.get("networkConfigurations") is not None else None
        })
        return _obj



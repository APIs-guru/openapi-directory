# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.notification_preference import NotificationPreference
from typing import Optional, Set
from typing_extensions import Self

class ContactDetails(BaseModel):
    """
    Contact Details.
    """ # noqa: E501
    contact_name: StrictStr = Field(description="Contact name of the person.", alias="contactName")
    email_list: List[StrictStr] = Field(description="List of Email-ids to be notified about job progress.", alias="emailList")
    mobile: Optional[StrictStr] = Field(default=None, description="Mobile number of the contact person.")
    notification_preference: Optional[List[NotificationPreference]] = Field(default=None, description="Notification preference for a job stage.", alias="notificationPreference")
    phone: StrictStr = Field(description="Phone number of the contact person.")
    phone_extension: Optional[StrictStr] = Field(default=None, description="Phone extension number of the contact person.", alias="phoneExtension")
    __properties: ClassVar[List[str]] = ["contactName", "emailList", "mobile", "notificationPreference", "phone", "phoneExtension"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in notification_preference (list)
        _items = []
        if self.notification_preference:
            for _item_notification_preference in self.notification_preference:
                if _item_notification_preference:
                    _items.append(_item_notification_preference.to_dict())
            _dict['notificationPreference'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactName": obj.get("contactName"),
            "emailList": obj.get("emailList"),
            "mobile": obj.get("mobile"),
            "notificationPreference": [NotificationPreference.from_dict(_item) for _item in obj["notificationPreference"]] if obj.get("notificationPreference") is not None else None,
            "phone": obj.get("phone"),
            "phoneExtension": obj.get("phoneExtension")
        })
        return _obj



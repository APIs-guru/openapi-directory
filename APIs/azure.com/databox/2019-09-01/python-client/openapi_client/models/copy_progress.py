# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CopyProgress(BaseModel):
    """
    Copy progress.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Id of the account where the data needs to be uploaded.", alias="accountId")
    bytes_sent_to_cloud: Optional[StrictInt] = Field(default=None, description="Amount of data uploaded by the job as of now.", alias="bytesSentToCloud")
    data_destination_type: Optional[StrictStr] = Field(default=None, description="Data Destination Type.", alias="dataDestinationType")
    files_errored_out: Optional[StrictInt] = Field(default=None, description="Number of files which could not be copied", alias="filesErroredOut")
    files_processed: Optional[StrictInt] = Field(default=None, description="Number of files processed by the job as of now.", alias="filesProcessed")
    invalid_file_bytes_uploaded: Optional[StrictInt] = Field(default=None, description="Total amount of data not adhering to azure naming conventions which were processed by automatic renaming", alias="invalidFileBytesUploaded")
    invalid_files_processed: Optional[StrictInt] = Field(default=None, description="Number of files not adhering to azure naming conventions which were processed by automatic renaming", alias="invalidFilesProcessed")
    renamed_container_count: Optional[StrictInt] = Field(default=None, description="Number of folders not adhering to azure naming conventions which were processed by automatic renaming", alias="renamedContainerCount")
    storage_account_name: Optional[StrictStr] = Field(default=None, description="Name of the storage account where the data needs to be uploaded.", alias="storageAccountName")
    total_bytes_to_process: Optional[StrictInt] = Field(default=None, description="Total amount of data to be processed by the job.", alias="totalBytesToProcess")
    total_files_to_process: Optional[StrictInt] = Field(default=None, description="Total number of files to be processed by the job.", alias="totalFilesToProcess")
    __properties: ClassVar[List[str]] = ["accountId", "bytesSentToCloud", "dataDestinationType", "filesErroredOut", "filesProcessed", "invalidFileBytesUploaded", "invalidFilesProcessed", "renamedContainerCount", "storageAccountName", "totalBytesToProcess", "totalFilesToProcess"]

    @field_validator('data_destination_type')
    def data_destination_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['StorageAccount', 'ManagedDisk']):
            raise ValueError("must be one of enum values ('StorageAccount', 'ManagedDisk')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopyProgress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "bytes_sent_to_cloud",
            "data_destination_type",
            "files_errored_out",
            "files_processed",
            "invalid_file_bytes_uploaded",
            "invalid_files_processed",
            "renamed_container_count",
            "storage_account_name",
            "total_bytes_to_process",
            "total_files_to_process",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopyProgress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "bytesSentToCloud": obj.get("bytesSentToCloud"),
            "dataDestinationType": obj.get("dataDestinationType"),
            "filesErroredOut": obj.get("filesErroredOut"),
            "filesProcessed": obj.get("filesProcessed"),
            "invalidFileBytesUploaded": obj.get("invalidFileBytesUploaded"),
            "invalidFilesProcessed": obj.get("invalidFilesProcessed"),
            "renamedContainerCount": obj.get("renamedContainerCount"),
            "storageAccountName": obj.get("storageAccountName"),
            "totalBytesToProcess": obj.get("totalBytesToProcess"),
            "totalFilesToProcess": obj.get("totalFilesToProcess")
        })
        return _obj



# coding: utf-8

"""
    DataBoxManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error import Error
from openapi_client.models.job_delivery_info import JobDeliveryInfo
from openapi_client.models.job_details import JobDetails
from typing import Optional, Set
from typing_extensions import Self

class JobProperties(BaseModel):
    """
    Job Properties
    """ # noqa: E501
    cancellation_reason: Optional[StrictStr] = Field(default=None, description="Reason for cancellation.", alias="cancellationReason")
    delivery_info: Optional[JobDeliveryInfo] = Field(default=None, alias="deliveryInfo")
    delivery_type: Optional[StrictStr] = Field(default=None, description="Delivery type of Job.", alias="deliveryType")
    details: Optional[JobDetails] = None
    error: Optional[Error] = None
    is_cancellable: Optional[StrictBool] = Field(default=None, description="Describes whether the job is cancellable or not.", alias="isCancellable")
    is_cancellable_without_fee: Optional[StrictBool] = Field(default=None, description="Flag to indicate cancellation of scheduled job.", alias="isCancellableWithoutFee")
    is_deletable: Optional[StrictBool] = Field(default=None, description="Describes whether the job is deletable or not.", alias="isDeletable")
    is_shipping_address_editable: Optional[StrictBool] = Field(default=None, description="Describes whether the shipping address is editable or not.", alias="isShippingAddressEditable")
    start_time: Optional[datetime] = Field(default=None, description="Time at which the job was started in UTC ISO 8601 format.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Name of the stage which is in progress.")
    __properties: ClassVar[List[str]] = ["cancellationReason", "deliveryInfo", "deliveryType", "details", "error", "isCancellable", "isCancellableWithoutFee", "isDeletable", "isShippingAddressEditable", "startTime", "status"]

    @field_validator('delivery_type')
    def delivery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NonScheduled', 'Scheduled']):
            raise ValueError("must be one of enum values ('NonScheduled', 'Scheduled')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DeviceOrdered', 'DevicePrepared', 'Dispatched', 'Delivered', 'PickedUp', 'AtAzureDC', 'DataCopy', 'Completed', 'CompletedWithErrors', 'Cancelled', 'Failed_IssueReportedAtCustomer', 'Failed_IssueDetectedAtAzureDC', 'Aborted', 'CompletedWithWarnings', 'ReadyToDispatchFromAzureDC', 'ReadyToReceiveAtAzureDC']):
            raise ValueError("must be one of enum values ('DeviceOrdered', 'DevicePrepared', 'Dispatched', 'Delivered', 'PickedUp', 'AtAzureDC', 'DataCopy', 'Completed', 'CompletedWithErrors', 'Cancelled', 'Failed_IssueReportedAtCustomer', 'Failed_IssueDetectedAtAzureDC', 'Aborted', 'CompletedWithWarnings', 'ReadyToDispatchFromAzureDC', 'ReadyToReceiveAtAzureDC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cancellation_reason",
            "is_cancellable",
            "is_cancellable_without_fee",
            "is_deletable",
            "is_shipping_address_editable",
            "start_time",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_info
        if self.delivery_info:
            _dict['deliveryInfo'] = self.delivery_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancellationReason": obj.get("cancellationReason"),
            "deliveryInfo": JobDeliveryInfo.from_dict(obj["deliveryInfo"]) if obj.get("deliveryInfo") is not None else None,
            "deliveryType": obj.get("deliveryType"),
            "details": JobDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "isCancellable": obj.get("isCancellable"),
            "isCancellableWithoutFee": obj.get("isCancellableWithoutFee"),
            "isDeletable": obj.get("isDeletable"),
            "isShippingAddressEditable": obj.get("isShippingAddressEditable"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    RecoveryServicesClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpgradeDetails(BaseModel):
    """
    Details for upgrading vault.
    """ # noqa: E501
    end_time_utc: Optional[datetime] = Field(default=None, description="UTC time at which the upgrade operation has ended.", alias="endTimeUtc")
    last_updated_time_utc: Optional[datetime] = Field(default=None, description="UTC time at which the upgrade operation status was last updated.", alias="lastUpdatedTimeUtc")
    message: Optional[StrictStr] = Field(default=None, description="Message to the user containing information about the upgrade operation.")
    operation_id: Optional[StrictStr] = Field(default=None, description="ID of the vault upgrade operation.", alias="operationId")
    previous_resource_id: Optional[StrictStr] = Field(default=None, description="Resource ID of the vault before the upgrade.", alias="previousResourceId")
    start_time_utc: Optional[datetime] = Field(default=None, description="UTC time at which the upgrade operation has started.", alias="startTimeUtc")
    status: Optional[StrictStr] = Field(default=None, description="Status of the vault upgrade operation.")
    trigger_type: Optional[StrictStr] = Field(default=None, description="The way the vault upgrade was triggered.", alias="triggerType")
    upgraded_resource_id: Optional[StrictStr] = Field(default=None, description="Resource ID of the upgraded vault.", alias="upgradedResourceId")
    __properties: ClassVar[List[str]] = ["endTimeUtc", "lastUpdatedTimeUtc", "message", "operationId", "previousResourceId", "startTimeUtc", "status", "triggerType", "upgradedResourceId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'InProgress', 'Upgraded', 'Failed']):
            raise ValueError("must be one of enum values ('Unknown', 'InProgress', 'Upgraded', 'Failed')")
        return value

    @field_validator('trigger_type')
    def trigger_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UserTriggered', 'ForcedUpgrade']):
            raise ValueError("must be one of enum values ('UserTriggered', 'ForcedUpgrade')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time_utc",
            "last_updated_time_utc",
            "message",
            "operation_id",
            "previous_resource_id",
            "start_time_utc",
            "status",
            "trigger_type",
            "upgraded_resource_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeUtc": obj.get("endTimeUtc"),
            "lastUpdatedTimeUtc": obj.get("lastUpdatedTimeUtc"),
            "message": obj.get("message"),
            "operationId": obj.get("operationId"),
            "previousResourceId": obj.get("previousResourceId"),
            "startTimeUtc": obj.get("startTimeUtc"),
            "status": obj.get("status"),
            "triggerType": obj.get("triggerType"),
            "upgradedResourceId": obj.get("upgradedResourceId")
        })
        return _obj



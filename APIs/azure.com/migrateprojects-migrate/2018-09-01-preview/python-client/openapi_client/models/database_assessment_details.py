# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatabaseAssessmentDetails(BaseModel):
    """
    Assessment properties that can be shared by various publishers.
    """ # noqa: E501
    assessment_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the database assessment scope/Id.", alias="assessmentId")
    assessment_target_type: Optional[StrictStr] = Field(default=None, description="Gets or sets the assessed target database type.", alias="assessmentTargetType")
    breaking_changes_count: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of breaking changes found.", alias="breakingChangesCount")
    compatibility_level: Optional[StrictStr] = Field(default=None, description="Gets or sets the compatibility level of the database.", alias="compatibilityLevel")
    database_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the database name.", alias="databaseName")
    database_size_in_mb: Optional[StrictStr] = Field(default=None, description="Gets or sets the database size.", alias="databaseSizeInMB")
    enqueue_time: Optional[StrictStr] = Field(default=None, description="Gets or sets the time the message was enqueued.", alias="enqueueTime")
    extended_info: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets the extended properties of the database.", alias="extendedInfo")
    instance_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the database server instance Id.", alias="instanceId")
    is_ready_for_migration: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the database is ready for migration.", alias="isReadyForMigration")
    last_assessed_time: Optional[datetime] = Field(default=None, description="Gets or sets the time when the database was last assessed.", alias="lastAssessedTime")
    last_updated_time: Optional[datetime] = Field(default=None, description="Gets or sets the time of the last modification of the database details.", alias="lastUpdatedTime")
    migration_blockers_count: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of blocking changes found.", alias="migrationBlockersCount")
    solution_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the solution that sent the data.", alias="solutionName")
    __properties: ClassVar[List[str]] = ["assessmentId", "assessmentTargetType", "breakingChangesCount", "compatibilityLevel", "databaseName", "databaseSizeInMB", "enqueueTime", "extendedInfo", "instanceId", "isReadyForMigration", "lastAssessedTime", "lastUpdatedTime", "migrationBlockersCount", "solutionName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseAssessmentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseAssessmentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessmentId": obj.get("assessmentId"),
            "assessmentTargetType": obj.get("assessmentTargetType"),
            "breakingChangesCount": obj.get("breakingChangesCount"),
            "compatibilityLevel": obj.get("compatibilityLevel"),
            "databaseName": obj.get("databaseName"),
            "databaseSizeInMB": obj.get("databaseSizeInMB"),
            "enqueueTime": obj.get("enqueueTime"),
            "extendedInfo": obj.get("extendedInfo"),
            "instanceId": obj.get("instanceId"),
            "isReadyForMigration": obj.get("isReadyForMigration"),
            "lastAssessedTime": obj.get("lastAssessedTime"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "migrationBlockersCount": obj.get("migrationBlockersCount"),
            "solutionName": obj.get("solutionName")
        })
        return _obj



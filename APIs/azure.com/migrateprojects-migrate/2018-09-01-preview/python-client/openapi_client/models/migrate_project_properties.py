# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.project_summary import ProjectSummary
from typing import Optional, Set
from typing_extensions import Self

class MigrateProjectProperties(BaseModel):
    """
    Class for migrate project properties.
    """ # noqa: E501
    last_summary_refreshed_time: Optional[datetime] = Field(default=None, description="Gets the last time the project summary was refreshed.", alias="lastSummaryRefreshedTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the migrate project.", alias="provisioningState")
    refresh_summary_state: Optional[StrictStr] = Field(default=None, description="Gets the refresh summary state.", alias="refreshSummaryState")
    registered_tools: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of tools registered with the migrate project.", alias="registeredTools")
    summary: Optional[Dict[str, ProjectSummary]] = Field(default=None, description="Gets the summary of the migrate project.")
    __properties: ClassVar[List[str]] = ["lastSummaryRefreshedTime", "provisioningState", "refreshSummaryState", "registeredTools", "summary"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Creating', 'Deleting', 'Failed', 'Moving', 'Succeeded']):
            raise ValueError("must be one of enum values ('Accepted', 'Creating', 'Deleting', 'Failed', 'Moving', 'Succeeded')")
        return value

    @field_validator('refresh_summary_state')
    def refresh_summary_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Started', 'InProgress', 'Completed', 'Failed']):
            raise ValueError("must be one of enum values ('Started', 'InProgress', 'Completed', 'Failed')")
        return value

    @field_validator('registered_tools')
    def registered_tools_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ServerDiscovery', 'ServerAssessment', 'ServerMigration', 'Cloudamize', 'Turbonomic', 'Zerto', 'CorentTech', 'ServerAssessmentV1', 'ServerMigration_Replication', 'Carbonite', 'DataMigrationAssistant', 'DatabaseMigrationService']):
                raise ValueError("each list item must be one of ('ServerDiscovery', 'ServerAssessment', 'ServerMigration', 'Cloudamize', 'Turbonomic', 'Zerto', 'CorentTech', 'ServerAssessmentV1', 'ServerMigration_Replication', 'Carbonite', 'DataMigrationAssistant', 'DatabaseMigrationService')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrateProjectProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_summary_refreshed_time",
            "refresh_summary_state",
            "summary",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in summary (dict)
        _field_dict = {}
        if self.summary:
            for _key_summary in self.summary:
                if self.summary[_key_summary]:
                    _field_dict[_key_summary] = self.summary[_key_summary].to_dict()
            _dict['summary'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrateProjectProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lastSummaryRefreshedTime": obj.get("lastSummaryRefreshedTime"),
            "provisioningState": obj.get("provisioningState"),
            "refreshSummaryState": obj.get("refreshSummaryState"),
            "registeredTools": obj.get("registeredTools"),
            "summary": dict(
                (_k, ProjectSummary.from_dict(_v))
                for _k, _v in obj["summary"].items()
            )
            if obj.get("summary") is not None
            else None
        })
        return _obj



# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MigrationDetails(BaseModel):
    """
    Migration properties that can be shared by various publishers.
    """ # noqa: E501
    bios_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the BIOS ID of the machine.", alias="biosId")
    enqueue_time: Optional[StrictStr] = Field(default=None, description="Gets or sets the time the message was enqueued.", alias="enqueueTime")
    extended_info: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets the ISV specific extended information.", alias="extendedInfo")
    fabric_type: Optional[StrictStr] = Field(default=None, description="Gets or sets the fabric type.", alias="fabricType")
    fqdn: Optional[StrictStr] = Field(default=None, description="Gets or sets the FQDN of the machine.")
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6.", alias="ipAddresses")
    last_updated_time: Optional[datetime] = Field(default=None, description="Gets or sets the time of the last modification of the machine details.", alias="lastUpdatedTime")
    mac_addresses: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the list of MAC addresses of the machine.", alias="macAddresses")
    machine_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier of the machine.", alias="machineId")
    machine_manager_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM).", alias="machineManagerId")
    machine_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the machine.", alias="machineName")
    migration_phase: Optional[StrictStr] = Field(default=None, description="Gets or sets the phase of migration of the machine.", alias="migrationPhase")
    migration_tested: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether migration was tested on the machine.", alias="migrationTested")
    replication_progress_percentage: Optional[StrictInt] = Field(default=None, description="Gets or sets the progress percentage of migration on the machine.", alias="replicationProgressPercentage")
    solution_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the solution that sent the data.", alias="solutionName")
    target_vm_arm_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the ARM id the migrated VM.", alias="targetVMArmId")
    __properties: ClassVar[List[str]] = ["biosId", "enqueueTime", "extendedInfo", "fabricType", "fqdn", "ipAddresses", "lastUpdatedTime", "macAddresses", "machineId", "machineManagerId", "machineName", "migrationPhase", "migrationTested", "replicationProgressPercentage", "solutionName", "targetVMArmId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biosId": obj.get("biosId"),
            "enqueueTime": obj.get("enqueueTime"),
            "extendedInfo": obj.get("extendedInfo"),
            "fabricType": obj.get("fabricType"),
            "fqdn": obj.get("fqdn"),
            "ipAddresses": obj.get("ipAddresses"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "macAddresses": obj.get("macAddresses"),
            "machineId": obj.get("machineId"),
            "machineManagerId": obj.get("machineManagerId"),
            "machineName": obj.get("machineName"),
            "migrationPhase": obj.get("migrationPhase"),
            "migrationTested": obj.get("migrationTested"),
            "replicationProgressPercentage": obj.get("replicationProgressPercentage"),
            "solutionName": obj.get("solutionName"),
            "targetVMArmId": obj.get("targetVMArmId")
        })
        return _obj



# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IEdmEntityContainer(BaseModel):
    """
    IEdmEntityContainer
    """ # noqa: E501
    elements: Optional[List[IEdmEntityContainerElement]] = None
    name: Optional[StrictStr] = None
    namespace: Optional[StrictStr] = None
    schema_element_kind: Optional[StrictStr] = Field(default=None, alias="schemaElementKind")
    __properties: ClassVar[List[str]] = ["elements", "name", "namespace", "schemaElementKind"]

    @field_validator('schema_element_kind')
    def schema_element_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'TypeDefinition', 'Term', 'Action', 'EntityContainer', 'Function']):
            raise ValueError("must be one of enum values ('None', 'TypeDefinition', 'Term', 'Action', 'EntityContainer', 'Function')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IEdmEntityContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "elements",
            "name",
            "namespace",
            "schema_element_kind",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in elements (list)
        _items = []
        if self.elements:
            for _item_elements in self.elements:
                if _item_elements:
                    _items.append(_item_elements.to_dict())
            _dict['elements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IEdmEntityContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "elements": [IEdmEntityContainerElement.from_dict(_item) for _item in obj["elements"]] if obj.get("elements") is not None else None,
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "schemaElementKind": obj.get("schemaElementKind")
        })
        return _obj

from openapi_client.models.i_edm_entity_container_element import IEdmEntityContainerElement
# TODO: Rewrite to not use raise_errors
IEdmEntityContainer.model_rebuild(raise_errors=False)


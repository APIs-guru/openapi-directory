# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.i_edm_entity_container import IEdmEntityContainer
from openapi_client.models.i_edm_schema_element import IEdmSchemaElement
from openapi_client.models.i_edm_vocabulary_annotation import IEdmVocabularyAnnotation
from typing import Optional, Set
from typing_extensions import Self

class IEdmModel(BaseModel):
    """
    IEdmModel
    """ # noqa: E501
    declared_namespaces: Optional[List[StrictStr]] = Field(default=None, alias="declaredNamespaces")
    direct_value_annotations_manager: Optional[Dict[str, Any]] = Field(default=None, alias="directValueAnnotationsManager")
    entity_container: Optional[IEdmEntityContainer] = Field(default=None, alias="entityContainer")
    referenced_models: Optional[List[IEdmModel]] = Field(default=None, alias="referencedModels")
    schema_elements: Optional[List[IEdmSchemaElement]] = Field(default=None, alias="schemaElements")
    vocabulary_annotations: Optional[List[IEdmVocabularyAnnotation]] = Field(default=None, alias="vocabularyAnnotations")
    __properties: ClassVar[List[str]] = ["declaredNamespaces", "directValueAnnotationsManager", "entityContainer", "referencedModels", "schemaElements", "vocabularyAnnotations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IEdmModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "declared_namespaces",
            "referenced_models",
            "schema_elements",
            "vocabulary_annotations",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity_container
        if self.entity_container:
            _dict['entityContainer'] = self.entity_container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in referenced_models (list)
        _items = []
        if self.referenced_models:
            for _item_referenced_models in self.referenced_models:
                if _item_referenced_models:
                    _items.append(_item_referenced_models.to_dict())
            _dict['referencedModels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schema_elements (list)
        _items = []
        if self.schema_elements:
            for _item_schema_elements in self.schema_elements:
                if _item_schema_elements:
                    _items.append(_item_schema_elements.to_dict())
            _dict['schemaElements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vocabulary_annotations (list)
        _items = []
        if self.vocabulary_annotations:
            for _item_vocabulary_annotations in self.vocabulary_annotations:
                if _item_vocabulary_annotations:
                    _items.append(_item_vocabulary_annotations.to_dict())
            _dict['vocabularyAnnotations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IEdmModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "declaredNamespaces": obj.get("declaredNamespaces"),
            "directValueAnnotationsManager": obj.get("directValueAnnotationsManager"),
            "entityContainer": IEdmEntityContainer.from_dict(obj["entityContainer"]) if obj.get("entityContainer") is not None else None,
            "referencedModels": [IEdmModel.from_dict(_item) for _item in obj["referencedModels"]] if obj.get("referencedModels") is not None else None,
            "schemaElements": [IEdmSchemaElement.from_dict(_item) for _item in obj["schemaElements"]] if obj.get("schemaElements") is not None else None,
            "vocabularyAnnotations": [IEdmVocabularyAnnotation.from_dict(_item) for _item in obj["vocabularyAnnotations"]] if obj.get("vocabularyAnnotations") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
IEdmModel.model_rebuild(raise_errors=False)


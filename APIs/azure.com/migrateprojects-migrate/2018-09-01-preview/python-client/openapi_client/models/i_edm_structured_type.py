# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IEdmStructuredType(BaseModel):
    """
    IEdmStructuredType
    """ # noqa: E501
    base_type: Optional[IEdmStructuredType] = Field(default=None, alias="baseType")
    declared_properties: Optional[List[IEdmProperty]] = Field(default=None, alias="declaredProperties")
    is_abstract: Optional[StrictBool] = Field(default=None, alias="isAbstract")
    is_open: Optional[StrictBool] = Field(default=None, alias="isOpen")
    type_kind: Optional[StrictStr] = Field(default=None, alias="typeKind")
    __properties: ClassVar[List[str]] = ["baseType", "declaredProperties", "isAbstract", "isOpen", "typeKind"]

    @field_validator('type_kind')
    def type_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Primitive', 'Entity', 'Complex', 'Collection', 'EntityReference', 'Enum', 'TypeDefinition', 'Untyped', 'Path']):
            raise ValueError("must be one of enum values ('None', 'Primitive', 'Entity', 'Complex', 'Collection', 'EntityReference', 'Enum', 'TypeDefinition', 'Untyped', 'Path')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IEdmStructuredType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "declared_properties",
            "is_abstract",
            "is_open",
            "type_kind",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_type
        if self.base_type:
            _dict['baseType'] = self.base_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in declared_properties (list)
        _items = []
        if self.declared_properties:
            for _item_declared_properties in self.declared_properties:
                if _item_declared_properties:
                    _items.append(_item_declared_properties.to_dict())
            _dict['declaredProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IEdmStructuredType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseType": IEdmStructuredType.from_dict(obj["baseType"]) if obj.get("baseType") is not None else None,
            "declaredProperties": [IEdmProperty.from_dict(_item) for _item in obj["declaredProperties"]] if obj.get("declaredProperties") is not None else None,
            "isAbstract": obj.get("isAbstract"),
            "isOpen": obj.get("isOpen"),
            "typeKind": obj.get("typeKind")
        })
        return _obj

from openapi_client.models.i_edm_property import IEdmProperty
# TODO: Rewrite to not use raise_errors
IEdmStructuredType.model_rebuild(raise_errors=False)


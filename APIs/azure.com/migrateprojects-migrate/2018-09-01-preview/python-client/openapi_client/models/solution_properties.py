# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.solution_details import SolutionDetails
from openapi_client.models.solution_summary import SolutionSummary
from typing import Optional, Set
from typing_extensions import Self

class SolutionProperties(BaseModel):
    """
    Class for solution properties.
    """ # noqa: E501
    cleanup_state: Optional[StrictStr] = Field(default=None, description="Gets or sets the cleanup state of the solution.", alias="cleanupState")
    details: Optional[SolutionDetails] = None
    goal: Optional[StrictStr] = Field(default=None, description="Gets or sets the goal of the solution.")
    purpose: Optional[StrictStr] = Field(default=None, description="Gets or sets the purpose of the solution.")
    status: Optional[StrictStr] = Field(default=None, description="Gets or sets the current status of the solution.")
    summary: Optional[SolutionSummary] = None
    tool: Optional[StrictStr] = Field(default=None, description="Gets or sets the tool being used in the solution.")
    __properties: ClassVar[List[str]] = ["cleanupState", "details", "goal", "purpose", "status", "summary", "tool"]

    @field_validator('cleanup_state')
    def cleanup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Started', 'InProgress', 'Completed', 'Failed']):
            raise ValueError("must be one of enum values ('None', 'Started', 'InProgress', 'Completed', 'Failed')")
        return value

    @field_validator('goal')
    def goal_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Servers', 'Databases']):
            raise ValueError("must be one of enum values ('Servers', 'Databases')")
        return value

    @field_validator('purpose')
    def purpose_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Discovery', 'Assessment', 'Migration']):
            raise ValueError("must be one of enum values ('Discovery', 'Assessment', 'Migration')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Inactive', 'Active']):
            raise ValueError("must be one of enum values ('Inactive', 'Active')")
        return value

    @field_validator('tool')
    def tool_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ServerDiscovery', 'ServerAssessment', 'ServerMigration', 'Cloudamize', 'Turbonomic', 'Zerto', 'CorentTech', 'ServerAssessmentV1', 'ServerMigration_Replication', 'Carbonite', 'DataMigrationAssistant', 'DatabaseMigrationService']):
            raise ValueError("must be one of enum values ('ServerDiscovery', 'ServerAssessment', 'ServerMigration', 'Cloudamize', 'Turbonomic', 'Zerto', 'CorentTech', 'ServerAssessmentV1', 'ServerMigration_Replication', 'Carbonite', 'DataMigrationAssistant', 'DatabaseMigrationService')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SolutionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SolutionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cleanupState": obj.get("cleanupState"),
            "details": SolutionDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "goal": obj.get("goal"),
            "purpose": obj.get("purpose"),
            "status": obj.get("status"),
            "summary": SolutionSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "tool": obj.get("tool")
        })
        return _obj



# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assessment_details import AssessmentDetails
from openapi_client.models.discovery_details import DiscoveryDetails
from openapi_client.models.migration_details import MigrationDetails
from typing import Optional, Set
from typing_extensions import Self

class MachineProperties(BaseModel):
    """
    Properties of the machine resource.
    """ # noqa: E501
    assessment_data: Optional[List[AssessmentDetails]] = Field(default=None, description="Gets or sets the assessment details of the machine published by various sources.", alias="assessmentData")
    discovery_data: Optional[List[DiscoveryDetails]] = Field(default=None, description="Gets or sets the discovery details of the machine published by various sources.", alias="discoveryData")
    last_updated_time: Optional[datetime] = Field(default=None, description="Gets or sets the time of the last modification of the machine.", alias="lastUpdatedTime")
    migration_data: Optional[List[MigrationDetails]] = Field(default=None, description="Gets or sets the migration details of the machine published by various sources.", alias="migrationData")
    __properties: ClassVar[List[str]] = ["assessmentData", "discoveryData", "lastUpdatedTime", "migrationData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assessment_data (list)
        _items = []
        if self.assessment_data:
            for _item_assessment_data in self.assessment_data:
                if _item_assessment_data:
                    _items.append(_item_assessment_data.to_dict())
            _dict['assessmentData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discovery_data (list)
        _items = []
        if self.discovery_data:
            for _item_discovery_data in self.discovery_data:
                if _item_discovery_data:
                    _items.append(_item_discovery_data.to_dict())
            _dict['discoveryData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in migration_data (list)
        _items = []
        if self.migration_data:
            for _item_migration_data in self.migration_data:
                if _item_migration_data:
                    _items.append(_item_migration_data.to_dict())
            _dict['migrationData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessmentData": [AssessmentDetails.from_dict(_item) for _item in obj["assessmentData"]] if obj.get("assessmentData") is not None else None,
            "discoveryData": [DiscoveryDetails.from_dict(_item) for _item in obj["discoveryData"]] if obj.get("discoveryData") is not None else None,
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "migrationData": [MigrationDetails.from_dict(_item) for _item in obj["migrationData"]] if obj.get("migrationData") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatabaseInstanceDiscoveryDetails(BaseModel):
    """
    Discovery properties that can be shared by various publishers.
    """ # noqa: E501
    enqueue_time: Optional[StrictStr] = Field(default=None, description="Gets or sets the time the message was enqueued.", alias="enqueueTime")
    extended_info: Optional[Dict[str, StrictStr]] = Field(default=None, description="Gets or sets the extended properties of the database server.", alias="extendedInfo")
    host_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the host name of the database server.", alias="hostName")
    instance_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the database instance Id.", alias="instanceId")
    instance_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the database instance name.", alias="instanceName")
    instance_type: Optional[StrictStr] = Field(default=None, description="Gets or sets the database instance type.", alias="instanceType")
    instance_version: Optional[StrictStr] = Field(default=None, description="Gets or sets the database instance version.", alias="instanceVersion")
    ip_address: Optional[StrictStr] = Field(default=None, description="Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6.", alias="ipAddress")
    last_updated_time: Optional[datetime] = Field(default=None, description="Gets or sets the time of the last modification of the database instance details.", alias="lastUpdatedTime")
    port_number: Optional[StrictInt] = Field(default=None, description="Gets or sets the port number of the database server.", alias="portNumber")
    solution_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the solution that sent the data.", alias="solutionName")
    __properties: ClassVar[List[str]] = ["enqueueTime", "extendedInfo", "hostName", "instanceId", "instanceName", "instanceType", "instanceVersion", "ipAddress", "lastUpdatedTime", "portNumber", "solutionName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseInstanceDiscoveryDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseInstanceDiscoveryDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enqueueTime": obj.get("enqueueTime"),
            "extendedInfo": obj.get("extendedInfo"),
            "hostName": obj.get("hostName"),
            "instanceId": obj.get("instanceId"),
            "instanceName": obj.get("instanceName"),
            "instanceType": obj.get("instanceType"),
            "instanceVersion": obj.get("instanceVersion"),
            "ipAddress": obj.get("ipAddress"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "portNumber": obj.get("portNumber"),
            "solutionName": obj.get("solutionName")
        })
        return _obj



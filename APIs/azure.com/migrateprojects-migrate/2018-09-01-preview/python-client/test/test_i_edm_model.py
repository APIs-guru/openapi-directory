# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.i_edm_model import IEdmModel

class TestIEdmModel(unittest.TestCase):
    """IEdmModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IEdmModel:
        """Test IEdmModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IEdmModel`
        """
        model = IEdmModel()
        if include_optional:
            return IEdmModel(
                declared_namespaces = [
                    ''
                    ],
                direct_value_annotations_manager = openapi_client.models.i_edm_direct_value_annotations_manager.IEdmDirectValueAnnotationsManager(),
                entity_container = openapi_client.models.i_edm_entity_container.IEdmEntityContainer(
                    elements = [
                        openapi_client.models.i_edm_entity_container_element.IEdmEntityContainerElement(
                            container = openapi_client.models.i_edm_entity_container.IEdmEntityContainer(
                                name = '', 
                                namespace = '', 
                                schema_element_kind = 'None', ), 
                            container_element_kind = 'None', 
                            name = '', )
                        ], 
                    name = '', 
                    namespace = '', 
                    schema_element_kind = 'None', ),
                referenced_models = [
                    openapi_client.models.i_edm_model.IEdmModel(
                        declared_namespaces = [
                            ''
                            ], 
                        direct_value_annotations_manager = openapi_client.models.i_edm_direct_value_annotations_manager.IEdmDirectValueAnnotationsManager(), 
                        entity_container = openapi_client.models.i_edm_entity_container.IEdmEntityContainer(
                            elements = [
                                openapi_client.models.i_edm_entity_container_element.IEdmEntityContainerElement(
                                    container = openapi_client.models.i_edm_entity_container.IEdmEntityContainer(
                                        name = '', 
                                        namespace = '', 
                                        schema_element_kind = 'None', ), 
                                    container_element_kind = 'None', 
                                    name = '', )
                                ], 
                            name = '', 
                            namespace = '', 
                            schema_element_kind = 'None', ), 
                        schema_elements = [
                            openapi_client.models.i_edm_schema_element.IEdmSchemaElement(
                                name = '', 
                                namespace = '', 
                                schema_element_kind = 'None', )
                            ], 
                        vocabulary_annotations = [
                            openapi_client.models.i_edm_vocabulary_annotation.IEdmVocabularyAnnotation(
                                qualifier = '', 
                                target = openapi_client.models.i_edm_vocabulary_annotatable.IEdmVocabularyAnnotatable(), 
                                term = openapi_client.models.i_edm_term.IEdmTerm(
                                    applies_to = '', 
                                    default_value = '', 
                                    name = '', 
                                    namespace = '', 
                                    schema_element_kind = 'None', 
                                    type = openapi_client.models.i_edm_type_reference.IEdmTypeReference(
                                        definition = openapi_client.models.i_edm_type.IEdmType(
                                            type_kind = 'None', ), 
                                        is_nullable = True, ), ), 
                                value = openapi_client.models.i_edm_expression.IEdmExpression(
                                    expression_kind = 'None', ), )
                            ], )
                    ],
                schema_elements = [
                    openapi_client.models.i_edm_schema_element.IEdmSchemaElement(
                        name = '', 
                        namespace = '', 
                        schema_element_kind = 'None', )
                    ],
                vocabulary_annotations = [
                    openapi_client.models.i_edm_vocabulary_annotation.IEdmVocabularyAnnotation(
                        qualifier = '', 
                        target = openapi_client.models.i_edm_vocabulary_annotatable.IEdmVocabularyAnnotatable(), 
                        term = openapi_client.models.i_edm_term.IEdmTerm(
                            applies_to = '', 
                            default_value = '', 
                            name = '', 
                            namespace = '', 
                            schema_element_kind = 'None', 
                            type = openapi_client.models.i_edm_type_reference.IEdmTypeReference(
                                definition = openapi_client.models.i_edm_type.IEdmType(
                                    type_kind = 'None', ), 
                                is_nullable = True, ), ), 
                        value = openapi_client.models.i_edm_expression.IEdmExpression(
                            expression_kind = 'None', ), )
                    ]
            )
        else:
            return IEdmModel(
        )
        """

    def testIEdmModel(self):
        """Test IEdmModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

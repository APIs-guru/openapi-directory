# coding: utf-8

"""
    Azure Migrate Hub

    Migrate your workloads to Azure.

    The version of the OpenAPI document: 2018-09-01-preview
    Contact: azuremigratehub@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.machine import Machine

class TestMachine(unittest.TestCase):
    """Machine unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Machine:
        """Test Machine
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Machine`
        """
        model = Machine()
        if include_optional:
            return Machine(
                id = '',
                name = '',
                properties = openapi_client.models.machine_properties.MachineProperties(
                    assessment_data = [
                        openapi_client.models.assessment_details.AssessmentDetails(
                            assessment_id = '', 
                            bios_id = '', 
                            enqueue_time = '', 
                            extended_info = {
                                'key' : ''
                                }, 
                            fabric_type = '', 
                            fqdn = '', 
                            ip_addresses = [
                                ''
                                ], 
                            last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            mac_addresses = [
                                ''
                                ], 
                            machine_id = '', 
                            machine_manager_id = '', 
                            machine_name = '', 
                            solution_name = '', 
                            target_storage_type = {
                                'key' : ''
                                }, 
                            target_vm_location = '', 
                            target_vm_size = '', )
                        ], 
                    discovery_data = [
                        openapi_client.models.discovery_details.DiscoveryDetails(
                            bios_id = '', 
                            enqueue_time = '', 
                            fabric_type = '', 
                            fqdn = '', 
                            last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            machine_id = '', 
                            machine_manager_id = '', 
                            machine_name = '', 
                            os_name = '', 
                            os_type = '', 
                            os_version = '', 
                            solution_name = '', )
                        ], 
                    last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    migration_data = [
                        openapi_client.models.migration_details.MigrationDetails(
                            bios_id = '', 
                            enqueue_time = '', 
                            fabric_type = '', 
                            fqdn = '', 
                            last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            machine_id = '', 
                            machine_manager_id = '', 
                            machine_name = '', 
                            migration_phase = '', 
                            migration_tested = True, 
                            replication_progress_percentage = 56, 
                            solution_name = '', 
                            target_vm_arm_id = '', )
                        ], ),
                type = ''
            )
        else:
            return Machine(
        )
        """

    def testMachine(self):
        """Test Machine"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

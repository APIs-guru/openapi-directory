# coding: utf-8

"""
    ManagedServicesClient

    Specification for ManagedServices.

    The version of the OpenAPI document: 2019-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.registration_assignment_properties_registration_definition import RegistrationAssignmentPropertiesRegistrationDefinition
from typing import Optional, Set
from typing_extensions import Self

class RegistrationAssignmentProperties(BaseModel):
    """
    Properties of a registration assignment.
    """ # noqa: E501
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Current state of the registration assignment.", alias="provisioningState")
    registration_definition: Optional[RegistrationAssignmentPropertiesRegistrationDefinition] = Field(default=None, alias="registrationDefinition")
    registration_definition_id: StrictStr = Field(description="Fully qualified path of the registration definition.", alias="registrationDefinitionId")
    __properties: ClassVar[List[str]] = ["provisioningState", "registrationDefinition", "registrationDefinitionId"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating']):
            raise ValueError("must be one of enum values ('NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegistrationAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registration_definition
        if self.registration_definition:
            _dict['registrationDefinition'] = self.registration_definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegistrationAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "provisioningState": obj.get("provisioningState"),
            "registrationDefinition": RegistrationAssignmentPropertiesRegistrationDefinition.from_dict(obj["registrationDefinition"]) if obj.get("registrationDefinition") is not None else None,
            "registrationDefinitionId": obj.get("registrationDefinitionId")
        })
        return _obj



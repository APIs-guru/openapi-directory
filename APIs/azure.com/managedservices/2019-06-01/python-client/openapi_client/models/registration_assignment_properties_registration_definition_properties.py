# coding: utf-8

"""
    ManagedServicesClient

    Specification for ManagedServices.

    The version of the OpenAPI document: 2019-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization import Authorization
from typing import Optional, Set
from typing_extensions import Self

class RegistrationAssignmentPropertiesRegistrationDefinitionProperties(BaseModel):
    """
    Properties of registration definition inside registration assignment.
    """ # noqa: E501
    authorizations: Optional[List[Authorization]] = Field(default=None, description="Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the registration definition.")
    managed_by_tenant_id: Optional[StrictStr] = Field(default=None, description="Id of the managedBy tenant.", alias="managedByTenantId")
    managed_by_tenant_name: Optional[StrictStr] = Field(default=None, description="Name of the managedBy tenant.", alias="managedByTenantName")
    managee_tenant_id: Optional[StrictStr] = Field(default=None, description="Id of the home tenant.", alias="manageeTenantId")
    managee_tenant_name: Optional[StrictStr] = Field(default=None, description="Name of the home tenant.", alias="manageeTenantName")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Current state of the registration definition.", alias="provisioningState")
    registration_definition_name: Optional[StrictStr] = Field(default=None, description="Name of the registration definition.", alias="registrationDefinitionName")
    __properties: ClassVar[List[str]] = ["authorizations", "description", "managedByTenantId", "managedByTenantName", "manageeTenantId", "manageeTenantName", "provisioningState", "registrationDefinitionName"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating']):
            raise ValueError("must be one of enum values ('NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegistrationAssignmentPropertiesRegistrationDefinitionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegistrationAssignmentPropertiesRegistrationDefinitionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizations": [Authorization.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "description": obj.get("description"),
            "managedByTenantId": obj.get("managedByTenantId"),
            "managedByTenantName": obj.get("managedByTenantName"),
            "manageeTenantId": obj.get("manageeTenantId"),
            "manageeTenantName": obj.get("manageeTenantName"),
            "provisioningState": obj.get("provisioningState"),
            "registrationDefinitionName": obj.get("registrationDefinitionName")
        })
        return _obj



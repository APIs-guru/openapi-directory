# coding: utf-8

"""
    Anomaly Finder Client

    The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.last_detect_response import LastDetectResponse

class TestLastDetectResponse(unittest.TestCase):
    """LastDetectResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LastDetectResponse:
        """Test LastDetectResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LastDetectResponse`
        """
        model = LastDetectResponse()
        if include_optional:
            return LastDetectResponse(
                expected_value = 1.337,
                is_anomaly = True,
                is_negative_anomaly = True,
                is_positive_anomaly = True,
                lower_margin = 1.337,
                period = 56,
                suggested_window = 56,
                upper_margin = 1.337
            )
        else:
            return LastDetectResponse(
        )
        """

    def testLastDetectResponse(self):
        """Test LastDetectResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Anomaly Finder Client

    The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LastDetectResponse(BaseModel):
    """
    LastDetectResponse
    """ # noqa: E501
    expected_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expected value of the latest point.", alias="expectedValue")
    is_anomaly: Optional[StrictBool] = Field(default=None, description="Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.", alias="isAnomaly")
    is_negative_anomaly: Optional[StrictBool] = Field(default=None, description="Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.", alias="isNegativeAnomaly")
    is_positive_anomaly: Optional[StrictBool] = Field(default=None, description="Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.", alias="isPositiveAnomaly")
    lower_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. ", alias="lowerMargin")
    period: Optional[StrictInt] = Field(default=None, description="Frequency extracted from the series, zero means no recurrent pattern has been found.")
    suggested_window: Optional[StrictInt] = Field(default=None, description="Suggested input series points needed for detecting the latest point.", alias="suggestedWindow")
    upper_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting sensitivity value, anomaly status of latest point can be changed.", alias="upperMargin")
    __properties: ClassVar[List[str]] = ["expectedValue", "isAnomaly", "isNegativeAnomaly", "isPositiveAnomaly", "lowerMargin", "period", "suggestedWindow", "upperMargin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LastDetectResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LastDetectResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectedValue": obj.get("expectedValue"),
            "isAnomaly": obj.get("isAnomaly"),
            "isNegativeAnomaly": obj.get("isNegativeAnomaly"),
            "isPositiveAnomaly": obj.get("isPositiveAnomaly"),
            "lowerMargin": obj.get("lowerMargin"),
            "period": obj.get("period"),
            "suggestedWindow": obj.get("suggestedWindow"),
            "upperMargin": obj.get("upperMargin")
        })
        return _obj



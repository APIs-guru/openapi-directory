# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_link import ContentLink
from openapi_client.models.integration_account_map_properties_parameters_schema import IntegrationAccountMapPropertiesParametersSchema
from openapi_client.models.map_type import MapType
from typing import Optional, Set
from typing_extensions import Self

class IntegrationAccountMapProperties(BaseModel):
    """
    The integration account map.
    """ # noqa: E501
    changed_time: Optional[datetime] = Field(default=None, description="The changed time.", alias="changedTime")
    content: Optional[Dict[str, Any]] = Field(default=None, description="The content.")
    content_link: Optional[ContentLink] = Field(default=None, alias="contentLink")
    content_type: Optional[StrictStr] = Field(default=None, description="The content type.", alias="contentType")
    created_time: Optional[datetime] = Field(default=None, description="The created time.", alias="createdTime")
    map_type: MapType = Field(alias="mapType")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="The metadata.")
    parameters_schema: Optional[IntegrationAccountMapPropertiesParametersSchema] = Field(default=None, alias="parametersSchema")
    __properties: ClassVar[List[str]] = ["changedTime", "content", "contentLink", "contentType", "createdTime", "mapType", "metadata", "parametersSchema"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationAccountMapProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "changed_time",
            "created_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_link
        if self.content_link:
            _dict['contentLink'] = self.content_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters_schema
        if self.parameters_schema:
            _dict['parametersSchema'] = self.parameters_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationAccountMapProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changedTime": obj.get("changedTime"),
            "content": obj.get("content"),
            "contentLink": ContentLink.from_dict(obj["contentLink"]) if obj.get("contentLink") is not None else None,
            "contentType": obj.get("contentType"),
            "createdTime": obj.get("createdTime"),
            "mapType": obj.get("mapType"),
            "metadata": obj.get("metadata"),
            "parametersSchema": IntegrationAccountMapPropertiesParametersSchema.from_dict(obj["parametersSchema"]) if obj.get("parametersSchema") is not None else None
        })
        return _obj



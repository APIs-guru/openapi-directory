# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.usage_indicator import UsageIndicator
from openapi_client.models.x12_date_format import X12DateFormat
from openapi_client.models.x12_time_format import X12TimeFormat
from typing import Optional, Set
from typing_extensions import Self

class X12EnvelopeSettings(BaseModel):
    """
    The X12 agreement envelope settings.
    """ # noqa: E501
    control_standards_id: StrictInt = Field(description="The controls standards id.", alias="controlStandardsId")
    control_version_number: StrictStr = Field(description="The control version number.", alias="controlVersionNumber")
    enable_default_group_headers: StrictBool = Field(description="The value indicating whether to enable default group headers.", alias="enableDefaultGroupHeaders")
    functional_group_id: Optional[StrictStr] = Field(default=None, description="The functional group id.", alias="functionalGroupId")
    group_control_number_lower_bound: StrictInt = Field(description="The group control number lower bound.", alias="groupControlNumberLowerBound")
    group_control_number_upper_bound: StrictInt = Field(description="The group control number upper bound.", alias="groupControlNumberUpperBound")
    group_header_agency_code: StrictStr = Field(description="The group header agency code.", alias="groupHeaderAgencyCode")
    group_header_date_format: X12DateFormat = Field(alias="groupHeaderDateFormat")
    group_header_time_format: X12TimeFormat = Field(alias="groupHeaderTimeFormat")
    group_header_version: StrictStr = Field(description="The group header version.", alias="groupHeaderVersion")
    interchange_control_number_lower_bound: StrictInt = Field(description="The interchange  control number lower bound.", alias="interchangeControlNumberLowerBound")
    interchange_control_number_upper_bound: StrictInt = Field(description="The interchange  control number upper bound.", alias="interchangeControlNumberUpperBound")
    overwrite_existing_transaction_set_control_number: StrictBool = Field(description="The value indicating whether to overwrite existing transaction set control number.", alias="overwriteExistingTransactionSetControlNumber")
    receiver_application_id: StrictStr = Field(description="The receiver application id.", alias="receiverApplicationId")
    rollover_group_control_number: StrictBool = Field(description="The value indicating whether to rollover group control number.", alias="rolloverGroupControlNumber")
    rollover_interchange_control_number: StrictBool = Field(description="The value indicating whether to rollover interchange control number.", alias="rolloverInterchangeControlNumber")
    rollover_transaction_set_control_number: StrictBool = Field(description="The value indicating whether to rollover transaction set control number.", alias="rolloverTransactionSetControlNumber")
    sender_application_id: StrictStr = Field(description="The sender application id.", alias="senderApplicationId")
    transaction_set_control_number_lower_bound: StrictInt = Field(description="The transaction set control number lower bound.", alias="transactionSetControlNumberLowerBound")
    transaction_set_control_number_prefix: Optional[StrictStr] = Field(default=None, description="The transaction set control number prefix.", alias="transactionSetControlNumberPrefix")
    transaction_set_control_number_suffix: Optional[StrictStr] = Field(default=None, description="The transaction set control number suffix.", alias="transactionSetControlNumberSuffix")
    transaction_set_control_number_upper_bound: StrictInt = Field(description="The transaction set control number upper bound.", alias="transactionSetControlNumberUpperBound")
    usage_indicator: UsageIndicator = Field(alias="usageIndicator")
    use_control_standards_id_as_repetition_character: StrictBool = Field(description="The value indicating whether to use control standards id as repetition character.", alias="useControlStandardsIdAsRepetitionCharacter")
    __properties: ClassVar[List[str]] = ["controlStandardsId", "controlVersionNumber", "enableDefaultGroupHeaders", "functionalGroupId", "groupControlNumberLowerBound", "groupControlNumberUpperBound", "groupHeaderAgencyCode", "groupHeaderDateFormat", "groupHeaderTimeFormat", "groupHeaderVersion", "interchangeControlNumberLowerBound", "interchangeControlNumberUpperBound", "overwriteExistingTransactionSetControlNumber", "receiverApplicationId", "rolloverGroupControlNumber", "rolloverInterchangeControlNumber", "rolloverTransactionSetControlNumber", "senderApplicationId", "transactionSetControlNumberLowerBound", "transactionSetControlNumberPrefix", "transactionSetControlNumberSuffix", "transactionSetControlNumberUpperBound", "usageIndicator", "useControlStandardsIdAsRepetitionCharacter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X12EnvelopeSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X12EnvelopeSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controlStandardsId": obj.get("controlStandardsId"),
            "controlVersionNumber": obj.get("controlVersionNumber"),
            "enableDefaultGroupHeaders": obj.get("enableDefaultGroupHeaders"),
            "functionalGroupId": obj.get("functionalGroupId"),
            "groupControlNumberLowerBound": obj.get("groupControlNumberLowerBound"),
            "groupControlNumberUpperBound": obj.get("groupControlNumberUpperBound"),
            "groupHeaderAgencyCode": obj.get("groupHeaderAgencyCode"),
            "groupHeaderDateFormat": obj.get("groupHeaderDateFormat"),
            "groupHeaderTimeFormat": obj.get("groupHeaderTimeFormat"),
            "groupHeaderVersion": obj.get("groupHeaderVersion"),
            "interchangeControlNumberLowerBound": obj.get("interchangeControlNumberLowerBound"),
            "interchangeControlNumberUpperBound": obj.get("interchangeControlNumberUpperBound"),
            "overwriteExistingTransactionSetControlNumber": obj.get("overwriteExistingTransactionSetControlNumber"),
            "receiverApplicationId": obj.get("receiverApplicationId"),
            "rolloverGroupControlNumber": obj.get("rolloverGroupControlNumber"),
            "rolloverInterchangeControlNumber": obj.get("rolloverInterchangeControlNumber"),
            "rolloverTransactionSetControlNumber": obj.get("rolloverTransactionSetControlNumber"),
            "senderApplicationId": obj.get("senderApplicationId"),
            "transactionSetControlNumberLowerBound": obj.get("transactionSetControlNumberLowerBound"),
            "transactionSetControlNumberPrefix": obj.get("transactionSetControlNumberPrefix"),
            "transactionSetControlNumberSuffix": obj.get("transactionSetControlNumberSuffix"),
            "transactionSetControlNumberUpperBound": obj.get("transactionSetControlNumberUpperBound"),
            "usageIndicator": obj.get("usageIndicator"),
            "useControlStandardsIdAsRepetitionCharacter": obj.get("useControlStandardsIdAsRepetitionCharacter")
        })
        return _obj



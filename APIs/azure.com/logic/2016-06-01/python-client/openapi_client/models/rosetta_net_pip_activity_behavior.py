# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from openapi_client.models.rosetta_net_action_type import RosettaNetActionType
from openapi_client.models.rosetta_net_pip_confidentiality_scope import RosettaNetPipConfidentialityScope
from openapi_client.models.rosetta_net_response_type import RosettaNetResponseType
from typing import Optional, Set
from typing_extensions import Self

class RosettaNetPipActivityBehavior(BaseModel):
    """
    The integration account RosettaNet ProcessConfiguration activity behavior.
    """ # noqa: E501
    action_type: RosettaNetActionType = Field(alias="actionType")
    is_authorization_required: StrictBool = Field(description="The value indicating whether authorization is required.", alias="isAuthorizationRequired")
    is_secured_transport_required: StrictBool = Field(description="The value indicating whether secured transport is required.", alias="isSecuredTransportRequired")
    non_repudiation_of_origin_and_content: StrictBool = Field(description="The value indicating whether non-repudiation is for origin and content.", alias="nonRepudiationOfOriginAndContent")
    persistent_confidentiality_scope: RosettaNetPipConfidentialityScope = Field(alias="persistentConfidentialityScope")
    response_type: RosettaNetResponseType = Field(alias="responseType")
    retry_count: StrictInt = Field(description="The value indicating retry count.", alias="retryCount")
    time_to_perform_in_seconds: StrictInt = Field(description="The time to perform in seconds.", alias="timeToPerformInSeconds")
    __properties: ClassVar[List[str]] = ["actionType", "isAuthorizationRequired", "isSecuredTransportRequired", "nonRepudiationOfOriginAndContent", "persistentConfidentialityScope", "responseType", "retryCount", "timeToPerformInSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RosettaNetPipActivityBehavior from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RosettaNetPipActivityBehavior from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionType": obj.get("actionType"),
            "isAuthorizationRequired": obj.get("isAuthorizationRequired"),
            "isSecuredTransportRequired": obj.get("isSecuredTransportRequired"),
            "nonRepudiationOfOriginAndContent": obj.get("nonRepudiationOfOriginAndContent"),
            "persistentConfidentialityScope": obj.get("persistentConfidentialityScope"),
            "responseType": obj.get("responseType"),
            "retryCount": obj.get("retryCount"),
            "timeToPerformInSeconds": obj.get("timeToPerformInSeconds")
        })
        return _obj



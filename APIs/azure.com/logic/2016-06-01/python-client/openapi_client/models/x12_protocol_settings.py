# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.x12_acknowledgement_settings import X12AcknowledgementSettings
from openapi_client.models.x12_delimiter_overrides import X12DelimiterOverrides
from openapi_client.models.x12_envelope_override import X12EnvelopeOverride
from openapi_client.models.x12_envelope_settings import X12EnvelopeSettings
from openapi_client.models.x12_framing_settings import X12FramingSettings
from openapi_client.models.x12_message_filter import X12MessageFilter
from openapi_client.models.x12_message_identifier import X12MessageIdentifier
from openapi_client.models.x12_processing_settings import X12ProcessingSettings
from openapi_client.models.x12_schema_reference import X12SchemaReference
from openapi_client.models.x12_security_settings import X12SecuritySettings
from openapi_client.models.x12_validation_override import X12ValidationOverride
from openapi_client.models.x12_validation_settings import X12ValidationSettings
from typing import Optional, Set
from typing_extensions import Self

class X12ProtocolSettings(BaseModel):
    """
    The X12 agreement protocol settings.
    """ # noqa: E501
    acknowledgement_settings: X12AcknowledgementSettings = Field(alias="acknowledgementSettings")
    envelope_overrides: Optional[List[X12EnvelopeOverride]] = Field(default=None, description="The X12 envelope override settings.", alias="envelopeOverrides")
    envelope_settings: X12EnvelopeSettings = Field(alias="envelopeSettings")
    framing_settings: X12FramingSettings = Field(alias="framingSettings")
    message_filter: X12MessageFilter = Field(alias="messageFilter")
    message_filter_list: Optional[List[X12MessageIdentifier]] = Field(default=None, description="The X12 message filter list.", alias="messageFilterList")
    processing_settings: X12ProcessingSettings = Field(alias="processingSettings")
    schema_references: List[X12SchemaReference] = Field(description="The X12 schema references.", alias="schemaReferences")
    security_settings: X12SecuritySettings = Field(alias="securitySettings")
    validation_overrides: Optional[List[X12ValidationOverride]] = Field(default=None, description="The X12 validation override settings.", alias="validationOverrides")
    validation_settings: X12ValidationSettings = Field(alias="validationSettings")
    x12_delimiter_overrides: Optional[List[X12DelimiterOverrides]] = Field(default=None, description="The X12 delimiter override settings.", alias="x12DelimiterOverrides")
    __properties: ClassVar[List[str]] = ["acknowledgementSettings", "envelopeOverrides", "envelopeSettings", "framingSettings", "messageFilter", "messageFilterList", "processingSettings", "schemaReferences", "securitySettings", "validationOverrides", "validationSettings", "x12DelimiterOverrides"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X12ProtocolSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acknowledgement_settings
        if self.acknowledgement_settings:
            _dict['acknowledgementSettings'] = self.acknowledgement_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in envelope_overrides (list)
        _items = []
        if self.envelope_overrides:
            for _item_envelope_overrides in self.envelope_overrides:
                if _item_envelope_overrides:
                    _items.append(_item_envelope_overrides.to_dict())
            _dict['envelopeOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of envelope_settings
        if self.envelope_settings:
            _dict['envelopeSettings'] = self.envelope_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of framing_settings
        if self.framing_settings:
            _dict['framingSettings'] = self.framing_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_filter
        if self.message_filter:
            _dict['messageFilter'] = self.message_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in message_filter_list (list)
        _items = []
        if self.message_filter_list:
            for _item_message_filter_list in self.message_filter_list:
                if _item_message_filter_list:
                    _items.append(_item_message_filter_list.to_dict())
            _dict['messageFilterList'] = _items
        # override the default output from pydantic by calling `to_dict()` of processing_settings
        if self.processing_settings:
            _dict['processingSettings'] = self.processing_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schema_references (list)
        _items = []
        if self.schema_references:
            for _item_schema_references in self.schema_references:
                if _item_schema_references:
                    _items.append(_item_schema_references.to_dict())
            _dict['schemaReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of security_settings
        if self.security_settings:
            _dict['securitySettings'] = self.security_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validation_overrides (list)
        _items = []
        if self.validation_overrides:
            for _item_validation_overrides in self.validation_overrides:
                if _item_validation_overrides:
                    _items.append(_item_validation_overrides.to_dict())
            _dict['validationOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of validation_settings
        if self.validation_settings:
            _dict['validationSettings'] = self.validation_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in x12_delimiter_overrides (list)
        _items = []
        if self.x12_delimiter_overrides:
            for _item_x12_delimiter_overrides in self.x12_delimiter_overrides:
                if _item_x12_delimiter_overrides:
                    _items.append(_item_x12_delimiter_overrides.to_dict())
            _dict['x12DelimiterOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X12ProtocolSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledgementSettings": X12AcknowledgementSettings.from_dict(obj["acknowledgementSettings"]) if obj.get("acknowledgementSettings") is not None else None,
            "envelopeOverrides": [X12EnvelopeOverride.from_dict(_item) for _item in obj["envelopeOverrides"]] if obj.get("envelopeOverrides") is not None else None,
            "envelopeSettings": X12EnvelopeSettings.from_dict(obj["envelopeSettings"]) if obj.get("envelopeSettings") is not None else None,
            "framingSettings": X12FramingSettings.from_dict(obj["framingSettings"]) if obj.get("framingSettings") is not None else None,
            "messageFilter": X12MessageFilter.from_dict(obj["messageFilter"]) if obj.get("messageFilter") is not None else None,
            "messageFilterList": [X12MessageIdentifier.from_dict(_item) for _item in obj["messageFilterList"]] if obj.get("messageFilterList") is not None else None,
            "processingSettings": X12ProcessingSettings.from_dict(obj["processingSettings"]) if obj.get("processingSettings") is not None else None,
            "schemaReferences": [X12SchemaReference.from_dict(_item) for _item in obj["schemaReferences"]] if obj.get("schemaReferences") is not None else None,
            "securitySettings": X12SecuritySettings.from_dict(obj["securitySettings"]) if obj.get("securitySettings") is not None else None,
            "validationOverrides": [X12ValidationOverride.from_dict(_item) for _item in obj["validationOverrides"]] if obj.get("validationOverrides") is not None else None,
            "validationSettings": X12ValidationSettings.from_dict(obj["validationSettings"]) if obj.get("validationSettings") is not None else None,
            "x12DelimiterOverrides": [X12DelimiterOverrides.from_dict(_item) for _item in obj["x12DelimiterOverrides"]] if obj.get("x12DelimiterOverrides") is not None else None
        })
        return _obj



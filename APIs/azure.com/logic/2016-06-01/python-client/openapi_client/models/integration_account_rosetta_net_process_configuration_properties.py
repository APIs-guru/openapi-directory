# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rosetta_net_pip_activity_settings import RosettaNetPipActivitySettings
from openapi_client.models.rosetta_net_pip_role_settings import RosettaNetPipRoleSettings
from typing import Optional, Set
from typing_extensions import Self

class IntegrationAccountRosettaNetProcessConfigurationProperties(BaseModel):
    """
    The integration account RosettaNet process configuration properties.
    """ # noqa: E501
    activity_settings: RosettaNetPipActivitySettings = Field(alias="activitySettings")
    changed_time: Optional[datetime] = Field(default=None, description="The changed time.", alias="changedTime")
    created_time: Optional[datetime] = Field(default=None, description="The created time.", alias="createdTime")
    description: Optional[StrictStr] = Field(default=None, description="The integration account RosettaNet ProcessConfiguration properties.")
    initiator_role_settings: RosettaNetPipRoleSettings = Field(alias="initiatorRoleSettings")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="The metadata.")
    process_code: StrictStr = Field(description="The integration account RosettaNet process code.", alias="processCode")
    process_name: StrictStr = Field(description="The integration account RosettaNet process name.", alias="processName")
    process_version: StrictStr = Field(description="The integration account RosettaNet process version.", alias="processVersion")
    responder_role_settings: RosettaNetPipRoleSettings = Field(alias="responderRoleSettings")
    __properties: ClassVar[List[str]] = ["activitySettings", "changedTime", "createdTime", "description", "initiatorRoleSettings", "metadata", "processCode", "processName", "processVersion", "responderRoleSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationAccountRosettaNetProcessConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "changed_time",
            "created_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activity_settings
        if self.activity_settings:
            _dict['activitySettings'] = self.activity_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initiator_role_settings
        if self.initiator_role_settings:
            _dict['initiatorRoleSettings'] = self.initiator_role_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responder_role_settings
        if self.responder_role_settings:
            _dict['responderRoleSettings'] = self.responder_role_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationAccountRosettaNetProcessConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activitySettings": RosettaNetPipActivitySettings.from_dict(obj["activitySettings"]) if obj.get("activitySettings") is not None else None,
            "changedTime": obj.get("changedTime"),
            "createdTime": obj.get("createdTime"),
            "description": obj.get("description"),
            "initiatorRoleSettings": RosettaNetPipRoleSettings.from_dict(obj["initiatorRoleSettings"]) if obj.get("initiatorRoleSettings") is not None else None,
            "metadata": obj.get("metadata"),
            "processCode": obj.get("processCode"),
            "processName": obj.get("processName"),
            "processVersion": obj.get("processVersion"),
            "responderRoleSettings": RosettaNetPipRoleSettings.from_dict(obj["responderRoleSettings"]) if obj.get("responderRoleSettings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_reference import ResourceReference
from openapi_client.models.workflow_state import WorkflowState
from openapi_client.models.workflow_status import WorkflowStatus
from openapi_client.models.workflow_trigger_provisioning_state import WorkflowTriggerProvisioningState
from openapi_client.models.workflow_trigger_recurrence import WorkflowTriggerRecurrence
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTriggerProperties(BaseModel):
    """
    The workflow trigger properties.
    """ # noqa: E501
    changed_time: Optional[datetime] = Field(default=None, description="Gets the changed time.", alias="changedTime")
    created_time: Optional[datetime] = Field(default=None, description="Gets the created time.", alias="createdTime")
    last_execution_time: Optional[datetime] = Field(default=None, description="Gets the last execution time.", alias="lastExecutionTime")
    next_execution_time: Optional[datetime] = Field(default=None, description="Gets the next execution time.", alias="nextExecutionTime")
    provisioning_state: Optional[WorkflowTriggerProvisioningState] = Field(default=None, alias="provisioningState")
    recurrence: Optional[WorkflowTriggerRecurrence] = None
    state: Optional[WorkflowState] = None
    status: Optional[WorkflowStatus] = None
    workflow: Optional[ResourceReference] = None
    __properties: ClassVar[List[str]] = ["changedTime", "createdTime", "lastExecutionTime", "nextExecutionTime", "provisioningState", "recurrence", "state", "status", "workflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTriggerProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "changed_time",
            "created_time",
            "last_execution_time",
            "next_execution_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recurrence
        if self.recurrence:
            _dict['recurrence'] = self.recurrence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTriggerProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changedTime": obj.get("changedTime"),
            "createdTime": obj.get("createdTime"),
            "lastExecutionTime": obj.get("lastExecutionTime"),
            "nextExecutionTime": obj.get("nextExecutionTime"),
            "provisioningState": obj.get("provisioningState"),
            "recurrence": WorkflowTriggerRecurrence.from_dict(obj["recurrence"]) if obj.get("recurrence") is not None else None,
            "state": obj.get("state"),
            "status": obj.get("status"),
            "workflow": ResourceReference.from_dict(obj["workflow"]) if obj.get("workflow") is not None else None
        })
        return _obj



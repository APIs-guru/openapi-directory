# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.segment_terminator_suffix import SegmentTerminatorSuffix
from typing import Optional, Set
from typing_extensions import Self

class X12DelimiterOverrides(BaseModel):
    """
    The X12 delimiter override settings.
    """ # noqa: E501
    component_separator: StrictInt = Field(description="The component separator.", alias="componentSeparator")
    data_element_separator: StrictInt = Field(description="The data element separator.", alias="dataElementSeparator")
    message_id: Optional[StrictStr] = Field(default=None, description="The message id.", alias="messageId")
    protocol_version: Optional[StrictStr] = Field(default=None, description="The protocol version.", alias="protocolVersion")
    replace_character: StrictInt = Field(description="The replacement character.", alias="replaceCharacter")
    replace_separators_in_payload: StrictBool = Field(description="The value indicating whether to replace separators in payload.", alias="replaceSeparatorsInPayload")
    segment_terminator: StrictInt = Field(description="The segment terminator.", alias="segmentTerminator")
    segment_terminator_suffix: SegmentTerminatorSuffix = Field(alias="segmentTerminatorSuffix")
    target_namespace: Optional[StrictStr] = Field(default=None, description="The target namespace on which this delimiter settings has to be applied.", alias="targetNamespace")
    __properties: ClassVar[List[str]] = ["componentSeparator", "dataElementSeparator", "messageId", "protocolVersion", "replaceCharacter", "replaceSeparatorsInPayload", "segmentTerminator", "segmentTerminatorSuffix", "targetNamespace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of X12DelimiterOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of X12DelimiterOverrides from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "componentSeparator": obj.get("componentSeparator"),
            "dataElementSeparator": obj.get("dataElementSeparator"),
            "messageId": obj.get("messageId"),
            "protocolVersion": obj.get("protocolVersion"),
            "replaceCharacter": obj.get("replaceCharacter"),
            "replaceSeparatorsInPayload": obj.get("replaceSeparatorsInPayload"),
            "segmentTerminator": obj.get("segmentTerminator"),
            "segmentTerminatorSuffix": obj.get("segmentTerminatorSuffix"),
            "targetNamespace": obj.get("targetNamespace")
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_reference import ResourceReference
from openapi_client.models.sku import Sku
from openapi_client.models.workflow_parameter import WorkflowParameter
from openapi_client.models.workflow_provisioning_state import WorkflowProvisioningState
from openapi_client.models.workflow_state import WorkflowState
from typing import Optional, Set
from typing_extensions import Self

class WorkflowProperties(BaseModel):
    """
    The workflow properties.
    """ # noqa: E501
    access_endpoint: Optional[StrictStr] = Field(default=None, description="Gets the access endpoint.", alias="accessEndpoint")
    changed_time: Optional[datetime] = Field(default=None, description="Gets the changed time.", alias="changedTime")
    created_time: Optional[datetime] = Field(default=None, description="Gets the created time.", alias="createdTime")
    definition: Optional[Dict[str, Any]] = None
    integration_account: Optional[ResourceReference] = Field(default=None, alias="integrationAccount")
    parameters: Optional[Dict[str, WorkflowParameter]] = Field(default=None, description="The parameters.")
    provisioning_state: Optional[WorkflowProvisioningState] = Field(default=None, alias="provisioningState")
    sku: Optional[Sku] = None
    state: Optional[WorkflowState] = None
    version: Optional[StrictStr] = Field(default=None, description="Gets the version.")
    __properties: ClassVar[List[str]] = ["accessEndpoint", "changedTime", "createdTime", "definition", "integrationAccount", "parameters", "provisioningState", "sku", "state", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_endpoint",
            "changed_time",
            "created_time",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of integration_account
        if self.integration_account:
            _dict['integrationAccount'] = self.integration_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessEndpoint": obj.get("accessEndpoint"),
            "changedTime": obj.get("changedTime"),
            "createdTime": obj.get("createdTime"),
            "definition": obj.get("definition"),
            "integrationAccount": ResourceReference.from_dict(obj["integrationAccount"]) if obj.get("integrationAccount") is not None else None,
            "parameters": dict(
                (_k, WorkflowParameter.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "provisioningState": obj.get("provisioningState"),
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "state": obj.get("state"),
            "version": obj.get("version")
        })
        return _obj



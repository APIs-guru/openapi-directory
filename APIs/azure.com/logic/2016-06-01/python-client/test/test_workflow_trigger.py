# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workflow_trigger import WorkflowTrigger

class TestWorkflowTrigger(unittest.TestCase):
    """WorkflowTrigger unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowTrigger:
        """Test WorkflowTrigger
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowTrigger`
        """
        model = WorkflowTrigger()
        if include_optional:
            return WorkflowTrigger(
                name = '',
                properties = openapi_client.models.workflow_trigger_properties.WorkflowTriggerProperties(
                    changed_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    provisioning_state = 'NotSpecified', 
                    recurrence = openapi_client.models.workflow_trigger_recurrence.WorkflowTriggerRecurrence(
                        end_time = '', 
                        frequency = 'NotSpecified', 
                        interval = 56, 
                        schedule = openapi_client.models.recurrence_schedule.RecurrenceSchedule(
                            hours = [
                                56
                                ], 
                            minutes = [
                                56
                                ], 
                            month_days = [
                                56
                                ], 
                            monthly_occurrences = [
                                openapi_client.models.recurrence_schedule_occurrence.RecurrenceScheduleOccurrence(
                                    day = 'Sunday', 
                                    occurrence = 56, )
                                ], 
                            week_days = [
                                'Sunday'
                                ], ), 
                        start_time = '', 
                        time_zone = '', ), 
                    state = 'NotSpecified', 
                    status = 'NotSpecified', 
                    workflow = openapi_client.models.resource_reference.ResourceReference(
                        id = '', 
                        name = '', 
                        type = '', ), ),
                type = '',
                id = ''
            )
        else:
            return WorkflowTrigger(
        )
        """

    def testWorkflowTrigger(self):
        """Test WorkflowTrigger"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workflow_run_properties import WorkflowRunProperties

class TestWorkflowRunProperties(unittest.TestCase):
    """WorkflowRunProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowRunProperties:
        """Test WorkflowRunProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowRunProperties`
        """
        model = WorkflowRunProperties()
        if include_optional:
            return WorkflowRunProperties(
                code = '',
                correlation = openapi_client.models.correlation.Correlation(
                    client_tracking_id = '', ),
                correlation_id = '',
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                error = openapi_client.models.object.Object(),
                outputs = {
                    'key' : openapi_client.models.workflow_output_parameter.WorkflowOutputParameter(
                        error = openapi_client.models.object.Object(), )
                    },
                response = openapi_client.models.workflow_run_trigger.WorkflowRunTrigger(
                    code = '', 
                    correlation = openapi_client.models.correlation.Correlation(
                        client_tracking_id = '', ), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error = openapi_client.models.object.Object(), 
                    inputs = openapi_client.models.object.Object(), 
                    inputs_link = openapi_client.models.content_link.ContentLink(
                        content_hash = openapi_client.models.content_hash.ContentHash(
                            algorithm = '', 
                            value = '', ), 
                        content_size = 56, 
                        content_version = '', 
                        metadata = openapi_client.models.object.Object(), 
                        uri = '', ), 
                    name = '', 
                    outputs = openapi_client.models.object.Object(), 
                    outputs_link = openapi_client.models.content_link.ContentLink(
                        content_size = 56, 
                        content_version = '', 
                        metadata = openapi_client.models.object.Object(), 
                        uri = '', ), 
                    scheduled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'NotSpecified', 
                    tracked_properties = openapi_client.models.object.Object(), 
                    tracking_id = '', ),
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'NotSpecified',
                trigger = openapi_client.models.workflow_run_trigger.WorkflowRunTrigger(
                    code = '', 
                    correlation = openapi_client.models.correlation.Correlation(
                        client_tracking_id = '', ), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    error = openapi_client.models.object.Object(), 
                    inputs = openapi_client.models.object.Object(), 
                    inputs_link = openapi_client.models.content_link.ContentLink(
                        content_hash = openapi_client.models.content_hash.ContentHash(
                            algorithm = '', 
                            value = '', ), 
                        content_size = 56, 
                        content_version = '', 
                        metadata = openapi_client.models.object.Object(), 
                        uri = '', ), 
                    name = '', 
                    outputs = openapi_client.models.object.Object(), 
                    outputs_link = openapi_client.models.content_link.ContentLink(
                        content_size = 56, 
                        content_version = '', 
                        metadata = openapi_client.models.object.Object(), 
                        uri = '', ), 
                    scheduled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = 'NotSpecified', 
                    tracked_properties = openapi_client.models.object.Object(), 
                    tracking_id = '', ),
                wait_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                workflow = openapi_client.models.resource_reference.ResourceReference(
                    id = '', 
                    name = '', 
                    type = '', )
            )
        else:
            return WorkflowRunProperties(
        )
        """

    def testWorkflowRunProperties(self):
        """Test WorkflowRunProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EdifactEnvelopeSettings(BaseModel):
    """
    The Edifact agreement envelope settings.
    """ # noqa: E501
    application_reference_id: Optional[StrictStr] = Field(default=None, description="The application reference id.", alias="applicationReferenceId")
    apply_delimiter_string_advice: StrictBool = Field(description="The value indicating whether to apply delimiter string advice.", alias="applyDelimiterStringAdvice")
    communication_agreement_id: Optional[StrictStr] = Field(default=None, description="The communication agreement id.", alias="communicationAgreementId")
    create_grouping_segments: StrictBool = Field(description="The value indicating whether to create grouping segments.", alias="createGroupingSegments")
    enable_default_group_headers: StrictBool = Field(description="The value indicating whether to enable default group headers.", alias="enableDefaultGroupHeaders")
    functional_group_id: Optional[StrictStr] = Field(default=None, description="The functional group id.", alias="functionalGroupId")
    group_application_password: Optional[StrictStr] = Field(default=None, description="The group application password.", alias="groupApplicationPassword")
    group_application_receiver_id: Optional[StrictStr] = Field(default=None, description="The group application receiver id.", alias="groupApplicationReceiverId")
    group_application_receiver_qualifier: Optional[StrictStr] = Field(default=None, description="The group application receiver qualifier.", alias="groupApplicationReceiverQualifier")
    group_application_sender_id: Optional[StrictStr] = Field(default=None, description="The group application sender id.", alias="groupApplicationSenderId")
    group_application_sender_qualifier: Optional[StrictStr] = Field(default=None, description="The group application sender qualifier.", alias="groupApplicationSenderQualifier")
    group_association_assigned_code: Optional[StrictStr] = Field(default=None, description="The group association assigned code.", alias="groupAssociationAssignedCode")
    group_control_number_lower_bound: StrictInt = Field(description="The group control number lower bound.", alias="groupControlNumberLowerBound")
    group_control_number_prefix: Optional[StrictStr] = Field(default=None, description="The group control number prefix.", alias="groupControlNumberPrefix")
    group_control_number_suffix: Optional[StrictStr] = Field(default=None, description="The group control number suffix.", alias="groupControlNumberSuffix")
    group_control_number_upper_bound: StrictInt = Field(description="The group control number upper bound.", alias="groupControlNumberUpperBound")
    group_controlling_agency_code: Optional[StrictStr] = Field(default=None, description="The group controlling agency code.", alias="groupControllingAgencyCode")
    group_message_release: Optional[StrictStr] = Field(default=None, description="The group message release.", alias="groupMessageRelease")
    group_message_version: Optional[StrictStr] = Field(default=None, description="The group message version.", alias="groupMessageVersion")
    interchange_control_number_lower_bound: StrictInt = Field(description="The interchange control number lower bound.", alias="interchangeControlNumberLowerBound")
    interchange_control_number_prefix: Optional[StrictStr] = Field(default=None, description="The interchange control number prefix.", alias="interchangeControlNumberPrefix")
    interchange_control_number_suffix: Optional[StrictStr] = Field(default=None, description="The interchange control number suffix.", alias="interchangeControlNumberSuffix")
    interchange_control_number_upper_bound: StrictInt = Field(description="The interchange control number upper bound.", alias="interchangeControlNumberUpperBound")
    is_test_interchange: StrictBool = Field(description="The value indicating whether the message is a test interchange.", alias="isTestInterchange")
    overwrite_existing_transaction_set_control_number: StrictBool = Field(description="The value indicating whether to overwrite existing transaction set control number.", alias="overwriteExistingTransactionSetControlNumber")
    processing_priority_code: Optional[StrictStr] = Field(default=None, description="The processing priority code.", alias="processingPriorityCode")
    receiver_internal_identification: Optional[StrictStr] = Field(default=None, description="The receiver internal identification.", alias="receiverInternalIdentification")
    receiver_internal_sub_identification: Optional[StrictStr] = Field(default=None, description="The receiver internal sub identification.", alias="receiverInternalSubIdentification")
    receiver_reverse_routing_address: Optional[StrictStr] = Field(default=None, description="The receiver reverse routing address.", alias="receiverReverseRoutingAddress")
    recipient_reference_password_qualifier: Optional[StrictStr] = Field(default=None, description="The recipient reference password qualifier.", alias="recipientReferencePasswordQualifier")
    recipient_reference_password_value: Optional[StrictStr] = Field(default=None, description="The recipient reference password value.", alias="recipientReferencePasswordValue")
    rollover_group_control_number: StrictBool = Field(description="The value indicating whether to rollover group control number.", alias="rolloverGroupControlNumber")
    rollover_interchange_control_number: StrictBool = Field(description="The value indicating whether to rollover interchange control number.", alias="rolloverInterchangeControlNumber")
    rollover_transaction_set_control_number: StrictBool = Field(description="The value indicating whether to rollover transaction set control number.", alias="rolloverTransactionSetControlNumber")
    sender_internal_identification: Optional[StrictStr] = Field(default=None, description="The sender internal identification.", alias="senderInternalIdentification")
    sender_internal_sub_identification: Optional[StrictStr] = Field(default=None, description="The sender internal sub identification.", alias="senderInternalSubIdentification")
    sender_reverse_routing_address: Optional[StrictStr] = Field(default=None, description="The sender reverse routing address.", alias="senderReverseRoutingAddress")
    transaction_set_control_number_lower_bound: StrictInt = Field(description="The transaction set control number lower bound.", alias="transactionSetControlNumberLowerBound")
    transaction_set_control_number_prefix: Optional[StrictStr] = Field(default=None, description="The transaction set control number prefix.", alias="transactionSetControlNumberPrefix")
    transaction_set_control_number_suffix: Optional[StrictStr] = Field(default=None, description="The transaction set control number suffix.", alias="transactionSetControlNumberSuffix")
    transaction_set_control_number_upper_bound: StrictInt = Field(description="The transaction set control number upper bound.", alias="transactionSetControlNumberUpperBound")
    __properties: ClassVar[List[str]] = ["applicationReferenceId", "applyDelimiterStringAdvice", "communicationAgreementId", "createGroupingSegments", "enableDefaultGroupHeaders", "functionalGroupId", "groupApplicationPassword", "groupApplicationReceiverId", "groupApplicationReceiverQualifier", "groupApplicationSenderId", "groupApplicationSenderQualifier", "groupAssociationAssignedCode", "groupControlNumberLowerBound", "groupControlNumberPrefix", "groupControlNumberSuffix", "groupControlNumberUpperBound", "groupControllingAgencyCode", "groupMessageRelease", "groupMessageVersion", "interchangeControlNumberLowerBound", "interchangeControlNumberPrefix", "interchangeControlNumberSuffix", "interchangeControlNumberUpperBound", "isTestInterchange", "overwriteExistingTransactionSetControlNumber", "processingPriorityCode", "receiverInternalIdentification", "receiverInternalSubIdentification", "receiverReverseRoutingAddress", "recipientReferencePasswordQualifier", "recipientReferencePasswordValue", "rolloverGroupControlNumber", "rolloverInterchangeControlNumber", "rolloverTransactionSetControlNumber", "senderInternalIdentification", "senderInternalSubIdentification", "senderReverseRoutingAddress", "transactionSetControlNumberLowerBound", "transactionSetControlNumberPrefix", "transactionSetControlNumberSuffix", "transactionSetControlNumberUpperBound"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdifactEnvelopeSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdifactEnvelopeSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationReferenceId": obj.get("applicationReferenceId"),
            "applyDelimiterStringAdvice": obj.get("applyDelimiterStringAdvice"),
            "communicationAgreementId": obj.get("communicationAgreementId"),
            "createGroupingSegments": obj.get("createGroupingSegments"),
            "enableDefaultGroupHeaders": obj.get("enableDefaultGroupHeaders"),
            "functionalGroupId": obj.get("functionalGroupId"),
            "groupApplicationPassword": obj.get("groupApplicationPassword"),
            "groupApplicationReceiverId": obj.get("groupApplicationReceiverId"),
            "groupApplicationReceiverQualifier": obj.get("groupApplicationReceiverQualifier"),
            "groupApplicationSenderId": obj.get("groupApplicationSenderId"),
            "groupApplicationSenderQualifier": obj.get("groupApplicationSenderQualifier"),
            "groupAssociationAssignedCode": obj.get("groupAssociationAssignedCode"),
            "groupControlNumberLowerBound": obj.get("groupControlNumberLowerBound"),
            "groupControlNumberPrefix": obj.get("groupControlNumberPrefix"),
            "groupControlNumberSuffix": obj.get("groupControlNumberSuffix"),
            "groupControlNumberUpperBound": obj.get("groupControlNumberUpperBound"),
            "groupControllingAgencyCode": obj.get("groupControllingAgencyCode"),
            "groupMessageRelease": obj.get("groupMessageRelease"),
            "groupMessageVersion": obj.get("groupMessageVersion"),
            "interchangeControlNumberLowerBound": obj.get("interchangeControlNumberLowerBound"),
            "interchangeControlNumberPrefix": obj.get("interchangeControlNumberPrefix"),
            "interchangeControlNumberSuffix": obj.get("interchangeControlNumberSuffix"),
            "interchangeControlNumberUpperBound": obj.get("interchangeControlNumberUpperBound"),
            "isTestInterchange": obj.get("isTestInterchange"),
            "overwriteExistingTransactionSetControlNumber": obj.get("overwriteExistingTransactionSetControlNumber"),
            "processingPriorityCode": obj.get("processingPriorityCode"),
            "receiverInternalIdentification": obj.get("receiverInternalIdentification"),
            "receiverInternalSubIdentification": obj.get("receiverInternalSubIdentification"),
            "receiverReverseRoutingAddress": obj.get("receiverReverseRoutingAddress"),
            "recipientReferencePasswordQualifier": obj.get("recipientReferencePasswordQualifier"),
            "recipientReferencePasswordValue": obj.get("recipientReferencePasswordValue"),
            "rolloverGroupControlNumber": obj.get("rolloverGroupControlNumber"),
            "rolloverInterchangeControlNumber": obj.get("rolloverInterchangeControlNumber"),
            "rolloverTransactionSetControlNumber": obj.get("rolloverTransactionSetControlNumber"),
            "senderInternalIdentification": obj.get("senderInternalIdentification"),
            "senderInternalSubIdentification": obj.get("senderInternalSubIdentification"),
            "senderReverseRoutingAddress": obj.get("senderReverseRoutingAddress"),
            "transactionSetControlNumberLowerBound": obj.get("transactionSetControlNumberLowerBound"),
            "transactionSetControlNumberPrefix": obj.get("transactionSetControlNumberPrefix"),
            "transactionSetControlNumberSuffix": obj.get("transactionSetControlNumberSuffix"),
            "transactionSetControlNumberUpperBound": obj.get("transactionSetControlNumberUpperBound")
        })
        return _obj



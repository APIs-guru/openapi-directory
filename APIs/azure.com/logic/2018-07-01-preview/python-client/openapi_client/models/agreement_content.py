# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.as2_agreement_content import AS2AgreementContent
from openapi_client.models.edifact_agreement_content import EdifactAgreementContent
from openapi_client.models.x12_agreement_content import X12AgreementContent
from typing import Optional, Set
from typing_extensions import Self

class AgreementContent(BaseModel):
    """
    The integration account agreement content.
    """ # noqa: E501
    a_s2: Optional[AS2AgreementContent] = Field(default=None, alias="aS2")
    edifact: Optional[EdifactAgreementContent] = None
    x12: Optional[X12AgreementContent] = None
    __properties: ClassVar[List[str]] = ["aS2", "edifact", "x12"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgreementContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of a_s2
        if self.a_s2:
            _dict['aS2'] = self.a_s2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edifact
        if self.edifact:
            _dict['edifact'] = self.edifact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of x12
        if self.x12:
            _dict['x12'] = self.x12.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgreementContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aS2": AS2AgreementContent.from_dict(obj["aS2"]) if obj.get("aS2") is not None else None,
            "edifact": EdifactAgreementContent.from_dict(obj["edifact"]) if obj.get("edifact") is not None else None,
            "x12": X12AgreementContent.from_dict(obj["x12"]) if obj.get("x12") is not None else None
        })
        return _obj



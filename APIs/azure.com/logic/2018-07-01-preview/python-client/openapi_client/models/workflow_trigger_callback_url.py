# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.workflow_trigger_list_callback_url_queries import WorkflowTriggerListCallbackUrlQueries
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTriggerCallbackUrl(BaseModel):
    """
    The workflow trigger callback URL.
    """ # noqa: E501
    base_path: Optional[StrictStr] = Field(default=None, description="Gets the workflow trigger callback URL base path.", alias="basePath")
    method: Optional[StrictStr] = Field(default=None, description="Gets the workflow trigger callback URL HTTP method.")
    queries: Optional[WorkflowTriggerListCallbackUrlQueries] = None
    relative_path: Optional[StrictStr] = Field(default=None, description="Gets the workflow trigger callback URL relative path.", alias="relativePath")
    relative_path_parameters: Optional[List[StrictStr]] = Field(default=None, description="Gets the workflow trigger callback URL relative path parameters.", alias="relativePathParameters")
    value: Optional[StrictStr] = Field(default=None, description="Gets the workflow trigger callback URL.")
    __properties: ClassVar[List[str]] = ["basePath", "method", "queries", "relativePath", "relativePathParameters", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTriggerCallbackUrl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "base_path",
            "method",
            "relative_path",
            "value",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of queries
        if self.queries:
            _dict['queries'] = self.queries.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTriggerCallbackUrl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basePath": obj.get("basePath"),
            "method": obj.get("method"),
            "queries": WorkflowTriggerListCallbackUrlQueries.from_dict(obj["queries"]) if obj.get("queries") is not None else None,
            "relativePath": obj.get("relativePath"),
            "relativePathParameters": obj.get("relativePathParameters"),
            "value": obj.get("value")
        })
        return _obj



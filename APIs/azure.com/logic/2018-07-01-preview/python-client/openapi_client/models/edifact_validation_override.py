# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.trailing_separator_policy import TrailingSeparatorPolicy
from typing import Optional, Set
from typing_extensions import Self

class EdifactValidationOverride(BaseModel):
    """
    The Edifact validation override settings.
    """ # noqa: E501
    allow_leading_and_trailing_spaces_and_zeroes: StrictBool = Field(description="The value indicating whether to allow leading and trailing spaces and zeroes.", alias="allowLeadingAndTrailingSpacesAndZeroes")
    enforce_character_set: StrictBool = Field(description="The value indicating whether to validate character Set.", alias="enforceCharacterSet")
    message_id: StrictStr = Field(description="The message id on which the validation settings has to be applied.", alias="messageId")
    trailing_separator_policy: TrailingSeparatorPolicy = Field(alias="trailingSeparatorPolicy")
    trim_leading_and_trailing_spaces_and_zeroes: StrictBool = Field(description="The value indicating whether to trim leading and trailing spaces and zeroes.", alias="trimLeadingAndTrailingSpacesAndZeroes")
    validate_edi_types: StrictBool = Field(description="The value indicating whether to validate EDI types.", alias="validateEDITypes")
    validate_xsd_types: StrictBool = Field(description="The value indicating whether to validate XSD types.", alias="validateXSDTypes")
    __properties: ClassVar[List[str]] = ["allowLeadingAndTrailingSpacesAndZeroes", "enforceCharacterSet", "messageId", "trailingSeparatorPolicy", "trimLeadingAndTrailingSpacesAndZeroes", "validateEDITypes", "validateXSDTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdifactValidationOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdifactValidationOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowLeadingAndTrailingSpacesAndZeroes": obj.get("allowLeadingAndTrailingSpacesAndZeroes"),
            "enforceCharacterSet": obj.get("enforceCharacterSet"),
            "messageId": obj.get("messageId"),
            "trailingSeparatorPolicy": obj.get("trailingSeparatorPolicy"),
            "trimLeadingAndTrailingSpacesAndZeroes": obj.get("trimLeadingAndTrailingSpacesAndZeroes"),
            "validateEDITypes": obj.get("validateEDITypes"),
            "validateXSDTypes": obj.get("validateXSDTypes")
        })
        return _obj



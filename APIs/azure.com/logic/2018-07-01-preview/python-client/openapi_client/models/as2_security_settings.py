# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AS2SecuritySettings(BaseModel):
    """
    The AS2 agreement security settings.
    """ # noqa: E501
    enable_nrr_for_inbound_decoded_messages: StrictBool = Field(description="The value indicating whether to enable NRR for inbound decoded messages.", alias="enableNRRForInboundDecodedMessages")
    enable_nrr_for_inbound_encoded_messages: StrictBool = Field(description="The value indicating whether to enable NRR for inbound encoded messages.", alias="enableNRRForInboundEncodedMessages")
    enable_nrr_for_inbound_mdn: StrictBool = Field(description="The value indicating whether to enable NRR for inbound MDN.", alias="enableNRRForInboundMDN")
    enable_nrr_for_outbound_decoded_messages: StrictBool = Field(description="The value indicating whether to enable NRR for outbound decoded messages.", alias="enableNRRForOutboundDecodedMessages")
    enable_nrr_for_outbound_encoded_messages: StrictBool = Field(description="The value indicating whether to enable NRR for outbound encoded messages.", alias="enableNRRForOutboundEncodedMessages")
    enable_nrr_for_outbound_mdn: StrictBool = Field(description="The value indicating whether to enable NRR for outbound MDN.", alias="enableNRRForOutboundMDN")
    encryption_certificate_name: Optional[StrictStr] = Field(default=None, description="The name of the encryption certificate.", alias="encryptionCertificateName")
    override_group_signing_certificate: StrictBool = Field(description="The value indicating whether to send or request a MDN.", alias="overrideGroupSigningCertificate")
    sha2_algorithm_format: Optional[StrictStr] = Field(default=None, description="The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.", alias="sha2AlgorithmFormat")
    signing_certificate_name: Optional[StrictStr] = Field(default=None, description="The name of the signing certificate.", alias="signingCertificateName")
    __properties: ClassVar[List[str]] = ["enableNRRForInboundDecodedMessages", "enableNRRForInboundEncodedMessages", "enableNRRForInboundMDN", "enableNRRForOutboundDecodedMessages", "enableNRRForOutboundEncodedMessages", "enableNRRForOutboundMDN", "encryptionCertificateName", "overrideGroupSigningCertificate", "sha2AlgorithmFormat", "signingCertificateName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AS2SecuritySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AS2SecuritySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableNRRForInboundDecodedMessages": obj.get("enableNRRForInboundDecodedMessages"),
            "enableNRRForInboundEncodedMessages": obj.get("enableNRRForInboundEncodedMessages"),
            "enableNRRForInboundMDN": obj.get("enableNRRForInboundMDN"),
            "enableNRRForOutboundDecodedMessages": obj.get("enableNRRForOutboundDecodedMessages"),
            "enableNRRForOutboundEncodedMessages": obj.get("enableNRRForOutboundEncodedMessages"),
            "enableNRRForOutboundMDN": obj.get("enableNRRForOutboundMDN"),
            "encryptionCertificateName": obj.get("encryptionCertificateName"),
            "overrideGroupSigningCertificate": obj.get("overrideGroupSigningCertificate"),
            "sha2AlgorithmFormat": obj.get("sha2AlgorithmFormat"),
            "signingCertificateName": obj.get("signingCertificateName")
        })
        return _obj



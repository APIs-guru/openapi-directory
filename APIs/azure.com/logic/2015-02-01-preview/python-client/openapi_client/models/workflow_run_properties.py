# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2015-02-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_reference import ResourceReference
from openapi_client.models.workflow_output_parameter import WorkflowOutputParameter
from openapi_client.models.workflow_run_trigger import WorkflowRunTrigger
from openapi_client.models.workflow_status import WorkflowStatus
from typing import Optional, Set
from typing_extensions import Self

class WorkflowRunProperties(BaseModel):
    """
    WorkflowRunProperties
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Gets the code.")
    correlation_id: Optional[StrictStr] = Field(default=None, description="Gets the correlation id.", alias="correlationId")
    end_time: Optional[datetime] = Field(default=None, description="Gets the end time.", alias="endTime")
    error: Optional[Dict[str, Any]] = None
    outputs: Optional[Dict[str, WorkflowOutputParameter]] = Field(default=None, description="Gets the outputs.")
    start_time: Optional[datetime] = Field(default=None, description="Gets the start time.", alias="startTime")
    status: Optional[WorkflowStatus] = None
    trigger: Optional[WorkflowRunTrigger] = None
    workflow: Optional[ResourceReference] = None
    __properties: ClassVar[List[str]] = ["code", "correlationId", "endTime", "error", "outputs", "startTime", "status", "trigger", "workflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowRunProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code",
            "correlation_id",
            "end_time",
            "outputs",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in outputs (dict)
        _field_dict = {}
        if self.outputs:
            for _key_outputs in self.outputs:
                if self.outputs[_key_outputs]:
                    _field_dict[_key_outputs] = self.outputs[_key_outputs].to_dict()
            _dict['outputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of trigger
        if self.trigger:
            _dict['trigger'] = self.trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowRunProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "correlationId": obj.get("correlationId"),
            "endTime": obj.get("endTime"),
            "error": obj.get("error"),
            "outputs": dict(
                (_k, WorkflowOutputParameter.from_dict(_v))
                for _k, _v in obj["outputs"].items()
            )
            if obj.get("outputs") is not None
            else None,
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "trigger": WorkflowRunTrigger.from_dict(obj["trigger"]) if obj.get("trigger") is not None else None,
            "workflow": ResourceReference.from_dict(obj["workflow"]) if obj.get("workflow") is not None else None
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2015-02-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workflow_run_list_result import WorkflowRunListResult

class TestWorkflowRunListResult(unittest.TestCase):
    """WorkflowRunListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowRunListResult:
        """Test WorkflowRunListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowRunListResult`
        """
        model = WorkflowRunListResult()
        if include_optional:
            return WorkflowRunListResult(
                next_link = '',
                value = [
                    openapi_client.models.workflow_run.WorkflowRun(
                        name = '', 
                        properties = openapi_client.models.workflow_run_properties.WorkflowRunProperties(
                            code = '', 
                            correlation_id = '', 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            error = openapi_client.models.object.Object(), 
                            outputs = {
                                'key' : openapi_client.models.workflow_output_parameter.WorkflowOutputParameter()
                                }, 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = 'NotSpecified', 
                            trigger = openapi_client.models.workflow_run_trigger.WorkflowRunTrigger(
                                code = '', 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                inputs = openapi_client.models.object.Object(), 
                                inputs_link = openapi_client.models.content_link.ContentLink(
                                    content_hash = openapi_client.models.content_hash.ContentHash(
                                        algorithm = '', 
                                        value = '', ), 
                                    content_size = 56, 
                                    content_version = '', 
                                    metadata = openapi_client.models.object.Object(), 
                                    uri = '', ), 
                                name = '', 
                                outputs_link = openapi_client.models.content_link.ContentLink(
                                    content_size = 56, 
                                    content_version = '', 
                                    metadata = openapi_client.models.object.Object(), 
                                    uri = '', ), 
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                tracking_id = '', ), 
                            workflow = openapi_client.models.resource_reference.ResourceReference(
                                id = '', 
                                name = '', 
                                type = '', ), ), 
                        type = '', )
                    ]
            )
        else:
            return WorkflowRunListResult(
        )
        """

    def testWorkflowRunListResult(self):
        """Test WorkflowRunListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

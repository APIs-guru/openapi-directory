# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2015-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hashing_algorithm import HashingAlgorithm
from typing import Optional, Set
from typing_extensions import Self

class AS2MdnSettings(BaseModel):
    """
    AS2MdnSettings
    """ # noqa: E501
    disposition_notification_to: Optional[StrictStr] = Field(default=None, description="The disposition notification to header value.", alias="dispositionNotificationTo")
    mdn_text: Optional[StrictStr] = Field(default=None, description="The MDN text.", alias="mdnText")
    mic_hashing_algorithm: Optional[HashingAlgorithm] = Field(default=None, alias="micHashingAlgorithm")
    need_mdn: Optional[StrictBool] = Field(default=None, description="The value indicating whether to send or request a MDN.", alias="needMdn")
    receipt_delivery_url: Optional[StrictStr] = Field(default=None, description="The receipt delivery URL.", alias="receiptDeliveryUrl")
    send_inbound_mdn_to_message_box: Optional[StrictBool] = Field(default=None, description="The value indicating whether to send inbound MDN to message box.", alias="sendInboundMdnToMessageBox")
    send_mdn_asynchronously: Optional[StrictBool] = Field(default=None, description="The value indicating whether to send the asynchronous MDN.", alias="sendMdnAsynchronously")
    sign_mdn: Optional[StrictBool] = Field(default=None, description="The value indicating whether the MDN needs to be signed or not.", alias="signMdn")
    sign_outbound_mdn_if_optional: Optional[StrictBool] = Field(default=None, description="The value indicating whether to sign the outbound MDN if optional.", alias="signOutboundMdnIfOptional")
    __properties: ClassVar[List[str]] = ["dispositionNotificationTo", "mdnText", "micHashingAlgorithm", "needMdn", "receiptDeliveryUrl", "sendInboundMdnToMessageBox", "sendMdnAsynchronously", "signMdn", "signOutboundMdnIfOptional"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AS2MdnSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AS2MdnSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dispositionNotificationTo": obj.get("dispositionNotificationTo"),
            "mdnText": obj.get("mdnText"),
            "micHashingAlgorithm": obj.get("micHashingAlgorithm"),
            "needMdn": obj.get("needMdn"),
            "receiptDeliveryUrl": obj.get("receiptDeliveryUrl"),
            "sendInboundMdnToMessageBox": obj.get("sendInboundMdnToMessageBox"),
            "sendMdnAsynchronously": obj.get("sendMdnAsynchronously"),
            "signMdn": obj.get("signMdn"),
            "signOutboundMdnIfOptional": obj.get("signOutboundMdnIfOptional")
        })
        return _obj



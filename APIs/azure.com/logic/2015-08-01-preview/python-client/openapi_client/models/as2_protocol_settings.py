# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2015-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.as2_acknowledgement_connection_settings import AS2AcknowledgementConnectionSettings
from openapi_client.models.as2_envelope_settings import AS2EnvelopeSettings
from openapi_client.models.as2_error_settings import AS2ErrorSettings
from openapi_client.models.as2_mdn_settings import AS2MdnSettings
from openapi_client.models.as2_message_connection_settings import AS2MessageConnectionSettings
from openapi_client.models.as2_security_settings import AS2SecuritySettings
from openapi_client.models.as2_validation_settings import AS2ValidationSettings
from typing import Optional, Set
from typing_extensions import Self

class AS2ProtocolSettings(BaseModel):
    """
    AS2ProtocolSettings
    """ # noqa: E501
    acknowledgement_connection_settings: Optional[AS2AcknowledgementConnectionSettings] = Field(default=None, alias="acknowledgementConnectionSettings")
    envelope_settings: Optional[AS2EnvelopeSettings] = Field(default=None, alias="envelopeSettings")
    error_settings: Optional[AS2ErrorSettings] = Field(default=None, alias="errorSettings")
    mdn_settings: Optional[AS2MdnSettings] = Field(default=None, alias="mdnSettings")
    message_connection_settings: Optional[AS2MessageConnectionSettings] = Field(default=None, alias="messageConnectionSettings")
    security_settings: Optional[AS2SecuritySettings] = Field(default=None, alias="securitySettings")
    validation_settings: Optional[AS2ValidationSettings] = Field(default=None, alias="validationSettings")
    __properties: ClassVar[List[str]] = ["acknowledgementConnectionSettings", "envelopeSettings", "errorSettings", "mdnSettings", "messageConnectionSettings", "securitySettings", "validationSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AS2ProtocolSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acknowledgement_connection_settings
        if self.acknowledgement_connection_settings:
            _dict['acknowledgementConnectionSettings'] = self.acknowledgement_connection_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of envelope_settings
        if self.envelope_settings:
            _dict['envelopeSettings'] = self.envelope_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_settings
        if self.error_settings:
            _dict['errorSettings'] = self.error_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mdn_settings
        if self.mdn_settings:
            _dict['mdnSettings'] = self.mdn_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_connection_settings
        if self.message_connection_settings:
            _dict['messageConnectionSettings'] = self.message_connection_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_settings
        if self.security_settings:
            _dict['securitySettings'] = self.security_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_settings
        if self.validation_settings:
            _dict['validationSettings'] = self.validation_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AS2ProtocolSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledgementConnectionSettings": AS2AcknowledgementConnectionSettings.from_dict(obj["acknowledgementConnectionSettings"]) if obj.get("acknowledgementConnectionSettings") is not None else None,
            "envelopeSettings": AS2EnvelopeSettings.from_dict(obj["envelopeSettings"]) if obj.get("envelopeSettings") is not None else None,
            "errorSettings": AS2ErrorSettings.from_dict(obj["errorSettings"]) if obj.get("errorSettings") is not None else None,
            "mdnSettings": AS2MdnSettings.from_dict(obj["mdnSettings"]) if obj.get("mdnSettings") is not None else None,
            "messageConnectionSettings": AS2MessageConnectionSettings.from_dict(obj["messageConnectionSettings"]) if obj.get("messageConnectionSettings") is not None else None,
            "securitySettings": AS2SecuritySettings.from_dict(obj["securitySettings"]) if obj.get("securitySettings") is not None else None,
            "validationSettings": AS2ValidationSettings.from_dict(obj["validationSettings"]) if obj.get("validationSettings") is not None else None
        })
        return _obj



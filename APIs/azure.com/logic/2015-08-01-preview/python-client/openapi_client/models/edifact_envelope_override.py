# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2015-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EdifactEnvelopeOverride(BaseModel):
    """
    EdifactEnvelopeOverride
    """ # noqa: E501
    application_password: Optional[StrictStr] = Field(default=None, description="The application password.", alias="applicationPassword")
    association_assigned_code: Optional[StrictStr] = Field(default=None, description="The association assigned code.", alias="associationAssignedCode")
    controlling_agency_code: Optional[StrictStr] = Field(default=None, description="The controlling agency code.", alias="controllingAgencyCode")
    functional_group_id: Optional[StrictStr] = Field(default=None, description="The functional group id.", alias="functionalGroupId")
    group_header_message_release: Optional[StrictStr] = Field(default=None, description="The group header message release.", alias="groupHeaderMessageRelease")
    group_header_message_version: Optional[StrictStr] = Field(default=None, description="The group header message version.", alias="groupHeaderMessageVersion")
    message_association_assigned_code: Optional[StrictStr] = Field(default=None, description="The message association assigned code.", alias="messageAssociationAssignedCode")
    message_id: Optional[StrictStr] = Field(default=None, description="The message id on which this envelope settings has to be applied.", alias="messageId")
    message_release: Optional[StrictStr] = Field(default=None, description="The message release version on which this envelope settings has to be applied.", alias="messageRelease")
    message_version: Optional[StrictStr] = Field(default=None, description="The message version on which this envelope settings has to be applied.", alias="messageVersion")
    receiver_application_id: Optional[StrictStr] = Field(default=None, description="The receiver application id.", alias="receiverApplicationId")
    receiver_application_qualifier: Optional[StrictStr] = Field(default=None, description="The receiver application qualifier.", alias="receiverApplicationQualifier")
    sender_application_id: Optional[StrictStr] = Field(default=None, description="The sender application id.", alias="senderApplicationId")
    sender_application_qualifier: Optional[StrictStr] = Field(default=None, description="The sender application qualifier.", alias="senderApplicationQualifier")
    target_namespace: Optional[StrictStr] = Field(default=None, description="The target namespace on which this envelope settings has to be applied.", alias="targetNamespace")
    __properties: ClassVar[List[str]] = ["applicationPassword", "associationAssignedCode", "controllingAgencyCode", "functionalGroupId", "groupHeaderMessageRelease", "groupHeaderMessageVersion", "messageAssociationAssignedCode", "messageId", "messageRelease", "messageVersion", "receiverApplicationId", "receiverApplicationQualifier", "senderApplicationId", "senderApplicationQualifier", "targetNamespace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdifactEnvelopeOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdifactEnvelopeOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationPassword": obj.get("applicationPassword"),
            "associationAssignedCode": obj.get("associationAssignedCode"),
            "controllingAgencyCode": obj.get("controllingAgencyCode"),
            "functionalGroupId": obj.get("functionalGroupId"),
            "groupHeaderMessageRelease": obj.get("groupHeaderMessageRelease"),
            "groupHeaderMessageVersion": obj.get("groupHeaderMessageVersion"),
            "messageAssociationAssignedCode": obj.get("messageAssociationAssignedCode"),
            "messageId": obj.get("messageId"),
            "messageRelease": obj.get("messageRelease"),
            "messageVersion": obj.get("messageVersion"),
            "receiverApplicationId": obj.get("receiverApplicationId"),
            "receiverApplicationQualifier": obj.get("receiverApplicationQualifier"),
            "senderApplicationId": obj.get("senderApplicationId"),
            "senderApplicationQualifier": obj.get("senderApplicationQualifier"),
            "targetNamespace": obj.get("targetNamespace")
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2015-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.edifact_character_set import EdifactCharacterSet
from openapi_client.models.edifact_decimal_indicator import EdifactDecimalIndicator
from openapi_client.models.segment_terminator_suffix import SegmentTerminatorSuffix
from typing import Optional, Set
from typing_extensions import Self

class EdifactFramingSettings(BaseModel):
    """
    EdifactFramingSettings
    """ # noqa: E501
    character_encoding: Optional[StrictStr] = Field(default=None, description="The character encoding.", alias="characterEncoding")
    character_set: Optional[EdifactCharacterSet] = Field(default=None, alias="characterSet")
    component_separator: Optional[StrictInt] = Field(default=None, description="The component separator.", alias="componentSeparator")
    data_element_separator: Optional[StrictInt] = Field(default=None, description="The data element separator.", alias="dataElementSeparator")
    decimal_point_indicator: Optional[EdifactDecimalIndicator] = Field(default=None, alias="decimalPointIndicator")
    protocol_version: Optional[StrictInt] = Field(default=None, description="The protocol version.", alias="protocolVersion")
    release_indicator: Optional[StrictInt] = Field(default=None, description="The release indicator.", alias="releaseIndicator")
    repetition_separator: Optional[StrictInt] = Field(default=None, description="The repetition separator.", alias="repetitionSeparator")
    segment_terminator: Optional[StrictInt] = Field(default=None, description="The segment terminator.", alias="segmentTerminator")
    segment_terminator_suffix: Optional[SegmentTerminatorSuffix] = Field(default=None, alias="segmentTerminatorSuffix")
    service_code_list_directory_version: Optional[StrictStr] = Field(default=None, description="The service code list directory version.", alias="serviceCodeListDirectoryVersion")
    __properties: ClassVar[List[str]] = ["characterEncoding", "characterSet", "componentSeparator", "dataElementSeparator", "decimalPointIndicator", "protocolVersion", "releaseIndicator", "repetitionSeparator", "segmentTerminator", "segmentTerminatorSuffix", "serviceCodeListDirectoryVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdifactFramingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdifactFramingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "characterEncoding": obj.get("characterEncoding"),
            "characterSet": obj.get("characterSet"),
            "componentSeparator": obj.get("componentSeparator"),
            "dataElementSeparator": obj.get("dataElementSeparator"),
            "decimalPointIndicator": obj.get("decimalPointIndicator"),
            "protocolVersion": obj.get("protocolVersion"),
            "releaseIndicator": obj.get("releaseIndicator"),
            "repetitionSeparator": obj.get("repetitionSeparator"),
            "segmentTerminator": obj.get("segmentTerminator"),
            "segmentTerminatorSuffix": obj.get("segmentTerminatorSuffix"),
            "serviceCodeListDirectoryVersion": obj.get("serviceCodeListDirectoryVersion")
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_resource_backend_service import ApiResourceBackendService
from openapi_client.models.api_resource_definitions import ApiResourceDefinitions
from openapi_client.models.api_resource_general_information import ApiResourceGeneralInformation
from openapi_client.models.api_resource_metadata import ApiResourceMetadata
from openapi_client.models.api_resource_policies import ApiResourcePolicies
from openapi_client.models.api_tier import ApiTier
from openapi_client.models.resource_reference import ResourceReference
from openapi_client.models.workflow_provisioning_state import WorkflowProvisioningState
from typing import Optional, Set
from typing_extensions import Self

class ApiResourceProperties(BaseModel):
    """
    The API resource properties.
    """ # noqa: E501
    api_definition_url: Optional[StrictStr] = Field(default=None, description="The API definition.", alias="apiDefinitionUrl")
    api_definitions: Optional[ApiResourceDefinitions] = Field(default=None, alias="apiDefinitions")
    backend_service: Optional[ApiResourceBackendService] = Field(default=None, alias="backendService")
    capabilities: Optional[List[StrictStr]] = Field(default=None, description="The capabilities.")
    category: Optional[ApiTier] = None
    connection_parameters: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="The connection parameters.", alias="connectionParameters")
    general_information: Optional[ApiResourceGeneralInformation] = Field(default=None, alias="generalInformation")
    integration_service_environment: Optional[ResourceReference] = Field(default=None, alias="integrationServiceEnvironment")
    metadata: Optional[ApiResourceMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="The name")
    policies: Optional[ApiResourcePolicies] = None
    provisioning_state: Optional[WorkflowProvisioningState] = Field(default=None, alias="provisioningState")
    runtime_urls: Optional[List[StrictStr]] = Field(default=None, description="The runtime urls.", alias="runtimeUrls")
    __properties: ClassVar[List[str]] = ["apiDefinitionUrl", "apiDefinitions", "backendService", "capabilities", "category", "connectionParameters", "generalInformation", "integrationServiceEnvironment", "metadata", "name", "policies", "provisioningState", "runtimeUrls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_definitions
        if self.api_definitions:
            _dict['apiDefinitions'] = self.api_definitions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backend_service
        if self.backend_service:
            _dict['backendService'] = self.backend_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general_information
        if self.general_information:
            _dict['generalInformation'] = self.general_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integration_service_environment
        if self.integration_service_environment:
            _dict['integrationServiceEnvironment'] = self.integration_service_environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiDefinitionUrl": obj.get("apiDefinitionUrl"),
            "apiDefinitions": ApiResourceDefinitions.from_dict(obj["apiDefinitions"]) if obj.get("apiDefinitions") is not None else None,
            "backendService": ApiResourceBackendService.from_dict(obj["backendService"]) if obj.get("backendService") is not None else None,
            "capabilities": obj.get("capabilities"),
            "category": obj.get("category"),
            "connectionParameters": obj.get("connectionParameters"),
            "generalInformation": ApiResourceGeneralInformation.from_dict(obj["generalInformation"]) if obj.get("generalInformation") is not None else None,
            "integrationServiceEnvironment": ResourceReference.from_dict(obj["integrationServiceEnvironment"]) if obj.get("integrationServiceEnvironment") is not None else None,
            "metadata": ApiResourceMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "policies": ApiResourcePolicies.from_dict(obj["policies"]) if obj.get("policies") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "runtimeUrls": obj.get("runtimeUrls")
        })
        return _obj



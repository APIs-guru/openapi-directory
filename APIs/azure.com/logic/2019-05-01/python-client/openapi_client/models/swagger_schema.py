# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.swagger_custom_dynamic_list import SwaggerCustomDynamicList
from openapi_client.models.swagger_custom_dynamic_properties import SwaggerCustomDynamicProperties
from openapi_client.models.swagger_custom_dynamic_schema import SwaggerCustomDynamicSchema
from openapi_client.models.swagger_custom_dynamic_tree import SwaggerCustomDynamicTree
from openapi_client.models.swagger_external_documentation import SwaggerExternalDocumentation
from openapi_client.models.swagger_schema_type import SwaggerSchemaType
from openapi_client.models.swagger_xml import SwaggerXml
from typing import Optional, Set
from typing_extensions import Self

class SwaggerSchema(BaseModel):
    """
    The swagger schema.
    """ # noqa: E501
    additional_properties: Optional[Dict[str, Any]] = Field(default=None, alias="additionalProperties")
    all_of: Optional[List[SwaggerSchema]] = Field(default=None, description="The schemas which must pass validation when this schema is used.", alias="allOf")
    discriminator: Optional[StrictStr] = Field(default=None, description="The discriminator.")
    dynamic_list_new: Optional[SwaggerCustomDynamicList] = Field(default=None, alias="dynamicListNew")
    dynamic_schema_new: Optional[SwaggerCustomDynamicProperties] = Field(default=None, alias="dynamicSchemaNew")
    dynamic_schema_old: Optional[SwaggerCustomDynamicSchema] = Field(default=None, alias="dynamicSchemaOld")
    dynamic_tree: Optional[SwaggerCustomDynamicTree] = Field(default=None, alias="dynamicTree")
    example: Optional[Dict[str, Any]] = None
    external_docs: Optional[SwaggerExternalDocumentation] = Field(default=None, alias="externalDocs")
    items: Optional[SwaggerSchema] = None
    max_properties: Optional[StrictInt] = Field(default=None, description="The maximum number of allowed properties.", alias="maxProperties")
    min_properties: Optional[StrictInt] = Field(default=None, description="The minimum number of allowed properties.", alias="minProperties")
    notification_url_extension: Optional[StrictBool] = Field(default=None, description="Indicates the notification url extension. If this is set, the property's value should be a callback url for a webhook.", alias="notificationUrlExtension")
    properties: Optional[Dict[str, SwaggerSchema]] = Field(default=None, description="The object properties")
    read_only: Optional[StrictBool] = Field(default=None, description="Indicates whether this property must be present in the a request.", alias="readOnly")
    ref: Optional[StrictStr] = Field(default=None, description="The reference.")
    required: Optional[List[StrictStr]] = Field(default=None, description="The object required properties.")
    title: Optional[StrictStr] = Field(default=None, description="The title.")
    type: Optional[SwaggerSchemaType] = None
    xml: Optional[SwaggerXml] = None
    __properties: ClassVar[List[str]] = ["additionalProperties", "allOf", "discriminator", "dynamicListNew", "dynamicSchemaNew", "dynamicSchemaOld", "dynamicTree", "example", "externalDocs", "items", "maxProperties", "minProperties", "notificationUrlExtension", "properties", "readOnly", "ref", "required", "title", "type", "xml"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwaggerSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in all_of (list)
        _items = []
        if self.all_of:
            for _item_all_of in self.all_of:
                if _item_all_of:
                    _items.append(_item_all_of.to_dict())
            _dict['allOf'] = _items
        # override the default output from pydantic by calling `to_dict()` of dynamic_list_new
        if self.dynamic_list_new:
            _dict['dynamicListNew'] = self.dynamic_list_new.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_schema_new
        if self.dynamic_schema_new:
            _dict['dynamicSchemaNew'] = self.dynamic_schema_new.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_schema_old
        if self.dynamic_schema_old:
            _dict['dynamicSchemaOld'] = self.dynamic_schema_old.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_tree
        if self.dynamic_tree:
            _dict['dynamicTree'] = self.dynamic_tree.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_docs
        if self.external_docs:
            _dict['externalDocs'] = self.external_docs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key_properties in self.properties:
                if self.properties[_key_properties]:
                    _field_dict[_key_properties] = self.properties[_key_properties].to_dict()
            _dict['properties'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of xml
        if self.xml:
            _dict['xml'] = self.xml.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwaggerSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalProperties": obj.get("additionalProperties"),
            "allOf": [SwaggerSchema.from_dict(_item) for _item in obj["allOf"]] if obj.get("allOf") is not None else None,
            "discriminator": obj.get("discriminator"),
            "dynamicListNew": SwaggerCustomDynamicList.from_dict(obj["dynamicListNew"]) if obj.get("dynamicListNew") is not None else None,
            "dynamicSchemaNew": SwaggerCustomDynamicProperties.from_dict(obj["dynamicSchemaNew"]) if obj.get("dynamicSchemaNew") is not None else None,
            "dynamicSchemaOld": SwaggerCustomDynamicSchema.from_dict(obj["dynamicSchemaOld"]) if obj.get("dynamicSchemaOld") is not None else None,
            "dynamicTree": SwaggerCustomDynamicTree.from_dict(obj["dynamicTree"]) if obj.get("dynamicTree") is not None else None,
            "example": obj.get("example"),
            "externalDocs": SwaggerExternalDocumentation.from_dict(obj["externalDocs"]) if obj.get("externalDocs") is not None else None,
            "items": SwaggerSchema.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "maxProperties": obj.get("maxProperties"),
            "minProperties": obj.get("minProperties"),
            "notificationUrlExtension": obj.get("notificationUrlExtension"),
            "properties": dict(
                (_k, SwaggerSchema.from_dict(_v))
                for _k, _v in obj["properties"].items()
            )
            if obj.get("properties") is not None
            else None,
            "readOnly": obj.get("readOnly"),
            "ref": obj.get("ref"),
            "required": obj.get("required"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "xml": SwaggerXml.from_dict(obj["xml"]) if obj.get("xml") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
SwaggerSchema.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_operation_annotation import ApiOperationAnnotation
from openapi_client.models.api_reference import ApiReference
from openapi_client.models.swagger_schema import SwaggerSchema
from typing import Optional, Set
from typing_extensions import Self

class ApiOperationPropertiesDefinition(BaseModel):
    """
    The api operations properties
    """ # noqa: E501
    annotation: Optional[ApiOperationAnnotation] = None
    api: Optional[ApiReference] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the api operation.")
    inputs_definition: Optional[SwaggerSchema] = Field(default=None, alias="inputsDefinition")
    is_notification: Optional[StrictBool] = Field(default=None, description="Indicates whether the API operation is notification or not.", alias="isNotification")
    is_webhook: Optional[StrictBool] = Field(default=None, description="Indicates whether the API operation is webhook or not.", alias="isWebhook")
    pageable: Optional[StrictBool] = Field(default=None, description="Indicates whether the api operation is pageable.")
    responses_definition: Optional[Dict[str, SwaggerSchema]] = Field(default=None, description="The operation responses definition schemas.", alias="responsesDefinition")
    summary: Optional[StrictStr] = Field(default=None, description="The summary of the api operation.")
    trigger: Optional[StrictStr] = Field(default=None, description="The trigger type of api operation.")
    trigger_hint: Optional[StrictStr] = Field(default=None, description="The trigger hint for the api operation.", alias="triggerHint")
    visibility: Optional[StrictStr] = Field(default=None, description="The visibility of the api operation.")
    __properties: ClassVar[List[str]] = ["annotation", "api", "description", "inputsDefinition", "isNotification", "isWebhook", "pageable", "responsesDefinition", "summary", "trigger", "triggerHint", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiOperationPropertiesDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotation
        if self.annotation:
            _dict['annotation'] = self.annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api
        if self.api:
            _dict['api'] = self.api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inputs_definition
        if self.inputs_definition:
            _dict['inputsDefinition'] = self.inputs_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in responses_definition (dict)
        _field_dict = {}
        if self.responses_definition:
            for _key_responses_definition in self.responses_definition:
                if self.responses_definition[_key_responses_definition]:
                    _field_dict[_key_responses_definition] = self.responses_definition[_key_responses_definition].to_dict()
            _dict['responsesDefinition'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiOperationPropertiesDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotation": ApiOperationAnnotation.from_dict(obj["annotation"]) if obj.get("annotation") is not None else None,
            "api": ApiReference.from_dict(obj["api"]) if obj.get("api") is not None else None,
            "description": obj.get("description"),
            "inputsDefinition": SwaggerSchema.from_dict(obj["inputsDefinition"]) if obj.get("inputsDefinition") is not None else None,
            "isNotification": obj.get("isNotification"),
            "isWebhook": obj.get("isWebhook"),
            "pageable": obj.get("pageable"),
            "responsesDefinition": dict(
                (_k, SwaggerSchema.from_dict(_v))
                for _k, _v in obj["responsesDefinition"].items()
            )
            if obj.get("responsesDefinition") is not None
            else None,
            "summary": obj.get("summary"),
            "trigger": obj.get("trigger"),
            "triggerHint": obj.get("triggerHint"),
            "visibility": obj.get("visibility")
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_deployment_parameter_metadata_set import ApiDeploymentParameterMetadataSet
from openapi_client.models.api_type import ApiType
from openapi_client.models.workflow_provisioning_state import WorkflowProvisioningState
from openapi_client.models.wsdl_import_method import WsdlImportMethod
from openapi_client.models.wsdl_service import WsdlService
from typing import Optional, Set
from typing_extensions import Self

class ApiResourceMetadata(BaseModel):
    """
    The api resource metadata.
    """ # noqa: E501
    api_type: Optional[ApiType] = Field(default=None, alias="ApiType")
    brand_color: Optional[StrictStr] = Field(default=None, description="The brand color.", alias="brandColor")
    connection_type: Optional[StrictStr] = Field(default=None, description="The connection type.", alias="connectionType")
    deployment_parameters: Optional[ApiDeploymentParameterMetadataSet] = Field(default=None, alias="deploymentParameters")
    hide_key: Optional[StrictStr] = Field(default=None, description="The hide key.", alias="hideKey")
    provisioning_state: Optional[WorkflowProvisioningState] = Field(default=None, alias="provisioningState")
    source: Optional[StrictStr] = Field(default=None, description="The source.")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The tags.")
    wsdl_import_method: Optional[WsdlImportMethod] = Field(default=None, alias="wsdlImportMethod")
    wsdl_service: Optional[WsdlService] = Field(default=None, alias="wsdlService")
    __properties: ClassVar[List[str]] = ["ApiType", "brandColor", "connectionType", "deploymentParameters", "hideKey", "provisioningState", "source", "tags", "wsdlImportMethod", "wsdlService"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiResourceMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deployment_parameters
        if self.deployment_parameters:
            _dict['deploymentParameters'] = self.deployment_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wsdl_service
        if self.wsdl_service:
            _dict['wsdlService'] = self.wsdl_service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiResourceMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApiType": obj.get("ApiType"),
            "brandColor": obj.get("brandColor"),
            "connectionType": obj.get("connectionType"),
            "deploymentParameters": ApiDeploymentParameterMetadataSet.from_dict(obj["deploymentParameters"]) if obj.get("deploymentParameters") is not None else None,
            "hideKey": obj.get("hideKey"),
            "provisioningState": obj.get("provisioningState"),
            "source": obj.get("source"),
            "tags": obj.get("tags"),
            "wsdlImportMethod": obj.get("wsdlImportMethod"),
            "wsdlService": WsdlService.from_dict(obj["wsdlService"]) if obj.get("wsdlService") is not None else None
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_link import ContentLink
from openapi_client.models.correlation import Correlation
from openapi_client.models.resource_reference import ResourceReference
from openapi_client.models.workflow_status import WorkflowStatus
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTriggerHistoryProperties(BaseModel):
    """
    The workflow trigger history properties.
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Gets the code.")
    correlation: Optional[Correlation] = None
    end_time: Optional[datetime] = Field(default=None, description="Gets the end time.", alias="endTime")
    error: Optional[Dict[str, Any]] = None
    fired: Optional[StrictBool] = Field(default=None, description="The value indicating whether trigger was fired.")
    inputs_link: Optional[ContentLink] = Field(default=None, alias="inputsLink")
    outputs_link: Optional[ContentLink] = Field(default=None, alias="outputsLink")
    run: Optional[ResourceReference] = None
    start_time: Optional[datetime] = Field(default=None, description="Gets the start time.", alias="startTime")
    status: Optional[WorkflowStatus] = None
    tracking_id: Optional[StrictStr] = Field(default=None, description="Gets the tracking id.", alias="trackingId")
    __properties: ClassVar[List[str]] = ["code", "correlation", "endTime", "error", "fired", "inputsLink", "outputsLink", "run", "startTime", "status", "trackingId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTriggerHistoryProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code",
            "end_time",
            "fired",
            "start_time",
            "tracking_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of correlation
        if self.correlation:
            _dict['correlation'] = self.correlation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inputs_link
        if self.inputs_link:
            _dict['inputsLink'] = self.inputs_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outputs_link
        if self.outputs_link:
            _dict['outputsLink'] = self.outputs_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of run
        if self.run:
            _dict['run'] = self.run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTriggerHistoryProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "correlation": Correlation.from_dict(obj["correlation"]) if obj.get("correlation") is not None else None,
            "endTime": obj.get("endTime"),
            "error": obj.get("error"),
            "fired": obj.get("fired"),
            "inputsLink": ContentLink.from_dict(obj["inputsLink"]) if obj.get("inputsLink") is not None else None,
            "outputsLink": ContentLink.from_dict(obj["outputsLink"]) if obj.get("outputsLink") is not None else None,
            "run": ResourceReference.from_dict(obj["run"]) if obj.get("run") is not None else None,
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "trackingId": obj.get("trackingId")
        })
        return _obj



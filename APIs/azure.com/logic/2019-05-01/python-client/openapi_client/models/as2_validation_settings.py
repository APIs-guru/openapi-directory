# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_algorithm import EncryptionAlgorithm
from openapi_client.models.signing_algorithm import SigningAlgorithm
from typing import Optional, Set
from typing_extensions import Self

class AS2ValidationSettings(BaseModel):
    """
    The AS2 agreement validation settings.
    """ # noqa: E501
    check_certificate_revocation_list_on_receive: StrictBool = Field(description="The value indicating whether to check for certificate revocation list on receive.", alias="checkCertificateRevocationListOnReceive")
    check_certificate_revocation_list_on_send: StrictBool = Field(description="The value indicating whether to check for certificate revocation list on send.", alias="checkCertificateRevocationListOnSend")
    check_duplicate_message: StrictBool = Field(description="The value indicating whether to check for duplicate message.", alias="checkDuplicateMessage")
    compress_message: StrictBool = Field(description="The value indicating whether the message has to be compressed.", alias="compressMessage")
    encrypt_message: StrictBool = Field(description="The value indicating whether the message has to be encrypted.", alias="encryptMessage")
    encryption_algorithm: EncryptionAlgorithm = Field(alias="encryptionAlgorithm")
    interchange_duplicates_validity_days: StrictInt = Field(description="The number of days to look back for duplicate interchange.", alias="interchangeDuplicatesValidityDays")
    override_message_properties: StrictBool = Field(description="The value indicating whether to override incoming message properties with those in agreement.", alias="overrideMessageProperties")
    sign_message: StrictBool = Field(description="The value indicating whether the message has to be signed.", alias="signMessage")
    signing_algorithm: Optional[SigningAlgorithm] = Field(default=None, alias="signingAlgorithm")
    __properties: ClassVar[List[str]] = ["checkCertificateRevocationListOnReceive", "checkCertificateRevocationListOnSend", "checkDuplicateMessage", "compressMessage", "encryptMessage", "encryptionAlgorithm", "interchangeDuplicatesValidityDays", "overrideMessageProperties", "signMessage", "signingAlgorithm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AS2ValidationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AS2ValidationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkCertificateRevocationListOnReceive": obj.get("checkCertificateRevocationListOnReceive"),
            "checkCertificateRevocationListOnSend": obj.get("checkCertificateRevocationListOnSend"),
            "checkDuplicateMessage": obj.get("checkDuplicateMessage"),
            "compressMessage": obj.get("compressMessage"),
            "encryptMessage": obj.get("encryptMessage"),
            "encryptionAlgorithm": obj.get("encryptionAlgorithm"),
            "interchangeDuplicatesValidityDays": obj.get("interchangeDuplicatesValidityDays"),
            "overrideMessageProperties": obj.get("overrideMessageProperties"),
            "signMessage": obj.get("signMessage"),
            "signingAlgorithm": obj.get("signingAlgorithm")
        })
        return _obj



# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.x12_envelope_settings import X12EnvelopeSettings

class TestX12EnvelopeSettings(unittest.TestCase):
    """X12EnvelopeSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> X12EnvelopeSettings:
        """Test X12EnvelopeSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `X12EnvelopeSettings`
        """
        model = X12EnvelopeSettings()
        if include_optional:
            return X12EnvelopeSettings(
                control_standards_id = 56,
                control_version_number = '',
                enable_default_group_headers = True,
                functional_group_id = '',
                group_control_number_lower_bound = 56,
                group_control_number_upper_bound = 56,
                group_header_agency_code = '',
                group_header_date_format = 'NotSpecified',
                group_header_time_format = 'NotSpecified',
                group_header_version = '',
                interchange_control_number_lower_bound = 56,
                interchange_control_number_upper_bound = 56,
                overwrite_existing_transaction_set_control_number = True,
                receiver_application_id = '',
                rollover_group_control_number = True,
                rollover_interchange_control_number = True,
                rollover_transaction_set_control_number = True,
                sender_application_id = '',
                transaction_set_control_number_lower_bound = 56,
                transaction_set_control_number_prefix = '',
                transaction_set_control_number_suffix = '',
                transaction_set_control_number_upper_bound = 56,
                usage_indicator = 'NotSpecified',
                use_control_standards_id_as_repetition_character = True
            )
        else:
            return X12EnvelopeSettings(
                control_standards_id = 56,
                control_version_number = '',
                enable_default_group_headers = True,
                group_control_number_lower_bound = 56,
                group_control_number_upper_bound = 56,
                group_header_agency_code = '',
                group_header_date_format = 'NotSpecified',
                group_header_time_format = 'NotSpecified',
                group_header_version = '',
                interchange_control_number_lower_bound = 56,
                interchange_control_number_upper_bound = 56,
                overwrite_existing_transaction_set_control_number = True,
                receiver_application_id = '',
                rollover_group_control_number = True,
                rollover_interchange_control_number = True,
                rollover_transaction_set_control_number = True,
                sender_application_id = '',
                transaction_set_control_number_lower_bound = 56,
                transaction_set_control_number_upper_bound = 56,
                usage_indicator = 'NotSpecified',
                use_control_standards_id_as_repetition_character = True,
        )
        """

    def testX12EnvelopeSettings(self):
        """Test X12EnvelopeSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.as2_protocol_settings import AS2ProtocolSettings

class TestAS2ProtocolSettings(unittest.TestCase):
    """AS2ProtocolSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AS2ProtocolSettings:
        """Test AS2ProtocolSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AS2ProtocolSettings`
        """
        model = AS2ProtocolSettings()
        if include_optional:
            return AS2ProtocolSettings(
                acknowledgement_connection_settings = openapi_client.models.as2_acknowledgement_connection_settings.AS2AcknowledgementConnectionSettings(
                    ignore_certificate_name_mismatch = True, 
                    keep_http_connection_alive = True, 
                    support_http_status_code_continue = True, 
                    unfold_http_headers = True, ),
                envelope_settings = openapi_client.models.as2_envelope_settings.AS2EnvelopeSettings(
                    autogenerate_file_name = True, 
                    file_name_template = '', 
                    message_content_type = '', 
                    suspend_message_on_file_name_generation_error = True, 
                    transmit_file_name_in_mime_header = True, ),
                error_settings = openapi_client.models.as2_error_settings.AS2ErrorSettings(
                    resend_if_mdn_not_received = True, 
                    suspend_duplicate_message = True, ),
                mdn_settings = openapi_client.models.as2_mdn_settings.AS2MdnSettings(
                    disposition_notification_to = '', 
                    mdn_text = '', 
                    mic_hashing_algorithm = 'NotSpecified', 
                    need_mdn = True, 
                    receipt_delivery_url = '', 
                    send_inbound_mdnto_message_box = True, 
                    send_mdn_asynchronously = True, 
                    sign_mdn = True, 
                    sign_outbound_mdnif_optional = True, ),
                message_connection_settings = openapi_client.models.as2_message_connection_settings.AS2MessageConnectionSettings(
                    ignore_certificate_name_mismatch = True, 
                    keep_http_connection_alive = True, 
                    support_http_status_code_continue = True, 
                    unfold_http_headers = True, ),
                security_settings = openapi_client.models.as2_security_settings.AS2SecuritySettings(
                    enable_nrr_for_inbound_decoded_messages = True, 
                    enable_nrr_for_inbound_encoded_messages = True, 
                    enable_nrr_for_inbound_mdn = True, 
                    enable_nrr_for_outbound_decoded_messages = True, 
                    enable_nrr_for_outbound_encoded_messages = True, 
                    enable_nrr_for_outbound_mdn = True, 
                    encryption_certificate_name = '', 
                    override_group_signing_certificate = True, 
                    sha2_algorithm_format = '', 
                    signing_certificate_name = '', ),
                validation_settings = openapi_client.models.as2_validation_settings.AS2ValidationSettings(
                    check_certificate_revocation_list_on_receive = True, 
                    check_certificate_revocation_list_on_send = True, 
                    check_duplicate_message = True, 
                    compress_message = True, 
                    encrypt_message = True, 
                    encryption_algorithm = 'NotSpecified', 
                    interchange_duplicates_validity_days = 56, 
                    override_message_properties = True, 
                    sign_message = True, 
                    signing_algorithm = 'NotSpecified', )
            )
        else:
            return AS2ProtocolSettings(
                acknowledgement_connection_settings = openapi_client.models.as2_acknowledgement_connection_settings.AS2AcknowledgementConnectionSettings(
                    ignore_certificate_name_mismatch = True, 
                    keep_http_connection_alive = True, 
                    support_http_status_code_continue = True, 
                    unfold_http_headers = True, ),
                envelope_settings = openapi_client.models.as2_envelope_settings.AS2EnvelopeSettings(
                    autogenerate_file_name = True, 
                    file_name_template = '', 
                    message_content_type = '', 
                    suspend_message_on_file_name_generation_error = True, 
                    transmit_file_name_in_mime_header = True, ),
                error_settings = openapi_client.models.as2_error_settings.AS2ErrorSettings(
                    resend_if_mdn_not_received = True, 
                    suspend_duplicate_message = True, ),
                mdn_settings = openapi_client.models.as2_mdn_settings.AS2MdnSettings(
                    disposition_notification_to = '', 
                    mdn_text = '', 
                    mic_hashing_algorithm = 'NotSpecified', 
                    need_mdn = True, 
                    receipt_delivery_url = '', 
                    send_inbound_mdnto_message_box = True, 
                    send_mdn_asynchronously = True, 
                    sign_mdn = True, 
                    sign_outbound_mdnif_optional = True, ),
                message_connection_settings = openapi_client.models.as2_message_connection_settings.AS2MessageConnectionSettings(
                    ignore_certificate_name_mismatch = True, 
                    keep_http_connection_alive = True, 
                    support_http_status_code_continue = True, 
                    unfold_http_headers = True, ),
                security_settings = openapi_client.models.as2_security_settings.AS2SecuritySettings(
                    enable_nrr_for_inbound_decoded_messages = True, 
                    enable_nrr_for_inbound_encoded_messages = True, 
                    enable_nrr_for_inbound_mdn = True, 
                    enable_nrr_for_outbound_decoded_messages = True, 
                    enable_nrr_for_outbound_encoded_messages = True, 
                    enable_nrr_for_outbound_mdn = True, 
                    encryption_certificate_name = '', 
                    override_group_signing_certificate = True, 
                    sha2_algorithm_format = '', 
                    signing_certificate_name = '', ),
                validation_settings = openapi_client.models.as2_validation_settings.AS2ValidationSettings(
                    check_certificate_revocation_list_on_receive = True, 
                    check_certificate_revocation_list_on_send = True, 
                    check_duplicate_message = True, 
                    compress_message = True, 
                    encrypt_message = True, 
                    encryption_algorithm = 'NotSpecified', 
                    interchange_duplicates_validity_days = 56, 
                    override_message_properties = True, 
                    sign_message = True, 
                    signing_algorithm = 'NotSpecified', ),
        )
        """

    def testAS2ProtocolSettings(self):
        """Test AS2ProtocolSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

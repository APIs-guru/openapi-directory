# coding: utf-8

"""
    LogicManagementClient

    REST API for Azure Logic Apps.

    The version of the OpenAPI document: 2019-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_resource_properties import ApiResourceProperties

class TestApiResourceProperties(unittest.TestCase):
    """ApiResourceProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiResourceProperties:
        """Test ApiResourceProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiResourceProperties`
        """
        model = ApiResourceProperties()
        if include_optional:
            return ApiResourceProperties(
                api_definition_url = '',
                api_definitions = openapi_client.models.api_resource_definitions.ApiResourceDefinitions(
                    modified_swagger_url = '', 
                    original_swagger_url = '', ),
                backend_service = openapi_client.models.api_resource_backend_service.ApiResourceBackendService(
                    service_url = '', ),
                capabilities = [
                    ''
                    ],
                category = 'NotSpecified',
                connection_parameters = {
                    'key' : openapi_client.models.object.Object()
                    },
                general_information = openapi_client.models.api_resource_general_information.ApiResourceGeneralInformation(
                    description = '', 
                    display_name = '', 
                    icon_url = '', 
                    release_tag = '', 
                    terms_of_use_url = '', 
                    tier = 'NotSpecified', ),
                integration_service_environment = openapi_client.models.resource_reference.ResourceReference(
                    id = '', 
                    name = '', 
                    type = '', ),
                metadata = openapi_client.models.api_resource_metadata.ApiResourceMetadata(
                    api_type = 'NotSpecified', 
                    brand_color = '', 
                    connection_type = '', 
                    deployment_parameters = openapi_client.models.api_deployment_parameter_metadata_set.ApiDeploymentParameterMetadataSet(
                        package_content_link = openapi_client.models.api_deployment_parameter_metadata.ApiDeploymentParameterMetadata(
                            description = '', 
                            display_name = '', 
                            is_required = True, 
                            type = '', 
                            visibility = 'NotSpecified', ), 
                        redis_cache_connection_string = openapi_client.models.api_deployment_parameter_metadata.ApiDeploymentParameterMetadata(
                            description = '', 
                            display_name = '', 
                            is_required = True, 
                            type = '', ), ), 
                    hide_key = '', 
                    provisioning_state = 'NotSpecified', 
                    source = '', 
                    tags = {
                        'key' : ''
                        }, 
                    wsdl_import_method = 'NotSpecified', 
                    wsdl_service = openapi_client.models.wsdl_service.WsdlService(
                        endpoint_qualified_names = [
                            ''
                            ], 
                        qualified_name = '', ), ),
                name = '',
                policies = openapi_client.models.api_resource_policies.ApiResourcePolicies(
                    content = '', 
                    content_link = '', ),
                provisioning_state = 'NotSpecified',
                runtime_urls = [
                    ''
                    ]
            )
        else:
            return ApiResourceProperties(
        )
        """

    def testApiResourceProperties(self):
        """Test ApiResourceProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

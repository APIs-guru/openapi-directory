# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for Components.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentProperties(BaseModel):
    """
    Properties that define an Application Insights component resource.
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="Application Insights Unique ID for your Application.", alias="AppId")
    application_id: Optional[StrictStr] = Field(default=None, description="The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.", alias="ApplicationId")
    application_type: StrictStr = Field(description="Type of application being monitored.", alias="Application_Type")
    connection_string: Optional[StrictStr] = Field(default=None, description="Application Insights component connection string.", alias="ConnectionString")
    creation_date: Optional[datetime] = Field(default=None, description="Creation Date for the Application Insights component, in ISO 8601 format.", alias="CreationDate")
    disable_ip_masking: Optional[StrictBool] = Field(default=None, description="Disable IP masking.", alias="DisableIpMasking")
    flow_type: Optional[StrictStr] = Field(default='Bluefield', description="Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.", alias="Flow_Type")
    hockey_app_id: Optional[StrictStr] = Field(default=None, description="The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.", alias="HockeyAppId")
    hockey_app_token: Optional[StrictStr] = Field(default=None, description="Token used to authenticate communications with between Application Insights and HockeyApp.", alias="HockeyAppToken")
    immediate_purge_data_on30_days: Optional[StrictBool] = Field(default=None, description="Purge data immediately after 30 days.", alias="ImmediatePurgeDataOn30Days")
    instrumentation_key: Optional[StrictStr] = Field(default=None, description="Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.", alias="InstrumentationKey")
    request_source: Optional[StrictStr] = Field(default='rest', description="Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.", alias="Request_Source")
    retention_in_days: Optional[StrictInt] = Field(default=None, description="Retention period in days.", alias="RetentionInDays")
    sampling_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.", alias="SamplingPercentage")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Azure Tenant Id.", alias="TenantId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["AppId", "ApplicationId", "Application_Type", "ConnectionString", "CreationDate", "DisableIpMasking", "Flow_Type", "HockeyAppId", "HockeyAppToken", "ImmediatePurgeDataOn30Days", "InstrumentationKey", "Request_Source", "RetentionInDays", "SamplingPercentage", "TenantId", "provisioningState"]

    @field_validator('application_type')
    def application_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['web', 'other']):
            raise ValueError("must be one of enum values ('web', 'other')")
        return value

    @field_validator('flow_type')
    def flow_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Bluefield']):
            raise ValueError("must be one of enum values ('Bluefield')")
        return value

    @field_validator('request_source')
    def request_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['rest']):
            raise ValueError("must be one of enum values ('rest')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_id",
            "application_id",
            "connection_string",
            "creation_date",
            "hockey_app_token",
            "instrumentation_key",
            "tenant_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AppId": obj.get("AppId"),
            "ApplicationId": obj.get("ApplicationId"),
            "Application_Type": obj.get("Application_Type") if obj.get("Application_Type") is not None else 'web',
            "ConnectionString": obj.get("ConnectionString"),
            "CreationDate": obj.get("CreationDate"),
            "DisableIpMasking": obj.get("DisableIpMasking"),
            "Flow_Type": obj.get("Flow_Type") if obj.get("Flow_Type") is not None else 'Bluefield',
            "HockeyAppId": obj.get("HockeyAppId"),
            "HockeyAppToken": obj.get("HockeyAppToken"),
            "ImmediatePurgeDataOn30Days": obj.get("ImmediatePurgeDataOn30Days"),
            "InstrumentationKey": obj.get("InstrumentationKey"),
            "Request_Source": obj.get("Request_Source") if obj.get("Request_Source") is not None else 'rest',
            "RetentionInDays": obj.get("RetentionInDays"),
            "SamplingPercentage": obj.get("SamplingPercentage"),
            "TenantId": obj.get("TenantId"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VolumeProperties(BaseModel):
    """
    The properties of volume.
    """ # noqa: E501
    access_control_record_ids: List[StrictStr] = Field(description="The IDs of the access control records, associated with the volume.", alias="accessControlRecordIds")
    backup_policy_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the backup policies, in which this volume is part of.", alias="backupPolicyIds")
    backup_status: Optional[StrictStr] = Field(default=None, description="The backup status of the volume.", alias="backupStatus")
    monitoring_status: StrictStr = Field(description="The monitoring status of the volume.", alias="monitoringStatus")
    operation_status: Optional[StrictStr] = Field(default=None, description="The operation status on the volume.", alias="operationStatus")
    size_in_bytes: StrictInt = Field(description="The size of the volume in bytes.", alias="sizeInBytes")
    volume_container_id: Optional[StrictStr] = Field(default=None, description="The ID of the volume container, in which this volume is created.", alias="volumeContainerId")
    volume_status: StrictStr = Field(description="The volume status.", alias="volumeStatus")
    volume_type: StrictStr = Field(description="The type of the volume.", alias="volumeType")
    __properties: ClassVar[List[str]] = ["accessControlRecordIds", "backupPolicyIds", "backupStatus", "monitoringStatus", "operationStatus", "sizeInBytes", "volumeContainerId", "volumeStatus", "volumeType"]

    @field_validator('backup_status')
    def backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('monitoring_status')
    def monitoring_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('operation_status')
    def operation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Updating', 'Deleting', 'Restoring']):
            raise ValueError("must be one of enum values ('None', 'Updating', 'Deleting', 'Restoring')")
        return value

    @field_validator('volume_status')
    def volume_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Online', 'Offline']):
            raise ValueError("must be one of enum values ('Online', 'Offline')")
        return value

    @field_validator('volume_type')
    def volume_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Tiered', 'Archival', 'LocallyPinned']):
            raise ValueError("must be one of enum values ('Tiered', 'Archival', 'LocallyPinned')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "backup_policy_ids",
            "backup_status",
            "operation_status",
            "volume_container_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControlRecordIds": obj.get("accessControlRecordIds"),
            "backupPolicyIds": obj.get("backupPolicyIds"),
            "backupStatus": obj.get("backupStatus"),
            "monitoringStatus": obj.get("monitoringStatus"),
            "operationStatus": obj.get("operationStatus"),
            "sizeInBytes": obj.get("sizeInBytes"),
            "volumeContainerId": obj.get("volumeContainerId"),
            "volumeStatus": obj.get("volumeStatus"),
            "volumeType": obj.get("volumeType")
        })
        return _obj



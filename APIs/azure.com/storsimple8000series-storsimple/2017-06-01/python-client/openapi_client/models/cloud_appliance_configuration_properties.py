# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.acs_configuration import AcsConfiguration
from openapi_client.models.vm_image import VmImage
from typing import Optional, Set
from typing_extensions import Self

class CloudApplianceConfigurationProperties(BaseModel):
    """
    The properties of cloud appliance configuration.
    """ # noqa: E501
    acs_configuration: AcsConfiguration = Field(alias="acsConfiguration")
    cloud_platform: StrictStr = Field(description="The cloud platform.", alias="cloudPlatform")
    model_number: StrictStr = Field(description="The model number.", alias="modelNumber")
    supported_regions: List[StrictStr] = Field(description="The supported regions.", alias="supportedRegions")
    supported_storage_account_types: List[StrictStr] = Field(description="The supported storage account types.", alias="supportedStorageAccountTypes")
    supported_vm_images: List[VmImage] = Field(description="The supported virtual machine images.", alias="supportedVmImages")
    supported_vm_types: List[StrictStr] = Field(description="The supported virtual machine types.", alias="supportedVmTypes")
    __properties: ClassVar[List[str]] = ["acsConfiguration", "cloudPlatform", "modelNumber", "supportedRegions", "supportedStorageAccountTypes", "supportedVmImages", "supportedVmTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudApplianceConfigurationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acs_configuration
        if self.acs_configuration:
            _dict['acsConfiguration'] = self.acs_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_vm_images (list)
        _items = []
        if self.supported_vm_images:
            for _item_supported_vm_images in self.supported_vm_images:
                if _item_supported_vm_images:
                    _items.append(_item_supported_vm_images.to_dict())
            _dict['supportedVmImages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudApplianceConfigurationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acsConfiguration": AcsConfiguration.from_dict(obj["acsConfiguration"]) if obj.get("acsConfiguration") is not None else None,
            "cloudPlatform": obj.get("cloudPlatform"),
            "modelNumber": obj.get("modelNumber"),
            "supportedRegions": obj.get("supportedRegions"),
            "supportedStorageAccountTypes": obj.get("supportedStorageAccountTypes"),
            "supportedVmImages": [VmImage.from_dict(_item) for _item in obj["supportedVmImages"]] if obj.get("supportedVmImages") is not None else None,
            "supportedVmTypes": obj.get("supportedVmTypes")
        })
        return _obj



# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_client.models.chap_settings import ChapSettings
from openapi_client.models.cloud_appliance_settings import CloudApplianceSettings
from openapi_client.models.remote_management_settings_patch import RemoteManagementSettingsPatch
from typing import Optional, Set
from typing_extensions import Self

class SecuritySettingsPatchProperties(BaseModel):
    """
    The properties of the security settings patch.
    """ # noqa: E501
    chap_settings: Optional[ChapSettings] = Field(default=None, alias="chapSettings")
    cloud_appliance_settings: Optional[CloudApplianceSettings] = Field(default=None, alias="cloudApplianceSettings")
    device_admin_password: Optional[AsymmetricEncryptedSecret] = Field(default=None, alias="deviceAdminPassword")
    remote_management_settings: Optional[RemoteManagementSettingsPatch] = Field(default=None, alias="remoteManagementSettings")
    snapshot_password: Optional[AsymmetricEncryptedSecret] = Field(default=None, alias="snapshotPassword")
    __properties: ClassVar[List[str]] = ["chapSettings", "cloudApplianceSettings", "deviceAdminPassword", "remoteManagementSettings", "snapshotPassword"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecuritySettingsPatchProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chap_settings
        if self.chap_settings:
            _dict['chapSettings'] = self.chap_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_appliance_settings
        if self.cloud_appliance_settings:
            _dict['cloudApplianceSettings'] = self.cloud_appliance_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_admin_password
        if self.device_admin_password:
            _dict['deviceAdminPassword'] = self.device_admin_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_management_settings
        if self.remote_management_settings:
            _dict['remoteManagementSettings'] = self.remote_management_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snapshot_password
        if self.snapshot_password:
            _dict['snapshotPassword'] = self.snapshot_password.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecuritySettingsPatchProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chapSettings": ChapSettings.from_dict(obj["chapSettings"]) if obj.get("chapSettings") is not None else None,
            "cloudApplianceSettings": CloudApplianceSettings.from_dict(obj["cloudApplianceSettings"]) if obj.get("cloudApplianceSettings") is not None else None,
            "deviceAdminPassword": AsymmetricEncryptedSecret.from_dict(obj["deviceAdminPassword"]) if obj.get("deviceAdminPassword") is not None else None,
            "remoteManagementSettings": RemoteManagementSettingsPatch.from_dict(obj["remoteManagementSettings"]) if obj.get("remoteManagementSettings") is not None else None,
            "snapshotPassword": AsymmetricEncryptedSecret.from_dict(obj["snapshotPassword"]) if obj.get("snapshotPassword") is not None else None
        })
        return _obj



# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_statistics import DataStatistics
from openapi_client.models.job_stage import JobStage
from typing import Optional, Set
from typing_extensions import Self

class JobProperties(BaseModel):
    """
    The properties of the job.
    """ # noqa: E501
    backup_point_in_time: Optional[datetime] = Field(default=None, description="The time of the backup used for the failover.", alias="backupPointInTime")
    backup_type: Optional[StrictStr] = Field(default=None, description="The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs.", alias="backupType")
    data_stats: Optional[DataStatistics] = Field(default=None, alias="dataStats")
    device_id: Optional[StrictStr] = Field(default=None, description="The device ID in which the job ran.", alias="deviceId")
    entity_label: Optional[StrictStr] = Field(default=None, description="The entity identifier for which the job ran.", alias="entityLabel")
    entity_type: Optional[StrictStr] = Field(default=None, description="The entity type for which the job ran.", alias="entityType")
    is_cancellable: Optional[StrictBool] = Field(default=None, description="Represents whether the job is cancellable or not.", alias="isCancellable")
    job_stages: Optional[List[JobStage]] = Field(default=None, description="The job stages.", alias="jobStages")
    job_type: StrictStr = Field(description="The type of the job.", alias="jobType")
    source_device_id: Optional[StrictStr] = Field(default=None, description="The source device ID of the failover job.", alias="sourceDeviceId")
    __properties: ClassVar[List[str]] = ["backupPointInTime", "backupType", "dataStats", "deviceId", "entityLabel", "entityType", "isCancellable", "jobStages", "jobType", "sourceDeviceId"]

    @field_validator('backup_type')
    def backup_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LocalSnapshot', 'CloudSnapshot']):
            raise ValueError("must be one of enum values ('LocalSnapshot', 'CloudSnapshot')")
        return value

    @field_validator('job_type')
    def job_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ScheduledBackup', 'ManualBackup', 'RestoreBackup', 'CloneVolume', 'FailoverVolumeContainers', 'CreateLocallyPinnedVolume', 'ModifyVolume', 'InstallUpdates', 'SupportPackageLogs', 'CreateCloudAppliance']):
            raise ValueError("must be one of enum values ('ScheduledBackup', 'ManualBackup', 'RestoreBackup', 'CloneVolume', 'FailoverVolumeContainers', 'CreateLocallyPinnedVolume', 'ModifyVolume', 'InstallUpdates', 'SupportPackageLogs', 'CreateCloudAppliance')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_stats
        if self.data_stats:
            _dict['dataStats'] = self.data_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in job_stages (list)
        _items = []
        if self.job_stages:
            for _item_job_stages in self.job_stages:
                if _item_job_stages:
                    _items.append(_item_job_stages.to_dict())
            _dict['jobStages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupPointInTime": obj.get("backupPointInTime"),
            "backupType": obj.get("backupType"),
            "dataStats": DataStatistics.from_dict(obj["dataStats"]) if obj.get("dataStats") is not None else None,
            "deviceId": obj.get("deviceId"),
            "entityLabel": obj.get("entityLabel"),
            "entityType": obj.get("entityType"),
            "isCancellable": obj.get("isCancellable"),
            "jobStages": [JobStage.from_dict(_item) for _item in obj["jobStages"]] if obj.get("jobStages") is not None else None,
            "jobType": obj.get("jobType"),
            "sourceDeviceId": obj.get("sourceDeviceId")
        })
        return _obj



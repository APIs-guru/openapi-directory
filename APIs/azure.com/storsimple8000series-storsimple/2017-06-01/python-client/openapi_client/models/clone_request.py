# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.backup_element import BackupElement
from typing import Optional, Set
from typing_extensions import Self

class CloneRequest(BaseModel):
    """
    The clone job request.
    """ # noqa: E501
    backup_element: BackupElement = Field(alias="backupElement")
    target_access_control_record_ids: List[StrictStr] = Field(description="The list of path IDs of the access control records to be associated to the new cloned volume.", alias="targetAccessControlRecordIds")
    target_device_id: StrictStr = Field(description="The path ID of the device which will act as the clone target.", alias="targetDeviceId")
    target_volume_name: StrictStr = Field(description="The name of the new volume which will be created and the backup will be cloned into.", alias="targetVolumeName")
    __properties: ClassVar[List[str]] = ["backupElement", "targetAccessControlRecordIds", "targetDeviceId", "targetVolumeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloneRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_element
        if self.backup_element:
            _dict['backupElement'] = self.backup_element.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloneRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupElement": BackupElement.from_dict(obj["backupElement"]) if obj.get("backupElement") is not None else None,
            "targetAccessControlRecordIds": obj.get("targetAccessControlRecordIds"),
            "targetDeviceId": obj.get("targetDeviceId"),
            "targetVolumeName": obj.get("targetVolumeName")
        })
        return _obj



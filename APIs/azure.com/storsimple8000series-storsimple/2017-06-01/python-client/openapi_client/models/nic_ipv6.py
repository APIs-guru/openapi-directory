# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NicIPv6(BaseModel):
    """
    Details related to the IPv6 address configuration.
    """ # noqa: E501
    controller0_ipv6_address: Optional[StrictStr] = Field(default=None, description="The IPv6 address of Controller0.", alias="controller0Ipv6Address")
    controller1_ipv6_address: Optional[StrictStr] = Field(default=None, description="The IPv6 address of Controller1.", alias="controller1Ipv6Address")
    ipv6_address: Optional[StrictStr] = Field(default=None, description="The IPv6 address of the network adapter.", alias="ipv6Address")
    ipv6_gateway: Optional[StrictStr] = Field(default=None, description="The IPv6 gateway of the network adapter.", alias="ipv6Gateway")
    ipv6_prefix: Optional[StrictStr] = Field(default=None, description="The IPv6 prefix of the network adapter.", alias="ipv6Prefix")
    __properties: ClassVar[List[str]] = ["controller0Ipv6Address", "controller1Ipv6Address", "ipv6Address", "ipv6Gateway", "ipv6Prefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NicIPv6 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NicIPv6 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controller0Ipv6Address": obj.get("controller0Ipv6Address"),
            "controller1Ipv6Address": obj.get("controller1Ipv6Address"),
            "ipv6Address": obj.get("ipv6Address"),
            "ipv6Gateway": obj.get("ipv6Gateway"),
            "ipv6Prefix": obj.get("ipv6Prefix")
        })
        return _obj



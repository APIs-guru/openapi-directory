# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BackupPolicyProperties(BaseModel):
    """
    The properties of the backup policy.
    """ # noqa: E501
    backup_policy_creation_type: Optional[StrictStr] = Field(default=None, description="The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.", alias="backupPolicyCreationType")
    last_backup_time: Optional[datetime] = Field(default=None, description="The time of the last backup for the backup policy.", alias="lastBackupTime")
    next_backup_time: Optional[datetime] = Field(default=None, description="The time of the next backup for the backup policy.", alias="nextBackupTime")
    scheduled_backup_status: Optional[StrictStr] = Field(default=None, description="Indicates whether at least one of the schedules in the backup policy is active or not.", alias="scheduledBackupStatus")
    schedules_count: Optional[StrictInt] = Field(default=None, description="The count of schedules the backup policy contains.", alias="schedulesCount")
    ssm_host_name: Optional[StrictStr] = Field(default=None, description="If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.", alias="ssmHostName")
    volume_ids: List[StrictStr] = Field(description="The path IDs of the volumes which are part of the backup policy.", alias="volumeIds")
    __properties: ClassVar[List[str]] = ["backupPolicyCreationType", "lastBackupTime", "nextBackupTime", "scheduledBackupStatus", "schedulesCount", "ssmHostName", "volumeIds"]

    @field_validator('backup_policy_creation_type')
    def backup_policy_creation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BySaaS', 'BySSM']):
            raise ValueError("must be one of enum values ('BySaaS', 'BySSM')")
        return value

    @field_validator('scheduled_backup_status')
    def scheduled_backup_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Disabled', 'Enabled']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "backup_policy_creation_type",
            "last_backup_time",
            "next_backup_time",
            "scheduled_backup_status",
            "schedules_count",
            "ssm_host_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupPolicyCreationType": obj.get("backupPolicyCreationType"),
            "lastBackupTime": obj.get("lastBackupTime"),
            "nextBackupTime": obj.get("nextBackupTime"),
            "scheduledBackupStatus": obj.get("scheduledBackupStatus"),
            "schedulesCount": obj.get("schedulesCount"),
            "ssmHostName": obj.get("ssmHostName"),
            "volumeIds": obj.get("volumeIds")
        })
        return _obj



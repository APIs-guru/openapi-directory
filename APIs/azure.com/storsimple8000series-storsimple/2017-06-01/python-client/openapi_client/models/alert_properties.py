# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_error_details import AlertErrorDetails
from openapi_client.models.alert_source import AlertSource
from typing import Optional, Set
from typing_extensions import Self

class AlertProperties(BaseModel):
    """
    The properties of alert
    """ # noqa: E501
    alert_type: StrictStr = Field(description="The type of the alert", alias="alertType")
    appeared_at_source_time: datetime = Field(description="The source time at which the alert was raised", alias="appearedAtSourceTime")
    appeared_at_time: datetime = Field(description="The UTC time at which the alert was raised", alias="appearedAtTime")
    cleared_at_source_time: Optional[datetime] = Field(default=None, description="The source time at which the alert was cleared", alias="clearedAtSourceTime")
    cleared_at_time: Optional[datetime] = Field(default=None, description="The UTC time at which the alert was cleared", alias="clearedAtTime")
    detailed_information: Optional[Dict[str, StrictStr]] = Field(default=None, description="More details about the alert", alias="detailedInformation")
    error_details: Optional[AlertErrorDetails] = Field(default=None, alias="errorDetails")
    recommendation: Optional[StrictStr] = Field(default=None, description="The recommended action for the issue raised in the alert")
    resolution_reason: Optional[StrictStr] = Field(default=None, description="The reason for resolving the alert", alias="resolutionReason")
    scope: StrictStr = Field(description="The scope of the alert")
    severity: StrictStr = Field(description="The severity of the alert")
    source: AlertSource
    status: StrictStr = Field(description="The current status of the alert")
    title: StrictStr = Field(description="The title of the alert")
    __properties: ClassVar[List[str]] = ["alertType", "appearedAtSourceTime", "appearedAtTime", "clearedAtSourceTime", "clearedAtTime", "detailedInformation", "errorDetails", "recommendation", "resolutionReason", "scope", "severity", "source", "status", "title"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Resource', 'Device']):
            raise ValueError("must be one of enum values ('Resource', 'Device')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Informational', 'Warning', 'Critical']):
            raise ValueError("must be one of enum values ('Informational', 'Warning', 'Critical')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Active', 'Cleared']):
            raise ValueError("must be one of enum values ('Active', 'Cleared')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_details
        if self.error_details:
            _dict['errorDetails'] = self.error_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertType": obj.get("alertType"),
            "appearedAtSourceTime": obj.get("appearedAtSourceTime"),
            "appearedAtTime": obj.get("appearedAtTime"),
            "clearedAtSourceTime": obj.get("clearedAtSourceTime"),
            "clearedAtTime": obj.get("clearedAtTime"),
            "detailedInformation": obj.get("detailedInformation"),
            "errorDetails": AlertErrorDetails.from_dict(obj["errorDetails"]) if obj.get("errorDetails") is not None else None,
            "recommendation": obj.get("recommendation"),
            "resolutionReason": obj.get("resolutionReason"),
            "scope": obj.get("scope"),
            "severity": obj.get("severity"),
            "source": AlertSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "status": obj.get("status"),
            "title": obj.get("title")
        })
        return _obj



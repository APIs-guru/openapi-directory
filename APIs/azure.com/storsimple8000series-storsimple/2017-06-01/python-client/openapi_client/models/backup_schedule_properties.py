# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schedule_recurrence import ScheduleRecurrence
from typing import Optional, Set
from typing_extensions import Self

class BackupScheduleProperties(BaseModel):
    """
    The properties of the backup schedule.
    """ # noqa: E501
    backup_type: StrictStr = Field(description="The type of backup which needs to be taken.", alias="backupType")
    last_successful_run: Optional[datetime] = Field(default=None, description="The last successful backup run which was triggered for the schedule.", alias="lastSuccessfulRun")
    retention_count: StrictInt = Field(description="The number of backups to be retained.", alias="retentionCount")
    schedule_recurrence: ScheduleRecurrence = Field(alias="scheduleRecurrence")
    schedule_status: StrictStr = Field(description="The schedule status.", alias="scheduleStatus")
    start_time: datetime = Field(description="The start time of the schedule.", alias="startTime")
    __properties: ClassVar[List[str]] = ["backupType", "lastSuccessfulRun", "retentionCount", "scheduleRecurrence", "scheduleStatus", "startTime"]

    @field_validator('backup_type')
    def backup_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['LocalSnapshot', 'CloudSnapshot']):
            raise ValueError("must be one of enum values ('LocalSnapshot', 'CloudSnapshot')")
        return value

    @field_validator('schedule_status')
    def schedule_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupScheduleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_successful_run",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule_recurrence
        if self.schedule_recurrence:
            _dict['scheduleRecurrence'] = self.schedule_recurrence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupScheduleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupType": obj.get("backupType"),
            "lastSuccessfulRun": obj.get("lastSuccessfulRun"),
            "retentionCount": obj.get("retentionCount"),
            "scheduleRecurrence": ScheduleRecurrence.from_dict(obj["scheduleRecurrence"]) if obj.get("scheduleRecurrence") is not None else None,
            "scheduleStatus": obj.get("scheduleStatus"),
            "startTime": obj.get("startTime")
        })
        return _obj



# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_element import BackupElement
from typing import Optional, Set
from typing_extensions import Self

class BackupProperties(BaseModel):
    """
    The properties of the backup.
    """ # noqa: E501
    backup_job_creation_type: Optional[StrictStr] = Field(default=None, description="The backup job creation type.", alias="backupJobCreationType")
    backup_policy_id: Optional[StrictStr] = Field(default=None, description="The path ID of the backup policy.", alias="backupPolicyId")
    backup_type: Optional[StrictStr] = Field(default=None, description="The type of the backup.", alias="backupType")
    created_on: datetime = Field(description="The time when the backup was created.", alias="createdOn")
    elements: List[BackupElement] = Field(description="The backup elements.")
    size_in_bytes: StrictInt = Field(description="The backup size in bytes.", alias="sizeInBytes")
    ssm_host_name: Optional[StrictStr] = Field(default=None, description="The StorSimple Snapshot Manager host name.", alias="ssmHostName")
    __properties: ClassVar[List[str]] = ["backupJobCreationType", "backupPolicyId", "backupType", "createdOn", "elements", "sizeInBytes", "ssmHostName"]

    @field_validator('backup_job_creation_type')
    def backup_job_creation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Adhoc', 'BySchedule', 'BySSM']):
            raise ValueError("must be one of enum values ('Adhoc', 'BySchedule', 'BySSM')")
        return value

    @field_validator('backup_type')
    def backup_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LocalSnapshot', 'CloudSnapshot']):
            raise ValueError("must be one of enum values ('LocalSnapshot', 'CloudSnapshot')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in elements (list)
        _items = []
        if self.elements:
            for _item_elements in self.elements:
                if _item_elements:
                    _items.append(_item_elements.to_dict())
            _dict['elements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupJobCreationType": obj.get("backupJobCreationType"),
            "backupPolicyId": obj.get("backupPolicyId"),
            "backupType": obj.get("backupType"),
            "createdOn": obj.get("createdOn"),
            "elements": [BackupElement.from_dict(_item) for _item in obj["elements"]] if obj.get("elements") is not None else None,
            "sizeInBytes": obj.get("sizeInBytes"),
            "ssmHostName": obj.get("ssmHostName")
        })
        return _obj



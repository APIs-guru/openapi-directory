# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.nic_ipv4 import NicIPv4
from openapi_client.models.nic_ipv6 import NicIPv6
from typing import Optional, Set
from typing_extensions import Self

class NetworkAdapters(BaseModel):
    """
    Represents the network adapter on device.
    """ # noqa: E501
    interface_id: StrictStr = Field(description="The ID of the network adapter.", alias="interfaceId")
    is_default: Optional[StrictBool] = Field(default=None, description="Value indicating whether this instance is default.", alias="isDefault")
    iscsi_and_cloud_status: StrictStr = Field(description="Value indicating cloud and ISCSI status of network adapter.", alias="iscsiAndCloudStatus")
    mode: StrictStr = Field(description="The mode of network adapter, either IPv4, IPv6 or both.")
    net_interface_status: StrictStr = Field(description="Value indicating status of network adapter.", alias="netInterfaceStatus")
    nic_ipv4_settings: Optional[NicIPv4] = Field(default=None, alias="nicIpv4Settings")
    nic_ipv6_settings: Optional[NicIPv6] = Field(default=None, alias="nicIpv6Settings")
    speed: Optional[StrictInt] = Field(default=None, description="The speed of the network adapter.")
    __properties: ClassVar[List[str]] = ["interfaceId", "isDefault", "iscsiAndCloudStatus", "mode", "netInterfaceStatus", "nicIpv4Settings", "nicIpv6Settings", "speed"]

    @field_validator('interface_id')
    def interface_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Invalid', 'Data0', 'Data1', 'Data2', 'Data3', 'Data4', 'Data5']):
            raise ValueError("must be one of enum values ('Invalid', 'Data0', 'Data1', 'Data2', 'Data3', 'Data4', 'Data5')")
        return value

    @field_validator('iscsi_and_cloud_status')
    def iscsi_and_cloud_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Disabled', 'IscsiEnabled', 'CloudEnabled', 'IscsiAndCloudEnabled']):
            raise ValueError("must be one of enum values ('Disabled', 'IscsiEnabled', 'CloudEnabled', 'IscsiAndCloudEnabled')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Invalid', 'IPV4', 'IPV6', 'BOTH']):
            raise ValueError("must be one of enum values ('Invalid', 'IPV4', 'IPV6', 'BOTH')")
        return value

    @field_validator('net_interface_status')
    def net_interface_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkAdapters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nic_ipv4_settings
        if self.nic_ipv4_settings:
            _dict['nicIpv4Settings'] = self.nic_ipv4_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nic_ipv6_settings
        if self.nic_ipv6_settings:
            _dict['nicIpv6Settings'] = self.nic_ipv6_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkAdapters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interfaceId": obj.get("interfaceId"),
            "isDefault": obj.get("isDefault"),
            "iscsiAndCloudStatus": obj.get("iscsiAndCloudStatus"),
            "mode": obj.get("mode"),
            "netInterfaceStatus": obj.get("netInterfaceStatus"),
            "nicIpv4Settings": NicIPv4.from_dict(obj["nicIpv4Settings"]) if obj.get("nicIpv4Settings") is not None else None,
            "nicIpv6Settings": NicIPv6.from_dict(obj["nicIpv6Settings"]) if obj.get("nicIpv6Settings") is not None else None,
            "speed": obj.get("speed")
        })
        return _obj



# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagerExtendedInfoProperties(BaseModel):
    """
    The properties of the manager extended info.
    """ # noqa: E501
    algorithm: StrictStr = Field(description="Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted")
    encryption_key: Optional[StrictStr] = Field(default=None, description="Represents the CEK of the resource.", alias="encryptionKey")
    encryption_key_thumbprint: Optional[StrictStr] = Field(default=None, description="Represents the Cert thumbprint that was used to encrypt the CEK.", alias="encryptionKeyThumbprint")
    integrity_key: StrictStr = Field(description="Represents the CIK of the resource.", alias="integrityKey")
    portal_certificate_thumbprint: Optional[StrictStr] = Field(default=None, description="Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.", alias="portalCertificateThumbprint")
    version: Optional[StrictStr] = Field(default=None, description="The version of the extended info being persisted.")
    __properties: ClassVar[List[str]] = ["algorithm", "encryptionKey", "encryptionKeyThumbprint", "integrityKey", "portalCertificateThumbprint", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagerExtendedInfoProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagerExtendedInfoProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "encryptionKey": obj.get("encryptionKey"),
            "encryptionKeyThumbprint": obj.get("encryptionKeyThumbprint"),
            "integrityKey": obj.get("integrityKey"),
            "portalCertificateThumbprint": obj.get("portalCertificateThumbprint"),
            "version": obj.get("version")
        })
        return _obj



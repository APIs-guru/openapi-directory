# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.alert_list import AlertList

class TestAlertList(unittest.TestCase):
    """AlertList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AlertList:
        """Test AlertList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AlertList`
        """
        model = AlertList()
        if include_optional:
            return AlertList(
                next_link = '',
                value = [
                    openapi_client.models.alert.Alert(
                        properties = openapi_client.models.alert_properties.AlertProperties(
                            alert_type = '', 
                            appeared_at_source_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            appeared_at_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cleared_at_source_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cleared_at_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            detailed_information = {
                                'key' : ''
                                }, 
                            error_details = openapi_client.models.alert_error_details.AlertErrorDetails(
                                error_code = '', 
                                error_message = '', 
                                occurences = 56, ), 
                            recommendation = '', 
                            resolution_reason = '', 
                            scope = 'Resource', 
                            severity = 'Informational', 
                            source = openapi_client.models.alert_source.AlertSource(
                                alert_source_type = 'Resource', 
                                name = '', 
                                time_zone = '', ), 
                            status = 'Active', 
                            title = '', ), )
                    ]
            )
        else:
            return AlertList(
                value = [
                    openapi_client.models.alert.Alert(
                        properties = openapi_client.models.alert_properties.AlertProperties(
                            alert_type = '', 
                            appeared_at_source_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            appeared_at_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cleared_at_source_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cleared_at_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            detailed_information = {
                                'key' : ''
                                }, 
                            error_details = openapi_client.models.alert_error_details.AlertErrorDetails(
                                error_code = '', 
                                error_message = '', 
                                occurences = 56, ), 
                            recommendation = '', 
                            resolution_reason = '', 
                            scope = 'Resource', 
                            severity = 'Informational', 
                            source = openapi_client.models.alert_source.AlertSource(
                                alert_source_type = 'Resource', 
                                name = '', 
                                time_zone = '', ), 
                            status = 'Active', 
                            title = '', ), )
                    ],
        )
        """

    def testAlertList(self):
        """Test AlertList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

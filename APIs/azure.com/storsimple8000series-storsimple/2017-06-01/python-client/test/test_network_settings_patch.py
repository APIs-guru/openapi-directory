# coding: utf-8

"""
    StorSimple8000SeriesManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.network_settings_patch import NetworkSettingsPatch

class TestNetworkSettingsPatch(unittest.TestCase):
    """NetworkSettingsPatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NetworkSettingsPatch:
        """Test NetworkSettingsPatch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NetworkSettingsPatch`
        """
        model = NetworkSettingsPatch()
        if include_optional:
            return NetworkSettingsPatch(
                properties = openapi_client.models.network_settings_patch_properties.NetworkSettingsPatchProperties(
                    dns_settings = openapi_client.models.dns_settings.DNSSettings(
                        primary_dns_server = '', 
                        primary_ipv6_dns_server = '', 
                        secondary_dns_servers = [
                            ''
                            ], 
                        secondary_ipv6_dns_servers = [
                            ''
                            ], ), 
                    network_adapters = openapi_client.models.network_adapter_list.NetworkAdapterList(
                        value = [
                            openapi_client.models.network_adapters.NetworkAdapters(
                                interface_id = 'Invalid', 
                                is_default = True, 
                                iscsi_and_cloud_status = 'Disabled', 
                                mode = 'Invalid', 
                                net_interface_status = 'Enabled', 
                                nic_ipv4_settings = openapi_client.models.nic_ipv4.NicIPv4(
                                    controller0_ipv4_address = '', 
                                    controller1_ipv4_address = '', 
                                    ipv4_address = '', 
                                    ipv4_gateway = '', 
                                    ipv4_netmask = '', ), 
                                nic_ipv6_settings = openapi_client.models.nic_ipv6.NicIPv6(
                                    controller0_ipv6_address = '', 
                                    controller1_ipv6_address = '', 
                                    ipv6_address = '', 
                                    ipv6_gateway = '', 
                                    ipv6_prefix = '', ), 
                                speed = 56, )
                            ], ), )
            )
        else:
            return NetworkSettingsPatch(
                properties = openapi_client.models.network_settings_patch_properties.NetworkSettingsPatchProperties(
                    dns_settings = openapi_client.models.dns_settings.DNSSettings(
                        primary_dns_server = '', 
                        primary_ipv6_dns_server = '', 
                        secondary_dns_servers = [
                            ''
                            ], 
                        secondary_ipv6_dns_servers = [
                            ''
                            ], ), 
                    network_adapters = openapi_client.models.network_adapter_list.NetworkAdapterList(
                        value = [
                            openapi_client.models.network_adapters.NetworkAdapters(
                                interface_id = 'Invalid', 
                                is_default = True, 
                                iscsi_and_cloud_status = 'Disabled', 
                                mode = 'Invalid', 
                                net_interface_status = 'Enabled', 
                                nic_ipv4_settings = openapi_client.models.nic_ipv4.NicIPv4(
                                    controller0_ipv4_address = '', 
                                    controller1_ipv4_address = '', 
                                    ipv4_address = '', 
                                    ipv4_gateway = '', 
                                    ipv4_netmask = '', ), 
                                nic_ipv6_settings = openapi_client.models.nic_ipv6.NicIPv6(
                                    controller0_ipv6_address = '', 
                                    controller1_ipv6_address = '', 
                                    ipv6_address = '', 
                                    ipv6_gateway = '', 
                                    ipv6_prefix = '', ), 
                                speed = 56, )
                            ], ), ),
        )
        """

    def testNetworkSettingsPatch(self):
        """Test NetworkSettingsPatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2015-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connectable_resource import ConnectableResource
from typing import Optional, Set
from typing_extensions import Self

class AllowedConnectionsResourceProperties(BaseModel):
    """
    Describes the allowed traffic between Azure resources
    """ # noqa: E501
    calculated_date_time: Optional[datetime] = Field(default=None, description="The UTC time on which the allowed connections resource was calculated", alias="calculatedDateTime")
    connectable_resources: Optional[List[ConnectableResource]] = Field(default=None, description="List of connectable resources", alias="connectableResources")
    __properties: ClassVar[List[str]] = ["calculatedDateTime", "connectableResources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllowedConnectionsResourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "calculated_date_time",
            "connectable_resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in connectable_resources (list)
        _items = []
        if self.connectable_resources:
            for _item_connectable_resources in self.connectable_resources:
                if _item_connectable_resources:
                    _items.append(_item_connectable_resources.to_dict())
            _dict['connectableResources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllowedConnectionsResourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calculatedDateTime": obj.get("calculatedDateTime"),
            "connectableResources": [ConnectableResource.from_dict(_item) for _item in obj["connectableResources"]] if obj.get("connectableResources") is not None else None
        })
        return _obj



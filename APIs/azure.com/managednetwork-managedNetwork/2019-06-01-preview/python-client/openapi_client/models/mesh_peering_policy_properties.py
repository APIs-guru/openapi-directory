# coding: utf-8

"""
    ManagedNetworkManagementClient

    The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_id import ResourceId
from typing import Optional, Set
from typing_extensions import Self

class MeshPeeringPolicyProperties(BaseModel):
    """
    Properties of a Mesh Peering Policy
    """ # noqa: E501
    mesh: Optional[List[ResourceId]] = Field(default=None, description="Gets or sets the mesh group IDs")
    hub: Optional[ResourceId] = None
    spokes: Optional[List[ResourceId]] = Field(default=None, description="Gets or sets the spokes group IDs")
    type: StrictStr = Field(description="Gets or sets the connectivity type of a network structure policy")
    etag: Optional[StrictStr] = Field(default=None, description="A unique read-only string that changes whenever the resource is updated.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Provisioning state of the ManagedNetwork resource.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["hub", "mesh", "spokes", "type", "etag", "provisioningState"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['HubAndSpokeTopology', 'MeshTopology']):
            raise ValueError("must be one of enum values ('HubAndSpokeTopology', 'MeshTopology')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Updating', 'Deleting', 'Failed', 'Succeeded']):
            raise ValueError("must be one of enum values ('Updating', 'Deleting', 'Failed', 'Succeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeshPeeringPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "etag",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hub
        if self.hub:
            _dict['hub'] = self.hub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mesh (list)
        _items = []
        if self.mesh:
            for _item_mesh in self.mesh:
                if _item_mesh:
                    _items.append(_item_mesh.to_dict())
            _dict['mesh'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spokes (list)
        _items = []
        if self.spokes:
            for _item_spokes in self.spokes:
                if _item_spokes:
                    _items.append(_item_spokes.to_dict())
            _dict['spokes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeshPeeringPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hub": ResourceId.from_dict(obj["hub"]) if obj.get("hub") is not None else None,
            "mesh": [ResourceId.from_dict(_item) for _item in obj["mesh"]] if obj.get("mesh") is not None else None,
            "spokes": [ResourceId.from_dict(_item) for _item in obj["spokes"]] if obj.get("spokes") is not None else None,
            "type": obj.get("type"),
            "etag": obj.get("etag"),
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



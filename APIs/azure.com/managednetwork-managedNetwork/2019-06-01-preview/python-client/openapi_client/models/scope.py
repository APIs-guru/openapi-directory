# coding: utf-8

"""
    ManagedNetworkManagementClient

    The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_id import ResourceId
from typing import Optional, Set
from typing_extensions import Self

class Scope(BaseModel):
    """
    Scope of a Managed Network
    """ # noqa: E501
    management_groups: Optional[List[ResourceId]] = Field(default=None, description="The collection of management groups covered by the Managed Network", alias="managementGroups")
    subnets: Optional[List[ResourceId]] = Field(default=None, description="The collection of  subnets covered by the Managed Network")
    subscriptions: Optional[List[ResourceId]] = Field(default=None, description="The collection of subscriptions covered by the Managed Network")
    virtual_networks: Optional[List[ResourceId]] = Field(default=None, description="The collection of virtual nets covered by the Managed Network", alias="virtualNetworks")
    __properties: ClassVar[List[str]] = ["managementGroups", "subnets", "subscriptions", "virtualNetworks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in management_groups (list)
        _items = []
        if self.management_groups:
            for _item_management_groups in self.management_groups:
                if _item_management_groups:
                    _items.append(_item_management_groups.to_dict())
            _dict['managementGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item_subnets in self.subnets:
                if _item_subnets:
                    _items.append(_item_subnets.to_dict())
            _dict['subnets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item_subscriptions in self.subscriptions:
                if _item_subscriptions:
                    _items.append(_item_subscriptions.to_dict())
            _dict['subscriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_networks (list)
        _items = []
        if self.virtual_networks:
            for _item_virtual_networks in self.virtual_networks:
                if _item_virtual_networks:
                    _items.append(_item_virtual_networks.to_dict())
            _dict['virtualNetworks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scope from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "managementGroups": [ResourceId.from_dict(_item) for _item in obj["managementGroups"]] if obj.get("managementGroups") is not None else None,
            "subnets": [ResourceId.from_dict(_item) for _item in obj["subnets"]] if obj.get("subnets") is not None else None,
            "subscriptions": [ResourceId.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None,
            "virtualNetworks": [ResourceId.from_dict(_item) for _item in obj["virtualNetworks"]] if obj.get("virtualNetworks") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ManagedNetworkManagementClient

    The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.managed_network_group import ManagedNetworkGroup
from openapi_client.models.managed_network_peering_policy import ManagedNetworkPeeringPolicy
from typing import Optional, Set
from typing_extensions import Self

class ConnectivityCollection(BaseModel):
    """
    The collection of Connectivity related groups and policies within the Managed Network
    """ # noqa: E501
    groups: Optional[List[ManagedNetworkGroup]] = Field(default=None, description="The collection of connectivity related Managed Network Groups within the Managed Network")
    peerings: Optional[List[ManagedNetworkPeeringPolicy]] = Field(default=None, description="The collection of Managed Network Peering Policies within the Managed Network")
    __properties: ClassVar[List[str]] = ["groups", "peerings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectivityCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "groups",
            "peerings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in peerings (list)
        _items = []
        if self.peerings:
            for _item_peerings in self.peerings:
                if _item_peerings:
                    _items.append(_item_peerings.to_dict())
            _dict['peerings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectivityCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groups": [ManagedNetworkGroup.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "peerings": [ManagedNetworkPeeringPolicy.from_dict(_item) for _item in obj["peerings"]] if obj.get("peerings") is not None else None
        })
        return _obj



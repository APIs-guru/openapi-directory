# coding: utf-8

"""
    MariaDBManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SecurityAlertPolicyProperties(BaseModel):
    """
    Properties of a security alert policy.
    """ # noqa: E501
    disabled_alerts: Optional[List[StrictStr]] = Field(default=None, description="Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly", alias="disabledAlerts")
    email_account_admins: Optional[StrictBool] = Field(default=None, description="Specifies that the alert is sent to the account administrators.", alias="emailAccountAdmins")
    email_addresses: Optional[List[StrictStr]] = Field(default=None, description="Specifies an array of e-mail addresses to which the alert is sent.", alias="emailAddresses")
    retention_days: Optional[StrictInt] = Field(default=None, description="Specifies the number of days to keep in the Threat Detection audit logs.", alias="retentionDays")
    state: StrictStr = Field(description="Specifies the state of the policy, whether it is enabled or disabled.")
    storage_account_access_key: Optional[StrictStr] = Field(default=None, description="Specifies the identifier key of the Threat Detection audit storage account.", alias="storageAccountAccessKey")
    storage_endpoint: Optional[StrictStr] = Field(default=None, description="Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.", alias="storageEndpoint")
    __properties: ClassVar[List[str]] = ["disabledAlerts", "emailAccountAdmins", "emailAddresses", "retentionDays", "state", "storageAccountAccessKey", "storageEndpoint"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityAlertPolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityAlertPolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabledAlerts": obj.get("disabledAlerts"),
            "emailAccountAdmins": obj.get("emailAccountAdmins"),
            "emailAddresses": obj.get("emailAddresses"),
            "retentionDays": obj.get("retentionDays"),
            "state": obj.get("state"),
            "storageAccountAccessKey": obj.get("storageAccountAccessKey"),
            "storageEndpoint": obj.get("storageEndpoint")
        })
        return _obj



# coding: utf-8

"""
    MariaDBManagementClient

    The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.

    The version of the OpenAPI document: 2018-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_network_rule_list_result import VirtualNetworkRuleListResult

class TestVirtualNetworkRuleListResult(unittest.TestCase):
    """VirtualNetworkRuleListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualNetworkRuleListResult:
        """Test VirtualNetworkRuleListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualNetworkRuleListResult`
        """
        model = VirtualNetworkRuleListResult()
        if include_optional:
            return VirtualNetworkRuleListResult(
                next_link = '',
                value = [
                    openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                        properties = openapi_client.models.virtual_network_rule_properties.VirtualNetworkRuleProperties(
                            ignore_missing_vnet_service_endpoint = True, 
                            state = 'Initializing', 
                            virtual_network_subnet_id = '', ), )
                    ]
            )
        else:
            return VirtualNetworkRuleListResult(
        )
        """

    def testVirtualNetworkRuleListResult(self):
        """Test VirtualNetworkRuleListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Azure Bot Service

    Azure Bot Service is a platform for creating smart conversational agents.

    The version of the OpenAPI document: 2018-07-12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SlackChannelProperties(BaseModel):
    """
    The parameters to provide for the Slack channel.
    """ # noqa: E501
    client_id: StrictStr = Field(description="The Slack client id", alias="clientId")
    client_secret: StrictStr = Field(description="The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.", alias="clientSecret")
    is_enabled: StrictBool = Field(description="Whether this channel is enabled for the bot", alias="isEnabled")
    is_validated: Optional[StrictBool] = Field(default=None, description="Whether this channel is validated for the bot", alias="isValidated")
    landing_page_url: Optional[StrictStr] = Field(default=None, description="The Slack landing page Url", alias="landingPageUrl")
    last_submission_id: Optional[StrictStr] = Field(default=None, description="The Sms auth token", alias="lastSubmissionId")
    redirect_action: Optional[StrictStr] = Field(default=None, description="The Slack redirect action", alias="redirectAction")
    register_before_o_auth_flow: Optional[StrictBool] = Field(default=None, description="Whether to register the settings before OAuth validation is performed. Recommended to True.", alias="registerBeforeOAuthFlow")
    verification_token: StrictStr = Field(description="The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.", alias="verificationToken")
    __properties: ClassVar[List[str]] = ["clientId", "clientSecret", "isEnabled", "isValidated", "landingPageUrl", "lastSubmissionId", "redirectAction", "registerBeforeOAuthFlow", "verificationToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlackChannelProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_validated",
            "last_submission_id",
            "redirect_action",
            "register_before_o_auth_flow",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlackChannelProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "isEnabled": obj.get("isEnabled"),
            "isValidated": obj.get("isValidated"),
            "landingPageUrl": obj.get("landingPageUrl"),
            "lastSubmissionId": obj.get("lastSubmissionId"),
            "redirectAction": obj.get("redirectAction"),
            "registerBeforeOAuthFlow": obj.get("registerBeforeOAuthFlow"),
            "verificationToken": obj.get("verificationToken")
        })
        return _obj



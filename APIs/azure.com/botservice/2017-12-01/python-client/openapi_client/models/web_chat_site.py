# coding: utf-8

"""
    Azure Bot Service

    Azure Bot Service is a platform for creating smart conversational agents.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebChatSite(BaseModel):
    """
    A site for the Webchat channel
    """ # noqa: E501
    enable_preview: StrictBool = Field(description="Whether this site is enabled for preview versions of Webchat", alias="enablePreview")
    is_enabled: StrictBool = Field(description="Whether this site is enabled for DirectLine channel", alias="isEnabled")
    key: Optional[StrictStr] = Field(default=None, description="Primary key. Value only returned through POST to the action Channel List API, otherwise empty.")
    key2: Optional[StrictStr] = Field(default=None, description="Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.")
    site_id: Optional[StrictStr] = Field(default=None, description="Site Id", alias="siteId")
    site_name: StrictStr = Field(description="Site name", alias="siteName")
    __properties: ClassVar[List[str]] = ["enablePreview", "isEnabled", "key", "key2", "siteId", "siteName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebChatSite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "key",
            "key2",
            "site_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebChatSite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enablePreview": obj.get("enablePreview"),
            "isEnabled": obj.get("isEnabled"),
            "key": obj.get("key"),
            "key2": obj.get("key2"),
            "siteId": obj.get("siteId"),
            "siteName": obj.get("siteName")
        })
        return _obj



# coding: utf-8

"""
    Azure Bot Service

    Azure Bot Service is a platform for creating smart conversational agents.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connection_setting_parameter import ConnectionSettingParameter
from typing import Optional, Set
from typing_extensions import Self

class ConnectionSettingProperties(BaseModel):
    """
    Properties for a Connection Setting Item
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Client Id associated with the Connection Setting.", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="Client Secret associated with the Connection Setting", alias="clientSecret")
    parameters: Optional[List[ConnectionSettingParameter]] = Field(default=None, description="Service Provider Parameters associated with the Connection Setting")
    scopes: Optional[StrictStr] = Field(default=None, description="Scopes associated with the Connection Setting")
    service_provider_display_name: Optional[StrictStr] = Field(default=None, description="Service Provider Display Name associated with the Connection Setting", alias="serviceProviderDisplayName")
    service_provider_id: Optional[StrictStr] = Field(default=None, description="Service Provider Id associated with the Connection Setting", alias="serviceProviderId")
    setting_id: Optional[StrictStr] = Field(default=None, description="Setting Id set by the service for the Connection Setting.", alias="settingId")
    __properties: ClassVar[List[str]] = ["clientId", "clientSecret", "parameters", "scopes", "serviceProviderDisplayName", "serviceProviderId", "settingId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectionSettingProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "setting_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectionSettingProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "parameters": [ConnectionSettingParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "scopes": obj.get("scopes"),
            "serviceProviderDisplayName": obj.get("serviceProviderDisplayName"),
            "serviceProviderId": obj.get("serviceProviderId"),
            "settingId": obj.get("settingId")
        })
        return _obj



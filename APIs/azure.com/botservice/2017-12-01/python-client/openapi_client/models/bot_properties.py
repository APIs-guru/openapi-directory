# coding: utf-8

"""
    Azure Bot Service

    Azure Bot Service is a platform for creating smart conversational agents.

    The version of the OpenAPI document: 2017-12-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BotProperties(BaseModel):
    """
    The parameters to provide for the Bot.
    """ # noqa: E501
    configured_channels: Optional[List[StrictStr]] = Field(default=None, description="Collection of channels for which the bot is configured", alias="configuredChannels")
    description: Optional[StrictStr] = Field(default=None, description="The description of the bot")
    developer_app_insight_key: Optional[StrictStr] = Field(default=None, description="The Application Insights key", alias="developerAppInsightKey")
    developer_app_insights_api_key: Optional[StrictStr] = Field(default=None, description="The Application Insights Api Key", alias="developerAppInsightsApiKey")
    developer_app_insights_application_id: Optional[StrictStr] = Field(default=None, description="The Application Insights App Id", alias="developerAppInsightsApplicationId")
    display_name: StrictStr = Field(description="The Name of the bot", alias="displayName")
    enabled_channels: Optional[List[StrictStr]] = Field(default=None, description="Collection of channels for which the bot is enabled", alias="enabledChannels")
    endpoint: StrictStr = Field(description="The bot's endpoint")
    endpoint_version: Optional[StrictStr] = Field(default=None, description="The bot's endpoint version", alias="endpointVersion")
    icon_url: Optional[StrictStr] = Field(default=None, description="The Icon Url of the bot", alias="iconUrl")
    luis_app_ids: Optional[List[StrictStr]] = Field(default=None, description="Collection of LUIS App Ids", alias="luisAppIds")
    luis_key: Optional[StrictStr] = Field(default=None, description="The LUIS Key", alias="luisKey")
    msa_app_id: StrictStr = Field(description="Microsoft App Id for the bot", alias="msaAppId")
    __properties: ClassVar[List[str]] = ["configuredChannels", "description", "developerAppInsightKey", "developerAppInsightsApiKey", "developerAppInsightsApplicationId", "displayName", "enabledChannels", "endpoint", "endpointVersion", "iconUrl", "luisAppIds", "luisKey", "msaAppId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BotProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "configured_channels",
            "enabled_channels",
            "endpoint_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BotProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuredChannels": obj.get("configuredChannels"),
            "description": obj.get("description"),
            "developerAppInsightKey": obj.get("developerAppInsightKey"),
            "developerAppInsightsApiKey": obj.get("developerAppInsightsApiKey"),
            "developerAppInsightsApplicationId": obj.get("developerAppInsightsApplicationId"),
            "displayName": obj.get("displayName"),
            "enabledChannels": obj.get("enabledChannels"),
            "endpoint": obj.get("endpoint"),
            "endpointVersion": obj.get("endpointVersion"),
            "iconUrl": obj.get("iconUrl"),
            "luisAppIds": obj.get("luisAppIds"),
            "luisKey": obj.get("luisKey"),
            "msaAppId": obj.get("msaAppId")
        })
        return _obj



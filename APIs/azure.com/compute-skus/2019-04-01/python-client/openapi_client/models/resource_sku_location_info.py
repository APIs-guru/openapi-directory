# coding: utf-8

"""
    ComputeManagementClient

    The Compute Management Client.

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_sku_zone_details import ResourceSkuZoneDetails
from typing import Optional, Set
from typing_extensions import Self

class ResourceSkuLocationInfo(BaseModel):
    """
    ResourceSkuLocationInfo
    """ # noqa: E501
    location: Optional[StrictStr] = Field(default=None, description="Location of the SKU")
    zone_details: Optional[List[ResourceSkuZoneDetails]] = Field(default=None, description="Details of capabilities available to a SKU in specific zones.", alias="zoneDetails")
    zones: Optional[List[StrictStr]] = Field(default=None, description="List of availability zones where the SKU is supported.")
    __properties: ClassVar[List[str]] = ["location", "zoneDetails", "zones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceSkuLocationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "location",
            "zone_details",
            "zones",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in zone_details (list)
        _items = []
        if self.zone_details:
            for _item_zone_details in self.zone_details:
                if _item_zone_details:
                    _items.append(_item_zone_details.to_dict())
            _dict['zoneDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceSkuLocationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": obj.get("location"),
            "zoneDetails": [ResourceSkuZoneDetails.from_dict(_item) for _item in obj["zoneDetails"]] if obj.get("zoneDetails") is not None else None,
            "zones": obj.get("zones")
        })
        return _obj



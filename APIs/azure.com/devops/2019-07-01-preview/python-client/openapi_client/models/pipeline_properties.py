# coding: utf-8

"""
    Azure DevOps

    Azure DevOps Resource Provider

    The version of the OpenAPI document: 2019-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bootstrap_configuration import BootstrapConfiguration
from openapi_client.models.organization_reference import OrganizationReference
from openapi_client.models.project_reference import ProjectReference
from typing import Optional, Set
from typing_extensions import Self

class PipelineProperties(BaseModel):
    """
    Custom properties of a Pipeline.
    """ # noqa: E501
    bootstrap_configuration: BootstrapConfiguration = Field(alias="bootstrapConfiguration")
    organization: OrganizationReference
    pipeline_id: Optional[StrictInt] = Field(default=None, description="Unique identifier of the Azure Pipeline within the Azure DevOps Project.", alias="pipelineId")
    project: ProjectReference
    __properties: ClassVar[List[str]] = ["bootstrapConfiguration", "organization", "pipelineId", "project"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "pipeline_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bootstrap_configuration
        if self.bootstrap_configuration:
            _dict['bootstrapConfiguration'] = self.bootstrap_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootstrapConfiguration": BootstrapConfiguration.from_dict(obj["bootstrapConfiguration"]) if obj.get("bootstrapConfiguration") is not None else None,
            "organization": OrganizationReference.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "pipelineId": obj.get("pipelineId"),
            "project": ProjectReference.from_dict(obj["project"]) if obj.get("project") is not None else None
        })
        return _obj



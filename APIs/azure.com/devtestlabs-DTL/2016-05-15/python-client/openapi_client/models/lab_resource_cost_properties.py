# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2016-05-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LabResourceCostProperties(BaseModel):
    """
    The properties of a resource cost item.
    """ # noqa: E501
    external_resource_id: Optional[StrictStr] = Field(default=None, description="The ID of the external resource", alias="externalResourceId")
    resource_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cost component of the resource cost item.", alias="resourceCost")
    resource_id: Optional[StrictStr] = Field(default=None, description="The ID of the resource", alias="resourceId")
    resource_owner: Optional[StrictStr] = Field(default=None, description="The owner of the resource (ex. janedoe@microsoft.com)", alias="resourceOwner")
    resource_pricing_tier: Optional[StrictStr] = Field(default=None, description="The category of the resource (ex. Premium_LRS, Standard_DS1)", alias="resourcePricingTier")
    resource_status: Optional[StrictStr] = Field(default=None, description="The status of the resource (ex. Active)", alias="resourceStatus")
    resource_type: Optional[StrictStr] = Field(default=None, description="The logical resource type (ex. virtualmachine, storageaccount)", alias="resourceType")
    resource_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier of the resource.", alias="resourceUId")
    resourcename: Optional[StrictStr] = Field(default=None, description="The name of the resource.")
    __properties: ClassVar[List[str]] = ["externalResourceId", "resourceCost", "resourceId", "resourceOwner", "resourcePricingTier", "resourceStatus", "resourceType", "resourceUId", "resourcename"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabResourceCostProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabResourceCostProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalResourceId": obj.get("externalResourceId"),
            "resourceCost": obj.get("resourceCost"),
            "resourceId": obj.get("resourceId"),
            "resourceOwner": obj.get("resourceOwner"),
            "resourcePricingTier": obj.get("resourcePricingTier"),
            "resourceStatus": obj.get("resourceStatus"),
            "resourceType": obj.get("resourceType"),
            "resourceUId": obj.get("resourceUId"),
            "resourcename": obj.get("resourcename")
        })
        return _obj



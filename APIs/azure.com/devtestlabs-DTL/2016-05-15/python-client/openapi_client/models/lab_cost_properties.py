# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2016-05-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lab_cost_details_properties import LabCostDetailsProperties
from openapi_client.models.lab_cost_summary_properties import LabCostSummaryProperties
from openapi_client.models.lab_resource_cost_properties import LabResourceCostProperties
from openapi_client.models.target_cost_properties import TargetCostProperties
from typing import Optional, Set
from typing_extensions import Self

class LabCostProperties(BaseModel):
    """
    Properties of a cost item.
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, description="The creation date of the cost.", alias="createdDate")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code of the cost.", alias="currencyCode")
    end_date_time: Optional[datetime] = Field(default=None, description="The end time of the cost data.", alias="endDateTime")
    lab_cost_details: Optional[List[LabCostDetailsProperties]] = Field(default=None, description="The lab cost details component of the cost data.", alias="labCostDetails")
    lab_cost_summary: Optional[LabCostSummaryProperties] = Field(default=None, alias="labCostSummary")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    resource_costs: Optional[List[LabResourceCostProperties]] = Field(default=None, description="The resource cost component of the cost data.", alias="resourceCosts")
    start_date_time: Optional[datetime] = Field(default=None, description="The start time of the cost data.", alias="startDateTime")
    target_cost: Optional[TargetCostProperties] = Field(default=None, alias="targetCost")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    __properties: ClassVar[List[str]] = ["createdDate", "currencyCode", "endDateTime", "labCostDetails", "labCostSummary", "provisioningState", "resourceCosts", "startDateTime", "targetCost", "uniqueIdentifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabCostProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "lab_cost_details",
            "resource_costs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lab_cost_details (list)
        _items = []
        if self.lab_cost_details:
            for _item_lab_cost_details in self.lab_cost_details:
                if _item_lab_cost_details:
                    _items.append(_item_lab_cost_details.to_dict())
            _dict['labCostDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of lab_cost_summary
        if self.lab_cost_summary:
            _dict['labCostSummary'] = self.lab_cost_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_costs (list)
        _items = []
        if self.resource_costs:
            for _item_resource_costs in self.resource_costs:
                if _item_resource_costs:
                    _items.append(_item_resource_costs.to_dict())
            _dict['resourceCosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of target_cost
        if self.target_cost:
            _dict['targetCost'] = self.target_cost.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabCostProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "currencyCode": obj.get("currencyCode"),
            "endDateTime": obj.get("endDateTime"),
            "labCostDetails": [LabCostDetailsProperties.from_dict(_item) for _item in obj["labCostDetails"]] if obj.get("labCostDetails") is not None else None,
            "labCostSummary": LabCostSummaryProperties.from_dict(obj["labCostSummary"]) if obj.get("labCostSummary") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceCosts": [LabResourceCostProperties.from_dict(_item) for _item in obj["resourceCosts"]] if obj.get("resourceCosts") is not None else None,
            "startDateTime": obj.get("startDateTime"),
            "targetCost": TargetCostProperties.from_dict(obj["targetCost"]) if obj.get("targetCost") is not None else None,
            "uniqueIdentifier": obj.get("uniqueIdentifier")
        })
        return _obj



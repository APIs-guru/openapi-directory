# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2016-05-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.lab_virtual_machine_fragment import LabVirtualMachineFragment

class TestLabVirtualMachineFragment(unittest.TestCase):
    """LabVirtualMachineFragment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LabVirtualMachineFragment:
        """Test LabVirtualMachineFragment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LabVirtualMachineFragment`
        """
        model = LabVirtualMachineFragment()
        if include_optional:
            return LabVirtualMachineFragment(
                properties = openapi_client.models.lab_virtual_machine_properties_fragment.LabVirtualMachinePropertiesFragment(
                    allow_claim = True, 
                    applicable_schedule = openapi_client.models.applicable_schedule_fragment.ApplicableScheduleFragment(
                        properties = openapi_client.models.applicable_schedule_properties_fragment.ApplicableSchedulePropertiesFragment(
                            lab_vms_shutdown = openapi_client.models.schedule_fragment.ScheduleFragment(), 
                            lab_vms_startup = openapi_client.models.schedule_fragment.ScheduleFragment(), ), ), 
                    artifact_deployment_status = openapi_client.models.artifact_deployment_status_properties_fragment.ArtifactDeploymentStatusPropertiesFragment(
                        artifacts_applied = 56, 
                        deployment_status = '', 
                        total_artifacts = 56, ), 
                    artifacts = [
                        openapi_client.models.artifact_install_properties_fragment.ArtifactInstallPropertiesFragment(
                            artifact_id = '', 
                            deployment_status_message = '', 
                            install_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            parameters = [
                                openapi_client.models.artifact_parameter_properties_fragment.ArtifactParameterPropertiesFragment(
                                    name = '', 
                                    value = '', )
                                ], 
                            status = '', 
                            vm_extension_status_message = '', )
                        ], 
                    compute_vm = openapi_client.models.compute_vm_properties_fragment.ComputeVmPropertiesFragment(
                        data_disk_ids = [
                            ''
                            ], 
                        data_disks = [
                            openapi_client.models.compute_data_disk_fragment.ComputeDataDiskFragment(
                                disk_size_gi_b = 56, 
                                disk_uri = '', 
                                managed_disk_id = '', 
                                name = '', )
                            ], 
                        network_interface_id = '', 
                        os_disk_id = '', 
                        os_type = '', 
                        statuses = [
                            openapi_client.models.compute_vm_instance_view_status_fragment.ComputeVmInstanceViewStatusFragment(
                                code = '', 
                                display_status = '', 
                                message = '', )
                            ], 
                        vm_size = '', ), 
                    created_by_user = '', 
                    created_by_user_id = '', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    custom_image_id = '', 
                    disallow_public_ip_address = True, 
                    environment_id = '', 
                    expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    fqdn = '', 
                    gallery_image_reference = openapi_client.models.gallery_image_reference_fragment.GalleryImageReferenceFragment(
                        offer = '', 
                        os_type = '', 
                        publisher = '', 
                        sku = '', 
                        version = '', ), 
                    is_authentication_with_ssh_key = True, 
                    lab_subnet_name = '', 
                    lab_virtual_network_id = '', 
                    network_interface = openapi_client.models.network_interface_properties_fragment.NetworkInterfacePropertiesFragment(
                        dns_name = '', 
                        private_ip_address = '', 
                        public_ip_address = '', 
                        public_ip_address_id = '', 
                        rdp_authority = '', 
                        shared_public_ip_address_configuration = openapi_client.models.shared_public_ip_address_configuration_fragment.SharedPublicIpAddressConfigurationFragment(
                            inbound_nat_rules = [
                                openapi_client.models.inbound_nat_rule_fragment.InboundNatRuleFragment(
                                    backend_port = 56, 
                                    frontend_port = 56, 
                                    transport_protocol = 'Tcp', )
                                ], ), 
                        ssh_authority = '', 
                        subnet_id = '', 
                        virtual_network_id = '', ), 
                    notes = '', 
                    os_type = '', 
                    owner_object_id = '', 
                    owner_user_principal_name = '', 
                    password = '', 
                    provisioning_state = '', 
                    size = '', 
                    ssh_key = '', 
                    storage_type = '', 
                    unique_identifier = '', 
                    user_name = '', 
                    virtual_machine_creation_source = 'FromCustomImage', ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return LabVirtualMachineFragment(
        )
        """

    def testLabVirtualMachineFragment(self):
        """Test LabVirtualMachineFragment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

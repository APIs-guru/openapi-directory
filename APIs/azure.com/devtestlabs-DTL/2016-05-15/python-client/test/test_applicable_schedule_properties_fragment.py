# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2016-05-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.applicable_schedule_properties_fragment import ApplicableSchedulePropertiesFragment

class TestApplicableSchedulePropertiesFragment(unittest.TestCase):
    """ApplicableSchedulePropertiesFragment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicableSchedulePropertiesFragment:
        """Test ApplicableSchedulePropertiesFragment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicableSchedulePropertiesFragment`
        """
        model = ApplicableSchedulePropertiesFragment()
        if include_optional:
            return ApplicableSchedulePropertiesFragment(
                lab_vms_shutdown = openapi_client.models.schedule_fragment.ScheduleFragment(
                    properties = openapi_client.models.schedule_properties_fragment.SchedulePropertiesFragment(
                        daily_recurrence = openapi_client.models.day_details_fragment.DayDetailsFragment(
                            time = '', ), 
                        hourly_recurrence = openapi_client.models.hour_details_fragment.HourDetailsFragment(
                            minute = 56, ), 
                        notification_settings = openapi_client.models.notification_settings_fragment.NotificationSettingsFragment(
                            status = 'Disabled', 
                            time_in_minutes = 56, 
                            webhook_url = '', ), 
                        provisioning_state = '', 
                        status = 'Enabled', 
                        target_resource_id = '', 
                        task_type = '', 
                        time_zone_id = '', 
                        unique_identifier = '', 
                        weekly_recurrence = openapi_client.models.week_details_fragment.WeekDetailsFragment(
                            time = '', 
                            weekdays = [
                                ''
                                ], ), ), ),
                lab_vms_startup = openapi_client.models.schedule_fragment.ScheduleFragment(
                    properties = openapi_client.models.schedule_properties_fragment.SchedulePropertiesFragment(
                        daily_recurrence = openapi_client.models.day_details_fragment.DayDetailsFragment(
                            time = '', ), 
                        hourly_recurrence = openapi_client.models.hour_details_fragment.HourDetailsFragment(
                            minute = 56, ), 
                        notification_settings = openapi_client.models.notification_settings_fragment.NotificationSettingsFragment(
                            status = 'Disabled', 
                            time_in_minutes = 56, 
                            webhook_url = '', ), 
                        provisioning_state = '', 
                        status = 'Enabled', 
                        target_resource_id = '', 
                        task_type = '', 
                        time_zone_id = '', 
                        unique_identifier = '', 
                        weekly_recurrence = openapi_client.models.week_details_fragment.WeekDetailsFragment(
                            time = '', 
                            weekdays = [
                                ''
                                ], ), ), )
            )
        else:
            return ApplicableSchedulePropertiesFragment(
        )
        """

    def testApplicableSchedulePropertiesFragment(self):
        """Test ApplicableSchedulePropertiesFragment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

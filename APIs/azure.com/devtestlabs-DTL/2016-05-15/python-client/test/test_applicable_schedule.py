# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2016-05-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.applicable_schedule import ApplicableSchedule

class TestApplicableSchedule(unittest.TestCase):
    """ApplicableSchedule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicableSchedule:
        """Test ApplicableSchedule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicableSchedule`
        """
        model = ApplicableSchedule()
        if include_optional:
            return ApplicableSchedule(
                properties = openapi_client.models.applicable_schedule_properties.ApplicableScheduleProperties(
                    lab_vms_shutdown = openapi_client.models.schedule.Schedule(
                        properties = openapi_client.models.schedule_properties.ScheduleProperties(
                            created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            daily_recurrence = openapi_client.models.day_details.DayDetails(
                                time = '', ), 
                            hourly_recurrence = openapi_client.models.hour_details.HourDetails(
                                minute = 56, ), 
                            notification_settings = openapi_client.models.notification_settings.NotificationSettings(
                                status = 'Disabled', 
                                time_in_minutes = 56, 
                                webhook_url = '', ), 
                            provisioning_state = '', 
                            status = 'Enabled', 
                            target_resource_id = '', 
                            task_type = '', 
                            time_zone_id = '', 
                            unique_identifier = '', 
                            weekly_recurrence = openapi_client.models.week_details.WeekDetails(
                                time = '', 
                                weekdays = [
                                    ''
                                    ], ), ), ), 
                    lab_vms_startup = openapi_client.models.schedule.Schedule(
                        properties = openapi_client.models.schedule_properties.ScheduleProperties(
                            created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            provisioning_state = '', 
                            status = 'Enabled', 
                            target_resource_id = '', 
                            task_type = '', 
                            time_zone_id = '', 
                            unique_identifier = '', ), ), ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return ApplicableSchedule(
                properties = openapi_client.models.applicable_schedule_properties.ApplicableScheduleProperties(
                    lab_vms_shutdown = openapi_client.models.schedule.Schedule(
                        properties = openapi_client.models.schedule_properties.ScheduleProperties(
                            created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            daily_recurrence = openapi_client.models.day_details.DayDetails(
                                time = '', ), 
                            hourly_recurrence = openapi_client.models.hour_details.HourDetails(
                                minute = 56, ), 
                            notification_settings = openapi_client.models.notification_settings.NotificationSettings(
                                status = 'Disabled', 
                                time_in_minutes = 56, 
                                webhook_url = '', ), 
                            provisioning_state = '', 
                            status = 'Enabled', 
                            target_resource_id = '', 
                            task_type = '', 
                            time_zone_id = '', 
                            unique_identifier = '', 
                            weekly_recurrence = openapi_client.models.week_details.WeekDetails(
                                time = '', 
                                weekdays = [
                                    ''
                                    ], ), ), ), 
                    lab_vms_startup = openapi_client.models.schedule.Schedule(
                        properties = openapi_client.models.schedule_properties.ScheduleProperties(
                            created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            provisioning_state = '', 
                            status = 'Enabled', 
                            target_resource_id = '', 
                            task_type = '', 
                            time_zone_id = '', 
                            unique_identifier = '', ), ), ),
        )
        """

    def testApplicableSchedule(self):
        """Test ApplicableSchedule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

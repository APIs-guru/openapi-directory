# coding: utf-8

"""
    DevTestLabsClient

    Azure DevTest Labs REST API version 2015-05-21-preview.

    The version of the OpenAPI document: 2015-05-21-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact_deployment_status_properties import ArtifactDeploymentStatusProperties
from openapi_client.models.artifact_install_properties import ArtifactInstallProperties
from openapi_client.models.gallery_image_reference import GalleryImageReference
from typing import Optional, Set
from typing_extensions import Self

class LabVirtualMachineProperties(BaseModel):
    """
    Properties of a virtual machine.
    """ # noqa: E501
    artifact_deployment_status: Optional[ArtifactDeploymentStatusProperties] = Field(default=None, alias="artifactDeploymentStatus")
    artifacts: Optional[List[ArtifactInstallProperties]] = Field(default=None, description="The artifacts to be installed on the virtual machine.")
    compute_id: Optional[StrictStr] = Field(default=None, description="The resource identifier (Microsoft.Compute) of the virtual machine.", alias="computeId")
    created_by_user: Optional[StrictStr] = Field(default=None, description="The email address of creator of the virtual machine.", alias="createdByUser")
    created_by_user_id: Optional[StrictStr] = Field(default=None, description="The object identifier of the creator of the virtual machine.", alias="createdByUserId")
    custom_image_id: Optional[StrictStr] = Field(default=None, description="The custom image identifier of the virtual machine.", alias="customImageId")
    disallow_public_ip_address: Optional[StrictBool] = Field(default=None, description="Indicates whether the virtual machine is to be created without a public IP address.", alias="disallowPublicIpAddress")
    fqdn: Optional[StrictStr] = Field(default=None, description="The fully-qualified domain name of the virtual machine.")
    gallery_image_reference: Optional[GalleryImageReference] = Field(default=None, alias="galleryImageReference")
    is_authentication_with_ssh_key: Optional[StrictBool] = Field(default=None, description="A value indicating whether this virtual machine uses an SSH key for authentication.", alias="isAuthenticationWithSshKey")
    lab_subnet_name: Optional[StrictStr] = Field(default=None, description="The lab subnet name of the virtual machine.", alias="labSubnetName")
    lab_virtual_network_id: Optional[StrictStr] = Field(default=None, description="The lab virtual network identifier of the virtual machine.", alias="labVirtualNetworkId")
    notes: Optional[StrictStr] = Field(default=None, description="The notes of the virtual machine.")
    os_type: Optional[StrictStr] = Field(default=None, description="The OS type of the virtual machine.", alias="osType")
    owner_object_id: Optional[StrictStr] = Field(default=None, description="The object identifier of the owner of the virtual machine.", alias="ownerObjectId")
    password: Optional[StrictStr] = Field(default=None, description="The password of the virtual machine administrator.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    size: Optional[StrictStr] = Field(default=None, description="The size of the virtual machine.")
    ssh_key: Optional[StrictStr] = Field(default=None, description="The SSH key of the virtual machine administrator.", alias="sshKey")
    user_name: Optional[StrictStr] = Field(default=None, description="The user name of the virtual machine.", alias="userName")
    __properties: ClassVar[List[str]] = ["artifactDeploymentStatus", "artifacts", "computeId", "createdByUser", "createdByUserId", "customImageId", "disallowPublicIpAddress", "fqdn", "galleryImageReference", "isAuthenticationWithSshKey", "labSubnetName", "labVirtualNetworkId", "notes", "osType", "ownerObjectId", "password", "provisioningState", "size", "sshKey", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabVirtualMachineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact_deployment_status
        if self.artifact_deployment_status:
            _dict['artifactDeploymentStatus'] = self.artifact_deployment_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item_artifacts in self.artifacts:
                if _item_artifacts:
                    _items.append(_item_artifacts.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of gallery_image_reference
        if self.gallery_image_reference:
            _dict['galleryImageReference'] = self.gallery_image_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabVirtualMachineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactDeploymentStatus": ArtifactDeploymentStatusProperties.from_dict(obj["artifactDeploymentStatus"]) if obj.get("artifactDeploymentStatus") is not None else None,
            "artifacts": [ArtifactInstallProperties.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "computeId": obj.get("computeId"),
            "createdByUser": obj.get("createdByUser"),
            "createdByUserId": obj.get("createdByUserId"),
            "customImageId": obj.get("customImageId"),
            "disallowPublicIpAddress": obj.get("disallowPublicIpAddress"),
            "fqdn": obj.get("fqdn"),
            "galleryImageReference": GalleryImageReference.from_dict(obj["galleryImageReference"]) if obj.get("galleryImageReference") is not None else None,
            "isAuthenticationWithSshKey": obj.get("isAuthenticationWithSshKey"),
            "labSubnetName": obj.get("labSubnetName"),
            "labVirtualNetworkId": obj.get("labVirtualNetworkId"),
            "notes": obj.get("notes"),
            "osType": obj.get("osType"),
            "ownerObjectId": obj.get("ownerObjectId"),
            "password": obj.get("password"),
            "provisioningState": obj.get("provisioningState"),
            "size": obj.get("size"),
            "sshKey": obj.get("sshKey"),
            "userName": obj.get("userName")
        })
        return _obj



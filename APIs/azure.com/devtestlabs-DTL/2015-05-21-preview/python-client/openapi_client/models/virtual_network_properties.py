# coding: utf-8

"""
    DevTestLabsClient

    Azure DevTest Labs REST API version 2015-05-21-preview.

    The version of the OpenAPI document: 2015-05-21-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subnet import Subnet
from openapi_client.models.subnet_override import SubnetOverride
from typing import Optional, Set
from typing_extensions import Self

class VirtualNetworkProperties(BaseModel):
    """
    Properties of a virtual network.
    """ # noqa: E501
    allowed_subnets: Optional[List[Subnet]] = Field(default=None, description="The allowed subnets of the virtual network.", alias="allowedSubnets")
    description: Optional[StrictStr] = Field(default=None, description="The description of the virtual network.")
    external_provider_resource_id: Optional[StrictStr] = Field(default=None, description="The Microsoft.Network resource identifier of the virtual network.", alias="externalProviderResourceId")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    subnet_overrides: Optional[List[SubnetOverride]] = Field(default=None, description="The subnet overrides of the virtual network.", alias="subnetOverrides")
    __properties: ClassVar[List[str]] = ["allowedSubnets", "description", "externalProviderResourceId", "provisioningState", "subnetOverrides"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualNetworkProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_subnets (list)
        _items = []
        if self.allowed_subnets:
            for _item_allowed_subnets in self.allowed_subnets:
                if _item_allowed_subnets:
                    _items.append(_item_allowed_subnets.to_dict())
            _dict['allowedSubnets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnet_overrides (list)
        _items = []
        if self.subnet_overrides:
            for _item_subnet_overrides in self.subnet_overrides:
                if _item_subnet_overrides:
                    _items.append(_item_subnet_overrides.to_dict())
            _dict['subnetOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualNetworkProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedSubnets": [Subnet.from_dict(_item) for _item in obj["allowedSubnets"]] if obj.get("allowedSubnets") is not None else None,
            "description": obj.get("description"),
            "externalProviderResourceId": obj.get("externalProviderResourceId"),
            "provisioningState": obj.get("provisioningState"),
            "subnetOverrides": [SubnetOverride.from_dict(_item) for _item in obj["subnetOverrides"]] if obj.get("subnetOverrides") is not None else None
        })
        return _obj



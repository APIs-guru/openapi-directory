# coding: utf-8

"""
    DevTestLabsClient

    Azure DevTest Labs REST API version 2015-05-21-preview.

    The version of the OpenAPI document: 2015-05-21-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArtifactSourceProperties(BaseModel):
    """
    Properties of an artifact source.
    """ # noqa: E501
    branch_ref: Optional[StrictStr] = Field(default=None, description="The branch reference of the artifact source.", alias="branchRef")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the artifact source.", alias="displayName")
    folder_path: Optional[StrictStr] = Field(default=None, description="The folder path of the artifact source.", alias="folderPath")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    security_token: Optional[StrictStr] = Field(default=None, description="The security token of the artifact source.", alias="securityToken")
    source_type: Optional[StrictStr] = Field(default=None, description="The type of the artifact source.", alias="sourceType")
    status: Optional[StrictStr] = Field(default=None, description="The status of the artifact source.")
    uri: Optional[StrictStr] = Field(default=None, description="The URI of the artifact source.")
    __properties: ClassVar[List[str]] = ["branchRef", "displayName", "folderPath", "provisioningState", "securityToken", "sourceType", "status", "uri"]

    @field_validator('source_type')
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VsoGit', 'GitHub']):
            raise ValueError("must be one of enum values ('VsoGit', 'GitHub')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArtifactSourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArtifactSourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branchRef": obj.get("branchRef"),
            "displayName": obj.get("displayName"),
            "folderPath": obj.get("folderPath"),
            "provisioningState": obj.get("provisioningState"),
            "securityToken": obj.get("securityToken"),
            "sourceType": obj.get("sourceType"),
            "status": obj.get("status"),
            "uri": obj.get("uri")
        })
        return _obj



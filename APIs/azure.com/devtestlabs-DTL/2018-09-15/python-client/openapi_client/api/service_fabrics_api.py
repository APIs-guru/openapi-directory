# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.applicable_schedule import ApplicableSchedule
from openapi_client.models.service_fabric import ServiceFabric
from openapi_client.models.service_fabric_fragment import ServiceFabricFragment
from openapi_client.models.service_fabric_list import ServiceFabricList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ServiceFabricsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def service_fabrics_create_or_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        service_fabric: Annotated[ServiceFabric, Field(description="A Service Fabric.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceFabric:
        """service_fabrics_create_or_update

        Create or replace an existing service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param service_fabric: A Service Fabric. (required)
        :type service_fabric: ServiceFabric
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            service_fabric=service_fabric,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
            '201': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_create_or_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        service_fabric: Annotated[ServiceFabric, Field(description="A Service Fabric.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceFabric]:
        """service_fabrics_create_or_update

        Create or replace an existing service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param service_fabric: A Service Fabric. (required)
        :type service_fabric: ServiceFabric
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            service_fabric=service_fabric,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
            '201': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_create_or_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        service_fabric: Annotated[ServiceFabric, Field(description="A Service Fabric.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_create_or_update

        Create or replace an existing service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param service_fabric: A Service Fabric. (required)
        :type service_fabric: ServiceFabric
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            service_fabric=service_fabric,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
            '201': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_create_or_update_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        service_fabric,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if service_fabric is not None:
            _body_params = service_fabric


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """service_fabrics_delete

        Delete service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """service_fabrics_delete

        Delete service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_delete

        Delete service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_delete_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        expand: Annotated[Optional[StrictStr], Field(description="Specify the $expand query. Example: 'properties($expand=applicableSchedule)'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceFabric:
        """service_fabrics_get

        Get service fabric.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param expand: Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        expand: Annotated[Optional[StrictStr], Field(description="Specify the $expand query. Example: 'properties($expand=applicableSchedule)'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceFabric]:
        """service_fabrics_get

        Get service fabric.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param expand: Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        expand: Annotated[Optional[StrictStr], Field(description="Specify the $expand query. Example: 'properties($expand=applicableSchedule)'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_get

        Get service fabric.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param expand: Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_list(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        expand: Annotated[Optional[StrictStr], Field(description="Specify the $expand query. Example: 'properties($expand=applicableSchedule)'")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="The filter to apply to the operation. Example: '$filter=contains(name,'myName')")] = None,
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of resources to return from the operation. Example: '$top=10'")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The ordering expression for the results, using OData notation. Example: '$orderby=name desc'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceFabricList:
        """service_fabrics_list

        List service fabrics in a given user profile.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param expand: Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        :type expand: str
        :param filter: The filter to apply to the operation. Example: '$filter=contains(name,'myName')
        :type filter: str
        :param top: The maximum number of resources to return from the operation. Example: '$top=10'
        :type top: int
        :param orderby: The ordering expression for the results, using OData notation. Example: '$orderby=name desc'
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            top=top,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabricList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_list_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        expand: Annotated[Optional[StrictStr], Field(description="Specify the $expand query. Example: 'properties($expand=applicableSchedule)'")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="The filter to apply to the operation. Example: '$filter=contains(name,'myName')")] = None,
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of resources to return from the operation. Example: '$top=10'")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The ordering expression for the results, using OData notation. Example: '$orderby=name desc'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceFabricList]:
        """service_fabrics_list

        List service fabrics in a given user profile.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param expand: Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        :type expand: str
        :param filter: The filter to apply to the operation. Example: '$filter=contains(name,'myName')
        :type filter: str
        :param top: The maximum number of resources to return from the operation. Example: '$top=10'
        :type top: int
        :param orderby: The ordering expression for the results, using OData notation. Example: '$orderby=name desc'
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            top=top,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabricList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_list_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        expand: Annotated[Optional[StrictStr], Field(description="Specify the $expand query. Example: 'properties($expand=applicableSchedule)'")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="The filter to apply to the operation. Example: '$filter=contains(name,'myName')")] = None,
        top: Annotated[Optional[StrictInt], Field(description="The maximum number of resources to return from the operation. Example: '$top=10'")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="The ordering expression for the results, using OData notation. Example: '$orderby=name desc'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_list

        List service fabrics in a given user profile.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param expand: Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        :type expand: str
        :param filter: The filter to apply to the operation. Example: '$filter=contains(name,'myName')
        :type filter: str
        :param top: The maximum number of resources to return from the operation. Example: '$top=10'
        :type top: int
        :param orderby: The ordering expression for the results, using OData notation. Example: '$orderby=name desc'
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_list_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            api_version=api_version,
            expand=expand,
            filter=filter,
            top=top,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabricList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_list_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        api_version,
        expand,
        filter,
        top,
        orderby,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_list_applicable_schedules(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApplicableSchedule:
        """service_fabrics_list_applicable_schedules

        Lists the applicable start/stop schedules, if any.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_list_applicable_schedules_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApplicableSchedule",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_list_applicable_schedules_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApplicableSchedule]:
        """service_fabrics_list_applicable_schedules

        Lists the applicable start/stop schedules, if any.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_list_applicable_schedules_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApplicableSchedule",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_list_applicable_schedules_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_list_applicable_schedules

        Lists the applicable start/stop schedules, if any.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_list_applicable_schedules_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApplicableSchedule",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_list_applicable_schedules_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}/listApplicableSchedules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_start(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """service_fabrics_start

        Start a service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_start_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_start_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """service_fabrics_start

        Start a service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_start_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_start_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_start

        Start a service fabric. This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_start_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_start_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}/start',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_stop(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """service_fabrics_stop

        Stop a service fabric This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_stop_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_stop_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """service_fabrics_stop

        Stop a service fabric This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_stop_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_stop_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_stop

        Stop a service fabric This operation can take a while to complete.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_stop_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_stop_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}/stop',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def service_fabrics_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        service_fabric: Annotated[ServiceFabricFragment, Field(description="A Service Fabric.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceFabric:
        """service_fabrics_update

        Allows modifying tags of service fabrics. All other properties will be ignored.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param service_fabric: A Service Fabric. (required)
        :type service_fabric: ServiceFabricFragment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            service_fabric=service_fabric,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def service_fabrics_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        service_fabric: Annotated[ServiceFabricFragment, Field(description="A Service Fabric.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceFabric]:
        """service_fabrics_update

        Allows modifying tags of service fabrics. All other properties will be ignored.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param service_fabric: A Service Fabric. (required)
        :type service_fabric: ServiceFabricFragment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            service_fabric=service_fabric,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def service_fabrics_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The subscription ID.")],
        resource_group_name: Annotated[StrictStr, Field(description="The name of the resource group.")],
        lab_name: Annotated[StrictStr, Field(description="The name of the lab.")],
        user_name: Annotated[StrictStr, Field(description="The name of the user profile.")],
        name: Annotated[StrictStr, Field(description="The name of the service fabric.")],
        api_version: Annotated[StrictStr, Field(description="Client API version.")],
        service_fabric: Annotated[ServiceFabricFragment, Field(description="A Service Fabric.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """service_fabrics_update

        Allows modifying tags of service fabrics. All other properties will be ignored.

        :param subscription_id: The subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. (required)
        :type resource_group_name: str
        :param lab_name: The name of the lab. (required)
        :type lab_name: str
        :param user_name: The name of the user profile. (required)
        :type user_name: str
        :param name: The name of the service fabric. (required)
        :type name: str
        :param api_version: Client API version. (required)
        :type api_version: str
        :param service_fabric: A Service Fabric. (required)
        :type service_fabric: ServiceFabricFragment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._service_fabrics_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            lab_name=lab_name,
            user_name=user_name,
            name=name,
            api_version=api_version,
            service_fabric=service_fabric,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceFabric",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _service_fabrics_update_serialize(
        self,
        subscription_id,
        resource_group_name,
        lab_name,
        user_name,
        name,
        api_version,
        service_fabric,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if lab_name is not None:
            _path_params['labName'] = lab_name
        if user_name is not None:
            _path_params['userName'] = user_name
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if service_fabric is not None:
            _body_params = service_fabric


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShutdownNotificationContent(BaseModel):
    """
    The contents of a shutdown notification. Webhooks can use this type to deserialize the request body when they get notified of an imminent shutdown.
    """ # noqa: E501
    delay_url120: Optional[StrictStr] = Field(default=None, description="The URL to delay shutdown by 2 hours.", alias="delayUrl120")
    delay_url60: Optional[StrictStr] = Field(default=None, description="The URL to delay shutdown by 60 minutes.", alias="delayUrl60")
    event_type: Optional[StrictStr] = Field(default=None, description="The event for which a notification will be sent.", alias="eventType")
    guid: Optional[StrictStr] = Field(default=None, description="The GUID for the virtual machine to be shut down.")
    lab_name: Optional[StrictStr] = Field(default=None, description="The lab for the schedule.", alias="labName")
    minutes_until_shutdown: Optional[StrictStr] = Field(default=None, description="Minutes remaining until shutdown", alias="minutesUntilShutdown")
    owner: Optional[StrictStr] = Field(default=None, description="The owner of the virtual machine.")
    resource_group_name: Optional[StrictStr] = Field(default=None, description="The resource group name for the schedule.", alias="resourceGroupName")
    skip_url: Optional[StrictStr] = Field(default=None, description="The URL to skip auto-shutdown.", alias="skipUrl")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription ID for the schedule.", alias="subscriptionId")
    text: Optional[StrictStr] = Field(default=None, description="The text for the notification.")
    vm_name: Optional[StrictStr] = Field(default=None, description="The virtual machine to be shut down.", alias="vmName")
    vm_url: Optional[StrictStr] = Field(default=None, description="The URL of the virtual machine.", alias="vmUrl")
    __properties: ClassVar[List[str]] = ["delayUrl120", "delayUrl60", "eventType", "guid", "labName", "minutesUntilShutdown", "owner", "resourceGroupName", "skipUrl", "subscriptionId", "text", "vmName", "vmUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShutdownNotificationContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShutdownNotificationContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delayUrl120": obj.get("delayUrl120"),
            "delayUrl60": obj.get("delayUrl60"),
            "eventType": obj.get("eventType"),
            "guid": obj.get("guid"),
            "labName": obj.get("labName"),
            "minutesUntilShutdown": obj.get("minutesUntilShutdown"),
            "owner": obj.get("owner"),
            "resourceGroupName": obj.get("resourceGroupName"),
            "skipUrl": obj.get("skipUrl"),
            "subscriptionId": obj.get("subscriptionId"),
            "text": obj.get("text"),
            "vmName": obj.get("vmName"),
            "vmUrl": obj.get("vmUrl")
        })
        return _obj



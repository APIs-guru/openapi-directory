# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parameters_value_file_info import ParametersValueFileInfo
from typing import Optional, Set
from typing_extensions import Self

class ArmTemplateProperties(BaseModel):
    """
    Properties of an Azure Resource Manager template.
    """ # noqa: E501
    contents: Optional[Dict[str, Any]] = Field(default=None, description="The contents of the ARM template.")
    created_date: Optional[datetime] = Field(default=None, description="The creation date of the armTemplate.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="The description of the ARM template.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the ARM template.", alias="displayName")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether or not ARM template is enabled for use by lab user.")
    icon: Optional[StrictStr] = Field(default=None, description="The URI to the icon of the ARM template.")
    parameters_value_files_info: Optional[List[ParametersValueFileInfo]] = Field(default=None, description="File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.", alias="parametersValueFilesInfo")
    publisher: Optional[StrictStr] = Field(default=None, description="The publisher of the ARM template.")
    __properties: ClassVar[List[str]] = ["contents", "createdDate", "description", "displayName", "enabled", "icon", "parametersValueFilesInfo", "publisher"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArmTemplateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "contents",
            "created_date",
            "description",
            "display_name",
            "enabled",
            "icon",
            "parameters_value_files_info",
            "publisher",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters_value_files_info (list)
        _items = []
        if self.parameters_value_files_info:
            for _item_parameters_value_files_info in self.parameters_value_files_info:
                if _item_parameters_value_files_info:
                    _items.append(_item_parameters_value_files_info.to_dict())
            _dict['parametersValueFilesInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArmTemplateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": obj.get("contents"),
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "icon": obj.get("icon"),
            "parametersValueFilesInfo": [ParametersValueFileInfo.from_dict(_item) for _item in obj["parametersValueFilesInfo"]] if obj.get("parametersValueFilesInfo") is not None else None,
            "publisher": obj.get("publisher")
        })
        return _obj



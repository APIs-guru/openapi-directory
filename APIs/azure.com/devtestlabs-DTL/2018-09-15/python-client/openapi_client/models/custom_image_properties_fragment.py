# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_image_properties_custom_fragment import CustomImagePropertiesCustomFragment
from openapi_client.models.custom_image_properties_from_plan_fragment import CustomImagePropertiesFromPlanFragment
from openapi_client.models.custom_image_properties_from_vm_fragment import CustomImagePropertiesFromVmFragment
from openapi_client.models.data_disk_storage_type_info_fragment import DataDiskStorageTypeInfoFragment
from typing import Optional, Set
from typing_extensions import Self

class CustomImagePropertiesFragment(BaseModel):
    """
    Properties of a custom image.
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="The author of the custom image.")
    custom_image_plan: Optional[CustomImagePropertiesFromPlanFragment] = Field(default=None, alias="customImagePlan")
    data_disk_storage_info: Optional[List[DataDiskStorageTypeInfoFragment]] = Field(default=None, description="Storage information about the data disks present in the custom image", alias="dataDiskStorageInfo")
    description: Optional[StrictStr] = Field(default=None, description="The description of the custom image.")
    is_plan_authorized: Optional[StrictBool] = Field(default=None, description="Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment", alias="isPlanAuthorized")
    managed_image_id: Optional[StrictStr] = Field(default=None, description="The Managed Image Id backing the custom image.", alias="managedImageId")
    managed_snapshot_id: Optional[StrictStr] = Field(default=None, description="The Managed Snapshot Id backing the custom image.", alias="managedSnapshotId")
    vhd: Optional[CustomImagePropertiesCustomFragment] = None
    vm: Optional[CustomImagePropertiesFromVmFragment] = None
    __properties: ClassVar[List[str]] = ["author", "customImagePlan", "dataDiskStorageInfo", "description", "isPlanAuthorized", "managedImageId", "managedSnapshotId", "vhd", "vm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomImagePropertiesFragment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_image_plan
        if self.custom_image_plan:
            _dict['customImagePlan'] = self.custom_image_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_disk_storage_info (list)
        _items = []
        if self.data_disk_storage_info:
            for _item_data_disk_storage_info in self.data_disk_storage_info:
                if _item_data_disk_storage_info:
                    _items.append(_item_data_disk_storage_info.to_dict())
            _dict['dataDiskStorageInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of vhd
        if self.vhd:
            _dict['vhd'] = self.vhd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm
        if self.vm:
            _dict['vm'] = self.vm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomImagePropertiesFragment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "customImagePlan": CustomImagePropertiesFromPlanFragment.from_dict(obj["customImagePlan"]) if obj.get("customImagePlan") is not None else None,
            "dataDiskStorageInfo": [DataDiskStorageTypeInfoFragment.from_dict(_item) for _item in obj["dataDiskStorageInfo"]] if obj.get("dataDiskStorageInfo") is not None else None,
            "description": obj.get("description"),
            "isPlanAuthorized": obj.get("isPlanAuthorized"),
            "managedImageId": obj.get("managedImageId"),
            "managedSnapshotId": obj.get("managedSnapshotId"),
            "vhd": CustomImagePropertiesCustomFragment.from_dict(obj["vhd"]) if obj.get("vhd") is not None else None,
            "vm": CustomImagePropertiesFromVmFragment.from_dict(obj["vm"]) if obj.get("vm") is not None else None
        })
        return _obj



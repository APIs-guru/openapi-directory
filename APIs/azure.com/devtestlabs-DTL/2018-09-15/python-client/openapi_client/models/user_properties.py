# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_identity import UserIdentity
from openapi_client.models.user_secret_store import UserSecretStore
from typing import Optional, Set
from typing_extensions import Self

class UserProperties(BaseModel):
    """
    Properties of a lab user profile.
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, description="The creation date of the user profile.", alias="createdDate")
    identity: Optional[UserIdentity] = None
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    secret_store: Optional[UserSecretStore] = Field(default=None, alias="secretStore")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    __properties: ClassVar[List[str]] = ["createdDate", "identity", "provisioningState", "secretStore", "uniqueIdentifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date",
            "provisioning_state",
            "unique_identifier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_store
        if self.secret_store:
            _dict['secretStore'] = self.secret_store.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "identity": UserIdentity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "secretStore": UserSecretStore.from_dict(obj["secretStore"]) if obj.get("secretStore") is not None else None,
            "uniqueIdentifier": obj.get("uniqueIdentifier")
        })
        return _obj



# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.percentage_cost_threshold_properties import PercentageCostThresholdProperties
from typing import Optional, Set
from typing_extensions import Self

class CostThresholdProperties(BaseModel):
    """
    Properties of a cost threshold item.
    """ # noqa: E501
    display_on_chart: Optional[StrictStr] = Field(default=None, description="Indicates whether this threshold will be displayed on cost charts.", alias="displayOnChart")
    notification_sent: Optional[StrictStr] = Field(default=None, description="Indicates the datetime when notifications were last sent for this threshold.", alias="notificationSent")
    percentage_threshold: Optional[PercentageCostThresholdProperties] = Field(default=None, alias="percentageThreshold")
    send_notification_when_exceeded: Optional[StrictStr] = Field(default=None, description="Indicates whether notifications will be sent when this threshold is exceeded.", alias="sendNotificationWhenExceeded")
    threshold_id: Optional[StrictStr] = Field(default=None, description="The ID of the cost threshold item.", alias="thresholdId")
    __properties: ClassVar[List[str]] = ["displayOnChart", "notificationSent", "percentageThreshold", "sendNotificationWhenExceeded", "thresholdId"]

    @field_validator('display_on_chart')
    def display_on_chart_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('send_notification_when_exceeded')
    def send_notification_when_exceeded_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CostThresholdProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of percentage_threshold
        if self.percentage_threshold:
            _dict['percentageThreshold'] = self.percentage_threshold.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CostThresholdProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayOnChart": obj.get("displayOnChart"),
            "notificationSent": obj.get("notificationSent"),
            "percentageThreshold": PercentageCostThresholdProperties.from_dict(obj["percentageThreshold"]) if obj.get("percentageThreshold") is not None else None,
            "sendNotificationWhenExceeded": obj.get("sendNotificationWhenExceeded"),
            "thresholdId": obj.get("thresholdId")
        })
        return _obj



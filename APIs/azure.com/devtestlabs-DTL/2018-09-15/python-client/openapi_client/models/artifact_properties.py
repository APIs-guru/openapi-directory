# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArtifactProperties(BaseModel):
    """
    Properties of an artifact.
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, description="The artifact's creation date.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="The artifact's description.")
    file_path: Optional[StrictStr] = Field(default=None, description="The file path to the artifact.", alias="filePath")
    icon: Optional[StrictStr] = Field(default=None, description="The URI to the artifact icon.")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="The artifact's parameters.")
    publisher: Optional[StrictStr] = Field(default=None, description="The artifact's publisher.")
    target_os_type: Optional[StrictStr] = Field(default=None, description="The artifact's target OS.", alias="targetOsType")
    title: Optional[StrictStr] = Field(default=None, description="The artifact's title.")
    __properties: ClassVar[List[str]] = ["createdDate", "description", "filePath", "icon", "parameters", "publisher", "targetOsType", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArtifactProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date",
            "description",
            "file_path",
            "icon",
            "parameters",
            "publisher",
            "target_os_type",
            "title",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArtifactProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "filePath": obj.get("filePath"),
            "icon": obj.get("icon"),
            "parameters": obj.get("parameters"),
            "publisher": obj.get("publisher"),
            "targetOsType": obj.get("targetOsType"),
            "title": obj.get("title")
        })
        return _obj



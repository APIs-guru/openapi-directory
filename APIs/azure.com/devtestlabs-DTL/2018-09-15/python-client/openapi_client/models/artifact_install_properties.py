# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact_parameter_properties import ArtifactParameterProperties
from typing import Optional, Set
from typing_extensions import Self

class ArtifactInstallProperties(BaseModel):
    """
    Properties of an artifact.
    """ # noqa: E501
    artifact_id: Optional[StrictStr] = Field(default=None, description="The artifact's identifier.", alias="artifactId")
    artifact_title: Optional[StrictStr] = Field(default=None, description="The artifact's title.", alias="artifactTitle")
    deployment_status_message: Optional[StrictStr] = Field(default=None, description="The status message from the deployment.", alias="deploymentStatusMessage")
    install_time: Optional[datetime] = Field(default=None, description="The time that the artifact starts to install on the virtual machine.", alias="installTime")
    parameters: Optional[List[ArtifactParameterProperties]] = Field(default=None, description="The parameters of the artifact.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the artifact.")
    vm_extension_status_message: Optional[StrictStr] = Field(default=None, description="The status message from the virtual machine extension.", alias="vmExtensionStatusMessage")
    __properties: ClassVar[List[str]] = ["artifactId", "artifactTitle", "deploymentStatusMessage", "installTime", "parameters", "status", "vmExtensionStatusMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArtifactInstallProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArtifactInstallProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactId": obj.get("artifactId"),
            "artifactTitle": obj.get("artifactTitle"),
            "deploymentStatusMessage": obj.get("deploymentStatusMessage"),
            "installTime": obj.get("installTime"),
            "parameters": [ArtifactParameterProperties.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "status": obj.get("status"),
            "vmExtensionStatusMessage": obj.get("vmExtensionStatusMessage")
        })
        return _obj



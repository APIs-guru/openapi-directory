# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shared_public_ip_address_configuration import SharedPublicIpAddressConfiguration
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfaceProperties(BaseModel):
    """
    Properties of a network interface.
    """ # noqa: E501
    dns_name: Optional[StrictStr] = Field(default=None, description="The DNS name.", alias="dnsName")
    private_ip_address: Optional[StrictStr] = Field(default=None, description="The private IP address.", alias="privateIpAddress")
    public_ip_address: Optional[StrictStr] = Field(default=None, description="The public IP address.", alias="publicIpAddress")
    public_ip_address_id: Optional[StrictStr] = Field(default=None, description="The resource ID of the public IP address.", alias="publicIpAddressId")
    rdp_authority: Optional[StrictStr] = Field(default=None, description="The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).", alias="rdpAuthority")
    shared_public_ip_address_configuration: Optional[SharedPublicIpAddressConfiguration] = Field(default=None, alias="sharedPublicIpAddressConfiguration")
    ssh_authority: Optional[StrictStr] = Field(default=None, description="The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.", alias="sshAuthority")
    subnet_id: Optional[StrictStr] = Field(default=None, description="The resource ID of the sub net.", alias="subnetId")
    virtual_network_id: Optional[StrictStr] = Field(default=None, description="The resource ID of the virtual network.", alias="virtualNetworkId")
    __properties: ClassVar[List[str]] = ["dnsName", "privateIpAddress", "publicIpAddress", "publicIpAddressId", "rdpAuthority", "sharedPublicIpAddressConfiguration", "sshAuthority", "subnetId", "virtualNetworkId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shared_public_ip_address_configuration
        if self.shared_public_ip_address_configuration:
            _dict['sharedPublicIpAddressConfiguration'] = self.shared_public_ip_address_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsName": obj.get("dnsName"),
            "privateIpAddress": obj.get("privateIpAddress"),
            "publicIpAddress": obj.get("publicIpAddress"),
            "publicIpAddressId": obj.get("publicIpAddressId"),
            "rdpAuthority": obj.get("rdpAuthority"),
            "sharedPublicIpAddressConfiguration": SharedPublicIpAddressConfiguration.from_dict(obj["sharedPublicIpAddressConfiguration"]) if obj.get("sharedPublicIpAddressConfiguration") is not None else None,
            "sshAuthority": obj.get("sshAuthority"),
            "subnetId": obj.get("subnetId"),
            "virtualNetworkId": obj.get("virtualNetworkId")
        })
        return _obj



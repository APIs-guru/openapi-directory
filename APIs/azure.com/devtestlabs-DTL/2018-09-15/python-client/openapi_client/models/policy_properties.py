# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PolicyProperties(BaseModel):
    """
    Properties of a Policy.
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, description="The creation date of the policy.", alias="createdDate")
    description: Optional[StrictStr] = Field(default=None, description="The description of the policy.")
    evaluator_type: Optional[StrictStr] = Field(default=None, description="The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).", alias="evaluatorType")
    fact_data: Optional[StrictStr] = Field(default=None, description="The fact data of the policy.", alias="factData")
    fact_name: Optional[StrictStr] = Field(default=None, description="The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.", alias="factName")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    status: Optional[StrictStr] = Field(default=None, description="The status of the policy.")
    threshold: Optional[StrictStr] = Field(default=None, description="The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    __properties: ClassVar[List[str]] = ["createdDate", "description", "evaluatorType", "factData", "factName", "provisioningState", "status", "threshold", "uniqueIdentifier"]

    @field_validator('evaluator_type')
    def evaluator_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AllowedValuesPolicy', 'MaxValuePolicy']):
            raise ValueError("must be one of enum values ('AllowedValuesPolicy', 'MaxValuePolicy')")
        return value

    @field_validator('fact_name')
    def fact_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount', 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet', 'LabTargetCost', 'EnvironmentTemplate', 'ScheduleEditPermission']):
            raise ValueError("must be one of enum values ('UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount', 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet', 'LabTargetCost', 'EnvironmentTemplate', 'ScheduleEditPermission')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date",
            "provisioning_state",
            "unique_identifier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "description": obj.get("description"),
            "evaluatorType": obj.get("evaluatorType"),
            "factData": obj.get("factData"),
            "factName": obj.get("factName"),
            "provisioningState": obj.get("provisioningState"),
            "status": obj.get("status"),
            "threshold": obj.get("threshold"),
            "uniqueIdentifier": obj.get("uniqueIdentifier")
        })
        return _obj



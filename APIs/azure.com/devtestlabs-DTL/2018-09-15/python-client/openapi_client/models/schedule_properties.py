# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.day_details import DayDetails
from openapi_client.models.hour_details import HourDetails
from openapi_client.models.notification_settings import NotificationSettings
from openapi_client.models.week_details import WeekDetails
from typing import Optional, Set
from typing_extensions import Self

class ScheduleProperties(BaseModel):
    """
    Properties of a schedule.
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, description="The creation date of the schedule.", alias="createdDate")
    daily_recurrence: Optional[DayDetails] = Field(default=None, alias="dailyRecurrence")
    hourly_recurrence: Optional[HourDetails] = Field(default=None, alias="hourlyRecurrence")
    notification_settings: Optional[NotificationSettings] = Field(default=None, alias="notificationSettings")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the resource.", alias="provisioningState")
    status: Optional[StrictStr] = Field(default=None, description="The status of the schedule (i.e. Enabled, Disabled)")
    target_resource_id: Optional[StrictStr] = Field(default=None, description="The resource ID to which the schedule belongs", alias="targetResourceId")
    task_type: Optional[StrictStr] = Field(default=None, description="The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).", alias="taskType")
    time_zone_id: Optional[StrictStr] = Field(default=None, description="The time zone ID (e.g. Pacific Standard time).", alias="timeZoneId")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The unique immutable identifier of a resource (Guid).", alias="uniqueIdentifier")
    weekly_recurrence: Optional[WeekDetails] = Field(default=None, alias="weeklyRecurrence")
    __properties: ClassVar[List[str]] = ["createdDate", "dailyRecurrence", "hourlyRecurrence", "notificationSettings", "provisioningState", "status", "targetResourceId", "taskType", "timeZoneId", "uniqueIdentifier", "weeklyRecurrence"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date",
            "provisioning_state",
            "unique_identifier",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of daily_recurrence
        if self.daily_recurrence:
            _dict['dailyRecurrence'] = self.daily_recurrence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hourly_recurrence
        if self.hourly_recurrence:
            _dict['hourlyRecurrence'] = self.hourly_recurrence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_settings
        if self.notification_settings:
            _dict['notificationSettings'] = self.notification_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weekly_recurrence
        if self.weekly_recurrence:
            _dict['weeklyRecurrence'] = self.weekly_recurrence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "dailyRecurrence": DayDetails.from_dict(obj["dailyRecurrence"]) if obj.get("dailyRecurrence") is not None else None,
            "hourlyRecurrence": HourDetails.from_dict(obj["hourlyRecurrence"]) if obj.get("hourlyRecurrence") is not None else None,
            "notificationSettings": NotificationSettings.from_dict(obj["notificationSettings"]) if obj.get("notificationSettings") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "status": obj.get("status"),
            "targetResourceId": obj.get("targetResourceId"),
            "taskType": obj.get("taskType"),
            "timeZoneId": obj.get("timeZoneId"),
            "uniqueIdentifier": obj.get("uniqueIdentifier"),
            "weeklyRecurrence": WeekDetails.from_dict(obj["weeklyRecurrence"]) if obj.get("weeklyRecurrence") is not None else None
        })
        return _obj



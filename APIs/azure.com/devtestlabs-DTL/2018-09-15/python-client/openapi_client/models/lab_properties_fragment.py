# coding: utf-8

"""
    DevTestLabsClient

    The DevTest Labs Client.

    The version of the OpenAPI document: 2018-09-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lab_announcement_properties_fragment import LabAnnouncementPropertiesFragment
from openapi_client.models.lab_support_properties_fragment import LabSupportPropertiesFragment
from typing import Optional, Set
from typing_extensions import Self

class LabPropertiesFragment(BaseModel):
    """
    Properties of a lab.
    """ # noqa: E501
    announcement: Optional[LabAnnouncementPropertiesFragment] = None
    environment_permission: Optional[StrictStr] = Field(default=None, description="The access rights to be granted to the user when provisioning an environment", alias="environmentPermission")
    extended_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Extended properties of the lab used for experimental features", alias="extendedProperties")
    lab_storage_type: Optional[StrictStr] = Field(default=None, description="Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.", alias="labStorageType")
    mandatory_artifacts_resource_ids_linux: Optional[List[StrictStr]] = Field(default=None, description="The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.", alias="mandatoryArtifactsResourceIdsLinux")
    mandatory_artifacts_resource_ids_windows: Optional[List[StrictStr]] = Field(default=None, description="The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.", alias="mandatoryArtifactsResourceIdsWindows")
    premium_data_disks: Optional[StrictStr] = Field(default=None, description="The setting to enable usage of premium data disks.  When its value is 'Enabled', creation of standard or premium data disks is allowed.  When its value is 'Disabled', only creation of standard data disks is allowed.", alias="premiumDataDisks")
    support: Optional[LabSupportPropertiesFragment] = None
    __properties: ClassVar[List[str]] = ["announcement", "environmentPermission", "extendedProperties", "labStorageType", "mandatoryArtifactsResourceIdsLinux", "mandatoryArtifactsResourceIdsWindows", "premiumDataDisks", "support"]

    @field_validator('environment_permission')
    def environment_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Reader', 'Contributor']):
            raise ValueError("must be one of enum values ('Reader', 'Contributor')")
        return value

    @field_validator('lab_storage_type')
    def lab_storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard', 'Premium', 'StandardSSD']):
            raise ValueError("must be one of enum values ('Standard', 'Premium', 'StandardSSD')")
        return value

    @field_validator('premium_data_disks')
    def premium_data_disks_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Disabled', 'Enabled']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabPropertiesFragment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of announcement
        if self.announcement:
            _dict['announcement'] = self.announcement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support
        if self.support:
            _dict['support'] = self.support.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabPropertiesFragment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "announcement": LabAnnouncementPropertiesFragment.from_dict(obj["announcement"]) if obj.get("announcement") is not None else None,
            "environmentPermission": obj.get("environmentPermission"),
            "extendedProperties": obj.get("extendedProperties"),
            "labStorageType": obj.get("labStorageType"),
            "mandatoryArtifactsResourceIdsLinux": obj.get("mandatoryArtifactsResourceIdsLinux"),
            "mandatoryArtifactsResourceIdsWindows": obj.get("mandatoryArtifactsResourceIdsWindows"),
            "premiumDataDisks": obj.get("premiumDataDisks"),
            "support": LabSupportPropertiesFragment.from_dict(obj["support"]) if obj.get("support") is not None else None
        })
        return _obj



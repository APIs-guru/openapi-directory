# coding: utf-8

"""
    DataLakeStoreAccountManagementClient

    Creates an Azure Data Lake Store account management client.

    The version of the OpenAPI document: 2015-10-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_config import EncryptionConfig
from typing import Optional, Set
from typing_extensions import Self

class DataLakeStoreAccountProperties(BaseModel):
    """
    Data Lake Store account properties information
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="the account creation time.", alias="creationTime")
    default_group: Optional[StrictStr] = Field(default=None, description="the default owner group for all new folders and files created in the Data Lake Store account.", alias="defaultGroup")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    encryption_provisioning_state: Optional[StrictStr] = Field(default=None, description="The current state of encryption provisioning for this Data Lake store account.", alias="encryptionProvisioningState")
    encryption_state: Optional[StrictStr] = Field(default=None, description="The current state of encryption for this Data Lake store account.", alias="encryptionState")
    endpoint: Optional[StrictStr] = Field(default=None, description="the gateway host.")
    last_modified_time: Optional[datetime] = Field(default=None, description="the account last modified time.", alias="lastModifiedTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="the status of the Data Lake Store account while being provisioned.", alias="provisioningState")
    state: Optional[StrictStr] = Field(default=None, description="the status of the Data Lake Store account after provisioning has completed.")
    __properties: ClassVar[List[str]] = ["creationTime", "defaultGroup", "encryptionConfig", "encryptionProvisioningState", "encryptionState", "endpoint", "lastModifiedTime", "provisioningState", "state"]

    @field_validator('encryption_provisioning_state')
    def encryption_provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Succeeded']):
            raise ValueError("must be one of enum values ('Creating', 'Succeeded')")
        return value

    @field_validator('encryption_state')
    def encryption_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted']):
            raise ValueError("must be one of enum values ('Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'suspended']):
            raise ValueError("must be one of enum values ('active', 'suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataLakeStoreAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "encryption_provisioning_state",
            "last_modified_time",
            "provisioning_state",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataLakeStoreAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "defaultGroup": obj.get("defaultGroup"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "encryptionProvisioningState": obj.get("encryptionProvisioningState"),
            "encryptionState": obj.get("encryptionState"),
            "endpoint": obj.get("endpoint"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "provisioningState": obj.get("provisioningState"),
            "state": obj.get("state")
        })
        return _obj



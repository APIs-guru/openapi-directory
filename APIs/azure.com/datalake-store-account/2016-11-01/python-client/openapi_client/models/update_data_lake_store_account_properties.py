# coding: utf-8

"""
    DataLakeStoreAccountManagementClient

    Creates an Azure Data Lake Store account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_encryption_config import UpdateEncryptionConfig
from openapi_client.models.update_firewall_rule_with_account_parameters import UpdateFirewallRuleWithAccountParameters
from openapi_client.models.update_trusted_id_provider_with_account_parameters import UpdateTrustedIdProviderWithAccountParameters
from openapi_client.models.update_virtual_network_rule_with_account_parameters import UpdateVirtualNetworkRuleWithAccountParameters
from typing import Optional, Set
from typing_extensions import Self

class UpdateDataLakeStoreAccountProperties(BaseModel):
    """
    Data Lake Store account properties information to be updated.
    """ # noqa: E501
    default_group: Optional[StrictStr] = Field(default=None, description="The default owner group for all new folders and files created in the Data Lake Store account.", alias="defaultGroup")
    encryption_config: Optional[UpdateEncryptionConfig] = Field(default=None, alias="encryptionConfig")
    firewall_allow_azure_ips: Optional[StrictStr] = Field(default=None, description="The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.", alias="firewallAllowAzureIps")
    firewall_rules: Optional[List[UpdateFirewallRuleWithAccountParameters]] = Field(default=None, description="The list of firewall rules associated with this Data Lake Store account.", alias="firewallRules")
    firewall_state: Optional[StrictStr] = Field(default=None, description="The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.", alias="firewallState")
    new_tier: Optional[StrictStr] = Field(default=None, description="The commitment tier to use for next month.", alias="newTier")
    trusted_id_provider_state: Optional[StrictStr] = Field(default=None, description="The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.", alias="trustedIdProviderState")
    trusted_id_providers: Optional[List[UpdateTrustedIdProviderWithAccountParameters]] = Field(default=None, description="The list of trusted identity providers associated with this Data Lake Store account.", alias="trustedIdProviders")
    virtual_network_rules: Optional[List[UpdateVirtualNetworkRuleWithAccountParameters]] = Field(default=None, description="The list of virtual network rules associated with this Data Lake Store account.", alias="virtualNetworkRules")
    __properties: ClassVar[List[str]] = ["defaultGroup", "encryptionConfig", "firewallAllowAzureIps", "firewallRules", "firewallState", "newTier", "trustedIdProviderState", "trustedIdProviders", "virtualNetworkRules"]

    @field_validator('firewall_allow_azure_ips')
    def firewall_allow_azure_ips_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('firewall_state')
    def firewall_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    @field_validator('new_tier')
    def new_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB']):
            raise ValueError("must be one of enum values ('Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB')")
        return value

    @field_validator('trusted_id_provider_state')
    def trusted_id_provider_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDataLakeStoreAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in firewall_rules (list)
        _items = []
        if self.firewall_rules:
            for _item_firewall_rules in self.firewall_rules:
                if _item_firewall_rules:
                    _items.append(_item_firewall_rules.to_dict())
            _dict['firewallRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trusted_id_providers (list)
        _items = []
        if self.trusted_id_providers:
            for _item_trusted_id_providers in self.trusted_id_providers:
                if _item_trusted_id_providers:
                    _items.append(_item_trusted_id_providers.to_dict())
            _dict['trustedIdProviders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_network_rules (list)
        _items = []
        if self.virtual_network_rules:
            for _item_virtual_network_rules in self.virtual_network_rules:
                if _item_virtual_network_rules:
                    _items.append(_item_virtual_network_rules.to_dict())
            _dict['virtualNetworkRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDataLakeStoreAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultGroup": obj.get("defaultGroup"),
            "encryptionConfig": UpdateEncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "firewallAllowAzureIps": obj.get("firewallAllowAzureIps"),
            "firewallRules": [UpdateFirewallRuleWithAccountParameters.from_dict(_item) for _item in obj["firewallRules"]] if obj.get("firewallRules") is not None else None,
            "firewallState": obj.get("firewallState"),
            "newTier": obj.get("newTier"),
            "trustedIdProviderState": obj.get("trustedIdProviderState"),
            "trustedIdProviders": [UpdateTrustedIdProviderWithAccountParameters.from_dict(_item) for _item in obj["trustedIdProviders"]] if obj.get("trustedIdProviders") is not None else None,
            "virtualNetworkRules": [UpdateVirtualNetworkRuleWithAccountParameters.from_dict(_item) for _item in obj["virtualNetworkRules"]] if obj.get("virtualNetworkRules") is not None else None
        })
        return _obj



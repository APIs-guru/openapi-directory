# coding: utf-8

"""
    DataLakeStoreAccountManagementClient

    Creates an Azure Data Lake Store account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataLakeStoreAccountPropertiesBasic(BaseModel):
    """
    The basic account specific properties that are associated with an underlying Data Lake Store account.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The unique identifier associated with this Data Lake Store account.", alias="accountId")
    creation_time: Optional[datetime] = Field(default=None, description="The account creation time.", alias="creationTime")
    endpoint: Optional[StrictStr] = Field(default=None, description="The full CName endpoint for this account.")
    last_modified_time: Optional[datetime] = Field(default=None, description="The account last modified time.", alias="lastModifiedTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning status of the Data Lake Store account.", alias="provisioningState")
    state: Optional[StrictStr] = Field(default=None, description="The state of the Data Lake Store account.")
    __properties: ClassVar[List[str]] = ["accountId", "creationTime", "endpoint", "lastModifiedTime", "provisioningState", "state"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled']):
            raise ValueError("must be one of enum values ('Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Suspended']):
            raise ValueError("must be one of enum values ('Active', 'Suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataLakeStoreAccountPropertiesBasic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "creation_time",
            "endpoint",
            "last_modified_time",
            "provisioning_state",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataLakeStoreAccountPropertiesBasic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "creationTime": obj.get("creationTime"),
            "endpoint": obj.get("endpoint"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "provisioningState": obj.get("provisioningState"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    DataLakeStoreAccountManagementClient

    Creates an Azure Data Lake Store account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_data_lake_store_account_parameters import CreateDataLakeStoreAccountParameters

class TestCreateDataLakeStoreAccountParameters(unittest.TestCase):
    """CreateDataLakeStoreAccountParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateDataLakeStoreAccountParameters:
        """Test CreateDataLakeStoreAccountParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateDataLakeStoreAccountParameters`
        """
        model = CreateDataLakeStoreAccountParameters()
        if include_optional:
            return CreateDataLakeStoreAccountParameters(
                identity = openapi_client.models.encryption_identity.EncryptionIdentity(
                    principal_id = '', 
                    tenant_id = '', 
                    type = 'SystemAssigned', ),
                location = '',
                properties = openapi_client.models.create_data_lake_store_account_properties.CreateDataLakeStoreAccountProperties(
                    default_group = '', 
                    encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                        key_vault_meta_info = openapi_client.models.key_vault_meta_info.KeyVaultMetaInfo(
                            encryption_key_name = '', 
                            encryption_key_version = '', 
                            key_vault_resource_id = '', ), 
                        type = 'UserManaged', ), 
                    encryption_state = 'Enabled', 
                    firewall_allow_azure_ips = 'Enabled', 
                    firewall_rules = [
                        openapi_client.models.create_firewall_rule_with_account_parameters.CreateFirewallRuleWithAccountParameters(
                            name = '', 
                            properties = openapi_client.models.create_or_update_firewall_rule_properties.CreateOrUpdateFirewallRuleProperties(
                                end_ip_address = '', 
                                start_ip_address = '', ), )
                        ], 
                    firewall_state = 'Enabled', 
                    new_tier = 'Consumption', 
                    trusted_id_provider_state = 'Enabled', 
                    trusted_id_providers = [
                        openapi_client.models.create_trusted_id_provider_with_account_parameters.CreateTrustedIdProviderWithAccountParameters(
                            name = '', 
                            properties = openapi_client.models.create_or_update_trusted_id_provider_properties.CreateOrUpdateTrustedIdProviderProperties(
                                id_provider = '', ), )
                        ], 
                    virtual_network_rules = [
                        openapi_client.models.create_virtual_network_rule_with_account_parameters.CreateVirtualNetworkRuleWithAccountParameters(
                            name = '', 
                            properties = openapi_client.models.create_or_update_virtual_network_rule_properties.CreateOrUpdateVirtualNetworkRuleProperties(
                                subnet_id = '', ), )
                        ], ),
                tags = {
                    'key' : ''
                    }
            )
        else:
            return CreateDataLakeStoreAccountParameters(
                location = '',
        )
        """

    def testCreateDataLakeStoreAccountParameters(self):
        """Test CreateDataLakeStoreAccountParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

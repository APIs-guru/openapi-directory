# coding: utf-8

"""
    DataLakeStoreAccountManagementClient

    Creates an Azure Data Lake Store account management client.

    The version of the OpenAPI document: 2016-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_trusted_id_provider_with_account_parameters import CreateTrustedIdProviderWithAccountParameters

class TestCreateTrustedIdProviderWithAccountParameters(unittest.TestCase):
    """CreateTrustedIdProviderWithAccountParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateTrustedIdProviderWithAccountParameters:
        """Test CreateTrustedIdProviderWithAccountParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateTrustedIdProviderWithAccountParameters`
        """
        model = CreateTrustedIdProviderWithAccountParameters()
        if include_optional:
            return CreateTrustedIdProviderWithAccountParameters(
                name = '',
                properties = openapi_client.models.create_or_update_trusted_id_provider_properties.CreateOrUpdateTrustedIdProviderProperties(
                    id_provider = '', )
            )
        else:
            return CreateTrustedIdProviderWithAccountParameters(
                name = '',
                properties = openapi_client.models.create_or_update_trusted_id_provider_properties.CreateOrUpdateTrustedIdProviderProperties(
                    id_provider = '', ),
        )
        """

    def testCreateTrustedIdProviderWithAccountParameters(self):
        """Test CreateTrustedIdProviderWithAccountParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

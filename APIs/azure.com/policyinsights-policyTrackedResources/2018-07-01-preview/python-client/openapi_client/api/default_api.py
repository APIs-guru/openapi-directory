# coding: utf-8

"""
    PolicyTrackedResourcesClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-07-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.policy_tracked_resources_query_results import PolicyTrackedResourcesQueryResults

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def policy_tracked_resources_list_query_results_for_management_group(
        self,
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyTrackedResourcesQueryResults:
        """policy_tracked_resources_list_query_results_for_management_group

        Queries policy tracked resources under the management group.

        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_management_group_serialize(
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_tracked_resources_list_query_results_for_management_group_with_http_info(
        self,
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyTrackedResourcesQueryResults]:
        """policy_tracked_resources_list_query_results_for_management_group

        Queries policy tracked resources under the management group.

        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_management_group_serialize(
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_tracked_resources_list_query_results_for_management_group_without_preload_content(
        self,
        management_groups_namespace: Annotated[StrictStr, Field(description="The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.")],
        management_group_name: Annotated[StrictStr, Field(description="Management group name.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_tracked_resources_list_query_results_for_management_group

        Queries policy tracked resources under the management group.

        :param management_groups_namespace: The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed. (required)
        :type management_groups_namespace: str
        :param management_group_name: Management group name. (required)
        :type management_group_name: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_management_group_serialize(
            management_groups_namespace=management_groups_namespace,
            management_group_name=management_group_name,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_tracked_resources_list_query_results_for_management_group_serialize(
        self,
        management_groups_namespace,
        management_group_name,
        policy_tracked_resources_resource,
        api_version,
        top,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if management_groups_namespace is not None:
            _path_params['managementGroupsNamespace'] = management_groups_namespace
        if management_group_name is not None:
            _path_params['managementGroupName'] = management_group_name
        if policy_tracked_resources_resource is not None:
            _path_params['policyTrackedResourcesResource'] = policy_tracked_resources_resource
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_tracked_resources_list_query_results_for_resource(
        self,
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyTrackedResourcesQueryResults:
        """policy_tracked_resources_list_query_results_for_resource

        Queries policy tracked resources under the resource.

        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_resource_serialize(
            resource_id=resource_id,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_tracked_resources_list_query_results_for_resource_with_http_info(
        self,
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyTrackedResourcesQueryResults]:
        """policy_tracked_resources_list_query_results_for_resource

        Queries policy tracked resources under the resource.

        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_resource_serialize(
            resource_id=resource_id,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_tracked_resources_list_query_results_for_resource_without_preload_content(
        self,
        resource_id: Annotated[StrictStr, Field(description="Resource ID.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_tracked_resources_list_query_results_for_resource

        Queries policy tracked resources under the resource.

        :param resource_id: Resource ID. (required)
        :type resource_id: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_resource_serialize(
            resource_id=resource_id,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_tracked_resources_list_query_results_for_resource_serialize(
        self,
        resource_id,
        policy_tracked_resources_resource,
        api_version,
        top,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_id is not None:
            _path_params['resourceId'] = resource_id
        if policy_tracked_resources_resource is not None:
            _path_params['policyTrackedResourcesResource'] = policy_tracked_resources_resource
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{resourceId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_tracked_resources_list_query_results_for_resource_group(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyTrackedResourcesQueryResults:
        """policy_tracked_resources_list_query_results_for_resource_group

        Queries policy tracked resources under the resource group.

        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_resource_group_serialize(
            resource_group_name=resource_group_name,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_tracked_resources_list_query_results_for_resource_group_with_http_info(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyTrackedResourcesQueryResults]:
        """policy_tracked_resources_list_query_results_for_resource_group

        Queries policy tracked resources under the resource group.

        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_resource_group_serialize(
            resource_group_name=resource_group_name,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_tracked_resources_list_query_results_for_resource_group_without_preload_content(
        self,
        resource_group_name: Annotated[StrictStr, Field(description="Resource group name.")],
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_tracked_resources_list_query_results_for_resource_group

        Queries policy tracked resources under the resource group.

        :param resource_group_name: Resource group name. (required)
        :type resource_group_name: str
        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_resource_group_serialize(
            resource_group_name=resource_group_name,
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_tracked_resources_list_query_results_for_resource_group_serialize(
        self,
        resource_group_name,
        policy_tracked_resources_resource,
        subscription_id,
        api_version,
        top,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if policy_tracked_resources_resource is not None:
            _path_params['policyTrackedResourcesResource'] = policy_tracked_resources_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def policy_tracked_resources_list_query_results_for_subscription(
        self,
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PolicyTrackedResourcesQueryResults:
        """policy_tracked_resources_list_query_results_for_subscription

        Queries policy tracked resources under the subscription.

        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_subscription_serialize(
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def policy_tracked_resources_list_query_results_for_subscription_with_http_info(
        self,
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PolicyTrackedResourcesQueryResults]:
        """policy_tracked_resources_list_query_results_for_subscription

        Queries policy tracked resources under the subscription.

        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_subscription_serialize(
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def policy_tracked_resources_list_query_results_for_subscription_without_preload_content(
        self,
        policy_tracked_resources_resource: Annotated[StrictStr, Field(description="The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed.")],
        subscription_id: Annotated[StrictStr, Field(description="Microsoft Azure subscription ID.")],
        api_version: Annotated[StrictStr, Field(description="Client Api Version.")],
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of records to return.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="OData filter expression.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """policy_tracked_resources_list_query_results_for_subscription

        Queries policy tracked resources under the subscription.

        :param policy_tracked_resources_resource: The name of the virtual resource under PolicyTrackedResources resource type; only \"default\" is allowed. (required)
        :type policy_tracked_resources_resource: str
        :param subscription_id: Microsoft Azure subscription ID. (required)
        :type subscription_id: str
        :param api_version: Client Api Version. (required)
        :type api_version: str
        :param top: Maximum number of records to return.
        :type top: int
        :param filter: OData filter expression.
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._policy_tracked_resources_list_query_results_for_subscription_serialize(
            policy_tracked_resources_resource=policy_tracked_resources_resource,
            subscription_id=subscription_id,
            api_version=api_version,
            top=top,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PolicyTrackedResourcesQueryResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _policy_tracked_resources_list_query_results_for_subscription_serialize(
        self,
        policy_tracked_resources_resource,
        subscription_id,
        api_version,
        top,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if policy_tracked_resources_resource is not None:
            _path_params['policyTrackedResourcesResource'] = policy_tracked_resources_resource
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



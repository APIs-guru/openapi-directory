# coding: utf-8

"""
    StorageManagementClient

    The Admin Storage Management Client.

    The version of the OpenAPI document: 2015-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.blob_service_settings import BlobServiceSettings

class TestBlobServiceSettings(unittest.TestCase):
    """BlobServiceSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BlobServiceSettings:
        """Test BlobServiceSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BlobServiceSettings`
        """
        model = BlobServiceSettings()
        if include_optional:
            return BlobServiceSettings(
                blob_svc_container_gc_interval = 56,
                blob_svc_shallow_gc_interval = 56,
                blob_svc_stream_map_min_container_occupancy_percent = 56,
                front_end_http_listen_port = 56,
                front_end_https_listen_port = 56,
                front_end_callback_threads_count = 56,
                front_end_cpu_based_keep_alive_throttling_cpu_monitor_interval_in_seconds = 56,
                front_end_cpu_based_keep_alive_throttling_enabled = True,
                front_end_cpu_based_keep_alive_throttling_percent_cpu_threshold = 1.337,
                front_end_cpu_based_keep_alive_throttling_percent_requests_to_throttle = 1.337,
                front_end_max_milliseconds_between_memory_samples = 56,
                front_end_memory_throttle_threshold_settings = '',
                front_end_memory_throttling_enabled = True,
                front_end_min_thread_pool_threads = 56,
                front_end_thread_pool_based_keep_alive_io_completion_threshold = 56,
                front_end_thread_pool_based_keep_alive_monitor_interval_in_seconds = 56,
                front_end_thread_pool_based_keep_alive_percentage = 1.337,
                front_end_thread_pool_based_keep_alive_worker_thread_threshold = 56,
                front_end_use_sla_time_in_availability = True
            )
        else:
            return BlobServiceSettings(
        )
        """

    def testBlobServiceSettings(self):
        """Test BlobServiceSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.operationalization_cluster_credentials import OperationalizationClusterCredentials

class TestOperationalizationClusterCredentials(unittest.TestCase):
    """OperationalizationClusterCredentials unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OperationalizationClusterCredentials:
        """Test OperationalizationClusterCredentials
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OperationalizationClusterCredentials`
        """
        model = OperationalizationClusterCredentials()
        if include_optional:
            return OperationalizationClusterCredentials(
                app_insights = openapi_client.models.app_insights_credentials.AppInsightsCredentials(
                    app_id = '', 
                    instrumentation_key = '', ),
                container_registry = openapi_client.models.container_registry_credentials.ContainerRegistryCredentials(
                    login_server = '', 
                    password = '', 
                    password2 = '', 
                    username = '', ),
                container_service = openapi_client.models.container_service_credentials.ContainerServiceCredentials(
                    acs_kube_config = '', 
                    image_pull_secret_name = '', 
                    service_principal_configuration = openapi_client.models.service_principal_properties.ServicePrincipalProperties(
                        client_id = '', 
                        secret = '', ), ),
                service_auth_configuration = openapi_client.models.service_auth_configuration.ServiceAuthConfiguration(
                    primary_auth_key_hash = '', 
                    secondary_auth_key_hash = '', ),
                ssl_configuration = openapi_client.models.ssl_configuration.SslConfiguration(
                    cert = '', 
                    cname = '', 
                    key = '', 
                    status = 'Enabled', ),
                storage_account = openapi_client.models.storage_account_credentials.StorageAccountCredentials(
                    primary_key = '', 
                    resource_id = '', 
                    secondary_key = '', )
            )
        else:
            return OperationalizationClusterCredentials(
        )
        """

    def testOperationalizationClusterCredentials(self):
        """Test OperationalizationClusterCredentials"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

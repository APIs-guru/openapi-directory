# coding: utf-8

"""
    Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.operationalization_cluster_properties import OperationalizationClusterProperties

class TestOperationalizationClusterProperties(unittest.TestCase):
    """OperationalizationClusterProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OperationalizationClusterProperties:
        """Test OperationalizationClusterProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OperationalizationClusterProperties`
        """
        model = OperationalizationClusterProperties()
        if include_optional:
            return OperationalizationClusterProperties(
                app_insights = openapi_client.models.app_insights_properties.AppInsightsProperties(
                    resource_id = '', ),
                cluster_type = 'ACS',
                container_registry = openapi_client.models.container_registry_properties.ContainerRegistryProperties(
                    resource_id = '', ),
                container_service = openapi_client.models.acs_cluster_properties.AcsClusterProperties(
                    agent_count = 1, 
                    agent_vm_size = 'Standard_D3_v2', 
                    cluster_fqdn = '', 
                    master_count = 1, 
                    orchestrator_properties = openapi_client.models.kubernetes_cluster_properties.KubernetesClusterProperties(
                        service_principal = openapi_client.models.service_principal_properties.ServicePrincipalProperties(
                            client_id = '', 
                            secret = '', ), ), 
                    orchestrator_type = 'Kubernetes', 
                    system_services = [
                        openapi_client.models.system_service.SystemService(
                            public_ip_address = '', 
                            system_service_type = 'None', 
                            version = '', )
                        ], ),
                created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                global_service_configuration = {
                    'key' : None
                    },
                modified_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                provisioning_errors = [
                    openapi_client.models.error_response_wrapper.ErrorResponseWrapper(
                        error = openapi_client.models.error_response.ErrorResponse(
                            code = '', 
                            details = [
                                openapi_client.models.error_detail.ErrorDetail(
                                    code = '', 
                                    message = '', )
                                ], 
                            message = '', ), )
                    ],
                provisioning_state = 'Unknown',
                storage_account = openapi_client.models.storage_account_properties.StorageAccountProperties(
                    resource_id = '', )
            )
        else:
            return OperationalizationClusterProperties(
                cluster_type = 'ACS',
        )
        """

    def testOperationalizationClusterProperties(self):
        """Test OperationalizationClusterProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

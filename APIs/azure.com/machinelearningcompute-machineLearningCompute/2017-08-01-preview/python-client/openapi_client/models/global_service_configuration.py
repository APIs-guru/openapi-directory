# coding: utf-8

"""
    Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_scale_configuration import AutoScaleConfiguration
from openapi_client.models.service_auth_configuration import ServiceAuthConfiguration
from openapi_client.models.ssl_configuration import SslConfiguration
from typing import Optional, Set
from typing_extensions import Self

class GlobalServiceConfiguration(BaseModel):
    """
    Global configuration for services in the cluster.
    """ # noqa: E501
    auto_scale: Optional[AutoScaleConfiguration] = Field(default=None, alias="autoScale")
    etag: Optional[StrictStr] = Field(default=None, description="The configuration ETag for updates.")
    service_auth: Optional[ServiceAuthConfiguration] = Field(default=None, alias="serviceAuth")
    ssl: Optional[SslConfiguration] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["autoScale", "etag", "serviceAuth", "ssl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalServiceConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_scale
        if self.auto_scale:
            _dict['autoScale'] = self.auto_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_auth
        if self.service_auth:
            _dict['serviceAuth'] = self.service_auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssl
        if self.ssl:
            _dict['ssl'] = self.ssl.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalServiceConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoScale": AutoScaleConfiguration.from_dict(obj["autoScale"]) if obj.get("autoScale") is not None else None,
            "etag": obj.get("etag"),
            "serviceAuth": ServiceAuthConfiguration.from_dict(obj["serviceAuth"]) if obj.get("serviceAuth") is not None else None,
            "ssl": SslConfiguration.from_dict(obj["ssl"]) if obj.get("ssl") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



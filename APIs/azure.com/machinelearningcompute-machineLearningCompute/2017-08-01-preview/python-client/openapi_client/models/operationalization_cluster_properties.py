# coding: utf-8

"""
    Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-08-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acs_cluster_properties import AcsClusterProperties
from openapi_client.models.app_insights_properties import AppInsightsProperties
from openapi_client.models.container_registry_properties import ContainerRegistryProperties
from openapi_client.models.error_response_wrapper import ErrorResponseWrapper
from openapi_client.models.global_service_configuration import GlobalServiceConfiguration
from openapi_client.models.storage_account_properties import StorageAccountProperties
from typing import Optional, Set
from typing_extensions import Self

class OperationalizationClusterProperties(BaseModel):
    """
    Properties of an operationalization cluster
    """ # noqa: E501
    app_insights: Optional[AppInsightsProperties] = Field(default=None, alias="appInsights")
    cluster_type: StrictStr = Field(description="The cluster type.", alias="clusterType")
    container_registry: Optional[ContainerRegistryProperties] = Field(default=None, alias="containerRegistry")
    container_service: Optional[AcsClusterProperties] = Field(default=None, alias="containerService")
    created_on: Optional[datetime] = Field(default=None, description="The date and time when the cluster was created.", alias="createdOn")
    description: Optional[StrictStr] = Field(default=None, description="The description of the cluster.")
    global_service_configuration: Optional[GlobalServiceConfiguration] = Field(default=None, alias="globalServiceConfiguration")
    modified_on: Optional[datetime] = Field(default=None, description="The date and time when the cluster was last modified.", alias="modifiedOn")
    provisioning_errors: Optional[List[ErrorResponseWrapper]] = Field(default=None, description="List of provisioning errors reported by the resource provider.", alias="provisioningErrors")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.", alias="provisioningState")
    storage_account: Optional[StorageAccountProperties] = Field(default=None, alias="storageAccount")
    __properties: ClassVar[List[str]] = ["appInsights", "clusterType", "containerRegistry", "containerService", "createdOn", "description", "globalServiceConfiguration", "modifiedOn", "provisioningErrors", "provisioningState", "storageAccount"]

    @field_validator('cluster_type')
    def cluster_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACS', 'Local']):
            raise ValueError("must be one of enum values ('ACS', 'Local')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Updating', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Unknown', 'Updating', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationalizationClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_on",
            "modified_on",
            "provisioning_errors",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_insights
        if self.app_insights:
            _dict['appInsights'] = self.app_insights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_registry
        if self.container_registry:
            _dict['containerRegistry'] = self.container_registry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_service
        if self.container_service:
            _dict['containerService'] = self.container_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of global_service_configuration
        if self.global_service_configuration:
            _dict['globalServiceConfiguration'] = self.global_service_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in provisioning_errors (list)
        _items = []
        if self.provisioning_errors:
            for _item_provisioning_errors in self.provisioning_errors:
                if _item_provisioning_errors:
                    _items.append(_item_provisioning_errors.to_dict())
            _dict['provisioningErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of storage_account
        if self.storage_account:
            _dict['storageAccount'] = self.storage_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationalizationClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appInsights": AppInsightsProperties.from_dict(obj["appInsights"]) if obj.get("appInsights") is not None else None,
            "clusterType": obj.get("clusterType"),
            "containerRegistry": ContainerRegistryProperties.from_dict(obj["containerRegistry"]) if obj.get("containerRegistry") is not None else None,
            "containerService": AcsClusterProperties.from_dict(obj["containerService"]) if obj.get("containerService") is not None else None,
            "createdOn": obj.get("createdOn"),
            "description": obj.get("description"),
            "globalServiceConfiguration": GlobalServiceConfiguration.from_dict(obj["globalServiceConfiguration"]) if obj.get("globalServiceConfiguration") is not None else None,
            "modifiedOn": obj.get("modifiedOn"),
            "provisioningErrors": [ErrorResponseWrapper.from_dict(_item) for _item in obj["provisioningErrors"]] if obj.get("provisioningErrors") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "storageAccount": StorageAccountProperties.from_dict(obj["storageAccount"]) if obj.get("storageAccount") is not None else None
        })
        return _obj



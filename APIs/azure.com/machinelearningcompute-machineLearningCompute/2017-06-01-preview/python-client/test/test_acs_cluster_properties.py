# coding: utf-8

"""
    Azure Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.acs_cluster_properties import AcsClusterProperties

class TestAcsClusterProperties(unittest.TestCase):
    """AcsClusterProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AcsClusterProperties:
        """Test AcsClusterProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AcsClusterProperties`
        """
        model = AcsClusterProperties()
        if include_optional:
            return AcsClusterProperties(
                agent_count = 1,
                agent_vm_size = 'Standard_D2_v2',
                cluster_fqdn = '',
                orchestrator_properties = openapi_client.models.kubernetes_cluster_properties.KubernetesClusterProperties(
                    service_principal = openapi_client.models.service_principal_properties.ServicePrincipalProperties(
                        client_id = '', 
                        secret = '', ), ),
                orchestrator_type = 'Kubernetes',
                system_services = [
                    'Scoring'
                    ]
            )
        else:
            return AcsClusterProperties(
                orchestrator_properties = openapi_client.models.kubernetes_cluster_properties.KubernetesClusterProperties(
                    service_principal = openapi_client.models.service_principal_properties.ServicePrincipalProperties(
                        client_id = '', 
                        secret = '', ), ),
                orchestrator_type = 'Kubernetes',
        )
        """

    def testAcsClusterProperties(self):
        """Test AcsClusterProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

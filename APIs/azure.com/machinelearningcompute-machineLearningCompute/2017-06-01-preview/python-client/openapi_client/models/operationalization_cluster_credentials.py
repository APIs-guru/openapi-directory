# coding: utf-8

"""
    Azure Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_insights_credentials import AppInsightsCredentials
from openapi_client.models.container_registry_credentials import ContainerRegistryCredentials
from openapi_client.models.container_service_credentials import ContainerServiceCredentials
from openapi_client.models.service_auth_configuration import ServiceAuthConfiguration
from openapi_client.models.ssl_configuration import SslConfiguration
from openapi_client.models.storage_account_credentials import StorageAccountCredentials
from typing import Optional, Set
from typing_extensions import Self

class OperationalizationClusterCredentials(BaseModel):
    """
    Credentials to resources in the cluster.
    """ # noqa: E501
    app_insights: Optional[AppInsightsCredentials] = Field(default=None, alias="appInsights")
    container_registry: Optional[ContainerRegistryCredentials] = Field(default=None, alias="containerRegistry")
    container_service: Optional[ContainerServiceCredentials] = Field(default=None, alias="containerService")
    service_auth_configuration: Optional[ServiceAuthConfiguration] = Field(default=None, alias="serviceAuthConfiguration")
    ssl_configuration: Optional[SslConfiguration] = Field(default=None, alias="sslConfiguration")
    storage_account: Optional[StorageAccountCredentials] = Field(default=None, alias="storageAccount")
    __properties: ClassVar[List[str]] = ["appInsights", "containerRegistry", "containerService", "serviceAuthConfiguration", "sslConfiguration", "storageAccount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationalizationClusterCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_insights
        if self.app_insights:
            _dict['appInsights'] = self.app_insights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_registry
        if self.container_registry:
            _dict['containerRegistry'] = self.container_registry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_service
        if self.container_service:
            _dict['containerService'] = self.container_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_auth_configuration
        if self.service_auth_configuration:
            _dict['serviceAuthConfiguration'] = self.service_auth_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssl_configuration
        if self.ssl_configuration:
            _dict['sslConfiguration'] = self.ssl_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_account
        if self.storage_account:
            _dict['storageAccount'] = self.storage_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationalizationClusterCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appInsights": AppInsightsCredentials.from_dict(obj["appInsights"]) if obj.get("appInsights") is not None else None,
            "containerRegistry": ContainerRegistryCredentials.from_dict(obj["containerRegistry"]) if obj.get("containerRegistry") is not None else None,
            "containerService": ContainerServiceCredentials.from_dict(obj["containerService"]) if obj.get("containerService") is not None else None,
            "serviceAuthConfiguration": ServiceAuthConfiguration.from_dict(obj["serviceAuthConfiguration"]) if obj.get("serviceAuthConfiguration") is not None else None,
            "sslConfiguration": SslConfiguration.from_dict(obj["sslConfiguration"]) if obj.get("sslConfiguration") is not None else None,
            "storageAccount": StorageAccountCredentials.from_dict(obj["storageAccount"]) if obj.get("storageAccount") is not None else None
        })
        return _obj



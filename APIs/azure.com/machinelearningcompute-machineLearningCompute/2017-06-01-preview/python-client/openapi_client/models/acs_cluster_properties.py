# coding: utf-8

"""
    Azure Machine Learning Compute Management Client

    These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>

    The version of the OpenAPI document: 2017-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.kubernetes_cluster_properties import KubernetesClusterProperties
from openapi_client.models.system_services import SystemServices
from typing import Optional, Set
from typing_extensions import Self

class AcsClusterProperties(BaseModel):
    """
    Information about the container service backing the cluster
    """ # noqa: E501
    agent_count: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="The number of agent nodes in the Container Service. This can be changed to scale the cluster.", alias="agentCount")
    agent_vm_size: Optional[StrictStr] = Field(default='D2_v2', description="The Azure VM size of the agent VM nodes. This cannot be changed once the cluster is created.", alias="agentVmSize")
    cluster_fqdn: Optional[StrictStr] = Field(default=None, description="The FQDN of the cluster. ", alias="clusterFqdn")
    orchestrator_properties: KubernetesClusterProperties = Field(alias="orchestratorProperties")
    orchestrator_type: StrictStr = Field(description="Type of orchestrator. It cannot be changed once the cluster is created.", alias="orchestratorType")
    system_services: Optional[List[SystemServices]] = Field(default=None, description="The system services deployed to the cluster", alias="systemServices")
    __properties: ClassVar[List[str]] = ["agentCount", "agentVmSize", "clusterFqdn", "orchestratorProperties", "orchestratorType", "systemServices"]

    @field_validator('agent_vm_size')
    def agent_vm_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1', 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12', 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2', 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5']):
            raise ValueError("must be one of enum values ('Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1', 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12', 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2', 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5')")
        return value

    @field_validator('orchestrator_type')
    def orchestrator_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Kubernetes']):
            raise ValueError("must be one of enum values ('Kubernetes')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcsClusterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_fqdn",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of orchestrator_properties
        if self.orchestrator_properties:
            _dict['orchestratorProperties'] = self.orchestrator_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcsClusterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agentCount": obj.get("agentCount"),
            "agentVmSize": obj.get("agentVmSize") if obj.get("agentVmSize") is not None else 'D2_v2',
            "clusterFqdn": obj.get("clusterFqdn"),
            "orchestratorProperties": KubernetesClusterProperties.from_dict(obj["orchestratorProperties"]) if obj.get("orchestratorProperties") is not None else None,
            "orchestratorType": obj.get("orchestratorType"),
            "systemServices": obj.get("systemServices")
        })
        return _obj



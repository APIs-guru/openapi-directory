# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2018-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReportsListByApi200ResponseValueInner(BaseModel):
    """
    Report data.
    """ # noqa: E501
    api_id: Optional[StrictStr] = Field(default=None, description="API identifier path. /apis/{apiId}", alias="apiId")
    api_region: Optional[StrictStr] = Field(default=None, description="API region identifier.", alias="apiRegion")
    api_time_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average time it took to process request.", alias="apiTimeAvg")
    api_time_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum time it took to process request.", alias="apiTimeMax")
    api_time_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum time it took to process request.", alias="apiTimeMin")
    bandwidth: Optional[StrictInt] = Field(default=None, description="Bandwidth consumed.")
    cache_hit_count: Optional[StrictInt] = Field(default=None, description="Number of times when content was served from cache policy.", alias="cacheHitCount")
    cache_miss_count: Optional[StrictInt] = Field(default=None, description="Number of times content was fetched from backend.", alias="cacheMissCount")
    call_count_blocked: Optional[StrictInt] = Field(default=None, description="Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests", alias="callCountBlocked")
    call_count_failed: Optional[StrictInt] = Field(default=None, description="Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600", alias="callCountFailed")
    call_count_other: Optional[StrictInt] = Field(default=None, description="Number of other calls.", alias="callCountOther")
    call_count_success: Optional[StrictInt] = Field(default=None, description="Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect", alias="callCountSuccess")
    call_count_total: Optional[StrictInt] = Field(default=None, description="Total number of calls.", alias="callCountTotal")
    country: Optional[StrictStr] = Field(default=None, description="Country to which this record data is related.")
    interval: Optional[StrictStr] = Field(default=None, description="Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).")
    name: Optional[StrictStr] = Field(default=None, description="Name depending on report endpoint specifies product, API, operation or developer name.")
    operation_id: Optional[StrictStr] = Field(default=None, description="Operation identifier path. /apis/{apiId}/operations/{operationId}", alias="operationId")
    product_id: Optional[StrictStr] = Field(default=None, description="Product identifier path. /products/{productId}", alias="productId")
    region: Optional[StrictStr] = Field(default=None, description="Country region to which this record data is related.")
    service_time_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average time it took to process request on backend.", alias="serviceTimeAvg")
    service_time_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum time it took to process request on backend.", alias="serviceTimeMax")
    service_time_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum time it took to process request on backend.", alias="serviceTimeMin")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription identifier path. /subscriptions/{subscriptionId}", alias="subscriptionId")
    timestamp: Optional[datetime] = Field(default=None, description="Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ")
    user_id: Optional[StrictStr] = Field(default=None, description="User identifier path. /users/{userId}", alias="userId")
    zip: Optional[StrictStr] = Field(default=None, description="Zip code to which this record data is related.")
    __properties: ClassVar[List[str]] = ["apiId", "apiRegion", "apiTimeAvg", "apiTimeMax", "apiTimeMin", "bandwidth", "cacheHitCount", "cacheMissCount", "callCountBlocked", "callCountFailed", "callCountOther", "callCountSuccess", "callCountTotal", "country", "interval", "name", "operationId", "productId", "region", "serviceTimeAvg", "serviceTimeMax", "serviceTimeMin", "subscriptionId", "timestamp", "userId", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportsListByApi200ResponseValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "product_id",
            "user_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportsListByApi200ResponseValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiId": obj.get("apiId"),
            "apiRegion": obj.get("apiRegion"),
            "apiTimeAvg": obj.get("apiTimeAvg"),
            "apiTimeMax": obj.get("apiTimeMax"),
            "apiTimeMin": obj.get("apiTimeMin"),
            "bandwidth": obj.get("bandwidth"),
            "cacheHitCount": obj.get("cacheHitCount"),
            "cacheMissCount": obj.get("cacheMissCount"),
            "callCountBlocked": obj.get("callCountBlocked"),
            "callCountFailed": obj.get("callCountFailed"),
            "callCountOther": obj.get("callCountOther"),
            "callCountSuccess": obj.get("callCountSuccess"),
            "callCountTotal": obj.get("callCountTotal"),
            "country": obj.get("country"),
            "interval": obj.get("interval"),
            "name": obj.get("name"),
            "operationId": obj.get("operationId"),
            "productId": obj.get("productId"),
            "region": obj.get("region"),
            "serviceTimeAvg": obj.get("serviceTimeAvg"),
            "serviceTimeMax": obj.get("serviceTimeMax"),
            "serviceTimeMin": obj.get("serviceTimeMin"),
            "subscriptionId": obj.get("subscriptionId"),
            "timestamp": obj.get("timestamp"),
            "userId": obj.get("userId"),
            "zip": obj.get("zip")
        })
        return _obj



# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.

    The version of the OpenAPI document: 2019-12-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReportsListByRequest200ResponseValueInner(BaseModel):
    """
    Request Report data.
    """ # noqa: E501
    api_id: Optional[StrictStr] = Field(default=None, description="API identifier path. /apis/{apiId}", alias="apiId")
    api_region: Optional[StrictStr] = Field(default=None, description="Azure region where the gateway that processed this request is located.", alias="apiRegion")
    api_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total time it took to process this request.", alias="apiTime")
    backend_response_code: Optional[StrictStr] = Field(default=None, description="The HTTP status code received by the gateway as a result of forwarding this request to the backend.", alias="backendResponseCode")
    cache: Optional[StrictStr] = Field(default=None, description="Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend.")
    ip_address: Optional[StrictStr] = Field(default=None, description="The client IP address associated with this request.", alias="ipAddress")
    method: Optional[StrictStr] = Field(default=None, description="The HTTP method associated with this request..")
    operation_id: Optional[StrictStr] = Field(default=None, description="Operation identifier path. /apis/{apiId}/operations/{operationId}", alias="operationId")
    product_id: Optional[StrictStr] = Field(default=None, description="Product identifier path. /products/{productId}", alias="productId")
    request_id: Optional[StrictStr] = Field(default=None, description="Request Identifier.", alias="requestId")
    request_size: Optional[StrictInt] = Field(default=None, description="The size of this request..", alias="requestSize")
    response_code: Optional[StrictInt] = Field(default=None, description="The HTTP status code returned by the gateway.", alias="responseCode")
    response_size: Optional[StrictInt] = Field(default=None, description="The size of the response returned by the gateway.", alias="responseSize")
    service_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="he time it took to forward this request to the backend and get the response back.", alias="serviceTime")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Subscription identifier path. /subscriptions/{subscriptionId}", alias="subscriptionId")
    timestamp: Optional[datetime] = Field(default=None, description="The date and time when this request was received by the gateway in ISO 8601 format.")
    url: Optional[StrictStr] = Field(default=None, description="The full URL associated with this request.")
    user_id: Optional[StrictStr] = Field(default=None, description="User identifier path. /users/{userId}", alias="userId")
    __properties: ClassVar[List[str]] = ["apiId", "apiRegion", "apiTime", "backendResponseCode", "cache", "ipAddress", "method", "operationId", "productId", "requestId", "requestSize", "responseCode", "responseSize", "serviceTime", "subscriptionId", "timestamp", "url", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportsListByRequest200ResponseValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "product_id",
            "user_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportsListByRequest200ResponseValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiId": obj.get("apiId"),
            "apiRegion": obj.get("apiRegion"),
            "apiTime": obj.get("apiTime"),
            "backendResponseCode": obj.get("backendResponseCode"),
            "cache": obj.get("cache"),
            "ipAddress": obj.get("ipAddress"),
            "method": obj.get("method"),
            "operationId": obj.get("operationId"),
            "productId": obj.get("productId"),
            "requestId": obj.get("requestId"),
            "requestSize": obj.get("requestSize"),
            "responseCode": obj.get("responseCode"),
            "responseSize": obj.get("responseSize"),
            "serviceTime": obj.get("serviceTime"),
            "subscriptionId": obj.get("subscriptionId"),
            "timestamp": obj.get("timestamp"),
            "url": obj.get("url"),
            "userId": obj.get("userId")
        })
        return _obj



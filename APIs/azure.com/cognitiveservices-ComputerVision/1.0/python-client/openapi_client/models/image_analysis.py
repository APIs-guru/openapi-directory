# coding: utf-8

"""
    Computer Vision

    The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.adult_info import AdultInfo
from openapi_client.models.category import Category
from openapi_client.models.color_info import ColorInfo
from openapi_client.models.face_description import FaceDescription
from openapi_client.models.image_description_details import ImageDescriptionDetails
from openapi_client.models.image_metadata import ImageMetadata
from openapi_client.models.image_tag import ImageTag
from openapi_client.models.image_type import ImageType
from typing import Optional, Set
from typing_extensions import Self

class ImageAnalysis(BaseModel):
    """
    Result of AnalyzeImage operation.
    """ # noqa: E501
    adult: Optional[AdultInfo] = None
    categories: Optional[List[Category]] = Field(default=None, description="An array indicating identified categories.")
    color: Optional[ColorInfo] = None
    description: Optional[ImageDescriptionDetails] = None
    faces: Optional[List[FaceDescription]] = Field(default=None, description="An array of possible faces within the image.")
    image_type: Optional[ImageType] = Field(default=None, alias="imageType")
    metadata: Optional[ImageMetadata] = None
    request_id: Optional[StrictStr] = Field(default=None, description="Id of the request for tracking purposes.", alias="requestId")
    tags: Optional[List[ImageTag]] = Field(default=None, description="A list of tags with confidence level.")
    __properties: ClassVar[List[str]] = ["adult", "categories", "color", "description", "faces", "imageType", "metadata", "requestId", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageAnalysis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adult
        if self.adult:
            _dict['adult'] = self.adult.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in faces (list)
        _items = []
        if self.faces:
            for _item_faces in self.faces:
                if _item_faces:
                    _items.append(_item_faces.to_dict())
            _dict['faces'] = _items
        # override the default output from pydantic by calling `to_dict()` of image_type
        if self.image_type:
            _dict['imageType'] = self.image_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageAnalysis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adult": AdultInfo.from_dict(obj["adult"]) if obj.get("adult") is not None else None,
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "color": ColorInfo.from_dict(obj["color"]) if obj.get("color") is not None else None,
            "description": ImageDescriptionDetails.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "faces": [FaceDescription.from_dict(_item) for _item in obj["faces"]] if obj.get("faces") is not None else None,
            "imageType": ImageType.from_dict(obj["imageType"]) if obj.get("imageType") is not None else None,
            "metadata": ImageMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "requestId": obj.get("requestId"),
            "tags": [ImageTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None
        })
        return _obj



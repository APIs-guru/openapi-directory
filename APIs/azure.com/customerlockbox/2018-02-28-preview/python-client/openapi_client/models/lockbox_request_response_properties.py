# coding: utf-8

"""
    Customer Lockbox

    Azure Customer Lockbox API Reference

    The version of the OpenAPI document: 2018-02-28-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lockbox_request_status import LockboxRequestStatus
from typing import Optional, Set
from typing_extensions import Self

class LockboxRequestResponseProperties(BaseModel):
    """
    The properties that are associated with a lockbox request.
    """ # noqa: E501
    created_date_time: Optional[datetime] = Field(default=None, description="The creation time of the request.", alias="createdDateTime")
    duration: Optional[StrictInt] = Field(default=None, description="The duration of the request in hours.")
    expiration_date_time: Optional[datetime] = Field(default=None, description="The expiration time of the request.", alias="expirationDateTime")
    justification: Optional[StrictStr] = Field(default=None, description="The justification of the requestor.")
    request_id: Optional[StrictStr] = Field(default=None, description="The Lockbox request ID.", alias="requestId")
    requested_resource_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of resource IDs associated with the Lockbox request separated by ','.", alias="requestedResourceIds")
    resource_type: Optional[StrictStr] = Field(default=None, description="The resource type of the requested resources.", alias="resourceType")
    status: Optional[LockboxRequestStatus] = None
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription ID.", alias="subscriptionId")
    support_case_url: Optional[StrictStr] = Field(default=None, description="The url of the support case.", alias="supportCaseUrl")
    support_request: Optional[StrictStr] = Field(default=None, description="The id of the support request associated.", alias="supportRequest")
    __properties: ClassVar[List[str]] = ["createdDateTime", "duration", "expirationDateTime", "justification", "requestId", "requestedResourceIds", "resourceType", "status", "subscriptionId", "supportCaseUrl", "supportRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LockboxRequestResponseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_date_time",
            "duration",
            "expiration_date_time",
            "justification",
            "request_id",
            "requested_resource_ids",
            "resource_type",
            "subscription_id",
            "support_case_url",
            "support_request",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LockboxRequestResponseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDateTime": obj.get("createdDateTime"),
            "duration": obj.get("duration"),
            "expirationDateTime": obj.get("expirationDateTime"),
            "justification": obj.get("justification"),
            "requestId": obj.get("requestId"),
            "requestedResourceIds": obj.get("requestedResourceIds"),
            "resourceType": obj.get("resourceType"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "supportCaseUrl": obj.get("supportCaseUrl"),
            "supportRequest": obj.get("supportRequest")
        })
        return _obj



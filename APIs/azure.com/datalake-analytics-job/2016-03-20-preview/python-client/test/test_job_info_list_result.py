# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2016-03-20-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_info_list_result import JobInfoListResult

class TestJobInfoListResult(unittest.TestCase):
    """JobInfoListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobInfoListResult:
        """Test JobInfoListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobInfoListResult`
        """
        model = JobInfoListResult()
        if include_optional:
            return JobInfoListResult(
                count = 56,
                next_link = '',
                value = [
                    openapi_client.models.job_information.JobInformation(
                        degree_of_parallelism = 56, 
                        degree_of_parallelism_percent = 1.337, 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        error_message = [
                            openapi_client.models.job_error_details.JobErrorDetails(
                                description = '', 
                                details = '', 
                                end_offset = 56, 
                                error_id = '', 
                                file_path = '', 
                                help_link = '', 
                                inner_error = openapi_client.models.job_inner_error.JobInnerError(
                                    component = '', 
                                    description = '', 
                                    details = '', 
                                    diagnostic_code = 56, 
                                    error_id = '', 
                                    help_link = '', 
                                    internal_diagnostics = '', 
                                    message = '', 
                                    resolution = '', 
                                    severity = 'Warning', 
                                    source = '', ), 
                                internal_diagnostics = '', 
                                line_number = 56, 
                                message = '', 
                                resolution = '', 
                                severity = 'Warning', 
                                source = '', 
                                start_offset = 56, )
                            ], 
                        hierarchy_queue_node = '', 
                        job_id = '', 
                        log_file_patterns = [
                            ''
                            ], 
                        log_folder = '', 
                        name = '', 
                        priority = 56, 
                        properties = openapi_client.models.job_properties.JobProperties(
                            runtime_version = '', 
                            script = '', 
                            type = '', ), 
                        result = 'None', 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        state = 'Accepted', 
                        state_audit_records = [
                            openapi_client.models.job_state_audit_record.JobStateAuditRecord(
                                details = '', 
                                new_state = '', 
                                requested_by_user = '', 
                                time_stamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        submit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        submitter = '', 
                        type = 'USql', )
                    ]
            )
        else:
            return JobInfoListResult(
        )
        """

    def testJobInfoListResult(self):
        """Test JobInfoListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.job_error_details import JobErrorDetails
from openapi_client.models.job_properties import JobProperties
from openapi_client.models.job_state_audit_record import JobStateAuditRecord
from typing import Optional, Set
from typing_extensions import Self

class JobInformation(BaseModel):
    """
    The common Data Lake Analytics job information properties.
    """ # noqa: E501
    degree_of_parallelism: Optional[StrictInt] = Field(default=None, description="Gets or sets the degree of parallelism used for this job. This must be greater than 0.", alias="degreeOfParallelism")
    degree_of_parallelism_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="the degree of parallelism in percentage used for this job.", alias="degreeOfParallelismPercent")
    end_time: Optional[datetime] = Field(default=None, description="Gets the completion time of the job.", alias="endTime")
    error_message: Optional[List[JobErrorDetails]] = Field(default=None, description="Gets the error message details for the job, if the job failed.", alias="errorMessage")
    hierarchy_queue_node: Optional[StrictStr] = Field(default=None, description="the name of hierarchy queue node this job is assigned to, null if job has not been assigned yet or the account doesn't have hierarchy queue.", alias="hierarchyQueueNode")
    job_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the job's unique identifier (a GUID).", alias="jobId")
    name: StrictStr = Field(description="Gets or sets the friendly name of the job.")
    priority: Optional[StrictInt] = Field(default=None, description="Gets or sets the priority value for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.")
    properties: JobProperties
    result: Optional[StrictStr] = Field(default=None, description="Gets the result of job execution or the current result of the running job.")
    start_time: Optional[datetime] = Field(default=None, description="Gets the start time of the job.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Gets the job state. When the job is in the Ended state, refer to Result and ErrorMessage for details.")
    state_audit_records: Optional[List[JobStateAuditRecord]] = Field(default=None, description="Gets the job state audit records, indicating when various operations have been performed on this job.", alias="stateAuditRecords")
    submit_time: Optional[datetime] = Field(default=None, description="Gets the time the job was submitted to the service.", alias="submitTime")
    submitter: Optional[StrictStr] = Field(default=None, description="Gets or sets the user or account that submitted the job.")
    type: StrictStr = Field(description="Gets or sets the job type of the current job (Hive or USql).")
    __properties: ClassVar[List[str]] = ["degreeOfParallelism", "degreeOfParallelismPercent", "endTime", "errorMessage", "hierarchyQueueNode", "jobId", "name", "priority", "properties", "result", "startTime", "state", "stateAuditRecords", "submitTime", "submitter", "type"]

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Succeeded', 'Cancelled', 'Failed']):
            raise ValueError("must be one of enum values ('None', 'Succeeded', 'Cancelled', 'Failed')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running', 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity']):
            raise ValueError("must be one of enum values ('Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running', 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['USql', 'Hive']):
            raise ValueError("must be one of enum values ('USql', 'Hive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "error_message",
            "hierarchy_queue_node",
            "result",
            "start_time",
            "state",
            "state_audit_records",
            "submit_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_message (list)
        _items = []
        if self.error_message:
            for _item_error_message in self.error_message:
                if _item_error_message:
                    _items.append(_item_error_message.to_dict())
            _dict['errorMessage'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in state_audit_records (list)
        _items = []
        if self.state_audit_records:
            for _item_state_audit_records in self.state_audit_records:
                if _item_state_audit_records:
                    _items.append(_item_state_audit_records.to_dict())
            _dict['stateAuditRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "degreeOfParallelism": obj.get("degreeOfParallelism"),
            "degreeOfParallelismPercent": obj.get("degreeOfParallelismPercent"),
            "endTime": obj.get("endTime"),
            "errorMessage": [JobErrorDetails.from_dict(_item) for _item in obj["errorMessage"]] if obj.get("errorMessage") is not None else None,
            "hierarchyQueueNode": obj.get("hierarchyQueueNode"),
            "jobId": obj.get("jobId"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "properties": JobProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "result": obj.get("result"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "stateAuditRecords": [JobStateAuditRecord.from_dict(_item) for _item in obj["stateAuditRecords"]] if obj.get("stateAuditRecords") is not None else None,
            "submitTime": obj.get("submitTime"),
            "submitter": obj.get("submitter"),
            "type": obj.get("type")
        })
        return _obj



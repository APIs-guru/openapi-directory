# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2015-11-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobStatisticsVertexStage(BaseModel):
    """
    The Data Lake Analytics U-SQL job statistics vertex stage information.
    """ # noqa: E501
    data_read: Optional[StrictInt] = Field(default=None, description="Gets the amount of data read, in bytes.", alias="dataRead")
    data_read_cross_pod: Optional[StrictInt] = Field(default=None, description="Gets the amount of data read across multiple pods, in bytes.", alias="dataReadCrossPod")
    data_read_intra_pod: Optional[StrictInt] = Field(default=None, description="Gets the amount of data read in one pod, in bytes.", alias="dataReadIntraPod")
    data_to_read: Optional[StrictInt] = Field(default=None, description="Gets the amount of data remaining to be read, in bytes.", alias="dataToRead")
    data_written: Optional[StrictInt] = Field(default=None, description="Gets the amount of data written, in bytes.", alias="dataWritten")
    duplicate_discard_count: Optional[StrictInt] = Field(default=None, description="Gets the number of duplicates that were discarded.", alias="duplicateDiscardCount")
    failed_count: Optional[StrictInt] = Field(default=None, description="Gets the number of failures that occurred in this stage.", alias="failedCount")
    max_vertex_data_read: Optional[StrictInt] = Field(default=None, description="Gets the maximum amount of data read in a single vertex, in bytes.", alias="maxVertexDataRead")
    min_vertex_data_read: Optional[StrictInt] = Field(default=None, description="Gets the minimum amount of data read in a single vertex, in bytes.", alias="minVertexDataRead")
    read_failure_count: Optional[StrictInt] = Field(default=None, description="Gets the number of read failures in this stage.", alias="readFailureCount")
    revocation_count: Optional[StrictInt] = Field(default=None, description="Gets the number of vertices that were revoked during this stage.", alias="revocationCount")
    running_count: Optional[StrictInt] = Field(default=None, description="Gets the number of currently running vertices in this stage.", alias="runningCount")
    scheduled_count: Optional[StrictInt] = Field(default=None, description="Gets the number of currently scheduled vertices in this stage", alias="scheduledCount")
    stage_name: Optional[StrictStr] = Field(default=None, description="Gets the name of this stage in job execution.", alias="stageName")
    succeeded_count: Optional[StrictInt] = Field(default=None, description="Gets the number of vertices that succeeded in this stage.", alias="succeededCount")
    temp_data_written: Optional[StrictInt] = Field(default=None, description="Gets the amount of temporary data written, in bytes.", alias="tempDataWritten")
    total_count: Optional[StrictInt] = Field(default=None, description="Gets the total vertex count for this stage.", alias="totalCount")
    total_failed_time: Optional[StrictStr] = Field(default=None, description="Gets the amount of time that failed vertices took up in this stage.", alias="totalFailedTime")
    total_progress: Optional[StrictInt] = Field(default=None, description="Gets the current progress of this stage, as a percentage.", alias="totalProgress")
    total_succeeded_time: Optional[StrictStr] = Field(default=None, description="Gets the amount of time all successful vertices took in this stage.", alias="totalSucceededTime")
    __properties: ClassVar[List[str]] = ["dataRead", "dataReadCrossPod", "dataReadIntraPod", "dataToRead", "dataWritten", "duplicateDiscardCount", "failedCount", "maxVertexDataRead", "minVertexDataRead", "readFailureCount", "revocationCount", "runningCount", "scheduledCount", "stageName", "succeededCount", "tempDataWritten", "totalCount", "totalFailedTime", "totalProgress", "totalSucceededTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStatisticsVertexStage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_read",
            "data_read_cross_pod",
            "data_read_intra_pod",
            "data_to_read",
            "data_written",
            "duplicate_discard_count",
            "failed_count",
            "max_vertex_data_read",
            "min_vertex_data_read",
            "read_failure_count",
            "revocation_count",
            "running_count",
            "scheduled_count",
            "stage_name",
            "succeeded_count",
            "temp_data_written",
            "total_count",
            "total_failed_time",
            "total_progress",
            "total_succeeded_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStatisticsVertexStage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataRead": obj.get("dataRead"),
            "dataReadCrossPod": obj.get("dataReadCrossPod"),
            "dataReadIntraPod": obj.get("dataReadIntraPod"),
            "dataToRead": obj.get("dataToRead"),
            "dataWritten": obj.get("dataWritten"),
            "duplicateDiscardCount": obj.get("duplicateDiscardCount"),
            "failedCount": obj.get("failedCount"),
            "maxVertexDataRead": obj.get("maxVertexDataRead"),
            "minVertexDataRead": obj.get("minVertexDataRead"),
            "readFailureCount": obj.get("readFailureCount"),
            "revocationCount": obj.get("revocationCount"),
            "runningCount": obj.get("runningCount"),
            "scheduledCount": obj.get("scheduledCount"),
            "stageName": obj.get("stageName"),
            "succeededCount": obj.get("succeededCount"),
            "tempDataWritten": obj.get("tempDataWritten"),
            "totalCount": obj.get("totalCount"),
            "totalFailedTime": obj.get("totalFailedTime"),
            "totalProgress": obj.get("totalProgress"),
            "totalSucceededTime": obj.get("totalSucceededTime")
        })
        return _obj



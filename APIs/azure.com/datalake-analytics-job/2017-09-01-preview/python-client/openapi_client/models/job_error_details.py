# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_inner_error import JobInnerError
from typing import Optional, Set
from typing_extensions import Self

class JobErrorDetails(BaseModel):
    """
    The Data Lake Analytics job error details.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The error message description.")
    details: Optional[StrictStr] = Field(default=None, description="The details of the error message.")
    end_offset: Optional[StrictInt] = Field(default=None, description="The end offset in the job where the error was found.", alias="endOffset")
    error_id: Optional[StrictStr] = Field(default=None, description="The specific identifier for the type of error encountered in the job.", alias="errorId")
    file_path: Optional[StrictStr] = Field(default=None, description="The path to any supplemental error files, if any.", alias="filePath")
    help_link: Optional[StrictStr] = Field(default=None, description="The link to MSDN or Azure help for this type of error, if any.", alias="helpLink")
    inner_error: Optional[JobInnerError] = Field(default=None, alias="innerError")
    internal_diagnostics: Optional[StrictStr] = Field(default=None, description="The internal diagnostic stack trace if the user requesting the job error details has sufficient permissions it will be retrieved, otherwise it will be empty.", alias="internalDiagnostics")
    line_number: Optional[StrictInt] = Field(default=None, description="The specific line number in the job where the error occurred.", alias="lineNumber")
    message: Optional[StrictStr] = Field(default=None, description="The user friendly error message for the failure.")
    resolution: Optional[StrictStr] = Field(default=None, description="The recommended resolution for the failure, if any.")
    severity: Optional[StrictStr] = Field(default=None, description="The severity level of the failure.")
    source: Optional[StrictStr] = Field(default=None, description="The ultimate source of the failure (usually either SYSTEM or USER).")
    start_offset: Optional[StrictInt] = Field(default=None, description="The start offset in the job where the error was found", alias="startOffset")
    __properties: ClassVar[List[str]] = ["description", "details", "endOffset", "errorId", "filePath", "helpLink", "innerError", "internalDiagnostics", "lineNumber", "message", "resolution", "severity", "source", "startOffset"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Warning', 'Error', 'Info', 'SevereWarning', 'Deprecated', 'UserWarning']):
            raise ValueError("must be one of enum values ('Warning', 'Error', 'Info', 'SevereWarning', 'Deprecated', 'UserWarning')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobErrorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "details",
            "end_offset",
            "error_id",
            "file_path",
            "help_link",
            "internal_diagnostics",
            "line_number",
            "message",
            "resolution",
            "severity",
            "source",
            "start_offset",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inner_error
        if self.inner_error:
            _dict['innerError'] = self.inner_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobErrorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "details": obj.get("details"),
            "endOffset": obj.get("endOffset"),
            "errorId": obj.get("errorId"),
            "filePath": obj.get("filePath"),
            "helpLink": obj.get("helpLink"),
            "innerError": JobInnerError.from_dict(obj["innerError"]) if obj.get("innerError") is not None else None,
            "internalDiagnostics": obj.get("internalDiagnostics"),
            "lineNumber": obj.get("lineNumber"),
            "message": obj.get("message"),
            "resolution": obj.get("resolution"),
            "severity": obj.get("severity"),
            "source": obj.get("source"),
            "startOffset": obj.get("startOffset")
        })
        return _obj



# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.job_pipeline_run_information import JobPipelineRunInformation
from typing import Optional, Set
from typing_extensions import Self

class JobPipelineInformation(BaseModel):
    """
    Job Pipeline Information, showing the relationship of jobs and recurrences of those jobs in a pipeline.
    """ # noqa: E501
    au_hours_canceled: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of job execution hours that resulted in canceled jobs.", alias="auHoursCanceled")
    au_hours_failed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of job execution hours that resulted in failed jobs.", alias="auHoursFailed")
    au_hours_succeeded: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of job execution hours that resulted in successful jobs.", alias="auHoursSucceeded")
    last_submit_time: Optional[datetime] = Field(default=None, description="The last time a job in this pipeline was submitted.", alias="lastSubmitTime")
    num_jobs_canceled: Optional[StrictInt] = Field(default=None, description="The number of jobs in this pipeline that have been canceled.", alias="numJobsCanceled")
    num_jobs_failed: Optional[StrictInt] = Field(default=None, description="The number of jobs in this pipeline that have failed.", alias="numJobsFailed")
    num_jobs_succeeded: Optional[StrictInt] = Field(default=None, description="The number of jobs in this pipeline that have succeeded.", alias="numJobsSucceeded")
    pipeline_id: Optional[StrictStr] = Field(default=None, description="The job relationship pipeline identifier (a GUID).", alias="pipelineId")
    pipeline_name: Optional[Annotated[str, Field(strict=True, max_length=260)]] = Field(default=None, description="The friendly name of the job relationship pipeline, which does not need to be unique.", alias="pipelineName")
    pipeline_uri: Optional[StrictStr] = Field(default=None, description="The pipeline uri, unique, links to the originating service for this pipeline.", alias="pipelineUri")
    recurrences: Optional[List[StrictStr]] = Field(default=None, description="The list of recurrence identifiers representing each run of this pipeline.")
    runs: Optional[List[JobPipelineRunInformation]] = Field(default=None, description="The list of recurrence identifiers representing each run of this pipeline.")
    __properties: ClassVar[List[str]] = ["auHoursCanceled", "auHoursFailed", "auHoursSucceeded", "lastSubmitTime", "numJobsCanceled", "numJobsFailed", "numJobsSucceeded", "pipelineId", "pipelineName", "pipelineUri", "recurrences", "runs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobPipelineInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "au_hours_canceled",
            "au_hours_failed",
            "au_hours_succeeded",
            "last_submit_time",
            "num_jobs_canceled",
            "num_jobs_failed",
            "num_jobs_succeeded",
            "pipeline_id",
            "pipeline_name",
            "pipeline_uri",
            "recurrences",
            "runs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in runs (list)
        _items = []
        if self.runs:
            for _item_runs in self.runs:
                if _item_runs:
                    _items.append(_item_runs.to_dict())
            _dict['runs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobPipelineInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auHoursCanceled": obj.get("auHoursCanceled"),
            "auHoursFailed": obj.get("auHoursFailed"),
            "auHoursSucceeded": obj.get("auHoursSucceeded"),
            "lastSubmitTime": obj.get("lastSubmitTime"),
            "numJobsCanceled": obj.get("numJobsCanceled"),
            "numJobsFailed": obj.get("numJobsFailed"),
            "numJobsSucceeded": obj.get("numJobsSucceeded"),
            "pipelineId": obj.get("pipelineId"),
            "pipelineName": obj.get("pipelineName"),
            "pipelineUri": obj.get("pipelineUri"),
            "recurrences": obj.get("recurrences"),
            "runs": [JobPipelineRunInformation.from_dict(_item) for _item in obj["runs"]] if obj.get("runs") is not None else None
        })
        return _obj



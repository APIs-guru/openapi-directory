# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.create_job_properties import CreateJobProperties
from openapi_client.models.job_relationship_properties import JobRelationshipProperties
from typing import Optional, Set
from typing_extensions import Self

class CreateJobParameters(BaseModel):
    """
    The parameters used to submit a new Data Lake Analytics job.
    """ # noqa: E501
    degree_of_parallelism: Optional[StrictInt] = Field(default=1, description="The degree of parallelism to use for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used for degreeOfParallelism.", alias="degreeOfParallelism")
    degree_of_parallelism_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="the degree of parallelism in percentage used for this job. At most one of degreeOfParallelism and degreeOfParallelismPercent should be specified. If none, a default value of 1 will be used for degreeOfParallelism.", alias="degreeOfParallelismPercent")
    log_file_patterns: Optional[List[StrictStr]] = Field(default=None, description="The list of log file name patterns to find in the logFolder. '*' is the only matching character allowed. Example format: jobExecution*.log or *mylog*.txt", alias="logFilePatterns")
    name: StrictStr = Field(description="The friendly name of the job to submit.")
    priority: Optional[StrictInt] = Field(default=None, description="The priority value to use for the current job. Lower numbers have a higher priority. By default, a job has a priority of 1000. This must be greater than 0.")
    related: Optional[JobRelationshipProperties] = None
    properties: CreateJobProperties
    type: StrictStr = Field(description="The job type of the current job (Hive, USql, or Scope (for internal use only)).")
    __properties: ClassVar[List[str]] = ["properties", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['USql', 'Hive', 'Scope']):
            raise ValueError("must be one of enum values ('USql', 'Hive', 'Scope')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateJobParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateJobParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "properties": CreateJobProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.diagnostics import Diagnostics
from openapi_client.models.job_data_path import JobDataPath
from openapi_client.models.job_properties import JobProperties
from openapi_client.models.job_resource import JobResource
from openapi_client.models.job_statistics import JobStatistics
from typing import Optional, Set
from typing_extensions import Self

class USqlJobProperties(JobProperties):
    """
    U-SQL job properties used when retrieving U-SQL jobs.
    """ # noqa: E501
    algebra_file_path: Optional[StrictStr] = Field(default=None, description="The algebra file path after the job has completed.", alias="algebraFilePath")
    compile_mode: Optional[StrictStr] = Field(default=None, description="The specific compilation mode for the job used during execution. If this is not specified during submission, the server will determine the optimal compilation mode.", alias="compileMode")
    debug_data: Optional[JobDataPath] = Field(default=None, alias="debugData")
    diagnostics: Optional[List[Diagnostics]] = Field(default=None, description="The diagnostics for the job.")
    resources: Optional[List[JobResource]] = Field(default=None, description="The list of resources that are required by the job.")
    root_process_node_id: Optional[StrictStr] = Field(default=None, description="The ID used to identify the job manager coordinating job execution. This value should not be set by the user and will be ignored if it is.", alias="rootProcessNodeId")
    statistics: Optional[JobStatistics] = None
    total_compilation_time: Optional[StrictStr] = Field(default=None, description="The total time this job spent compiling. This value should not be set by the user and will be ignored if it is.", alias="totalCompilationTime")
    total_paused_time: Optional[StrictStr] = Field(default=None, description="The total time this job spent paused. This value should not be set by the user and will be ignored if it is.", alias="totalPausedTime")
    total_queued_time: Optional[StrictStr] = Field(default=None, description="The total time this job spent queued. This value should not be set by the user and will be ignored if it is.", alias="totalQueuedTime")
    total_running_time: Optional[StrictStr] = Field(default=None, description="The total time this job spent executing. This value should not be set by the user and will be ignored if it is.", alias="totalRunningTime")
    yarn_application_id: Optional[StrictStr] = Field(default=None, description="The ID used to identify the yarn application executing the job. This value should not be set by the user and will be ignored if it is.", alias="yarnApplicationId")
    yarn_application_time_stamp: Optional[StrictInt] = Field(default=None, description="The timestamp (in ticks) for the yarn application executing the job. This value should not be set by the user and will be ignored if it is.", alias="yarnApplicationTimeStamp")
    __properties: ClassVar[List[str]] = ["runtimeVersion", "script", "type"]

    @field_validator('compile_mode')
    def compile_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Semantic', 'Full', 'SingleBox']):
            raise ValueError("must be one of enum values ('Semantic', 'Full', 'SingleBox')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of USqlJobProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "algebra_file_path",
            "compile_mode",
            "diagnostics",
            "resources",
            "root_process_node_id",
            "total_compilation_time",
            "total_paused_time",
            "total_queued_time",
            "total_running_time",
            "yarn_application_id",
            "yarn_application_time_stamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of USqlJobProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "runtimeVersion": obj.get("runtimeVersion"),
            "script": obj.get("script"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class JobRecurrenceInformation(BaseModel):
    """
    Recurrence job information for a specific recurrence.
    """ # noqa: E501
    au_hours_canceled: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of job execution hours that resulted in canceled jobs.", alias="auHoursCanceled")
    au_hours_failed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of job execution hours that resulted in failed jobs.", alias="auHoursFailed")
    au_hours_succeeded: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of job execution hours that resulted in successful jobs.", alias="auHoursSucceeded")
    last_submit_time: Optional[datetime] = Field(default=None, description="The last time a job in this recurrence was submitted.", alias="lastSubmitTime")
    num_jobs_canceled: Optional[StrictInt] = Field(default=None, description="The number of jobs in this recurrence that have been canceled.", alias="numJobsCanceled")
    num_jobs_failed: Optional[StrictInt] = Field(default=None, description="The number of jobs in this recurrence that have failed.", alias="numJobsFailed")
    num_jobs_succeeded: Optional[StrictInt] = Field(default=None, description="The number of jobs in this recurrence that have succeeded.", alias="numJobsSucceeded")
    recurrence_id: Optional[StrictStr] = Field(default=None, description="The recurrence identifier (a GUID), unique per activity/script, regardless of iterations. This is something to link different occurrences of the same job together.", alias="recurrenceId")
    recurrence_name: Optional[StrictStr] = Field(default=None, description="The recurrence name, user friendly name for the correlation between jobs.", alias="recurrenceName")
    __properties: ClassVar[List[str]] = ["auHoursCanceled", "auHoursFailed", "auHoursSucceeded", "lastSubmitTime", "numJobsCanceled", "numJobsFailed", "numJobsSucceeded", "recurrenceId", "recurrenceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobRecurrenceInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "au_hours_canceled",
            "au_hours_failed",
            "au_hours_succeeded",
            "last_submit_time",
            "num_jobs_canceled",
            "num_jobs_failed",
            "num_jobs_succeeded",
            "recurrence_id",
            "recurrence_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobRecurrenceInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auHoursCanceled": obj.get("auHoursCanceled"),
            "auHoursFailed": obj.get("auHoursFailed"),
            "auHoursSucceeded": obj.get("auHoursSucceeded"),
            "lastSubmitTime": obj.get("lastSubmitTime"),
            "numJobsCanceled": obj.get("numJobsCanceled"),
            "numJobsFailed": obj.get("numJobsFailed"),
            "numJobsSucceeded": obj.get("numJobsSucceeded"),
            "recurrenceId": obj.get("recurrenceId"),
            "recurrenceName": obj.get("recurrenceName")
        })
        return _obj



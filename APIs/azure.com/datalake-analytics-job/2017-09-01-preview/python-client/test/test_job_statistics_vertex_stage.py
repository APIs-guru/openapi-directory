# coding: utf-8

"""
    DataLakeAnalyticsJobManagementClient

    Creates an Azure Data Lake Analytics job client.

    The version of the OpenAPI document: 2017-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_statistics_vertex_stage import JobStatisticsVertexStage

class TestJobStatisticsVertexStage(unittest.TestCase):
    """JobStatisticsVertexStage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobStatisticsVertexStage:
        """Test JobStatisticsVertexStage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobStatisticsVertexStage`
        """
        model = JobStatisticsVertexStage()
        if include_optional:
            return JobStatisticsVertexStage(
                allocated_container_cpu_core_count = openapi_client.models.resource_usage_statistics.ResourceUsageStatistics(
                    average = 1.337, 
                    maximum = 56, 
                    minimum = 56, ),
                allocated_container_mem_size = openapi_client.models.resource_usage_statistics.ResourceUsageStatistics(
                    average = 1.337, 
                    maximum = 56, 
                    minimum = 56, ),
                data_read = 56,
                data_read_cross_pod = 56,
                data_read_intra_pod = 56,
                data_to_read = 56,
                data_written = 56,
                duplicate_discard_count = 56,
                estimated_vertex_cpu_core_count = 56,
                estimated_vertex_mem_size = 56,
                estimated_vertex_peak_cpu_core_count = 56,
                failed_count = 56,
                max_data_read_vertex = openapi_client.models.job_statistics_vertex.JobStatisticsVertex(
                    data_read = 56, 
                    execution_time = '', 
                    name = '', 
                    peak_mem_usage = 56, 
                    vertex_id = '', ),
                max_execution_time_vertex = openapi_client.models.job_statistics_vertex.JobStatisticsVertex(
                    data_read = 56, 
                    execution_time = '', 
                    name = '', 
                    peak_mem_usage = 56, 
                    vertex_id = '', ),
                max_peak_mem_usage_vertex = openapi_client.models.job_statistics_vertex.JobStatisticsVertex(
                    data_read = 56, 
                    execution_time = '', 
                    name = '', 
                    peak_mem_usage = 56, 
                    vertex_id = '', ),
                max_vertex_data_read = 56,
                min_vertex_data_read = 56,
                read_failure_count = 56,
                revocation_count = 56,
                running_count = 56,
                scheduled_count = 56,
                stage_name = '',
                succeeded_count = 56,
                temp_data_written = 56,
                total_count = 56,
                total_execution_time = '',
                total_failed_time = '',
                total_peak_mem_usage = 56,
                total_progress = 56,
                total_succeeded_time = '',
                used_vertex_cpu_core_count = openapi_client.models.resource_usage_statistics.ResourceUsageStatistics(
                    average = 1.337, 
                    maximum = 56, 
                    minimum = 56, ),
                used_vertex_peak_mem_size = openapi_client.models.resource_usage_statistics.ResourceUsageStatistics(
                    average = 1.337, 
                    maximum = 56, 
                    minimum = 56, )
            )
        else:
            return JobStatisticsVertexStage(
        )
        """

    def testJobStatisticsVertexStage(self):
        """Test JobStatisticsVertexStage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

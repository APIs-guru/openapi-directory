# coding: utf-8

"""
    Azure Resource Graph

    Azure Resource Graph API Reference

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.facet import Facet
from typing import Optional, Set
from typing_extensions import Self

class QueryResponse(BaseModel):
    """
    Query result.
    """ # noqa: E501
    skip_token: Optional[StrictStr] = Field(default=None, description="When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.", alias="$skipToken")
    count: StrictInt = Field(description="Number of records returned in the current response. In the case of paging, this is the number of records in the current page.")
    data: Dict[str, Any] = Field(description="Query output in tabular format.")
    facets: Optional[List[Facet]] = Field(default=None, description="Query facets.")
    result_truncated: StrictStr = Field(description="Indicates whether the query results are truncated.", alias="resultTruncated")
    total_records: StrictInt = Field(description="Number of total records matching the query.", alias="totalRecords")
    __properties: ClassVar[List[str]] = ["$skipToken", "count", "data", "facets", "resultTruncated", "totalRecords"]

    @field_validator('result_truncated')
    def result_truncated_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$skipToken": obj.get("$skipToken"),
            "count": obj.get("count"),
            "data": obj.get("data"),
            "facets": [Facet.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "resultTruncated": obj.get("resultTruncated"),
            "totalRecords": obj.get("totalRecords")
        })
        return _obj



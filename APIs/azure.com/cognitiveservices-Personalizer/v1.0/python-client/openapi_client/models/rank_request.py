# coding: utf-8

"""
    Personalizer Client

    Personalizer Service is an Azure Cognitive Service that makes it easy to target content and experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of future rank calls.

    The version of the OpenAPI document: v1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.rankable_action import RankableAction
from typing import Optional, Set
from typing_extensions import Self

class RankRequest(BaseModel):
    """
    Request a set of actions to be ranked by the Personalizer service.
    """ # noqa: E501
    actions: List[RankableAction] = Field(description="The set of actions the Personalizer service can pick from.  The set should not contain more than 50 actions.  The order of the actions does not affect the rank result but the order  should match the sequence your application would have used to display them.  The first item in the array will be used as Baseline item in Offline evaluations.")
    context_features: Optional[List[Dict[str, Any]]] = Field(default=None, description="Features of the context used for Personalizer as a  dictionary of dictionaries. This depends on the application, and  typically includes features about the current user, their  device, profile information, aggregated data about time and date, etc.  Features should not include personally identifiable information (PII),  unique UserIDs, or precise timestamps.", alias="contextFeatures")
    defer_activation: Optional[StrictBool] = Field(default=False, description="Send false if it is certain the rewardActionId in rank results will be shown to the user, therefore  Personalizer will expect a Reward call, otherwise it will assign the default  Reward to the event. Send true if it is possible the user will not see the  action specified in the rank results, because the page is rendering later, or the Rank results may be  overridden by code further downstream.", alias="deferActivation")
    event_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Optionally pass an eventId that uniquely identifies this Rank event.  If null, the service generates a unique eventId. The eventId will be used for  associating this request with its reward, as well as seeding the pseudo-random  generator when making a Personalizer call.", alias="eventId")
    excluded_actions: Optional[List[StrictStr]] = Field(default=None, description="The set of action ids to exclude from ranking.", alias="excludedActions")
    __properties: ClassVar[List[str]] = ["actions", "contextFeatures", "deferActivation", "eventId", "excludedActions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RankRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RankRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [RankableAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "contextFeatures": obj.get("contextFeatures"),
            "deferActivation": obj.get("deferActivation") if obj.get("deferActivation") is not None else False,
            "eventId": obj.get("eventId"),
            "excludedActions": obj.get("excludedActions")
        })
        return _obj



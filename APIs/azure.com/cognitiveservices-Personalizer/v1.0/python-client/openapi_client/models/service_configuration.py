# coding: utf-8

"""
    Personalizer Client

    Personalizer Service is an Azure Cognitive Service that makes it easy to target content and experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of future rank calls.

    The version of the OpenAPI document: v1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceConfiguration(BaseModel):
    """
    The configuration of the service.
    """ # noqa: E501
    default_reward: Union[Annotated[float, Field(le=1, strict=True, ge=-1)], Annotated[int, Field(le=1, strict=True, ge=-1)]] = Field(description="The reward given if a reward is not received within the specified wait time.", alias="defaultReward")
    exploration_percentage: Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(description="The percentage of rank responses that will use exploration.", alias="explorationPercentage")
    log_mirror_enabled: Optional[StrictBool] = Field(default=None, description="Flag indicates whether log mirroring is enabled.", alias="logMirrorEnabled")
    log_mirror_sas_uri: Optional[StrictStr] = Field(default=None, description="Azure storage account container SAS URI for log mirroring.", alias="logMirrorSasUri")
    log_retention_days: Annotated[int, Field(le=2147483647, strict=True, ge=-1)] = Field(description="Number of days historical logs are to be maintained. -1 implies the logs will never be deleted.", alias="logRetentionDays")
    model_export_frequency: StrictStr = Field(description="Personalizer will start using the most updated trained model for online ranks automatically every specified time period.  For example, PT5M (5 mins). For information about the time format,  see http://en.wikipedia.org/wiki/ISO_8601#Durations", alias="modelExportFrequency")
    reward_aggregation: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The function used to process rewards, if multiple reward scores are received before rewardWaitTime is over.", alias="rewardAggregation")
    reward_wait_time: StrictStr = Field(description="The time span waited until a request is marked with the default reward.  For example, PT5M (5 mins). For information about the time format,  see http://en.wikipedia.org/wiki/ISO_8601#Durations", alias="rewardWaitTime")
    __properties: ClassVar[List[str]] = ["defaultReward", "explorationPercentage", "logMirrorEnabled", "logMirrorSasUri", "logRetentionDays", "modelExportFrequency", "rewardAggregation", "rewardWaitTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultReward": obj.get("defaultReward"),
            "explorationPercentage": obj.get("explorationPercentage"),
            "logMirrorEnabled": obj.get("logMirrorEnabled"),
            "logMirrorSasUri": obj.get("logMirrorSasUri"),
            "logRetentionDays": obj.get("logRetentionDays"),
            "modelExportFrequency": obj.get("modelExportFrequency"),
            "rewardAggregation": obj.get("rewardAggregation"),
            "rewardWaitTime": obj.get("rewardWaitTime")
        })
        return _obj



# coding: utf-8

"""
    Personalizer Client

    Personalizer Service is an Azure Cognitive Service that makes it easy to target content and experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of future rank calls.

    The version of the OpenAPI document: v1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.policy_contract import PolicyContract
from typing import Optional, Set
from typing_extensions import Self

class EvaluationContract(BaseModel):
    """
    A counterfactual evaluation.
    """ # noqa: E501
    enable_offline_experimentation: Optional[StrictBool] = Field(default=None, description="True if the evaluation should explore for a more optimal Learning settings.", alias="enableOfflineExperimentation")
    end_time: datetime = Field(description="The end time of the evaluation.", alias="endTime")
    name: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The name of the evaluation.")
    policies: List[PolicyContract] = Field(description="Additional Learning settings to evaluate.")
    start_time: datetime = Field(description="The start time of the evaluation.", alias="startTime")
    __properties: ClassVar[List[str]] = ["enableOfflineExperimentation", "endTime", "name", "policies", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluationContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluationContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableOfflineExperimentation": obj.get("enableOfflineExperimentation"),
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "policies": [PolicyContract.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None,
            "startTime": obj.get("startTime")
        })
        return _obj



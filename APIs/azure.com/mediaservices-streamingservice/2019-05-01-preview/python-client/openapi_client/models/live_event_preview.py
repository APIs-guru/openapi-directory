# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.live_event_endpoint import LiveEventEndpoint
from openapi_client.models.live_event_preview_access_control import LiveEventPreviewAccessControl
from typing import Optional, Set
from typing_extensions import Self

class LiveEventPreview(BaseModel):
    """
    The Live Event preview.
    """ # noqa: E501
    access_control: Optional[LiveEventPreviewAccessControl] = Field(default=None, alias="accessControl")
    alternative_media_id: Optional[StrictStr] = Field(default=None, description="An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.", alias="alternativeMediaId")
    endpoints: Optional[List[LiveEventEndpoint]] = Field(default=None, description="The endpoints for preview.")
    preview_locator: Optional[StrictStr] = Field(default=None, description="The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.", alias="previewLocator")
    streaming_policy_name: Optional[StrictStr] = Field(default=None, description="The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.", alias="streamingPolicyName")
    __properties: ClassVar[List[str]] = ["accessControl", "alternativeMediaId", "endpoints", "previewLocator", "streamingPolicyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveEventPreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_control
        if self.access_control:
            _dict['accessControl'] = self.access_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveEventPreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControl": LiveEventPreviewAccessControl.from_dict(obj["accessControl"]) if obj.get("accessControl") is not None else None,
            "alternativeMediaId": obj.get("alternativeMediaId"),
            "endpoints": [LiveEventEndpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "previewLocator": obj.get("previewLocator"),
            "streamingPolicyName": obj.get("streamingPolicyName")
        })
        return _obj



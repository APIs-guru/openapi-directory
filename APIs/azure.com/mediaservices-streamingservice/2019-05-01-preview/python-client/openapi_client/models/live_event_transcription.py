# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.live_event_input_track_selection import LiveEventInputTrackSelection
from openapi_client.models.live_event_output_transcription_track import LiveEventOutputTranscriptionTrack
from typing import Optional, Set
from typing_extensions import Self

class LiveEventTranscription(BaseModel):
    """
    Describes the transcription tracks in the output of a Live Event, generated using speech-to-text transcription.
    """ # noqa: E501
    input_track_selection: Optional[List[LiveEventInputTrackSelection]] = Field(default=None, description="Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied.", alias="inputTrackSelection")
    language: Optional[StrictStr] = Field(default=None, description="Specifies the language (locale) used for speech-to-text transcription ï¿½ it should match the spoken language in the audio track. The value should be in BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are 'en-US' and 'en-GB'.")
    output_transcription_track: Optional[LiveEventOutputTranscriptionTrack] = Field(default=None, alias="outputTranscriptionTrack")
    __properties: ClassVar[List[str]] = ["inputTrackSelection", "language", "outputTranscriptionTrack"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveEventTranscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_track_selection (list)
        _items = []
        if self.input_track_selection:
            for _item_input_track_selection in self.input_track_selection:
                if _item_input_track_selection:
                    _items.append(_item_input_track_selection.to_dict())
            _dict['inputTrackSelection'] = _items
        # override the default output from pydantic by calling `to_dict()` of output_transcription_track
        if self.output_transcription_track:
            _dict['outputTranscriptionTrack'] = self.output_transcription_track.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveEventTranscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputTrackSelection": [LiveEventInputTrackSelection.from_dict(_item) for _item in obj["inputTrackSelection"]] if obj.get("inputTrackSelection") is not None else None,
            "language": obj.get("language"),
            "outputTranscriptionTrack": LiveEventOutputTranscriptionTrack.from_dict(obj["outputTranscriptionTrack"]) if obj.get("outputTranscriptionTrack") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_event_properties import LiveEventProperties

class TestLiveEventProperties(unittest.TestCase):
    """LiveEventProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveEventProperties:
        """Test LiveEventProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveEventProperties`
        """
        model = LiveEventProperties()
        if include_optional:
            return LiveEventProperties(
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                cross_site_access_policies = openapi_client.models.cross_site_access_policies.CrossSiteAccessPolicies(
                    client_access_policy = '', 
                    cross_domain_policy = '', ),
                description = '',
                encoding = openapi_client.models.live_event_encoding.LiveEventEncoding(
                    encoding_type = 'None', 
                    preset_name = '', ),
                input = openapi_client.models.live_event_input.LiveEventInput(
                    access_control = openapi_client.models.live_event_input_access_control.LiveEventInputAccessControl(
                        ip = openapi_client.models.ip_access_control.IPAccessControl(
                            allow = [
                                openapi_client.models.ip_range.IPRange(
                                    address = '', 
                                    name = '', 
                                    subnet_prefix_length = 56, )
                                ], ), ), 
                    access_token = '', 
                    endpoints = [
                        openapi_client.models.live_event_endpoint.LiveEventEndpoint(
                            protocol = '', 
                            url = '', )
                        ], 
                    key_frame_interval_duration = '', 
                    streaming_protocol = 'FragmentedMP4', ),
                last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                preview = openapi_client.models.live_event_preview.LiveEventPreview(
                    access_control = openapi_client.models.live_event_preview_access_control.LiveEventPreviewAccessControl(
                        ip = openapi_client.models.ip_access_control.IPAccessControl(
                            allow = [
                                openapi_client.models.ip_range.IPRange(
                                    address = '', 
                                    name = '', 
                                    subnet_prefix_length = 56, )
                                ], ), ), 
                    alternative_media_id = '', 
                    endpoints = [
                        openapi_client.models.live_event_endpoint.LiveEventEndpoint(
                            protocol = '', 
                            url = '', )
                        ], 
                    preview_locator = '', 
                    streaming_policy_name = '', ),
                provisioning_state = '',
                resource_state = 'Stopped',
                stream_options = [
                    'Default'
                    ],
                transcriptions = [
                    openapi_client.models.live_event_transcription.LiveEventTranscription(
                        input_track_selection = [
                            openapi_client.models.live_event_input_track_selection.LiveEventInputTrackSelection(
                                operation = '', 
                                property = '', 
                                value = '', )
                            ], 
                        language = '', 
                        output_transcription_track = openapi_client.models.live_event_output_transcription_track.LiveEventOutputTranscriptionTrack(
                            track_name = '', ), )
                    ],
                vanity_url = True
            )
        else:
            return LiveEventProperties(
                input = openapi_client.models.live_event_input.LiveEventInput(
                    access_control = openapi_client.models.live_event_input_access_control.LiveEventInputAccessControl(
                        ip = openapi_client.models.ip_access_control.IPAccessControl(
                            allow = [
                                openapi_client.models.ip_range.IPRange(
                                    address = '', 
                                    name = '', 
                                    subnet_prefix_length = 56, )
                                ], ), ), 
                    access_token = '', 
                    endpoints = [
                        openapi_client.models.live_event_endpoint.LiveEventEndpoint(
                            protocol = '', 
                            url = '', )
                        ], 
                    key_frame_interval_duration = '', 
                    streaming_protocol = 'FragmentedMP4', ),
        )
        """

    def testLiveEventProperties(self):
        """Test LiveEventProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

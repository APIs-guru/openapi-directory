# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2019-05-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_event_input import LiveEventInput

class TestLiveEventInput(unittest.TestCase):
    """LiveEventInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveEventInput:
        """Test LiveEventInput
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveEventInput`
        """
        model = LiveEventInput()
        if include_optional:
            return LiveEventInput(
                access_control = openapi_client.models.live_event_input_access_control.LiveEventInputAccessControl(
                    ip = openapi_client.models.ip_access_control.IPAccessControl(
                        allow = [
                            openapi_client.models.ip_range.IPRange(
                                address = '', 
                                name = '', 
                                subnet_prefix_length = 56, )
                            ], ), ),
                access_token = '',
                endpoints = [
                    openapi_client.models.live_event_endpoint.LiveEventEndpoint(
                        protocol = '', 
                        url = '', )
                    ],
                key_frame_interval_duration = '',
                streaming_protocol = 'FragmentedMP4'
            )
        else:
            return LiveEventInput(
                streaming_protocol = 'FragmentedMP4',
        )
        """

    def testLiveEventInput(self):
        """Test LiveEventInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

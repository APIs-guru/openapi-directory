# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.streaming_endpoint_list_result import StreamingEndpointListResult

class TestStreamingEndpointListResult(unittest.TestCase):
    """StreamingEndpointListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StreamingEndpointListResult:
        """Test StreamingEndpointListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StreamingEndpointListResult`
        """
        model = StreamingEndpointListResult()
        if include_optional:
            return StreamingEndpointListResult(
                odata_count = 56,
                odata_next_link = '',
                value = [
                    openapi_client.models.streaming_endpoint.StreamingEndpoint(
                        properties = openapi_client.models.streaming_endpoint_properties.StreamingEndpointProperties(
                            access_control = openapi_client.models.streaming_endpoint_access_control.StreamingEndpointAccessControl(
                                akamai = openapi_client.models.akamai_access_control.AkamaiAccessControl(
                                    akamai_signature_header_authentication_key_list = [
                                        openapi_client.models.akamai_signature_header_authentication_key.AkamaiSignatureHeaderAuthenticationKey(
                                            base64_key = '', 
                                            expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            identifier = '', )
                                        ], ), 
                                ip = openapi_client.models.ip_access_control.IPAccessControl(
                                    allow = [
                                        openapi_client.models.ip_range.IPRange(
                                            address = '', 
                                            name = '', 
                                            subnet_prefix_length = 56, )
                                        ], ), ), 
                            availability_set_name = '', 
                            cdn_enabled = True, 
                            cdn_profile = '', 
                            cdn_provider = '', 
                            created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            cross_site_access_policies = openapi_client.models.cross_site_access_policies.CrossSiteAccessPolicies(
                                client_access_policy = '', 
                                cross_domain_policy = '', ), 
                            custom_host_names = [
                                ''
                                ], 
                            description = '', 
                            free_trial_end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            host_name = '', 
                            last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            max_cache_age = 56, 
                            provisioning_state = '', 
                            resource_state = 'Stopped', 
                            scale_units = 56, ), )
                    ]
            )
        else:
            return StreamingEndpointListResult(
        )
        """

    def testStreamingEndpointListResult(self):
        """Test StreamingEndpointListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

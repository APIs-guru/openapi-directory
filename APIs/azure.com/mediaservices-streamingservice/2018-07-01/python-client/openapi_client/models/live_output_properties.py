# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hls import Hls
from typing import Optional, Set
from typing_extensions import Self

class LiveOutputProperties(BaseModel):
    """
    The JSON object that contains the properties required to create a Live Output.
    """ # noqa: E501
    archive_window_length: StrictStr = Field(description="ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.", alias="archiveWindowLength")
    asset_name: StrictStr = Field(description="The asset name.", alias="assetName")
    created: Optional[datetime] = Field(default=None, description="The exact time the Live Output was created.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Live Output.")
    hls: Optional[Hls] = None
    last_modified: Optional[datetime] = Field(default=None, description="The exact time the Live Output was last modified.", alias="lastModified")
    manifest_name: Optional[StrictStr] = Field(default=None, description="The manifest file name.  If not provided, the service will generate one automatically.", alias="manifestName")
    output_snap_time: Optional[StrictInt] = Field(default=None, description="The output snapshot time.", alias="outputSnapTime")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the Live Output.", alias="provisioningState")
    resource_state: Optional[StrictStr] = Field(default=None, description="The resource state of the Live Output.", alias="resourceState")
    __properties: ClassVar[List[str]] = ["archiveWindowLength", "assetName", "created", "description", "hls", "lastModified", "manifestName", "outputSnapTime", "provisioningState", "resourceState"]

    @field_validator('resource_state')
    def resource_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Running', 'Deleting']):
            raise ValueError("must be one of enum values ('Creating', 'Running', 'Deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveOutputProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "last_modified",
            "provisioning_state",
            "resource_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hls
        if self.hls:
            _dict['hls'] = self.hls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveOutputProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveWindowLength": obj.get("archiveWindowLength"),
            "assetName": obj.get("assetName"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "hls": Hls.from_dict(obj["hls"]) if obj.get("hls") is not None else None,
            "lastModified": obj.get("lastModified"),
            "manifestName": obj.get("manifestName"),
            "outputSnapTime": obj.get("outputSnapTime"),
            "provisioningState": obj.get("provisioningState"),
            "resourceState": obj.get("resourceState")
        })
        return _obj



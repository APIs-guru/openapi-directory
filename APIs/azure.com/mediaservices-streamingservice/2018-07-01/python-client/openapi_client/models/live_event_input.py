# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.live_event_endpoint import LiveEventEndpoint
from openapi_client.models.live_event_input_access_control import LiveEventInputAccessControl
from typing import Optional, Set
from typing_extensions import Self

class LiveEventInput(BaseModel):
    """
    The Live Event input.
    """ # noqa: E501
    access_control: Optional[LiveEventInputAccessControl] = Field(default=None, alias="accessControl")
    access_token: Optional[StrictStr] = Field(default=None, description="A unique identifier for a stream.  This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.", alias="accessToken")
    endpoints: Optional[List[LiveEventEndpoint]] = Field(default=None, description="The input endpoints for the Live Event.")
    key_frame_interval_duration: Optional[StrictStr] = Field(default=None, description="ISO 8601 timespan duration of the key frame interval duration.", alias="keyFrameIntervalDuration")
    streaming_protocol: StrictStr = Field(description="The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.", alias="streamingProtocol")
    __properties: ClassVar[List[str]] = ["accessControl", "accessToken", "endpoints", "keyFrameIntervalDuration", "streamingProtocol"]

    @field_validator('streaming_protocol')
    def streaming_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FragmentedMP4', 'RTMP']):
            raise ValueError("must be one of enum values ('FragmentedMP4', 'RTMP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveEventInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_control
        if self.access_control:
            _dict['accessControl'] = self.access_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveEventInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControl": LiveEventInputAccessControl.from_dict(obj["accessControl"]) if obj.get("accessControl") is not None else None,
            "accessToken": obj.get("accessToken"),
            "endpoints": [LiveEventEndpoint.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "keyFrameIntervalDuration": obj.get("keyFrameIntervalDuration"),
            "streamingProtocol": obj.get("streamingProtocol")
        })
        return _obj



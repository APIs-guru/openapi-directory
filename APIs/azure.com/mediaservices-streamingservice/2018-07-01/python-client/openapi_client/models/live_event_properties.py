# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2018-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cross_site_access_policies import CrossSiteAccessPolicies
from openapi_client.models.live_event_encoding import LiveEventEncoding
from openapi_client.models.live_event_input import LiveEventInput
from openapi_client.models.live_event_preview import LiveEventPreview
from typing import Optional, Set
from typing_extensions import Self

class LiveEventProperties(BaseModel):
    """
    The Live Event properties.
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="The exact time the Live Event was created.")
    cross_site_access_policies: Optional[CrossSiteAccessPolicies] = Field(default=None, alias="crossSiteAccessPolicies")
    description: Optional[StrictStr] = Field(default=None, description="The Live Event description.")
    encoding: Optional[LiveEventEncoding] = None
    input: LiveEventInput
    last_modified: Optional[datetime] = Field(default=None, description="The exact time the Live Event was last modified.", alias="lastModified")
    preview: Optional[LiveEventPreview] = None
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the Live Event.", alias="provisioningState")
    resource_state: Optional[StrictStr] = Field(default=None, description="The resource state of the Live Event.", alias="resourceState")
    stream_options: Optional[List[StrictStr]] = Field(default=None, description="The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.", alias="streamOptions")
    vanity_url: Optional[StrictBool] = Field(default=None, description="Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.", alias="vanityUrl")
    __properties: ClassVar[List[str]] = ["created", "crossSiteAccessPolicies", "description", "encoding", "input", "lastModified", "preview", "provisioningState", "resourceState", "streamOptions", "vanityUrl"]

    @field_validator('resource_state')
    def resource_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Starting', 'Running', 'Stopping', 'Deleting']):
            raise ValueError("must be one of enum values ('Stopped', 'Starting', 'Running', 'Stopping', 'Deleting')")
        return value

    @field_validator('stream_options')
    def stream_options_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Default', 'LowLatency']):
                raise ValueError("each list item must be one of ('Default', 'LowLatency')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveEventProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "last_modified",
            "provisioning_state",
            "resource_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cross_site_access_policies
        if self.cross_site_access_policies:
            _dict['crossSiteAccessPolicies'] = self.cross_site_access_policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encoding
        if self.encoding:
            _dict['encoding'] = self.encoding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preview
        if self.preview:
            _dict['preview'] = self.preview.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveEventProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "crossSiteAccessPolicies": CrossSiteAccessPolicies.from_dict(obj["crossSiteAccessPolicies"]) if obj.get("crossSiteAccessPolicies") is not None else None,
            "description": obj.get("description"),
            "encoding": LiveEventEncoding.from_dict(obj["encoding"]) if obj.get("encoding") is not None else None,
            "input": LiveEventInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "lastModified": obj.get("lastModified"),
            "preview": LiveEventPreview.from_dict(obj["preview"]) if obj.get("preview") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "resourceState": obj.get("resourceState"),
            "streamOptions": obj.get("streamOptions"),
            "vanityUrl": obj.get("vanityUrl")
        })
        return _obj



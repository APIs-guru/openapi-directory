# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2018-03-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.live_event import LiveEvent

class TestLiveEvent(unittest.TestCase):
    """LiveEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiveEvent:
        """Test LiveEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiveEvent`
        """
        model = LiveEvent()
        if include_optional:
            return LiveEvent(
                properties = openapi_client.models.live_event_properties.LiveEventProperties(
                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    cross_site_access_policies = openapi_client.models.cross_site_access_policies.CrossSiteAccessPolicies(
                        client_access_policy = '', 
                        cross_domain_policy = '', ), 
                    description = '', 
                    encoding = openapi_client.models.live_event_encoding.LiveEventEncoding(
                        encoding_type = 'None', 
                        preset_name = '', ), 
                    input = openapi_client.models.live_event_input.LiveEventInput(
                        access_token = '', 
                        endpoints = [
                            openapi_client.models.live_event_endpoint.LiveEventEndpoint(
                                protocol = '', 
                                url = '', )
                            ], 
                        key_frame_interval_duration = '', 
                        streaming_protocol = 'FragmentedMP4', ), 
                    last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    preview = openapi_client.models.live_event_preview.LiveEventPreview(
                        access_control = openapi_client.models.live_event_preview_access_control.LiveEventPreviewAccessControl(
                            ip = openapi_client.models.ip_access_control.IPAccessControl(
                                allow = [
                                    openapi_client.models.ip_range.IPRange(
                                        address = '', 
                                        name = '', 
                                        subnet_prefix_length = 56, )
                                    ], ), ), 
                        preview_locator = '', 
                        streaming_policy_name = '', ), 
                    provisioning_state = '', 
                    resource_state = 'Stopped', 
                    stream_options = [
                        'Default'
                        ], 
                    vanity_url = True, ),
                location = '',
                tags = {
                    'key' : ''
                    },
                id = '',
                name = '',
                type = ''
            )
        else:
            return LiveEvent(
        )
        """

    def testLiveEvent(self):
        """Test LiveEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

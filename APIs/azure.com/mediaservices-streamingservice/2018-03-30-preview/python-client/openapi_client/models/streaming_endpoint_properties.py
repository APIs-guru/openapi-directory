# coding: utf-8

"""
    Azure Media Services

    Streaming resource management client for Azure Media Services

    The version of the OpenAPI document: 2018-03-30-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cross_site_access_policies import CrossSiteAccessPolicies
from openapi_client.models.streaming_endpoint_access_control import StreamingEndpointAccessControl
from typing import Optional, Set
from typing_extensions import Self

class StreamingEndpointProperties(BaseModel):
    """
    The StreamingEndpoint properties.
    """ # noqa: E501
    access_control: Optional[StreamingEndpointAccessControl] = Field(default=None, alias="accessControl")
    availability_set_name: Optional[StrictStr] = Field(default=None, description="AvailabilitySet name", alias="availabilitySetName")
    cdn_enabled: Optional[StrictBool] = Field(default=None, description="The CDN enabled flag.", alias="cdnEnabled")
    cdn_profile: Optional[StrictStr] = Field(default=None, description="The CDN profile name.", alias="cdnProfile")
    cdn_provider: Optional[StrictStr] = Field(default=None, description="The CDN provider name.", alias="cdnProvider")
    created: Optional[datetime] = Field(default=None, description="The exact time the StreamingEndpoint was created.")
    cross_site_access_policies: Optional[CrossSiteAccessPolicies] = Field(default=None, alias="crossSiteAccessPolicies")
    custom_host_names: Optional[List[StrictStr]] = Field(default=None, description="The custom host names of the StreamingEndpoint", alias="customHostNames")
    description: Optional[StrictStr] = Field(default=None, description="The StreamingEndpoint description.")
    free_trial_end_time: Optional[datetime] = Field(default=None, description="The free trial expiration time.", alias="freeTrialEndTime")
    host_name: Optional[StrictStr] = Field(default=None, description="The StreamingEndpoint host name.", alias="hostName")
    last_modified: Optional[datetime] = Field(default=None, description="The exact time the StreamingEndpoint was last modified.", alias="lastModified")
    max_cache_age: Optional[StrictInt] = Field(default=None, description="Max cache age", alias="maxCacheAge")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the StreamingEndpoint.", alias="provisioningState")
    resource_state: Optional[StrictStr] = Field(default=None, description="The resource state of the StreamingEndpoint.", alias="resourceState")
    scale_units: Optional[StrictInt] = Field(default=None, description="The number of scale units.", alias="scaleUnits")
    __properties: ClassVar[List[str]] = ["accessControl", "availabilitySetName", "cdnEnabled", "cdnProfile", "cdnProvider", "created", "crossSiteAccessPolicies", "customHostNames", "description", "freeTrialEndTime", "hostName", "lastModified", "maxCacheAge", "provisioningState", "resourceState", "scaleUnits"]

    @field_validator('resource_state')
    def resource_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Stopped', 'Starting', 'Running', 'Stopping', 'Deleting', 'Scaling']):
            raise ValueError("must be one of enum values ('Stopped', 'Starting', 'Running', 'Stopping', 'Deleting', 'Scaling')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingEndpointProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "free_trial_end_time",
            "host_name",
            "last_modified",
            "provisioning_state",
            "resource_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_control
        if self.access_control:
            _dict['accessControl'] = self.access_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cross_site_access_policies
        if self.cross_site_access_policies:
            _dict['crossSiteAccessPolicies'] = self.cross_site_access_policies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingEndpointProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControl": StreamingEndpointAccessControl.from_dict(obj["accessControl"]) if obj.get("accessControl") is not None else None,
            "availabilitySetName": obj.get("availabilitySetName"),
            "cdnEnabled": obj.get("cdnEnabled"),
            "cdnProfile": obj.get("cdnProfile"),
            "cdnProvider": obj.get("cdnProvider"),
            "created": obj.get("created"),
            "crossSiteAccessPolicies": CrossSiteAccessPolicies.from_dict(obj["crossSiteAccessPolicies"]) if obj.get("crossSiteAccessPolicies") is not None else None,
            "customHostNames": obj.get("customHostNames"),
            "description": obj.get("description"),
            "freeTrialEndTime": obj.get("freeTrialEndTime"),
            "hostName": obj.get("hostName"),
            "lastModified": obj.get("lastModified"),
            "maxCacheAge": obj.get("maxCacheAge"),
            "provisioningState": obj.get("provisioningState"),
            "resourceState": obj.get("resourceState"),
            "scaleUnits": obj.get("scaleUnits")
        })
        return _obj



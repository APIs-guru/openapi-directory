# coding: utf-8

"""
    MediaServicesManagementClient

    Media Services resource management APIs.

    The version of the OpenAPI document: 2015-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_endpoint import ApiEndpoint
from openapi_client.models.storage_account import StorageAccount
from typing import Optional, Set
from typing_extensions import Self

class MediaServiceProperties(BaseModel):
    """
    The additional properties of a Media Service resource.
    """ # noqa: E501
    api_endpoints: Optional[List[ApiEndpoint]] = Field(default=None, description="Read-only property that lists the Media Services REST API endpoints for this resource. If supplied on a PUT or PATCH, the value will be ignored.", alias="apiEndpoints")
    storage_accounts: Optional[List[StorageAccount]] = Field(default=None, description="The storage accounts for this resource.", alias="storageAccounts")
    __properties: ClassVar[List[str]] = ["apiEndpoints", "storageAccounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaServiceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_endpoints",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in api_endpoints (list)
        _items = []
        if self.api_endpoints:
            for _item_api_endpoints in self.api_endpoints:
                if _item_api_endpoints:
                    _items.append(_item_api_endpoints.to_dict())
            _dict['apiEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in storage_accounts (list)
        _items = []
        if self.storage_accounts:
            for _item_storage_accounts in self.storage_accounts:
                if _item_storage_accounts:
                    _items.append(_item_storage_accounts.to_dict())
            _dict['storageAccounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaServiceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiEndpoints": [ApiEndpoint.from_dict(_item) for _item in obj["apiEndpoints"]] if obj.get("apiEndpoints") is not None else None,
            "storageAccounts": [StorageAccount.from_dict(_item) for _item in obj["storageAccounts"]] if obj.get("storageAccounts") is not None else None
        })
        return _obj



# coding: utf-8

"""
    MediaServicesManagementClient

    Media Services resource management APIs.

    The version of the OpenAPI document: 2015-10-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing_extensions import Annotated
from openapi_client.models.check_name_availability_input import CheckNameAvailabilityInput
from openapi_client.models.check_name_availability_output import CheckNameAvailabilityOutput
from openapi_client.models.media_service import MediaService
from openapi_client.models.media_service_collection import MediaServiceCollection
from openapi_client.models.operation_list_result import OperationListResult
from openapi_client.models.regenerate_key_input import RegenerateKeyInput
from openapi_client.models.regenerate_key_output import RegenerateKeyOutput
from openapi_client.models.service_keys import ServiceKeys
from openapi_client.models.sync_storage_keys_input import SyncStorageKeysInput

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def media_service_check_name_availability(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        parameters: Annotated[CheckNameAvailabilityInput, Field(description="Properties needed to check the availability of a name.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CheckNameAvailabilityOutput:
        """media_service_check_name_availability

        Checks whether the Media Service resource name is available. The name must be globally unique.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param parameters: Properties needed to check the availability of a name. (required)
        :type parameters: CheckNameAvailabilityInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_check_name_availability_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckNameAvailabilityOutput",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_check_name_availability_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        parameters: Annotated[CheckNameAvailabilityInput, Field(description="Properties needed to check the availability of a name.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CheckNameAvailabilityOutput]:
        """media_service_check_name_availability

        Checks whether the Media Service resource name is available. The name must be globally unique.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param parameters: Properties needed to check the availability of a name. (required)
        :type parameters: CheckNameAvailabilityInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_check_name_availability_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckNameAvailabilityOutput",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_check_name_availability_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        parameters: Annotated[CheckNameAvailabilityInput, Field(description="Properties needed to check the availability of a name.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_check_name_availability

        Checks whether the Media Service resource name is available. The name must be globally unique.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param parameters: Properties needed to check the availability of a name. (required)
        :type parameters: CheckNameAvailabilityInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_check_name_availability_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CheckNameAvailabilityOutput",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_check_name_availability_serialize(
        self,
        subscription_id,
        api_version,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_create(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[MediaService, Field(description="Media Service properties needed for creation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MediaService:
        """media_service_create

        Creates a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Media Service properties needed for creation. (required)
        :type parameters: MediaService
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_create_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_create_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[MediaService, Field(description="Media Service properties needed for creation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MediaService]:
        """media_service_create

        Creates a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Media Service properties needed for creation. (required)
        :type parameters: MediaService
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_create_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_create_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[MediaService, Field(description="Media Service properties needed for creation.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_create

        Creates a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Media Service properties needed for creation. (required)
        :type parameters: MediaService
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_create_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_create_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """media_service_delete

        Deletes a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_delete_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """media_service_delete

        Deletes a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_delete_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_delete

        Deletes a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_delete_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_delete_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MediaService:
        """media_service_get

        Gets a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_get_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MediaService]:
        """media_service_get

        Gets a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_get_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_get

        Gets a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_get_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_get_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_list_by_resource_group(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MediaServiceCollection:
        """media_service_list_by_resource_group

        Lists all of the Media Services in a resource group.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_list_by_resource_group_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaServiceCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_list_by_resource_group_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MediaServiceCollection]:
        """media_service_list_by_resource_group

        Lists all of the Media Services in a resource group.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_list_by_resource_group_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaServiceCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_list_by_resource_group_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_list_by_resource_group

        Lists all of the Media Services in a resource group.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_list_by_resource_group_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaServiceCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_list_by_resource_group_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_list_keys(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceKeys:
        """media_service_list_keys

        Lists the keys for a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_list_keys_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceKeys",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_list_keys_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceKeys]:
        """media_service_list_keys

        Lists the keys for a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_list_keys_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceKeys",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_list_keys_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_list_keys

        Lists the keys for a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_list_keys_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceKeys",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_list_keys_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_regenerate_key(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[RegenerateKeyInput, Field(description="Properties needed to regenerate the Media Service key.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RegenerateKeyOutput:
        """media_service_regenerate_key

        Regenerates a primary or secondary key for a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Properties needed to regenerate the Media Service key. (required)
        :type parameters: RegenerateKeyInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_regenerate_key_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegenerateKeyOutput",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_regenerate_key_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[RegenerateKeyInput, Field(description="Properties needed to regenerate the Media Service key.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RegenerateKeyOutput]:
        """media_service_regenerate_key

        Regenerates a primary or secondary key for a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Properties needed to regenerate the Media Service key. (required)
        :type parameters: RegenerateKeyInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_regenerate_key_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegenerateKeyOutput",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_regenerate_key_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[RegenerateKeyInput, Field(description="Properties needed to regenerate the Media Service key.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_regenerate_key

        Regenerates a primary or secondary key for a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Properties needed to regenerate the Media Service key. (required)
        :type parameters: RegenerateKeyInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_regenerate_key_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegenerateKeyOutput",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_regenerate_key_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_sync_storage_keys(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[SyncStorageKeysInput, Field(description="Properties needed to synchronize the keys for a storage account to the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """media_service_sync_storage_keys

        Synchronizes storage account keys for a storage account associated with the Media Service account.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Properties needed to synchronize the keys for a storage account to the Media Service. (required)
        :type parameters: SyncStorageKeysInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_sync_storage_keys_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_sync_storage_keys_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[SyncStorageKeysInput, Field(description="Properties needed to synchronize the keys for a storage account to the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """media_service_sync_storage_keys

        Synchronizes storage account keys for a storage account associated with the Media Service account.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Properties needed to synchronize the keys for a storage account to the Media Service. (required)
        :type parameters: SyncStorageKeysInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_sync_storage_keys_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_sync_storage_keys_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[SyncStorageKeysInput, Field(description="Properties needed to synchronize the keys for a storage account to the Media Service.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_sync_storage_keys

        Synchronizes storage account keys for a storage account associated with the Media Service account.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Properties needed to synchronize the keys for a storage account to the Media Service. (required)
        :type parameters: SyncStorageKeysInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_sync_storage_keys_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_sync_storage_keys_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def media_service_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[MediaService, Field(description="Media Service properties needed for update.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MediaService:
        """media_service_update

        Updates a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Media Service properties needed for update. (required)
        :type parameters: MediaService
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_update_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def media_service_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[MediaService, Field(description="Media Service properties needed for update.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MediaService]:
        """media_service_update

        Updates a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Media Service properties needed for update. (required)
        :type parameters: MediaService
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_update_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def media_service_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The unique identifier for a Microsoft Azure subscription.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        resource_group_name: Annotated[StrictStr, Field(description="Name of the resource group within the Azure subscription.")],
        media_service_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="Name of the Media Service.")],
        parameters: Annotated[MediaService, Field(description="Media Service properties needed for update.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """media_service_update

        Updates a Media Service.

        :param subscription_id: The unique identifier for a Microsoft Azure subscription. (required)
        :type subscription_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param resource_group_name: Name of the resource group within the Azure subscription. (required)
        :type resource_group_name: str
        :param media_service_name: Name of the Media Service. (required)
        :type media_service_name: str
        :param parameters: Media Service properties needed for update. (required)
        :type parameters: MediaService
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._media_service_update_serialize(
            subscription_id=subscription_id,
            api_version=api_version,
            resource_group_name=resource_group_name,
            media_service_name=media_service_name,
            parameters=parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MediaService",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _media_service_update_serialize(
        self,
        subscription_id,
        api_version,
        resource_group_name,
        media_service_name,
        parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if media_service_name is not None:
            _path_params['mediaServiceName'] = media_service_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if parameters is not None:
            _body_params = parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_list(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OperationListResult:
        """operations_list

        Lists all of the available Media Services REST API operations.

        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OperationListResult]:
        """operations_list

        Lists all of the available Media Services REST API operations.

        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2015-10-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """operations_list

        Lists all of the available Media Services REST API operations.

        :param api_version: Version of the API to be used with the client request. The current version is 2015-10-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_list_serialize(
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OperationListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_list_serialize(
        self,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/providers/Microsoft.Media/operations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



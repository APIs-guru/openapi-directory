# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2016-03-31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metric_list_result import MetricListResult

class TestMetricListResult(unittest.TestCase):
    """MetricListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetricListResult:
        """Test MetricListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetricListResult`
        """
        model = MetricListResult()
        if include_optional:
            return MetricListResult(
                value = [
                    openapi_client.models.metric.Metric(
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        metric_values = [
                            openapi_client.models.metric_value.MetricValue(
                                _count = 1.337, 
                                average = 1.337, 
                                maximum = 1.337, 
                                minimum = 1.337, 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                total = 1.337, )
                            ], 
                        name = openapi_client.models.metric_name.MetricName(
                            localized_value = '', 
                            value = '', ), 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        time_grain = '', 
                        unit = 'Count', )
                    ]
            )
        else:
            return MetricListResult(
        )
        """

    def testMetricListResult(self):
        """Test MetricListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

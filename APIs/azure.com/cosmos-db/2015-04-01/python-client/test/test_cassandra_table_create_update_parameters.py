# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2015-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cassandra_table_create_update_parameters import CassandraTableCreateUpdateParameters

class TestCassandraTableCreateUpdateParameters(unittest.TestCase):
    """CassandraTableCreateUpdateParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CassandraTableCreateUpdateParameters:
        """Test CassandraTableCreateUpdateParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CassandraTableCreateUpdateParameters`
        """
        model = CassandraTableCreateUpdateParameters()
        if include_optional:
            return CassandraTableCreateUpdateParameters(
                properties = openapi_client.models.cassandra_table_create_update_properties.CassandraTableCreateUpdateProperties(
                    options = {
                        'key' : ''
                        }, 
                    resource = openapi_client.models.cassandra_table_resource.CassandraTableResource(
                        default_ttl = 56, 
                        id = '', 
                        schema = openapi_client.models.cassandra_schema.CassandraSchema(
                            cluster_keys = [
                                openapi_client.models.cluster_key.ClusterKey(
                                    name = '', 
                                    order_by = '', )
                                ], 
                            columns = [
                                openapi_client.models.column.Column(
                                    name = '', 
                                    type = '', )
                                ], 
                            partition_keys = [
                                openapi_client.models.cassandra_partition_key.CassandraPartitionKey(
                                    name = '', )
                                ], ), ), )
            )
        else:
            return CassandraTableCreateUpdateParameters(
                properties = openapi_client.models.cassandra_table_create_update_properties.CassandraTableCreateUpdateProperties(
                    options = {
                        'key' : ''
                        }, 
                    resource = openapi_client.models.cassandra_table_resource.CassandraTableResource(
                        default_ttl = 56, 
                        id = '', 
                        schema = openapi_client.models.cassandra_schema.CassandraSchema(
                            cluster_keys = [
                                openapi_client.models.cluster_key.ClusterKey(
                                    name = '', 
                                    order_by = '', )
                                ], 
                            columns = [
                                openapi_client.models.column.Column(
                                    name = '', 
                                    type = '', )
                                ], 
                            partition_keys = [
                                openapi_client.models.cassandra_partition_key.CassandraPartitionKey(
                                    name = '', )
                                ], ), ), ),
        )
        """

    def testCassandraTableCreateUpdateParameters(self):
        """Test CassandraTableCreateUpdateParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2015-04-08
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.conflict_resolution_policy import ConflictResolutionPolicy
from openapi_client.models.container_partition_key import ContainerPartitionKey
from openapi_client.models.indexing_policy import IndexingPolicy
from openapi_client.models.unique_key_policy import UniqueKeyPolicy
from typing import Optional, Set
from typing_extensions import Self

class GremlinGraphProperties(BaseModel):
    """
    The properties of an Azure Cosmos DB Gremlin graph
    """ # noqa: E501
    conflict_resolution_policy: Optional[ConflictResolutionPolicy] = Field(default=None, alias="conflictResolutionPolicy")
    default_ttl: Optional[StrictInt] = Field(default=None, description="Default time to live", alias="defaultTtl")
    id: StrictStr = Field(description="Name of the Cosmos DB Gremlin graph")
    indexing_policy: Optional[IndexingPolicy] = Field(default=None, alias="indexingPolicy")
    partition_key: Optional[ContainerPartitionKey] = Field(default=None, alias="partitionKey")
    unique_key_policy: Optional[UniqueKeyPolicy] = Field(default=None, alias="uniqueKeyPolicy")
    etag: Optional[StrictStr] = Field(default=None, description="A system generated property representing the resource etag required for optimistic concurrency control.", alias="_etag")
    rid: Optional[StrictStr] = Field(default=None, description="A system generated property. A unique identifier.", alias="_rid")
    ts: Optional[Dict[str, Any]] = Field(default=None, description="A system generated property that denotes the last updated timestamp of the resource.", alias="_ts")
    __properties: ClassVar[List[str]] = ["conflictResolutionPolicy", "defaultTtl", "id", "indexingPolicy", "partitionKey", "uniqueKeyPolicy", "_etag", "_rid", "_ts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GremlinGraphProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conflict_resolution_policy
        if self.conflict_resolution_policy:
            _dict['conflictResolutionPolicy'] = self.conflict_resolution_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indexing_policy
        if self.indexing_policy:
            _dict['indexingPolicy'] = self.indexing_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_key
        if self.partition_key:
            _dict['partitionKey'] = self.partition_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unique_key_policy
        if self.unique_key_policy:
            _dict['uniqueKeyPolicy'] = self.unique_key_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GremlinGraphProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conflictResolutionPolicy": ConflictResolutionPolicy.from_dict(obj["conflictResolutionPolicy"]) if obj.get("conflictResolutionPolicy") is not None else None,
            "defaultTtl": obj.get("defaultTtl"),
            "id": obj.get("id"),
            "indexingPolicy": IndexingPolicy.from_dict(obj["indexingPolicy"]) if obj.get("indexingPolicy") is not None else None,
            "partitionKey": ContainerPartitionKey.from_dict(obj["partitionKey"]) if obj.get("partitionKey") is not None else None,
            "uniqueKeyPolicy": UniqueKeyPolicy.from_dict(obj["uniqueKeyPolicy"]) if obj.get("uniqueKeyPolicy") is not None else None,
            "_etag": obj.get("_etag"),
            "_rid": obj.get("_rid"),
            "_ts": obj.get("_ts")
        })
        return _obj



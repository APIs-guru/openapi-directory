# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2015-04-08
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database_account_create_update_parameters import DatabaseAccountCreateUpdateParameters

class TestDatabaseAccountCreateUpdateParameters(unittest.TestCase):
    """DatabaseAccountCreateUpdateParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatabaseAccountCreateUpdateParameters:
        """Test DatabaseAccountCreateUpdateParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatabaseAccountCreateUpdateParameters`
        """
        model = DatabaseAccountCreateUpdateParameters()
        if include_optional:
            return DatabaseAccountCreateUpdateParameters(
                kind = 'GlobalDocumentDB',
                properties = openapi_client.models.database_account_create_update_properties.DatabaseAccountCreateUpdateProperties(
                    capabilities = [
                        openapi_client.models.capability.Capability(
                            name = '', )
                        ], 
                    connector_offer = 'Small', 
                    consistency_policy = openapi_client.models.consistency_policy.ConsistencyPolicy(
                        default_consistency_level = 'Eventual', 
                        max_interval_in_seconds = 5, 
                        max_staleness_prefix = 1, ), 
                    database_account_offer_type = 'Standard', 
                    enable_automatic_failover = True, 
                    enable_cassandra_connector = True, 
                    enable_multiple_write_locations = True, 
                    ip_range_filter = '', 
                    is_virtual_network_filter_enabled = True, 
                    locations = [
                        openapi_client.models.location.Location(
                            document_endpoint = '', 
                            failover_priority = 0, 
                            id = '', 
                            is_zone_redundant = True, 
                            location_name = '', 
                            provisioning_state = '', )
                        ], 
                    virtual_network_rules = [
                        openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                            id = '', 
                            ignore_missing_v_net_service_endpoint = True, )
                        ], ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return DatabaseAccountCreateUpdateParameters(
                properties = openapi_client.models.database_account_create_update_properties.DatabaseAccountCreateUpdateProperties(
                    capabilities = [
                        openapi_client.models.capability.Capability(
                            name = '', )
                        ], 
                    connector_offer = 'Small', 
                    consistency_policy = openapi_client.models.consistency_policy.ConsistencyPolicy(
                        default_consistency_level = 'Eventual', 
                        max_interval_in_seconds = 5, 
                        max_staleness_prefix = 1, ), 
                    database_account_offer_type = 'Standard', 
                    enable_automatic_failover = True, 
                    enable_cassandra_connector = True, 
                    enable_multiple_write_locations = True, 
                    ip_range_filter = '', 
                    is_virtual_network_filter_enabled = True, 
                    locations = [
                        openapi_client.models.location.Location(
                            document_endpoint = '', 
                            failover_priority = 0, 
                            id = '', 
                            is_zone_redundant = True, 
                            location_name = '', 
                            provisioning_state = '', )
                        ], 
                    virtual_network_rules = [
                        openapi_client.models.virtual_network_rule.VirtualNetworkRule(
                            id = '', 
                            ignore_missing_v_net_service_endpoint = True, )
                        ], ),
        )
        """

    def testDatabaseAccountCreateUpdateParameters(self):
        """Test DatabaseAccountCreateUpdateParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

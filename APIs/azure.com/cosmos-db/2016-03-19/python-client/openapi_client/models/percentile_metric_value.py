# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2016-03-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PercentileMetricValue(BaseModel):
    """
    Represents percentile metrics values.
    """ # noqa: E501
    p10: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 10th percentile value for the metric.", alias="P10")
    p25: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 25th percentile value for the metric.", alias="P25")
    p50: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 50th percentile value for the metric.", alias="P50")
    p75: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 75th percentile value for the metric.", alias="P75")
    p90: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 90th percentile value for the metric.", alias="P90")
    p95: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 95th percentile value for the metric.", alias="P95")
    p99: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 99th percentile value for the metric.", alias="P99")
    count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of values for the metric.", alias="_count")
    average: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The average value of the metric.")
    maximum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The max value of the metric.")
    minimum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The min value of the metric.")
    timestamp: Optional[datetime] = Field(default=None, description="The metric timestamp (ISO-8601 format).")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total value of the metric.")
    __properties: ClassVar[List[str]] = ["_count", "average", "maximum", "minimum", "timestamp", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PercentileMetricValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "p10",
            "p25",
            "p50",
            "p75",
            "p90",
            "p95",
            "p99",
            "count",
            "average",
            "maximum",
            "minimum",
            "timestamp",
            "total",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PercentileMetricValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_count": obj.get("_count"),
            "average": obj.get("average"),
            "maximum": obj.get("maximum"),
            "minimum": obj.get("minimum"),
            "timestamp": obj.get("timestamp"),
            "total": obj.get("total")
        })
        return _obj



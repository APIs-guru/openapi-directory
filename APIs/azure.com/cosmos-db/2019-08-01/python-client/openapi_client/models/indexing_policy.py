# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2019-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.composite_path import CompositePath
from openapi_client.models.excluded_path import ExcludedPath
from openapi_client.models.included_path import IncludedPath
from openapi_client.models.spatial_spec import SpatialSpec
from typing import Optional, Set
from typing_extensions import Self

class IndexingPolicy(BaseModel):
    """
    Cosmos DB indexing policy
    """ # noqa: E501
    automatic: Optional[StrictBool] = Field(default=None, description="Indicates if the indexing policy is automatic")
    composite_indexes: Optional[List[List[CompositePath]]] = Field(default=None, description="List of composite path list", alias="compositeIndexes")
    excluded_paths: Optional[List[ExcludedPath]] = Field(default=None, description="List of paths to exclude from indexing", alias="excludedPaths")
    included_paths: Optional[List[IncludedPath]] = Field(default=None, description="List of paths to include in the indexing", alias="includedPaths")
    indexing_mode: Optional[StrictStr] = Field(default='Consistent', description="Indicates the indexing mode.", alias="indexingMode")
    spatial_indexes: Optional[List[SpatialSpec]] = Field(default=None, description="List of spatial specifics", alias="spatialIndexes")
    __properties: ClassVar[List[str]] = ["automatic", "compositeIndexes", "excludedPaths", "includedPaths", "indexingMode", "spatialIndexes"]

    @field_validator('indexing_mode')
    def indexing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Consistent', 'Lazy', 'None']):
            raise ValueError("must be one of enum values ('Consistent', 'Lazy', 'None')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexingPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in composite_indexes (list of list)
        _items = []
        if self.composite_indexes:
            for _item_composite_indexes in self.composite_indexes:
                if _item_composite_indexes:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_composite_indexes if _inner_item is not None]
                    )
            _dict['compositeIndexes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_paths (list)
        _items = []
        if self.excluded_paths:
            for _item_excluded_paths in self.excluded_paths:
                if _item_excluded_paths:
                    _items.append(_item_excluded_paths.to_dict())
            _dict['excludedPaths'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in included_paths (list)
        _items = []
        if self.included_paths:
            for _item_included_paths in self.included_paths:
                if _item_included_paths:
                    _items.append(_item_included_paths.to_dict())
            _dict['includedPaths'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spatial_indexes (list)
        _items = []
        if self.spatial_indexes:
            for _item_spatial_indexes in self.spatial_indexes:
                if _item_spatial_indexes:
                    _items.append(_item_spatial_indexes.to_dict())
            _dict['spatialIndexes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexingPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automatic": obj.get("automatic"),
            "compositeIndexes": [
                    [CompositePath.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["compositeIndexes"]
                ] if obj.get("compositeIndexes") is not None else None,
            "excludedPaths": [ExcludedPath.from_dict(_item) for _item in obj["excludedPaths"]] if obj.get("excludedPaths") is not None else None,
            "includedPaths": [IncludedPath.from_dict(_item) for _item in obj["includedPaths"]] if obj.get("includedPaths") is not None else None,
            "indexingMode": obj.get("indexingMode") if obj.get("indexingMode") is not None else 'Consistent',
            "spatialIndexes": [SpatialSpec.from_dict(_item) for _item in obj["spatialIndexes"]] if obj.get("spatialIndexes") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2019-12-12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.cassandra_keyspace_create_update_parameters import CassandraKeyspaceCreateUpdateParameters
from openapi_client.models.cassandra_keyspace_get_results import CassandraKeyspaceGetResults
from openapi_client.models.cassandra_keyspace_list_result import CassandraKeyspaceListResult
from openapi_client.models.cassandra_table_create_update_parameters import CassandraTableCreateUpdateParameters
from openapi_client.models.cassandra_table_get_results import CassandraTableGetResults
from openapi_client.models.cassandra_table_list_result import CassandraTableListResult
from openapi_client.models.database_account_create_update_parameters import DatabaseAccountCreateUpdateParameters
from openapi_client.models.database_account_get_results import DatabaseAccountGetResults
from openapi_client.models.database_account_list_connection_strings_result import DatabaseAccountListConnectionStringsResult
from openapi_client.models.database_account_list_keys_result import DatabaseAccountListKeysResult
from openapi_client.models.database_account_list_read_only_keys_result import DatabaseAccountListReadOnlyKeysResult
from openapi_client.models.database_account_regenerate_key_parameters import DatabaseAccountRegenerateKeyParameters
from openapi_client.models.database_account_update_parameters import DatabaseAccountUpdateParameters
from openapi_client.models.database_accounts_list_result import DatabaseAccountsListResult
from openapi_client.models.failover_policies import FailoverPolicies
from openapi_client.models.gremlin_database_create_update_parameters import GremlinDatabaseCreateUpdateParameters
from openapi_client.models.gremlin_database_get_results import GremlinDatabaseGetResults
from openapi_client.models.gremlin_database_list_result import GremlinDatabaseListResult
from openapi_client.models.gremlin_graph_create_update_parameters import GremlinGraphCreateUpdateParameters
from openapi_client.models.gremlin_graph_get_results import GremlinGraphGetResults
from openapi_client.models.gremlin_graph_list_result import GremlinGraphListResult
from openapi_client.models.metric_definitions_list_result import MetricDefinitionsListResult
from openapi_client.models.metric_list_result import MetricListResult
from openapi_client.models.mongo_db_collection_create_update_parameters import MongoDBCollectionCreateUpdateParameters
from openapi_client.models.mongo_db_collection_get_results import MongoDBCollectionGetResults
from openapi_client.models.mongo_db_collection_list_result import MongoDBCollectionListResult
from openapi_client.models.mongo_db_database_create_update_parameters import MongoDBDatabaseCreateUpdateParameters
from openapi_client.models.mongo_db_database_get_results import MongoDBDatabaseGetResults
from openapi_client.models.mongo_db_database_list_result import MongoDBDatabaseListResult
from openapi_client.models.partition_metric_list_result import PartitionMetricListResult
from openapi_client.models.partition_usages_result import PartitionUsagesResult
from openapi_client.models.percentile_metric_list_result import PercentileMetricListResult
from openapi_client.models.region_for_online_offline import RegionForOnlineOffline
from openapi_client.models.sql_container_create_update_parameters import SqlContainerCreateUpdateParameters
from openapi_client.models.sql_container_get_results import SqlContainerGetResults
from openapi_client.models.sql_container_list_result import SqlContainerListResult
from openapi_client.models.sql_database_create_update_parameters import SqlDatabaseCreateUpdateParameters
from openapi_client.models.sql_database_get_results import SqlDatabaseGetResults
from openapi_client.models.sql_database_list_result import SqlDatabaseListResult
from openapi_client.models.sql_stored_procedure_create_update_parameters import SqlStoredProcedureCreateUpdateParameters
from openapi_client.models.sql_stored_procedure_get_results import SqlStoredProcedureGetResults
from openapi_client.models.sql_stored_procedure_list_result import SqlStoredProcedureListResult
from openapi_client.models.sql_trigger_create_update_parameters import SqlTriggerCreateUpdateParameters
from openapi_client.models.sql_trigger_get_results import SqlTriggerGetResults
from openapi_client.models.sql_trigger_list_result import SqlTriggerListResult
from openapi_client.models.sql_user_defined_function_create_update_parameters import SqlUserDefinedFunctionCreateUpdateParameters
from openapi_client.models.sql_user_defined_function_get_results import SqlUserDefinedFunctionGetResults
from openapi_client.models.sql_user_defined_function_list_result import SqlUserDefinedFunctionListResult
from openapi_client.models.table_create_update_parameters import TableCreateUpdateParameters
from openapi_client.models.table_get_results import TableGetResults
from openapi_client.models.table_list_result import TableListResult
from openapi_client.models.throughput_settings_get_results import ThroughputSettingsGetResults
from openapi_client.models.throughput_settings_update_parameters import ThroughputSettingsUpdateParameters
from openapi_client.models.usages_result import UsagesResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cassandra_resources_create_update_cassandra_keyspace(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_cassandra_keyspace_parameters: Annotated[CassandraKeyspaceCreateUpdateParameters, Field(description="The parameters to provide for the current Cassandra keyspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CassandraKeyspaceGetResults:
        """cassandra_resources_create_update_cassandra_keyspace

        Create or update an Azure Cosmos DB Cassandra keyspace

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_cassandra_keyspace_parameters: The parameters to provide for the current Cassandra keyspace. (required)
        :type create_update_cassandra_keyspace_parameters: CassandraKeyspaceCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_create_update_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            create_update_cassandra_keyspace_parameters=create_update_cassandra_keyspace_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_create_update_cassandra_keyspace_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_cassandra_keyspace_parameters: Annotated[CassandraKeyspaceCreateUpdateParameters, Field(description="The parameters to provide for the current Cassandra keyspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CassandraKeyspaceGetResults]:
        """cassandra_resources_create_update_cassandra_keyspace

        Create or update an Azure Cosmos DB Cassandra keyspace

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_cassandra_keyspace_parameters: The parameters to provide for the current Cassandra keyspace. (required)
        :type create_update_cassandra_keyspace_parameters: CassandraKeyspaceCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_create_update_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            create_update_cassandra_keyspace_parameters=create_update_cassandra_keyspace_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_create_update_cassandra_keyspace_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_cassandra_keyspace_parameters: Annotated[CassandraKeyspaceCreateUpdateParameters, Field(description="The parameters to provide for the current Cassandra keyspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_create_update_cassandra_keyspace

        Create or update an Azure Cosmos DB Cassandra keyspace

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_cassandra_keyspace_parameters: The parameters to provide for the current Cassandra keyspace. (required)
        :type create_update_cassandra_keyspace_parameters: CassandraKeyspaceCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_create_update_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            create_update_cassandra_keyspace_parameters=create_update_cassandra_keyspace_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_create_update_cassandra_keyspace_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        api_version,
        create_update_cassandra_keyspace_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_cassandra_keyspace_parameters is not None:
            _body_params = create_update_cassandra_keyspace_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_create_update_cassandra_table(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_cassandra_table_parameters: Annotated[CassandraTableCreateUpdateParameters, Field(description="The parameters to provide for the current Cassandra Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CassandraTableGetResults:
        """cassandra_resources_create_update_cassandra_table

        Create or update an Azure Cosmos DB Cassandra Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_cassandra_table_parameters: The parameters to provide for the current Cassandra Table. (required)
        :type create_update_cassandra_table_parameters: CassandraTableCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_create_update_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            create_update_cassandra_table_parameters=create_update_cassandra_table_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_create_update_cassandra_table_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_cassandra_table_parameters: Annotated[CassandraTableCreateUpdateParameters, Field(description="The parameters to provide for the current Cassandra Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CassandraTableGetResults]:
        """cassandra_resources_create_update_cassandra_table

        Create or update an Azure Cosmos DB Cassandra Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_cassandra_table_parameters: The parameters to provide for the current Cassandra Table. (required)
        :type create_update_cassandra_table_parameters: CassandraTableCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_create_update_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            create_update_cassandra_table_parameters=create_update_cassandra_table_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_create_update_cassandra_table_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_cassandra_table_parameters: Annotated[CassandraTableCreateUpdateParameters, Field(description="The parameters to provide for the current Cassandra Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_create_update_cassandra_table

        Create or update an Azure Cosmos DB Cassandra Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_cassandra_table_parameters: The parameters to provide for the current Cassandra Table. (required)
        :type create_update_cassandra_table_parameters: CassandraTableCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_create_update_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            create_update_cassandra_table_parameters=create_update_cassandra_table_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_create_update_cassandra_table_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        table_name,
        api_version,
        create_update_cassandra_table_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_cassandra_table_parameters is not None:
            _body_params = create_update_cassandra_table_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_delete_cassandra_keyspace(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """cassandra_resources_delete_cassandra_keyspace

        Deletes an existing Azure Cosmos DB Cassandra keyspace.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_delete_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_delete_cassandra_keyspace_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """cassandra_resources_delete_cassandra_keyspace

        Deletes an existing Azure Cosmos DB Cassandra keyspace.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_delete_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_delete_cassandra_keyspace_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_delete_cassandra_keyspace

        Deletes an existing Azure Cosmos DB Cassandra keyspace.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_delete_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_delete_cassandra_keyspace_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_delete_cassandra_table(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """cassandra_resources_delete_cassandra_table

        Deletes an existing Azure Cosmos DB Cassandra table.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_delete_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_delete_cassandra_table_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """cassandra_resources_delete_cassandra_table

        Deletes an existing Azure Cosmos DB Cassandra table.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_delete_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_delete_cassandra_table_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_delete_cassandra_table

        Deletes an existing Azure Cosmos DB Cassandra table.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_delete_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_delete_cassandra_table_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_get_cassandra_keyspace(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CassandraKeyspaceGetResults:
        """cassandra_resources_get_cassandra_keyspace

        Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_get_cassandra_keyspace_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CassandraKeyspaceGetResults]:
        """cassandra_resources_get_cassandra_keyspace

        Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_get_cassandra_keyspace_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_get_cassandra_keyspace

        Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_keyspace_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_get_cassandra_keyspace_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_get_cassandra_keyspace_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """cassandra_resources_get_cassandra_keyspace_throughput

        Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_keyspace_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_get_cassandra_keyspace_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """cassandra_resources_get_cassandra_keyspace_throughput

        Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_keyspace_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_get_cassandra_keyspace_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_get_cassandra_keyspace_throughput

        Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_keyspace_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_get_cassandra_keyspace_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_get_cassandra_table(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CassandraTableGetResults:
        """cassandra_resources_get_cassandra_table

        Gets the Cassandra table under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_get_cassandra_table_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CassandraTableGetResults]:
        """cassandra_resources_get_cassandra_table

        Gets the Cassandra table under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_get_cassandra_table_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_get_cassandra_table

        Gets the Cassandra table under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_get_cassandra_table_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_get_cassandra_table_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """cassandra_resources_get_cassandra_table_throughput

        Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_get_cassandra_table_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """cassandra_resources_get_cassandra_table_throughput

        Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_get_cassandra_table_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_get_cassandra_table_throughput

        Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_get_cassandra_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_get_cassandra_table_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_list_cassandra_keyspaces(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CassandraKeyspaceListResult:
        """cassandra_resources_list_cassandra_keyspaces

        Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_list_cassandra_keyspaces_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_list_cassandra_keyspaces_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CassandraKeyspaceListResult]:
        """cassandra_resources_list_cassandra_keyspaces

        Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_list_cassandra_keyspaces_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_list_cassandra_keyspaces_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_list_cassandra_keyspaces

        Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_list_cassandra_keyspaces_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraKeyspaceListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_list_cassandra_keyspaces_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_list_cassandra_tables(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CassandraTableListResult:
        """cassandra_resources_list_cassandra_tables

        Lists the Cassandra table under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_list_cassandra_tables_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_list_cassandra_tables_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CassandraTableListResult]:
        """cassandra_resources_list_cassandra_tables

        Lists the Cassandra table under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_list_cassandra_tables_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_list_cassandra_tables_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_list_cassandra_tables

        Lists the Cassandra table under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_list_cassandra_tables_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CassandraTableListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_list_cassandra_tables_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_update_cassandra_keyspace_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Cassandra Keyspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """cassandra_resources_update_cassandra_keyspace_throughput

        Update RUs per second of an Azure Cosmos DB Cassandra Keyspace

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_update_cassandra_keyspace_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_update_cassandra_keyspace_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Cassandra Keyspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """cassandra_resources_update_cassandra_keyspace_throughput

        Update RUs per second of an Azure Cosmos DB Cassandra Keyspace

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_update_cassandra_keyspace_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_update_cassandra_keyspace_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Cassandra Keyspace.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_update_cassandra_keyspace_throughput

        Update RUs per second of an Azure Cosmos DB Cassandra Keyspace

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Cassandra Keyspace. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_update_cassandra_keyspace_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_update_cassandra_keyspace_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cassandra_resources_update_cassandra_table_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Cassandra table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """cassandra_resources_update_cassandra_table_throughput

        Update RUs per second of an Azure Cosmos DB Cassandra table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Cassandra table. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_update_cassandra_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cassandra_resources_update_cassandra_table_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Cassandra table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """cassandra_resources_update_cassandra_table_throughput

        Update RUs per second of an Azure Cosmos DB Cassandra table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Cassandra table. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_update_cassandra_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cassandra_resources_update_cassandra_table_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        keyspace_name: Annotated[StrictStr, Field(description="Cosmos DB keyspace name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Cassandra table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cassandra_resources_update_cassandra_table_throughput

        Update RUs per second of an Azure Cosmos DB Cassandra table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param keyspace_name: Cosmos DB keyspace name. (required)
        :type keyspace_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Cassandra table. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cassandra_resources_update_cassandra_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            keyspace_name=keyspace_name,
            table_name=table_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cassandra_resources_update_cassandra_table_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        keyspace_name,
        table_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if keyspace_name is not None:
            _path_params['keyspaceName'] = keyspace_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_list_metric_definitions(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricDefinitionsListResult:
        """collection_list_metric_definitions

        Retrieves metric definitions for the given collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_list_metric_definitions_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricDefinitionsListResult]:
        """collection_list_metric_definitions

        Retrieves metric definitions for the given collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_list_metric_definitions_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_list_metric_definitions

        Retrieves metric definitions for the given collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_list_metric_definitions_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        collection_rid,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricListResult:
        """collection_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricListResult]:
        """collection_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        collection_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_list_usages(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsagesResult:
        """collection_list_usages

        Retrieves the usages (most recent storage data) for the given collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_list_usages_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsagesResult]:
        """collection_list_usages

        Retrieves the usages (most recent storage data) for the given collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_list_usages_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_list_usages

        Retrieves the usages (most recent storage data) for the given collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_list_usages_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        collection_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_partition_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PartitionMetricListResult:
        """collection_partition_list_metrics

        Retrieves the metrics determined by the given filter for the given collection, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_partition_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PartitionMetricListResult]:
        """collection_partition_list_metrics

        Retrieves the metrics determined by the given filter for the given collection, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_partition_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_partition_list_metrics

        Retrieves the metrics determined by the given filter for the given collection, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_partition_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        collection_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_partition_list_usages(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PartitionUsagesResult:
        """collection_partition_list_usages

        Retrieves the usages (most recent storage data) for the given collection, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionUsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_partition_list_usages_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PartitionUsagesResult]:
        """collection_partition_list_usages

        Retrieves the usages (most recent storage data) for the given collection, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionUsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_partition_list_usages_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_partition_list_usages

        Retrieves the usages (most recent storage data) for the given collection, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionUsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_partition_list_usages_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        collection_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_partition_region_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PartitionMetricListResult:
        """collection_partition_region_list_metrics

        Retrieves the metrics determined by the given filter for the given collection and region, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_partition_region_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PartitionMetricListResult]:
        """collection_partition_region_list_metrics

        Retrieves the metrics determined by the given filter for the given collection and region, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_partition_region_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_partition_region_list_metrics

        Retrieves the metrics determined by the given filter for the given collection and region, split by partition.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_partition_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_partition_region_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        region,
        database_rid,
        collection_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if region is not None:
            _path_params['region'] = region
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def collection_region_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricListResult:
        """collection_region_list_metrics

        Retrieves the metrics determined by the given filter for the given database account, collection and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def collection_region_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricListResult]:
        """collection_region_list_metrics

        Retrieves the metrics determined by the given filter for the given database account, collection and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def collection_region_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """collection_region_list_metrics

        Retrieves the metrics determined by the given filter for the given database account, collection and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _collection_region_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        region,
        database_rid,
        collection_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if region is not None:
            _path_params['region'] = region
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_account_region_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricListResult:
        """database_account_region_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_account_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_account_region_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricListResult]:
        """database_account_region_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_account_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_account_region_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_account_region_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_account_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_account_region_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        region,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if region is not None:
            _path_params['region'] = region
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_check_name_exists(
        self,
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """database_accounts_check_name_exists

        Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.

        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_check_name_exists_serialize(
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_check_name_exists_with_http_info(
        self,
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """database_accounts_check_name_exists

        Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.

        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_check_name_exists_serialize(
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_check_name_exists_without_preload_content(
        self,
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_check_name_exists

        Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.

        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_check_name_exists_serialize(
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_check_name_exists_serialize(
        self,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_create_or_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_parameters: Annotated[DatabaseAccountCreateUpdateParameters, Field(description="The parameters to provide for the current database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountGetResults:
        """database_accounts_create_or_update

        Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when performing updates on an account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_parameters: The parameters to provide for the current database account. (required)
        :type create_update_parameters: DatabaseAccountCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            create_update_parameters=create_update_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_create_or_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_parameters: Annotated[DatabaseAccountCreateUpdateParameters, Field(description="The parameters to provide for the current database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountGetResults]:
        """database_accounts_create_or_update

        Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when performing updates on an account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_parameters: The parameters to provide for the current database account. (required)
        :type create_update_parameters: DatabaseAccountCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            create_update_parameters=create_update_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_create_or_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_parameters: Annotated[DatabaseAccountCreateUpdateParameters, Field(description="The parameters to provide for the current database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_create_or_update

        Creates or updates an Azure Cosmos DB database account. The \"Update\" method is preferred when performing updates on an account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_parameters: The parameters to provide for the current database account. (required)
        :type create_update_parameters: DatabaseAccountCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_create_or_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            create_update_parameters=create_update_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_create_or_update_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        create_update_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_parameters is not None:
            _body_params = create_update_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_delete(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """database_accounts_delete

        Deletes an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_delete_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """database_accounts_delete

        Deletes an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_delete_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_delete

        Deletes an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_delete_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_delete_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_failover_priority_change(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        failover_parameters: Annotated[FailoverPolicies, Field(description="The new failover policies for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """database_accounts_failover_priority_change

        Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param failover_parameters: The new failover policies for the database account. (required)
        :type failover_parameters: FailoverPolicies
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_failover_priority_change_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            failover_parameters=failover_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_failover_priority_change_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        failover_parameters: Annotated[FailoverPolicies, Field(description="The new failover policies for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """database_accounts_failover_priority_change

        Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param failover_parameters: The new failover policies for the database account. (required)
        :type failover_parameters: FailoverPolicies
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_failover_priority_change_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            failover_parameters=failover_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_failover_priority_change_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        failover_parameters: Annotated[FailoverPolicies, Field(description="The new failover policies for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_failover_priority_change

        Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param failover_parameters: The new failover policies for the database account. (required)
        :type failover_parameters: FailoverPolicies
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_failover_priority_change_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            failover_parameters=failover_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_failover_priority_change_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        failover_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if failover_parameters is not None:
            _body_params = failover_parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_get(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountGetResults:
        """database_accounts_get

        Retrieves the properties of an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_get_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountGetResults]:
        """database_accounts_get

        Retrieves the properties of an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_get_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_get

        Retrieves the properties of an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_get_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_get_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_get_read_only_keys(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountListReadOnlyKeysResult:
        """database_accounts_get_read_only_keys

        Lists the read-only access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_get_read_only_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListReadOnlyKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_get_read_only_keys_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountListReadOnlyKeysResult]:
        """database_accounts_get_read_only_keys

        Lists the read-only access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_get_read_only_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListReadOnlyKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_get_read_only_keys_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_get_read_only_keys

        Lists the read-only access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_get_read_only_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListReadOnlyKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_get_read_only_keys_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountsListResult:
        """database_accounts_list

        Lists all the Azure Cosmos DB database accounts available under the subscription.

        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_with_http_info(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountsListResult]:
        """database_accounts_list

        Lists all the Azure Cosmos DB database accounts available under the subscription.

        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_without_preload_content(
        self,
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list

        Lists all the Azure Cosmos DB database accounts available under the subscription.

        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_serialize(
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_serialize(
        self,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_by_resource_group(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountsListResult:
        """database_accounts_list_by_resource_group

        Lists all the Azure Cosmos DB database accounts available under the given resource group.

        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_by_resource_group_with_http_info(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountsListResult]:
        """database_accounts_list_by_resource_group

        Lists all the Azure Cosmos DB database accounts available under the given resource group.

        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_by_resource_group_without_preload_content(
        self,
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_by_resource_group

        Lists all the Azure Cosmos DB database accounts available under the given resource group.

        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_by_resource_group_serialize(
            resource_group_name=resource_group_name,
            api_version=api_version,
            subscription_id=subscription_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_by_resource_group_serialize(
        self,
        resource_group_name,
        api_version,
        subscription_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_connection_strings(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountListConnectionStringsResult:
        """database_accounts_list_connection_strings

        Lists the connection strings for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_connection_strings_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListConnectionStringsResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_connection_strings_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountListConnectionStringsResult]:
        """database_accounts_list_connection_strings

        Lists the connection strings for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_connection_strings_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListConnectionStringsResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_connection_strings_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_connection_strings

        Lists the connection strings for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_connection_strings_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListConnectionStringsResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_connection_strings_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_keys(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountListKeysResult:
        """database_accounts_list_keys

        Lists the access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_keys_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountListKeysResult]:
        """database_accounts_list_keys

        Lists the access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_keys_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_keys

        Lists the access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_keys_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_metric_definitions(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricDefinitionsListResult:
        """database_accounts_list_metric_definitions

        Retrieves metric definitions for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_metric_definitions_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricDefinitionsListResult]:
        """database_accounts_list_metric_definitions

        Retrieves metric definitions for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_metric_definitions_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_metric_definitions

        Retrieves metric definitions for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_metric_definitions_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricListResult:
        """database_accounts_list_metrics

        Retrieves the metrics determined by the given filter for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricListResult]:
        """database_accounts_list_metrics

        Retrieves the metrics determined by the given filter for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_metrics

        Retrieves the metrics determined by the given filter for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_read_only_keys(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountListReadOnlyKeysResult:
        """database_accounts_list_read_only_keys

        Lists the read-only access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_read_only_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListReadOnlyKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_read_only_keys_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountListReadOnlyKeysResult]:
        """database_accounts_list_read_only_keys

        Lists the read-only access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_read_only_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListReadOnlyKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_read_only_keys_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_read_only_keys

        Lists the read-only access keys for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_read_only_keys_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountListReadOnlyKeysResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_read_only_keys_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_list_usages(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsagesResult:
        """database_accounts_list_usages

        Retrieves the usages (most recent data) for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_list_usages_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsagesResult]:
        """database_accounts_list_usages

        Retrieves the usages (most recent data) for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_list_usages_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_list_usages

        Retrieves the usages (most recent data) for the given database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_list_usages_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_offline_region(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        region_parameter_for_offline: Annotated[RegionForOnlineOffline, Field(description="Cosmos DB region to offline for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """database_accounts_offline_region

        Offline the specified region for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param region_parameter_for_offline: Cosmos DB region to offline for the database account. (required)
        :type region_parameter_for_offline: RegionForOnlineOffline
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_offline_region_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            region_parameter_for_offline=region_parameter_for_offline,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_offline_region_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        region_parameter_for_offline: Annotated[RegionForOnlineOffline, Field(description="Cosmos DB region to offline for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """database_accounts_offline_region

        Offline the specified region for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param region_parameter_for_offline: Cosmos DB region to offline for the database account. (required)
        :type region_parameter_for_offline: RegionForOnlineOffline
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_offline_region_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            region_parameter_for_offline=region_parameter_for_offline,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_offline_region_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        region_parameter_for_offline: Annotated[RegionForOnlineOffline, Field(description="Cosmos DB region to offline for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_offline_region

        Offline the specified region for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param region_parameter_for_offline: Cosmos DB region to offline for the database account. (required)
        :type region_parameter_for_offline: RegionForOnlineOffline
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_offline_region_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            region_parameter_for_offline=region_parameter_for_offline,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_offline_region_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        region_parameter_for_offline,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if region_parameter_for_offline is not None:
            _body_params = region_parameter_for_offline


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_online_region(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        region_parameter_for_online: Annotated[RegionForOnlineOffline, Field(description="Cosmos DB region to online for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """database_accounts_online_region

        Online the specified region for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param region_parameter_for_online: Cosmos DB region to online for the database account. (required)
        :type region_parameter_for_online: RegionForOnlineOffline
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_online_region_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            region_parameter_for_online=region_parameter_for_online,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_online_region_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        region_parameter_for_online: Annotated[RegionForOnlineOffline, Field(description="Cosmos DB region to online for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """database_accounts_online_region

        Online the specified region for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param region_parameter_for_online: Cosmos DB region to online for the database account. (required)
        :type region_parameter_for_online: RegionForOnlineOffline
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_online_region_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            region_parameter_for_online=region_parameter_for_online,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_online_region_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        region_parameter_for_online: Annotated[RegionForOnlineOffline, Field(description="Cosmos DB region to online for the database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_online_region

        Online the specified region for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param region_parameter_for_online: Cosmos DB region to online for the database account. (required)
        :type region_parameter_for_online: RegionForOnlineOffline
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_online_region_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            region_parameter_for_online=region_parameter_for_online,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_online_region_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        region_parameter_for_online,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if region_parameter_for_online is not None:
            _body_params = region_parameter_for_online


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_regenerate_key(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        key_to_regenerate: Annotated[DatabaseAccountRegenerateKeyParameters, Field(description="The name of the key to regenerate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """database_accounts_regenerate_key

        Regenerates an access key for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param key_to_regenerate: The name of the key to regenerate. (required)
        :type key_to_regenerate: DatabaseAccountRegenerateKeyParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_regenerate_key_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            key_to_regenerate=key_to_regenerate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_regenerate_key_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        key_to_regenerate: Annotated[DatabaseAccountRegenerateKeyParameters, Field(description="The name of the key to regenerate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """database_accounts_regenerate_key

        Regenerates an access key for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param key_to_regenerate: The name of the key to regenerate. (required)
        :type key_to_regenerate: DatabaseAccountRegenerateKeyParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_regenerate_key_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            key_to_regenerate=key_to_regenerate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_regenerate_key_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        key_to_regenerate: Annotated[DatabaseAccountRegenerateKeyParameters, Field(description="The name of the key to regenerate.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_regenerate_key

        Regenerates an access key for the specified Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param key_to_regenerate: The name of the key to regenerate. (required)
        :type key_to_regenerate: DatabaseAccountRegenerateKeyParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_regenerate_key_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            key_to_regenerate=key_to_regenerate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_regenerate_key_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        key_to_regenerate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if key_to_regenerate is not None:
            _body_params = key_to_regenerate



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_accounts_update(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_parameters: Annotated[DatabaseAccountUpdateParameters, Field(description="The parameters to provide for the current database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DatabaseAccountGetResults:
        """database_accounts_update

        Updates the properties of an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_parameters: The parameters to provide for the current database account. (required)
        :type update_parameters: DatabaseAccountUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            update_parameters=update_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_accounts_update_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_parameters: Annotated[DatabaseAccountUpdateParameters, Field(description="The parameters to provide for the current database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DatabaseAccountGetResults]:
        """database_accounts_update

        Updates the properties of an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_parameters: The parameters to provide for the current database account. (required)
        :type update_parameters: DatabaseAccountUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            update_parameters=update_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_accounts_update_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_parameters: Annotated[DatabaseAccountUpdateParameters, Field(description="The parameters to provide for the current database account.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_accounts_update

        Updates the properties of an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_parameters: The parameters to provide for the current database account. (required)
        :type update_parameters: DatabaseAccountUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_accounts_update_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            update_parameters=update_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DatabaseAccountGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_accounts_update_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        update_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_parameters is not None:
            _body_params = update_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_list_metric_definitions(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricDefinitionsListResult:
        """database_list_metric_definitions

        Retrieves metric definitions for the given database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_list_metric_definitions_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricDefinitionsListResult]:
        """database_list_metric_definitions

        Retrieves metric definitions for the given database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_list_metric_definitions_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_list_metric_definitions

        Retrieves metric definitions for the given database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_metric_definitions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricDefinitionsListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_list_metric_definitions_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricListResult:
        """database_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricListResult]:
        """database_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_list_metrics

        Retrieves the metrics determined by the given filter for the given database account and database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def database_list_usages(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsagesResult:
        """database_list_usages

        Retrieves the usages (most recent data) for the given database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def database_list_usages_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsagesResult]:
        """database_list_usages

        Retrieves the usages (most recent data) for the given database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def database_list_usages_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[Optional[StrictStr], Field(description="An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """database_list_usages

        Retrieves the usages (most recent data) for the given database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._database_list_usages_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsagesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _database_list_usages_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_create_update_gremlin_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_gremlin_database_parameters: Annotated[GremlinDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current Gremlin database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GremlinDatabaseGetResults:
        """gremlin_resources_create_update_gremlin_database

        Create or update an Azure Cosmos DB Gremlin database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_gremlin_database_parameters: The parameters to provide for the current Gremlin database. (required)
        :type create_update_gremlin_database_parameters: GremlinDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_create_update_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_gremlin_database_parameters=create_update_gremlin_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_create_update_gremlin_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_gremlin_database_parameters: Annotated[GremlinDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current Gremlin database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GremlinDatabaseGetResults]:
        """gremlin_resources_create_update_gremlin_database

        Create or update an Azure Cosmos DB Gremlin database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_gremlin_database_parameters: The parameters to provide for the current Gremlin database. (required)
        :type create_update_gremlin_database_parameters: GremlinDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_create_update_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_gremlin_database_parameters=create_update_gremlin_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_create_update_gremlin_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_gremlin_database_parameters: Annotated[GremlinDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current Gremlin database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_create_update_gremlin_database

        Create or update an Azure Cosmos DB Gremlin database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_gremlin_database_parameters: The parameters to provide for the current Gremlin database. (required)
        :type create_update_gremlin_database_parameters: GremlinDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_create_update_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_gremlin_database_parameters=create_update_gremlin_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_create_update_gremlin_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        create_update_gremlin_database_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_gremlin_database_parameters is not None:
            _body_params = create_update_gremlin_database_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_create_update_gremlin_graph(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_gremlin_graph_parameters: Annotated[GremlinGraphCreateUpdateParameters, Field(description="The parameters to provide for the current Gremlin graph.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GremlinGraphGetResults:
        """gremlin_resources_create_update_gremlin_graph

        Create or update an Azure Cosmos DB Gremlin graph

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_gremlin_graph_parameters: The parameters to provide for the current Gremlin graph. (required)
        :type create_update_gremlin_graph_parameters: GremlinGraphCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_create_update_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            create_update_gremlin_graph_parameters=create_update_gremlin_graph_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_create_update_gremlin_graph_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_gremlin_graph_parameters: Annotated[GremlinGraphCreateUpdateParameters, Field(description="The parameters to provide for the current Gremlin graph.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GremlinGraphGetResults]:
        """gremlin_resources_create_update_gremlin_graph

        Create or update an Azure Cosmos DB Gremlin graph

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_gremlin_graph_parameters: The parameters to provide for the current Gremlin graph. (required)
        :type create_update_gremlin_graph_parameters: GremlinGraphCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_create_update_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            create_update_gremlin_graph_parameters=create_update_gremlin_graph_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_create_update_gremlin_graph_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_gremlin_graph_parameters: Annotated[GremlinGraphCreateUpdateParameters, Field(description="The parameters to provide for the current Gremlin graph.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_create_update_gremlin_graph

        Create or update an Azure Cosmos DB Gremlin graph

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_gremlin_graph_parameters: The parameters to provide for the current Gremlin graph. (required)
        :type create_update_gremlin_graph_parameters: GremlinGraphCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_create_update_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            create_update_gremlin_graph_parameters=create_update_gremlin_graph_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_create_update_gremlin_graph_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        graph_name,
        api_version,
        create_update_gremlin_graph_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if graph_name is not None:
            _path_params['graphName'] = graph_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_gremlin_graph_parameters is not None:
            _body_params = create_update_gremlin_graph_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_delete_gremlin_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """gremlin_resources_delete_gremlin_database

        Deletes an existing Azure Cosmos DB Gremlin database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_delete_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_delete_gremlin_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """gremlin_resources_delete_gremlin_database

        Deletes an existing Azure Cosmos DB Gremlin database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_delete_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_delete_gremlin_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_delete_gremlin_database

        Deletes an existing Azure Cosmos DB Gremlin database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_delete_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_delete_gremlin_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_delete_gremlin_graph(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """gremlin_resources_delete_gremlin_graph

        Deletes an existing Azure Cosmos DB Gremlin graph.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_delete_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_delete_gremlin_graph_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """gremlin_resources_delete_gremlin_graph

        Deletes an existing Azure Cosmos DB Gremlin graph.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_delete_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_delete_gremlin_graph_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_delete_gremlin_graph

        Deletes an existing Azure Cosmos DB Gremlin graph.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_delete_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_delete_gremlin_graph_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        graph_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if graph_name is not None:
            _path_params['graphName'] = graph_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_get_gremlin_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GremlinDatabaseGetResults:
        """gremlin_resources_get_gremlin_database

        Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_get_gremlin_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GremlinDatabaseGetResults]:
        """gremlin_resources_get_gremlin_database

        Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_get_gremlin_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_get_gremlin_database

        Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_get_gremlin_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_get_gremlin_database_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """gremlin_resources_get_gremlin_database_throughput

        Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_get_gremlin_database_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """gremlin_resources_get_gremlin_database_throughput

        Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_get_gremlin_database_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_get_gremlin_database_throughput

        Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_get_gremlin_database_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_get_gremlin_graph(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GremlinGraphGetResults:
        """gremlin_resources_get_gremlin_graph

        Gets the Gremlin graph under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_get_gremlin_graph_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GremlinGraphGetResults]:
        """gremlin_resources_get_gremlin_graph

        Gets the Gremlin graph under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_get_gremlin_graph_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_get_gremlin_graph

        Gets the Gremlin graph under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_graph_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_get_gremlin_graph_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        graph_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if graph_name is not None:
            _path_params['graphName'] = graph_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_get_gremlin_graph_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """gremlin_resources_get_gremlin_graph_throughput

        Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_graph_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_get_gremlin_graph_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """gremlin_resources_get_gremlin_graph_throughput

        Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_graph_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_get_gremlin_graph_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_get_gremlin_graph_throughput

        Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_get_gremlin_graph_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_get_gremlin_graph_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        graph_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if graph_name is not None:
            _path_params['graphName'] = graph_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_list_gremlin_databases(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GremlinDatabaseListResult:
        """gremlin_resources_list_gremlin_databases

        Lists the Gremlin databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_list_gremlin_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_list_gremlin_databases_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GremlinDatabaseListResult]:
        """gremlin_resources_list_gremlin_databases

        Lists the Gremlin databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_list_gremlin_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_list_gremlin_databases_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_list_gremlin_databases

        Lists the Gremlin databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_list_gremlin_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_list_gremlin_databases_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_list_gremlin_graphs(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GremlinGraphListResult:
        """gremlin_resources_list_gremlin_graphs

        Lists the Gremlin graph under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_list_gremlin_graphs_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_list_gremlin_graphs_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GremlinGraphListResult]:
        """gremlin_resources_list_gremlin_graphs

        Lists the Gremlin graph under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_list_gremlin_graphs_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_list_gremlin_graphs_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_list_gremlin_graphs

        Lists the Gremlin graph under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_list_gremlin_graphs_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GremlinGraphListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_list_gremlin_graphs_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_update_gremlin_database_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Gremlin database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """gremlin_resources_update_gremlin_database_throughput

        Update RUs per second of an Azure Cosmos DB Gremlin database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Gremlin database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_update_gremlin_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_update_gremlin_database_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Gremlin database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """gremlin_resources_update_gremlin_database_throughput

        Update RUs per second of an Azure Cosmos DB Gremlin database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Gremlin database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_update_gremlin_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_update_gremlin_database_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Gremlin database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_update_gremlin_database_throughput

        Update RUs per second of an Azure Cosmos DB Gremlin database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Gremlin database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_update_gremlin_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_update_gremlin_database_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def gremlin_resources_update_gremlin_graph_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Gremlin graph.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """gremlin_resources_update_gremlin_graph_throughput

        Update RUs per second of an Azure Cosmos DB Gremlin graph

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Gremlin graph. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_update_gremlin_graph_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gremlin_resources_update_gremlin_graph_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Gremlin graph.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """gremlin_resources_update_gremlin_graph_throughput

        Update RUs per second of an Azure Cosmos DB Gremlin graph

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Gremlin graph. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_update_gremlin_graph_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gremlin_resources_update_gremlin_graph_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        graph_name: Annotated[StrictStr, Field(description="Cosmos DB graph name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current Gremlin graph.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gremlin_resources_update_gremlin_graph_throughput

        Update RUs per second of an Azure Cosmos DB Gremlin graph

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param graph_name: Cosmos DB graph name. (required)
        :type graph_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current Gremlin graph. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gremlin_resources_update_gremlin_graph_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            graph_name=graph_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gremlin_resources_update_gremlin_graph_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        graph_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if graph_name is not None:
            _path_params['graphName'] = graph_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_create_update_mongo_db_collection(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_mongo_db_collection_parameters: Annotated[MongoDBCollectionCreateUpdateParameters, Field(description="The parameters to provide for the current MongoDB Collection.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MongoDBCollectionGetResults:
        """mongo_db_resources_create_update_mongo_db_collection

        Create or update an Azure Cosmos DB MongoDB Collection

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_mongo_db_collection_parameters: The parameters to provide for the current MongoDB Collection. (required)
        :type create_update_mongo_db_collection_parameters: MongoDBCollectionCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_create_update_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            create_update_mongo_db_collection_parameters=create_update_mongo_db_collection_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_create_update_mongo_db_collection_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_mongo_db_collection_parameters: Annotated[MongoDBCollectionCreateUpdateParameters, Field(description="The parameters to provide for the current MongoDB Collection.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MongoDBCollectionGetResults]:
        """mongo_db_resources_create_update_mongo_db_collection

        Create or update an Azure Cosmos DB MongoDB Collection

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_mongo_db_collection_parameters: The parameters to provide for the current MongoDB Collection. (required)
        :type create_update_mongo_db_collection_parameters: MongoDBCollectionCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_create_update_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            create_update_mongo_db_collection_parameters=create_update_mongo_db_collection_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_create_update_mongo_db_collection_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_mongo_db_collection_parameters: Annotated[MongoDBCollectionCreateUpdateParameters, Field(description="The parameters to provide for the current MongoDB Collection.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_create_update_mongo_db_collection

        Create or update an Azure Cosmos DB MongoDB Collection

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_mongo_db_collection_parameters: The parameters to provide for the current MongoDB Collection. (required)
        :type create_update_mongo_db_collection_parameters: MongoDBCollectionCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_create_update_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            create_update_mongo_db_collection_parameters=create_update_mongo_db_collection_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_create_update_mongo_db_collection_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        collection_name,
        api_version,
        create_update_mongo_db_collection_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if collection_name is not None:
            _path_params['collectionName'] = collection_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_mongo_db_collection_parameters is not None:
            _body_params = create_update_mongo_db_collection_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_create_update_mongo_db_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_mongo_db_database_parameters: Annotated[MongoDBDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current MongoDB database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MongoDBDatabaseGetResults:
        """mongo_db_resources_create_update_mongo_db_database

        Create or updates Azure Cosmos DB MongoDB database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_mongo_db_database_parameters: The parameters to provide for the current MongoDB database. (required)
        :type create_update_mongo_db_database_parameters: MongoDBDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_create_update_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_mongo_db_database_parameters=create_update_mongo_db_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_create_update_mongo_db_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_mongo_db_database_parameters: Annotated[MongoDBDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current MongoDB database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MongoDBDatabaseGetResults]:
        """mongo_db_resources_create_update_mongo_db_database

        Create or updates Azure Cosmos DB MongoDB database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_mongo_db_database_parameters: The parameters to provide for the current MongoDB database. (required)
        :type create_update_mongo_db_database_parameters: MongoDBDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_create_update_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_mongo_db_database_parameters=create_update_mongo_db_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_create_update_mongo_db_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_mongo_db_database_parameters: Annotated[MongoDBDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current MongoDB database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_create_update_mongo_db_database

        Create or updates Azure Cosmos DB MongoDB database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_mongo_db_database_parameters: The parameters to provide for the current MongoDB database. (required)
        :type create_update_mongo_db_database_parameters: MongoDBDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_create_update_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_mongo_db_database_parameters=create_update_mongo_db_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_create_update_mongo_db_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        create_update_mongo_db_database_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_mongo_db_database_parameters is not None:
            _body_params = create_update_mongo_db_database_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_delete_mongo_db_collection(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """mongo_db_resources_delete_mongo_db_collection

        Deletes an existing Azure Cosmos DB MongoDB Collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_delete_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_delete_mongo_db_collection_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """mongo_db_resources_delete_mongo_db_collection

        Deletes an existing Azure Cosmos DB MongoDB Collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_delete_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_delete_mongo_db_collection_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_delete_mongo_db_collection

        Deletes an existing Azure Cosmos DB MongoDB Collection.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_delete_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_delete_mongo_db_collection_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        collection_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if collection_name is not None:
            _path_params['collectionName'] = collection_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_delete_mongo_db_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """mongo_db_resources_delete_mongo_db_database

        Deletes an existing Azure Cosmos DB MongoDB database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_delete_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_delete_mongo_db_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """mongo_db_resources_delete_mongo_db_database

        Deletes an existing Azure Cosmos DB MongoDB database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_delete_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_delete_mongo_db_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_delete_mongo_db_database

        Deletes an existing Azure Cosmos DB MongoDB database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_delete_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_delete_mongo_db_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_get_mongo_db_collection(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MongoDBCollectionGetResults:
        """mongo_db_resources_get_mongo_db_collection

        Gets the MongoDB collection under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_get_mongo_db_collection_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MongoDBCollectionGetResults]:
        """mongo_db_resources_get_mongo_db_collection

        Gets the MongoDB collection under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_get_mongo_db_collection_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_get_mongo_db_collection

        Gets the MongoDB collection under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_collection_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_get_mongo_db_collection_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        collection_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if collection_name is not None:
            _path_params['collectionName'] = collection_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_get_mongo_db_collection_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """mongo_db_resources_get_mongo_db_collection_throughput

        Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_collection_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_get_mongo_db_collection_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """mongo_db_resources_get_mongo_db_collection_throughput

        Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_collection_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_get_mongo_db_collection_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_get_mongo_db_collection_throughput

        Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_collection_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_get_mongo_db_collection_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        collection_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if collection_name is not None:
            _path_params['collectionName'] = collection_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_get_mongo_db_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MongoDBDatabaseGetResults:
        """mongo_db_resources_get_mongo_db_database

        Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_get_mongo_db_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MongoDBDatabaseGetResults]:
        """mongo_db_resources_get_mongo_db_database

        Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_get_mongo_db_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_get_mongo_db_database

        Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_get_mongo_db_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_get_mongo_db_database_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """mongo_db_resources_get_mongo_db_database_throughput

        Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_get_mongo_db_database_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """mongo_db_resources_get_mongo_db_database_throughput

        Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_get_mongo_db_database_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_get_mongo_db_database_throughput

        Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_get_mongo_db_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_get_mongo_db_database_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_list_mongo_db_collections(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MongoDBCollectionListResult:
        """mongo_db_resources_list_mongo_db_collections

        Lists the MongoDB collection under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_list_mongo_db_collections_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_list_mongo_db_collections_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MongoDBCollectionListResult]:
        """mongo_db_resources_list_mongo_db_collections

        Lists the MongoDB collection under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_list_mongo_db_collections_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_list_mongo_db_collections_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_list_mongo_db_collections

        Lists the MongoDB collection under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_list_mongo_db_collections_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBCollectionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_list_mongo_db_collections_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_list_mongo_db_databases(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MongoDBDatabaseListResult:
        """mongo_db_resources_list_mongo_db_databases

        Lists the MongoDB databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_list_mongo_db_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_list_mongo_db_databases_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MongoDBDatabaseListResult]:
        """mongo_db_resources_list_mongo_db_databases

        Lists the MongoDB databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_list_mongo_db_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_list_mongo_db_databases_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_list_mongo_db_databases

        Lists the MongoDB databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_list_mongo_db_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MongoDBDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_list_mongo_db_databases_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_update_mongo_db_collection_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current MongoDB collection.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """mongo_db_resources_update_mongo_db_collection_throughput

        Update the RUs per second of an Azure Cosmos DB MongoDB collection

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current MongoDB collection. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_update_mongo_db_collection_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_update_mongo_db_collection_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current MongoDB collection.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """mongo_db_resources_update_mongo_db_collection_throughput

        Update the RUs per second of an Azure Cosmos DB MongoDB collection

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current MongoDB collection. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_update_mongo_db_collection_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_update_mongo_db_collection_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        collection_name: Annotated[StrictStr, Field(description="Cosmos DB collection name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current MongoDB collection.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_update_mongo_db_collection_throughput

        Update the RUs per second of an Azure Cosmos DB MongoDB collection

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param collection_name: Cosmos DB collection name. (required)
        :type collection_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current MongoDB collection. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_update_mongo_db_collection_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            collection_name=collection_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_update_mongo_db_collection_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        collection_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if collection_name is not None:
            _path_params['collectionName'] = collection_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mongo_db_resources_update_mongo_db_database_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current MongoDB database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """mongo_db_resources_update_mongo_db_database_throughput

        Update RUs per second of the an Azure Cosmos DB MongoDB database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current MongoDB database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_update_mongo_db_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mongo_db_resources_update_mongo_db_database_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current MongoDB database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """mongo_db_resources_update_mongo_db_database_throughput

        Update RUs per second of the an Azure Cosmos DB MongoDB database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current MongoDB database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_update_mongo_db_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mongo_db_resources_update_mongo_db_database_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The RUs per second of the parameters to provide for the current MongoDB database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mongo_db_resources_update_mongo_db_database_throughput

        Update RUs per second of the an Azure Cosmos DB MongoDB database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The RUs per second of the parameters to provide for the current MongoDB database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mongo_db_resources_update_mongo_db_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mongo_db_resources_update_mongo_db_database_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def partition_key_range_id_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        partition_key_range_id: Annotated[StrictStr, Field(description="Partition Key Range Id for which to get data.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PartitionMetricListResult:
        """partition_key_range_id_list_metrics

        Retrieves the metrics determined by the given filter for the given partition key range id.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param partition_key_range_id: Partition Key Range Id for which to get data. (required)
        :type partition_key_range_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partition_key_range_id_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            partition_key_range_id=partition_key_range_id,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def partition_key_range_id_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        partition_key_range_id: Annotated[StrictStr, Field(description="Partition Key Range Id for which to get data.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PartitionMetricListResult]:
        """partition_key_range_id_list_metrics

        Retrieves the metrics determined by the given filter for the given partition key range id.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param partition_key_range_id: Partition Key Range Id for which to get data. (required)
        :type partition_key_range_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partition_key_range_id_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            partition_key_range_id=partition_key_range_id,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def partition_key_range_id_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        partition_key_range_id: Annotated[StrictStr, Field(description="Partition Key Range Id for which to get data.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """partition_key_range_id_list_metrics

        Retrieves the metrics determined by the given filter for the given partition key range id.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param partition_key_range_id: Partition Key Range Id for which to get data. (required)
        :type partition_key_range_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partition_key_range_id_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_rid=database_rid,
            collection_rid=collection_rid,
            partition_key_range_id=partition_key_range_id,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _partition_key_range_id_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_rid,
        collection_rid,
        partition_key_range_id,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        if partition_key_range_id is not None:
            _path_params['partitionKeyRangeId'] = partition_key_range_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def partition_key_range_id_region_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        partition_key_range_id: Annotated[StrictStr, Field(description="Partition Key Range Id for which to get data.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PartitionMetricListResult:
        """partition_key_range_id_region_list_metrics

        Retrieves the metrics determined by the given filter for the given partition key range id and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param partition_key_range_id: Partition Key Range Id for which to get data. (required)
        :type partition_key_range_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partition_key_range_id_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            partition_key_range_id=partition_key_range_id,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def partition_key_range_id_region_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        partition_key_range_id: Annotated[StrictStr, Field(description="Partition Key Range Id for which to get data.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PartitionMetricListResult]:
        """partition_key_range_id_region_list_metrics

        Retrieves the metrics determined by the given filter for the given partition key range id and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param partition_key_range_id: Partition Key Range Id for which to get data. (required)
        :type partition_key_range_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partition_key_range_id_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            partition_key_range_id=partition_key_range_id,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def partition_key_range_id_region_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        region: Annotated[StrictStr, Field(description="Cosmos DB region, with spaces between words and each word capitalized.")],
        database_rid: Annotated[StrictStr, Field(description="Cosmos DB database rid.")],
        collection_rid: Annotated[StrictStr, Field(description="Cosmos DB collection rid.")],
        partition_key_range_id: Annotated[StrictStr, Field(description="Partition Key Range Id for which to get data.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """partition_key_range_id_region_list_metrics

        Retrieves the metrics determined by the given filter for the given partition key range id and region.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param region: Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type region: str
        :param database_rid: Cosmos DB database rid. (required)
        :type database_rid: str
        :param collection_rid: Cosmos DB collection rid. (required)
        :type collection_rid: str
        :param partition_key_range_id: Partition Key Range Id for which to get data. (required)
        :type partition_key_range_id: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._partition_key_range_id_region_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            region=region,
            database_rid=database_rid,
            collection_rid=collection_rid,
            partition_key_range_id=partition_key_range_id,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PartitionMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _partition_key_range_id_region_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        region,
        database_rid,
        collection_rid,
        partition_key_range_id,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if region is not None:
            _path_params['region'] = region
        if database_rid is not None:
            _path_params['databaseRid'] = database_rid
        if collection_rid is not None:
            _path_params['collectionRid'] = collection_rid
        if partition_key_range_id is not None:
            _path_params['partitionKeyRangeId'] = partition_key_range_id
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def percentile_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PercentileMetricListResult:
        """percentile_list_metrics

        Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def percentile_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PercentileMetricListResult]:
        """percentile_list_metrics

        Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def percentile_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """percentile_list_metrics

        Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _percentile_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def percentile_source_target_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        source_region: Annotated[StrictStr, Field(description="Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        target_region: Annotated[StrictStr, Field(description="Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PercentileMetricListResult:
        """percentile_source_target_list_metrics

        Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param source_region: Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type source_region: str
        :param target_region: Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type target_region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_source_target_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            source_region=source_region,
            target_region=target_region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def percentile_source_target_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        source_region: Annotated[StrictStr, Field(description="Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        target_region: Annotated[StrictStr, Field(description="Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PercentileMetricListResult]:
        """percentile_source_target_list_metrics

        Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param source_region: Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type source_region: str
        :param target_region: Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type target_region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_source_target_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            source_region=source_region,
            target_region=target_region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def percentile_source_target_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        source_region: Annotated[StrictStr, Field(description="Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        target_region: Annotated[StrictStr, Field(description="Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """percentile_source_target_list_metrics

        Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param source_region: Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type source_region: str
        :param target_region: Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type target_region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_source_target_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            source_region=source_region,
            target_region=target_region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _percentile_source_target_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        source_region,
        target_region,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if source_region is not None:
            _path_params['sourceRegion'] = source_region
        if target_region is not None:
            _path_params['targetRegion'] = target_region
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def percentile_target_list_metrics(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        target_region: Annotated[StrictStr, Field(description="Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PercentileMetricListResult:
        """percentile_target_list_metrics

        Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param target_region: Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type target_region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_target_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            target_region=target_region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def percentile_target_list_metrics_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        target_region: Annotated[StrictStr, Field(description="Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PercentileMetricListResult]:
        """percentile_target_list_metrics

        Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param target_region: Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type target_region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_target_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            target_region=target_region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def percentile_target_list_metrics_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        target_region: Annotated[StrictStr, Field(description="Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        filter: Annotated[StrictStr, Field(description="An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """percentile_target_list_metrics

        Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param target_region: Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized. (required)
        :type target_region: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param filter: An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq. (required)
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._percentile_target_list_metrics_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            target_region=target_region,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PercentileMetricListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _percentile_target_list_metrics_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        target_region,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if target_region is not None:
            _path_params['targetRegion'] = target_region
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_create_update_sql_container(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_container_parameters: Annotated[SqlContainerCreateUpdateParameters, Field(description="The parameters to provide for the current SQL container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlContainerGetResults:
        """sql_resources_create_update_sql_container

        Create or update an Azure Cosmos DB SQL container

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_container_parameters: The parameters to provide for the current SQL container. (required)
        :type create_update_sql_container_parameters: SqlContainerCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            create_update_sql_container_parameters=create_update_sql_container_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_create_update_sql_container_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_container_parameters: Annotated[SqlContainerCreateUpdateParameters, Field(description="The parameters to provide for the current SQL container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlContainerGetResults]:
        """sql_resources_create_update_sql_container

        Create or update an Azure Cosmos DB SQL container

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_container_parameters: The parameters to provide for the current SQL container. (required)
        :type create_update_sql_container_parameters: SqlContainerCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            create_update_sql_container_parameters=create_update_sql_container_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_create_update_sql_container_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_container_parameters: Annotated[SqlContainerCreateUpdateParameters, Field(description="The parameters to provide for the current SQL container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_create_update_sql_container

        Create or update an Azure Cosmos DB SQL container

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_container_parameters: The parameters to provide for the current SQL container. (required)
        :type create_update_sql_container_parameters: SqlContainerCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            create_update_sql_container_parameters=create_update_sql_container_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_create_update_sql_container_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        create_update_sql_container_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_sql_container_parameters is not None:
            _body_params = create_update_sql_container_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_create_update_sql_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_database_parameters: Annotated[SqlDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current SQL database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlDatabaseGetResults:
        """sql_resources_create_update_sql_database

        Create or update an Azure Cosmos DB SQL database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_database_parameters: The parameters to provide for the current SQL database. (required)
        :type create_update_sql_database_parameters: SqlDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_sql_database_parameters=create_update_sql_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_create_update_sql_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_database_parameters: Annotated[SqlDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current SQL database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlDatabaseGetResults]:
        """sql_resources_create_update_sql_database

        Create or update an Azure Cosmos DB SQL database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_database_parameters: The parameters to provide for the current SQL database. (required)
        :type create_update_sql_database_parameters: SqlDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_sql_database_parameters=create_update_sql_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_create_update_sql_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_database_parameters: Annotated[SqlDatabaseCreateUpdateParameters, Field(description="The parameters to provide for the current SQL database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_create_update_sql_database

        Create or update an Azure Cosmos DB SQL database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_database_parameters: The parameters to provide for the current SQL database. (required)
        :type create_update_sql_database_parameters: SqlDatabaseCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            create_update_sql_database_parameters=create_update_sql_database_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_create_update_sql_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        create_update_sql_database_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_sql_database_parameters is not None:
            _body_params = create_update_sql_database_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_create_update_sql_stored_procedure(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_stored_procedure_parameters: Annotated[SqlStoredProcedureCreateUpdateParameters, Field(description="The parameters to provide for the current SQL storedProcedure.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlStoredProcedureGetResults:
        """sql_resources_create_update_sql_stored_procedure

        Create or update an Azure Cosmos DB SQL storedProcedure

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_stored_procedure_parameters: The parameters to provide for the current SQL storedProcedure. (required)
        :type create_update_sql_stored_procedure_parameters: SqlStoredProcedureCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            create_update_sql_stored_procedure_parameters=create_update_sql_stored_procedure_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_create_update_sql_stored_procedure_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_stored_procedure_parameters: Annotated[SqlStoredProcedureCreateUpdateParameters, Field(description="The parameters to provide for the current SQL storedProcedure.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlStoredProcedureGetResults]:
        """sql_resources_create_update_sql_stored_procedure

        Create or update an Azure Cosmos DB SQL storedProcedure

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_stored_procedure_parameters: The parameters to provide for the current SQL storedProcedure. (required)
        :type create_update_sql_stored_procedure_parameters: SqlStoredProcedureCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            create_update_sql_stored_procedure_parameters=create_update_sql_stored_procedure_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_create_update_sql_stored_procedure_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_stored_procedure_parameters: Annotated[SqlStoredProcedureCreateUpdateParameters, Field(description="The parameters to provide for the current SQL storedProcedure.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_create_update_sql_stored_procedure

        Create or update an Azure Cosmos DB SQL storedProcedure

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_stored_procedure_parameters: The parameters to provide for the current SQL storedProcedure. (required)
        :type create_update_sql_stored_procedure_parameters: SqlStoredProcedureCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            create_update_sql_stored_procedure_parameters=create_update_sql_stored_procedure_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_create_update_sql_stored_procedure_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        stored_procedure_name,
        api_version,
        create_update_sql_stored_procedure_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if stored_procedure_name is not None:
            _path_params['storedProcedureName'] = stored_procedure_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_sql_stored_procedure_parameters is not None:
            _body_params = create_update_sql_stored_procedure_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_create_update_sql_trigger(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_trigger_parameters: Annotated[SqlTriggerCreateUpdateParameters, Field(description="The parameters to provide for the current SQL trigger.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlTriggerGetResults:
        """sql_resources_create_update_sql_trigger

        Create or update an Azure Cosmos DB SQL trigger

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_trigger_parameters: The parameters to provide for the current SQL trigger. (required)
        :type create_update_sql_trigger_parameters: SqlTriggerCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            create_update_sql_trigger_parameters=create_update_sql_trigger_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_create_update_sql_trigger_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_trigger_parameters: Annotated[SqlTriggerCreateUpdateParameters, Field(description="The parameters to provide for the current SQL trigger.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlTriggerGetResults]:
        """sql_resources_create_update_sql_trigger

        Create or update an Azure Cosmos DB SQL trigger

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_trigger_parameters: The parameters to provide for the current SQL trigger. (required)
        :type create_update_sql_trigger_parameters: SqlTriggerCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            create_update_sql_trigger_parameters=create_update_sql_trigger_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_create_update_sql_trigger_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_trigger_parameters: Annotated[SqlTriggerCreateUpdateParameters, Field(description="The parameters to provide for the current SQL trigger.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_create_update_sql_trigger

        Create or update an Azure Cosmos DB SQL trigger

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_trigger_parameters: The parameters to provide for the current SQL trigger. (required)
        :type create_update_sql_trigger_parameters: SqlTriggerCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            create_update_sql_trigger_parameters=create_update_sql_trigger_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_create_update_sql_trigger_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        trigger_name,
        api_version,
        create_update_sql_trigger_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if trigger_name is not None:
            _path_params['triggerName'] = trigger_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_sql_trigger_parameters is not None:
            _body_params = create_update_sql_trigger_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_create_update_sql_user_defined_function(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_user_defined_function_parameters: Annotated[SqlUserDefinedFunctionCreateUpdateParameters, Field(description="The parameters to provide for the current SQL userDefinedFunction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlUserDefinedFunctionGetResults:
        """sql_resources_create_update_sql_user_defined_function

        Create or update an Azure Cosmos DB SQL userDefinedFunction

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_user_defined_function_parameters: The parameters to provide for the current SQL userDefinedFunction. (required)
        :type create_update_sql_user_defined_function_parameters: SqlUserDefinedFunctionCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            create_update_sql_user_defined_function_parameters=create_update_sql_user_defined_function_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_create_update_sql_user_defined_function_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_user_defined_function_parameters: Annotated[SqlUserDefinedFunctionCreateUpdateParameters, Field(description="The parameters to provide for the current SQL userDefinedFunction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlUserDefinedFunctionGetResults]:
        """sql_resources_create_update_sql_user_defined_function

        Create or update an Azure Cosmos DB SQL userDefinedFunction

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_user_defined_function_parameters: The parameters to provide for the current SQL userDefinedFunction. (required)
        :type create_update_sql_user_defined_function_parameters: SqlUserDefinedFunctionCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            create_update_sql_user_defined_function_parameters=create_update_sql_user_defined_function_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_create_update_sql_user_defined_function_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_sql_user_defined_function_parameters: Annotated[SqlUserDefinedFunctionCreateUpdateParameters, Field(description="The parameters to provide for the current SQL userDefinedFunction.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_create_update_sql_user_defined_function

        Create or update an Azure Cosmos DB SQL userDefinedFunction

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_sql_user_defined_function_parameters: The parameters to provide for the current SQL userDefinedFunction. (required)
        :type create_update_sql_user_defined_function_parameters: SqlUserDefinedFunctionCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_create_update_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            create_update_sql_user_defined_function_parameters=create_update_sql_user_defined_function_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_create_update_sql_user_defined_function_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        user_defined_function_name,
        api_version,
        create_update_sql_user_defined_function_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if user_defined_function_name is not None:
            _path_params['userDefinedFunctionName'] = user_defined_function_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_sql_user_defined_function_parameters is not None:
            _body_params = create_update_sql_user_defined_function_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_delete_sql_container(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """sql_resources_delete_sql_container

        Deletes an existing Azure Cosmos DB SQL container.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_delete_sql_container_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """sql_resources_delete_sql_container

        Deletes an existing Azure Cosmos DB SQL container.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_delete_sql_container_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_delete_sql_container

        Deletes an existing Azure Cosmos DB SQL container.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_delete_sql_container_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_delete_sql_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """sql_resources_delete_sql_database

        Deletes an existing Azure Cosmos DB SQL database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_delete_sql_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """sql_resources_delete_sql_database

        Deletes an existing Azure Cosmos DB SQL database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_delete_sql_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_delete_sql_database

        Deletes an existing Azure Cosmos DB SQL database.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_delete_sql_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_delete_sql_stored_procedure(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """sql_resources_delete_sql_stored_procedure

        Deletes an existing Azure Cosmos DB SQL storedProcedure.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_delete_sql_stored_procedure_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """sql_resources_delete_sql_stored_procedure

        Deletes an existing Azure Cosmos DB SQL storedProcedure.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_delete_sql_stored_procedure_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_delete_sql_stored_procedure

        Deletes an existing Azure Cosmos DB SQL storedProcedure.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_delete_sql_stored_procedure_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        stored_procedure_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if stored_procedure_name is not None:
            _path_params['storedProcedureName'] = stored_procedure_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_delete_sql_trigger(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """sql_resources_delete_sql_trigger

        Deletes an existing Azure Cosmos DB SQL trigger.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_delete_sql_trigger_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """sql_resources_delete_sql_trigger

        Deletes an existing Azure Cosmos DB SQL trigger.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_delete_sql_trigger_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_delete_sql_trigger

        Deletes an existing Azure Cosmos DB SQL trigger.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_delete_sql_trigger_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        trigger_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if trigger_name is not None:
            _path_params['triggerName'] = trigger_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_delete_sql_user_defined_function(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """sql_resources_delete_sql_user_defined_function

        Deletes an existing Azure Cosmos DB SQL userDefinedFunction.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_delete_sql_user_defined_function_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """sql_resources_delete_sql_user_defined_function

        Deletes an existing Azure Cosmos DB SQL userDefinedFunction.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_delete_sql_user_defined_function_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_delete_sql_user_defined_function

        Deletes an existing Azure Cosmos DB SQL userDefinedFunction.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_delete_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_delete_sql_user_defined_function_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        user_defined_function_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if user_defined_function_name is not None:
            _path_params['userDefinedFunctionName'] = user_defined_function_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_container(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlContainerGetResults:
        """sql_resources_get_sql_container

        Gets the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_container_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlContainerGetResults]:
        """sql_resources_get_sql_container

        Gets the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_container_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_container

        Gets the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_container_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_container_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_container_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """sql_resources_get_sql_container_throughput

        Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_container_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_container_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """sql_resources_get_sql_container_throughput

        Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_container_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_container_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_container_throughput

        Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_container_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_container_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_database(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlDatabaseGetResults:
        """sql_resources_get_sql_database

        Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_database_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlDatabaseGetResults]:
        """sql_resources_get_sql_database

        Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_database_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_database

        Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_database_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_database_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_database_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """sql_resources_get_sql_database_throughput

        Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_database_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """sql_resources_get_sql_database_throughput

        Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_database_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_database_throughput

        Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_database_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_stored_procedure(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlStoredProcedureGetResults:
        """sql_resources_get_sql_stored_procedure

        Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_stored_procedure_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlStoredProcedureGetResults]:
        """sql_resources_get_sql_stored_procedure

        Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_stored_procedure_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        stored_procedure_name: Annotated[StrictStr, Field(description="Cosmos DB storedProcedure name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_stored_procedure

        Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param stored_procedure_name: Cosmos DB storedProcedure name. (required)
        :type stored_procedure_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_stored_procedure_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            stored_procedure_name=stored_procedure_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_stored_procedure_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        stored_procedure_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if stored_procedure_name is not None:
            _path_params['storedProcedureName'] = stored_procedure_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_trigger(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlTriggerGetResults:
        """sql_resources_get_sql_trigger

        Gets the SQL trigger under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_trigger_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlTriggerGetResults]:
        """sql_resources_get_sql_trigger

        Gets the SQL trigger under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_trigger_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        trigger_name: Annotated[StrictStr, Field(description="Cosmos DB trigger name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_trigger

        Gets the SQL trigger under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param trigger_name: Cosmos DB trigger name. (required)
        :type trigger_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_trigger_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            trigger_name=trigger_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_trigger_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        trigger_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if trigger_name is not None:
            _path_params['triggerName'] = trigger_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_get_sql_user_defined_function(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlUserDefinedFunctionGetResults:
        """sql_resources_get_sql_user_defined_function

        Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_get_sql_user_defined_function_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlUserDefinedFunctionGetResults]:
        """sql_resources_get_sql_user_defined_function

        Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_get_sql_user_defined_function_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        user_defined_function_name: Annotated[StrictStr, Field(description="Cosmos DB userDefinedFunction name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_get_sql_user_defined_function

        Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param user_defined_function_name: Cosmos DB userDefinedFunction name. (required)
        :type user_defined_function_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_get_sql_user_defined_function_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            user_defined_function_name=user_defined_function_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_get_sql_user_defined_function_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        user_defined_function_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        if user_defined_function_name is not None:
            _path_params['userDefinedFunctionName'] = user_defined_function_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_list_sql_containers(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlContainerListResult:
        """sql_resources_list_sql_containers

        Lists the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_containers_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_list_sql_containers_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlContainerListResult]:
        """sql_resources_list_sql_containers

        Lists the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_containers_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_list_sql_containers_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_list_sql_containers

        Lists the SQL container under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_containers_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlContainerListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_list_sql_containers_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_list_sql_databases(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlDatabaseListResult:
        """sql_resources_list_sql_databases

        Lists the SQL databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_list_sql_databases_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlDatabaseListResult]:
        """sql_resources_list_sql_databases

        Lists the SQL databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_list_sql_databases_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_list_sql_databases

        Lists the SQL databases under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_databases_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlDatabaseListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_list_sql_databases_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_list_sql_stored_procedures(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlStoredProcedureListResult:
        """sql_resources_list_sql_stored_procedures

        Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_stored_procedures_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_list_sql_stored_procedures_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlStoredProcedureListResult]:
        """sql_resources_list_sql_stored_procedures

        Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_stored_procedures_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_list_sql_stored_procedures_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_list_sql_stored_procedures

        Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_stored_procedures_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlStoredProcedureListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_list_sql_stored_procedures_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_list_sql_triggers(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlTriggerListResult:
        """sql_resources_list_sql_triggers

        Lists the SQL trigger under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_triggers_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_list_sql_triggers_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlTriggerListResult]:
        """sql_resources_list_sql_triggers

        Lists the SQL trigger under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_triggers_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_list_sql_triggers_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_list_sql_triggers

        Lists the SQL trigger under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_triggers_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlTriggerListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_list_sql_triggers_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_list_sql_user_defined_functions(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SqlUserDefinedFunctionListResult:
        """sql_resources_list_sql_user_defined_functions

        Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_user_defined_functions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_list_sql_user_defined_functions_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SqlUserDefinedFunctionListResult]:
        """sql_resources_list_sql_user_defined_functions

        Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_user_defined_functions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_list_sql_user_defined_functions_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_list_sql_user_defined_functions

        Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_list_sql_user_defined_functions_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SqlUserDefinedFunctionListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_list_sql_user_defined_functions_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_update_sql_container_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current SQL container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """sql_resources_update_sql_container_throughput

        Update RUs per second of an Azure Cosmos DB SQL container

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current SQL container. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_update_sql_container_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_update_sql_container_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current SQL container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """sql_resources_update_sql_container_throughput

        Update RUs per second of an Azure Cosmos DB SQL container

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current SQL container. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_update_sql_container_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_update_sql_container_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        container_name: Annotated[StrictStr, Field(description="Cosmos DB container name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current SQL container.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_update_sql_container_throughput

        Update RUs per second of an Azure Cosmos DB SQL container

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param container_name: Cosmos DB container name. (required)
        :type container_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current SQL container. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_update_sql_container_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            container_name=container_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_update_sql_container_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        container_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        if container_name is not None:
            _path_params['containerName'] = container_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sql_resources_update_sql_database_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current SQL database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """sql_resources_update_sql_database_throughput

        Update RUs per second of an Azure Cosmos DB SQL database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current SQL database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_update_sql_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sql_resources_update_sql_database_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current SQL database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """sql_resources_update_sql_database_throughput

        Update RUs per second of an Azure Cosmos DB SQL database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current SQL database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_update_sql_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sql_resources_update_sql_database_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        database_name: Annotated[StrictStr, Field(description="Cosmos DB database name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current SQL database.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """sql_resources_update_sql_database_throughput

        Update RUs per second of an Azure Cosmos DB SQL database

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param database_name: Cosmos DB database name. (required)
        :type database_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current SQL database. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sql_resources_update_sql_database_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            database_name=database_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sql_resources_update_sql_database_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        database_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if database_name is not None:
            _path_params['databaseName'] = database_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def table_resources_create_update_table(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_table_parameters: Annotated[TableCreateUpdateParameters, Field(description="The parameters to provide for the current Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableGetResults:
        """table_resources_create_update_table

        Create or update an Azure Cosmos DB Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_table_parameters: The parameters to provide for the current Table. (required)
        :type create_update_table_parameters: TableCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_create_update_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            create_update_table_parameters=create_update_table_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def table_resources_create_update_table_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_table_parameters: Annotated[TableCreateUpdateParameters, Field(description="The parameters to provide for the current Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableGetResults]:
        """table_resources_create_update_table

        Create or update an Azure Cosmos DB Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_table_parameters: The parameters to provide for the current Table. (required)
        :type create_update_table_parameters: TableCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_create_update_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            create_update_table_parameters=create_update_table_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def table_resources_create_update_table_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        create_update_table_parameters: Annotated[TableCreateUpdateParameters, Field(description="The parameters to provide for the current Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """table_resources_create_update_table

        Create or update an Azure Cosmos DB Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param create_update_table_parameters: The parameters to provide for the current Table. (required)
        :type create_update_table_parameters: TableCreateUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_create_update_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            create_update_table_parameters=create_update_table_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _table_resources_create_update_table_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        table_name,
        api_version,
        create_update_table_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_update_table_parameters is not None:
            _body_params = create_update_table_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def table_resources_delete_table(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """table_resources_delete_table

        Deletes an existing Azure Cosmos DB Table.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_delete_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def table_resources_delete_table_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """table_resources_delete_table

        Deletes an existing Azure Cosmos DB Table.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_delete_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def table_resources_delete_table_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """table_resources_delete_table

        Deletes an existing Azure Cosmos DB Table.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_delete_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _table_resources_delete_table_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def table_resources_get_table(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableGetResults:
        """table_resources_get_table

        Gets the Tables under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_get_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def table_resources_get_table_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableGetResults]:
        """table_resources_get_table

        Gets the Tables under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_get_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def table_resources_get_table_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """table_resources_get_table

        Gets the Tables under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_get_table_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _table_resources_get_table_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def table_resources_get_table_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """table_resources_get_table_throughput

        Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_get_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def table_resources_get_table_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """table_resources_get_table_throughput

        Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_get_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def table_resources_get_table_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """table_resources_get_table_throughput

        Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_get_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _table_resources_get_table_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        table_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def table_resources_list_tables(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TableListResult:
        """table_resources_list_tables

        Lists the Tables under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_list_tables_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def table_resources_list_tables_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TableListResult]:
        """table_resources_list_tables

        Lists the Tables under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_list_tables_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def table_resources_list_tables_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """table_resources_list_tables

        Lists the Tables under an existing Azure Cosmos DB database account.

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_list_tables_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TableListResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _table_resources_list_tables_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def table_resources_update_table_throughput(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ThroughputSettingsGetResults:
        """table_resources_update_table_throughput

        Update RUs per second of an Azure Cosmos DB Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current Table. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_update_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def table_resources_update_table_throughput_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ThroughputSettingsGetResults]:
        """table_resources_update_table_throughput

        Update RUs per second of an Azure Cosmos DB Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current Table. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_update_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def table_resources_update_table_throughput_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="Azure subscription ID.")],
        resource_group_name: Annotated[str, Field(min_length=1, strict=True, max_length=90, description="Name of an Azure resource group.")],
        account_name: Annotated[str, Field(min_length=3, strict=True, max_length=50, description="Cosmos DB database account name.")],
        table_name: Annotated[StrictStr, Field(description="Cosmos DB table name.")],
        api_version: Annotated[StrictStr, Field(description="Version of the API to be used with the client request. The current version is 2019-08-01.")],
        update_throughput_parameters: Annotated[ThroughputSettingsUpdateParameters, Field(description="The parameters to provide for the RUs per second of the current Table.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """table_resources_update_table_throughput

        Update RUs per second of an Azure Cosmos DB Table

        :param subscription_id: Azure subscription ID. (required)
        :type subscription_id: str
        :param resource_group_name: Name of an Azure resource group. (required)
        :type resource_group_name: str
        :param account_name: Cosmos DB database account name. (required)
        :type account_name: str
        :param table_name: Cosmos DB table name. (required)
        :type table_name: str
        :param api_version: Version of the API to be used with the client request. The current version is 2019-08-01. (required)
        :type api_version: str
        :param update_throughput_parameters: The parameters to provide for the RUs per second of the current Table. (required)
        :type update_throughput_parameters: ThroughputSettingsUpdateParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._table_resources_update_table_throughput_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            account_name=account_name,
            table_name=table_name,
            api_version=api_version,
            update_throughput_parameters=update_throughput_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ThroughputSettingsGetResults",
            '202': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _table_resources_update_table_throughput_serialize(
        self,
        subscription_id,
        resource_group_name,
        account_name,
        table_name,
        api_version,
        update_throughput_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if account_name is not None:
            _path_params['accountName'] = account_name
        if table_name is not None:
            _path_params['tableName'] = table_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_throughput_parameters is not None:
            _body_params = update_throughput_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



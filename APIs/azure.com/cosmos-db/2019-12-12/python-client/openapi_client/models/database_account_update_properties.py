# coding: utf-8

"""
    Cosmos DB

    Azure Cosmos DB Database Service Resource Provider REST API

    The version of the OpenAPI document: 2019-12-12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.capability import Capability
from openapi_client.models.connector_offer import ConnectorOffer
from openapi_client.models.consistency_policy import ConsistencyPolicy
from openapi_client.models.location import Location
from openapi_client.models.virtual_network_rule import VirtualNetworkRule
from typing import Optional, Set
from typing_extensions import Self

class DatabaseAccountUpdateProperties(BaseModel):
    """
    Properties to update Azure Cosmos DB database accounts.
    """ # noqa: E501
    capabilities: Optional[List[Capability]] = Field(default=None, description="List of Cosmos DB capabilities for the account")
    connector_offer: Optional[ConnectorOffer] = Field(default=None, alias="connectorOffer")
    consistency_policy: Optional[ConsistencyPolicy] = Field(default=None, alias="consistencyPolicy")
    disable_key_based_metadata_write_access: Optional[StrictBool] = Field(default=None, description="Disable write operations on metadata resources (databases, containers, throughput) via account keys", alias="disableKeyBasedMetadataWriteAccess")
    enable_automatic_failover: Optional[StrictBool] = Field(default=None, description="Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.", alias="enableAutomaticFailover")
    enable_cassandra_connector: Optional[StrictBool] = Field(default=None, description="Enables the cassandra connector on the Cosmos DB C* account", alias="enableCassandraConnector")
    enable_multiple_write_locations: Optional[StrictBool] = Field(default=None, description="Enables the account to write in multiple locations", alias="enableMultipleWriteLocations")
    ip_range_filter: Optional[StrictStr] = Field(default=None, description="Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.", alias="ipRangeFilter")
    is_virtual_network_filter_enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether to enable/disable Virtual Network ACL rules.", alias="isVirtualNetworkFilterEnabled")
    key_vault_key_uri: Optional[StrictStr] = Field(default=None, description="The URI of the key vault", alias="keyVaultKeyUri")
    locations: Optional[List[Location]] = Field(default=None, description="An array that contains the georeplication locations enabled for the Cosmos DB account.")
    virtual_network_rules: Optional[List[VirtualNetworkRule]] = Field(default=None, description="List of Virtual Network ACL rules configured for the Cosmos DB account.", alias="virtualNetworkRules")
    __properties: ClassVar[List[str]] = ["capabilities", "connectorOffer", "consistencyPolicy", "disableKeyBasedMetadataWriteAccess", "enableAutomaticFailover", "enableCassandraConnector", "enableMultipleWriteLocations", "ipRangeFilter", "isVirtualNetworkFilterEnabled", "keyVaultKeyUri", "locations", "virtualNetworkRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseAccountUpdateProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of consistency_policy
        if self.consistency_policy:
            _dict['consistencyPolicy'] = self.consistency_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_network_rules (list)
        _items = []
        if self.virtual_network_rules:
            for _item_virtual_network_rules in self.virtual_network_rules:
                if _item_virtual_network_rules:
                    _items.append(_item_virtual_network_rules.to_dict())
            _dict['virtualNetworkRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseAccountUpdateProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": [Capability.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "connectorOffer": obj.get("connectorOffer"),
            "consistencyPolicy": ConsistencyPolicy.from_dict(obj["consistencyPolicy"]) if obj.get("consistencyPolicy") is not None else None,
            "disableKeyBasedMetadataWriteAccess": obj.get("disableKeyBasedMetadataWriteAccess"),
            "enableAutomaticFailover": obj.get("enableAutomaticFailover"),
            "enableCassandraConnector": obj.get("enableCassandraConnector"),
            "enableMultipleWriteLocations": obj.get("enableMultipleWriteLocations"),
            "ipRangeFilter": obj.get("ipRangeFilter"),
            "isVirtualNetworkFilterEnabled": obj.get("isVirtualNetworkFilterEnabled"),
            "keyVaultKeyUri": obj.get("keyVaultKeyUri"),
            "locations": [Location.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "virtualNetworkRules": [VirtualNetworkRule.from_dict(_item) for _item in obj["virtualNetworkRules"]] if obj.get("virtualNetworkRules") is not None else None
        })
        return _obj



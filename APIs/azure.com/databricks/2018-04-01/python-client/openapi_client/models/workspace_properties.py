# coding: utf-8

"""
    DatabricksClient

    ARM Databricks

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.provisioning_state import ProvisioningState
from openapi_client.models.workspace_custom_parameters import WorkspaceCustomParameters
from openapi_client.models.workspace_provider_authorization import WorkspaceProviderAuthorization
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceProperties(BaseModel):
    """
    The workspace properties.
    """ # noqa: E501
    authorizations: Optional[List[WorkspaceProviderAuthorization]] = Field(default=None, description="The workspace provider authorizations.")
    managed_resource_group_id: StrictStr = Field(description="The managed resource group Id.", alias="managedResourceGroupId")
    parameters: Optional[WorkspaceCustomParameters] = None
    provisioning_state: Optional[ProvisioningState] = Field(default=None, alias="provisioningState")
    ui_definition_uri: Optional[StrictStr] = Field(default=None, description="The blob URI where the UI definition file is located.", alias="uiDefinitionUri")
    __properties: ClassVar[List[str]] = ["authorizations", "managedResourceGroupId", "parameters", "provisioningState", "uiDefinitionUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item_authorizations in self.authorizations:
                if _item_authorizations:
                    _items.append(_item_authorizations.to_dict())
            _dict['authorizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizations": [WorkspaceProviderAuthorization.from_dict(_item) for _item in obj["authorizations"]] if obj.get("authorizations") is not None else None,
            "managedResourceGroupId": obj.get("managedResourceGroupId"),
            "parameters": WorkspaceCustomParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "uiDefinitionUri": obj.get("uiDefinitionUri")
        })
        return _obj



# coding: utf-8

"""
    DatabricksClient

    ARM Databricks

    The version of the OpenAPI document: 2018-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.workspace_custom_boolean_parameter import WorkspaceCustomBooleanParameter
from openapi_client.models.workspace_custom_object_parameter import WorkspaceCustomObjectParameter
from openapi_client.models.workspace_custom_string_parameter import WorkspaceCustomStringParameter
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceCustomParameters(BaseModel):
    """
    Custom Parameters used for Cluster Creation.
    """ # noqa: E501
    aml_workspace_id: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="amlWorkspaceId")
    custom_private_subnet_name: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="customPrivateSubnetName")
    custom_public_subnet_name: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="customPublicSubnetName")
    custom_virtual_network_id: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="customVirtualNetworkId")
    enable_no_public_ip: Optional[WorkspaceCustomBooleanParameter] = Field(default=None, alias="enableNoPublicIp")
    load_balancer_backend_pool_name: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="loadBalancerBackendPoolName")
    load_balancer_id: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="loadBalancerId")
    relay_namespace_name: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="relayNamespaceName")
    resource_tags: Optional[WorkspaceCustomObjectParameter] = Field(default=None, alias="resourceTags")
    storage_account_name: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="storageAccountName")
    storage_account_sku_name: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="storageAccountSkuName")
    vnet_address_prefix: Optional[WorkspaceCustomStringParameter] = Field(default=None, alias="vnetAddressPrefix")
    __properties: ClassVar[List[str]] = ["amlWorkspaceId", "customPrivateSubnetName", "customPublicSubnetName", "customVirtualNetworkId", "enableNoPublicIp", "loadBalancerBackendPoolName", "loadBalancerId", "relayNamespaceName", "resourceTags", "storageAccountName", "storageAccountSkuName", "vnetAddressPrefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceCustomParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aml_workspace_id
        if self.aml_workspace_id:
            _dict['amlWorkspaceId'] = self.aml_workspace_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_private_subnet_name
        if self.custom_private_subnet_name:
            _dict['customPrivateSubnetName'] = self.custom_private_subnet_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_public_subnet_name
        if self.custom_public_subnet_name:
            _dict['customPublicSubnetName'] = self.custom_public_subnet_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_virtual_network_id
        if self.custom_virtual_network_id:
            _dict['customVirtualNetworkId'] = self.custom_virtual_network_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_no_public_ip
        if self.enable_no_public_ip:
            _dict['enableNoPublicIp'] = self.enable_no_public_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_balancer_backend_pool_name
        if self.load_balancer_backend_pool_name:
            _dict['loadBalancerBackendPoolName'] = self.load_balancer_backend_pool_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_balancer_id
        if self.load_balancer_id:
            _dict['loadBalancerId'] = self.load_balancer_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relay_namespace_name
        if self.relay_namespace_name:
            _dict['relayNamespaceName'] = self.relay_namespace_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_tags
        if self.resource_tags:
            _dict['resourceTags'] = self.resource_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_account_name
        if self.storage_account_name:
            _dict['storageAccountName'] = self.storage_account_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_account_sku_name
        if self.storage_account_sku_name:
            _dict['storageAccountSkuName'] = self.storage_account_sku_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vnet_address_prefix
        if self.vnet_address_prefix:
            _dict['vnetAddressPrefix'] = self.vnet_address_prefix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceCustomParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amlWorkspaceId": WorkspaceCustomStringParameter.from_dict(obj["amlWorkspaceId"]) if obj.get("amlWorkspaceId") is not None else None,
            "customPrivateSubnetName": WorkspaceCustomStringParameter.from_dict(obj["customPrivateSubnetName"]) if obj.get("customPrivateSubnetName") is not None else None,
            "customPublicSubnetName": WorkspaceCustomStringParameter.from_dict(obj["customPublicSubnetName"]) if obj.get("customPublicSubnetName") is not None else None,
            "customVirtualNetworkId": WorkspaceCustomStringParameter.from_dict(obj["customVirtualNetworkId"]) if obj.get("customVirtualNetworkId") is not None else None,
            "enableNoPublicIp": WorkspaceCustomBooleanParameter.from_dict(obj["enableNoPublicIp"]) if obj.get("enableNoPublicIp") is not None else None,
            "loadBalancerBackendPoolName": WorkspaceCustomStringParameter.from_dict(obj["loadBalancerBackendPoolName"]) if obj.get("loadBalancerBackendPoolName") is not None else None,
            "loadBalancerId": WorkspaceCustomStringParameter.from_dict(obj["loadBalancerId"]) if obj.get("loadBalancerId") is not None else None,
            "relayNamespaceName": WorkspaceCustomStringParameter.from_dict(obj["relayNamespaceName"]) if obj.get("relayNamespaceName") is not None else None,
            "resourceTags": WorkspaceCustomObjectParameter.from_dict(obj["resourceTags"]) if obj.get("resourceTags") is not None else None,
            "storageAccountName": WorkspaceCustomStringParameter.from_dict(obj["storageAccountName"]) if obj.get("storageAccountName") is not None else None,
            "storageAccountSkuName": WorkspaceCustomStringParameter.from_dict(obj["storageAccountSkuName"]) if obj.get("storageAccountSkuName") is not None else None,
            "vnetAddressPrefix": WorkspaceCustomStringParameter.from_dict(obj["vnetAddressPrefix"]) if obj.get("vnetAddressPrefix") is not None else None
        })
        return _obj



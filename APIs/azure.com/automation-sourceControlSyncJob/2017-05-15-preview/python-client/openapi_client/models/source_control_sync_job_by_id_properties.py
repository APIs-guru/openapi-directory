# coding: utf-8

"""
    AutomationManagement

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2017-05-15-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SourceControlSyncJobByIdProperties(BaseModel):
    """
    Definition of source control sync job properties.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="The creation time of the job.", alias="creationTime")
    end_time: Optional[datetime] = Field(default=None, description="The end time of the job.", alias="endTime")
    exception: Optional[StrictStr] = Field(default=None, description="The exceptions that occurred while running the sync job.")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of the job.", alias="provisioningState")
    source_control_sync_job_id: Optional[StrictStr] = Field(default=None, description="The source control sync job id.", alias="sourceControlSyncJobId")
    start_time: Optional[datetime] = Field(default=None, description="The start time of the job.", alias="startTime")
    sync_type: Optional[StrictStr] = Field(default=None, description="The sync type.", alias="syncType")
    __properties: ClassVar[List[str]] = ["creationTime", "endTime", "exception", "provisioningState", "sourceControlSyncJobId", "startTime", "syncType"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Completed', 'Failed', 'Running']):
            raise ValueError("must be one of enum values ('Completed', 'Failed', 'Running')")
        return value

    @field_validator('sync_type')
    def sync_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PartialSync', 'FullSync']):
            raise ValueError("must be one of enum values ('PartialSync', 'FullSync')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceControlSyncJobByIdProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "end_time",
            "start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceControlSyncJobByIdProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "endTime": obj.get("endTime"),
            "exception": obj.get("exception"),
            "provisioningState": obj.get("provisioningState"),
            "sourceControlSyncJobId": obj.get("sourceControlSyncJobId"),
            "startTime": obj.get("startTime"),
            "syncType": obj.get("syncType")
        })
        return _obj



# coding: utf-8

"""
    HybridDataManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.job import Job
from openapi_client.models.job_list import JobList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class JobsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def jobs_cancel(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """jobs_cancel

        Cancels the given job.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_cancel_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def jobs_cancel_with_http_info(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """jobs_cancel

        Cancels the given job.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_cancel_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def jobs_cancel_without_preload_content(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """jobs_cancel

        Cancels the given job.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_cancel_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _jobs_cancel_serialize(
        self,
        data_service_name,
        job_definition_name,
        job_id,
        subscription_id,
        resource_group_name,
        data_manager_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_service_name is not None:
            _path_params['dataServiceName'] = data_service_name
        if job_definition_name is not None:
            _path_params['jobDefinitionName'] = job_definition_name
        if job_id is not None:
            _path_params['jobId'] = job_id
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if data_manager_name is not None:
            _path_params['dataManagerName'] = data_manager_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def jobs_get(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        expand: Annotated[Optional[StrictStr], Field(description="$expand is supported on details parameter for job, which provides details on the job stages.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Job:
        """jobs_get

        This method gets a data manager job given the jobId.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param expand: $expand is supported on details parameter for job, which provides details on the job stages.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_get_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Job",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def jobs_get_with_http_info(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        expand: Annotated[Optional[StrictStr], Field(description="$expand is supported on details parameter for job, which provides details on the job stages.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Job]:
        """jobs_get

        This method gets a data manager job given the jobId.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param expand: $expand is supported on details parameter for job, which provides details on the job stages.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_get_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Job",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def jobs_get_without_preload_content(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        expand: Annotated[Optional[StrictStr], Field(description="$expand is supported on details parameter for job, which provides details on the job stages.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """jobs_get

        This method gets a data manager job given the jobId.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param expand: $expand is supported on details parameter for job, which provides details on the job stages.
        :type expand: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_get_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Job",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _jobs_get_serialize(
        self,
        data_service_name,
        job_definition_name,
        job_id,
        subscription_id,
        resource_group_name,
        data_manager_name,
        api_version,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_service_name is not None:
            _path_params['dataServiceName'] = data_service_name
        if job_definition_name is not None:
            _path_params['jobDefinitionName'] = job_definition_name
        if job_id is not None:
            _path_params['jobId'] = job_id
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if data_manager_name is not None:
            _path_params['dataManagerName'] = data_manager_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if expand is not None:
            
            _query_params.append(('$expand', expand))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def jobs_list_by_data_manager(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> JobList:
        """jobs_list_by_data_manager

        This method gets all the jobs at the data manager resource level.

        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_data_manager_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def jobs_list_by_data_manager_with_http_info(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[JobList]:
        """jobs_list_by_data_manager

        This method gets all the jobs at the data manager resource level.

        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_data_manager_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def jobs_list_by_data_manager_without_preload_content(
        self,
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """jobs_list_by_data_manager

        This method gets all the jobs at the data manager resource level.

        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_data_manager_serialize(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _jobs_list_by_data_manager_serialize(
        self,
        subscription_id,
        resource_group_name,
        data_manager_name,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if data_manager_name is not None:
            _path_params['dataManagerName'] = data_manager_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def jobs_list_by_data_service(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of interest.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> JobList:
        """jobs_list_by_data_service

        This method gets all the jobs of a data service type in a given resource.

        :param data_service_name: The name of the data service of interest. (required)
        :type data_service_name: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_data_service_serialize(
            data_service_name=data_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def jobs_list_by_data_service_with_http_info(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of interest.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[JobList]:
        """jobs_list_by_data_service

        This method gets all the jobs of a data service type in a given resource.

        :param data_service_name: The name of the data service of interest. (required)
        :type data_service_name: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_data_service_serialize(
            data_service_name=data_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def jobs_list_by_data_service_without_preload_content(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of interest.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """jobs_list_by_data_service

        This method gets all the jobs of a data service type in a given resource.

        :param data_service_name: The name of the data service of interest. (required)
        :type data_service_name: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_data_service_serialize(
            data_service_name=data_service_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _jobs_list_by_data_service_serialize(
        self,
        data_service_name,
        subscription_id,
        resource_group_name,
        data_manager_name,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_service_name is not None:
            _path_params['dataServiceName'] = data_service_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if data_manager_name is not None:
            _path_params['dataManagerName'] = data_manager_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def jobs_list_by_job_definition(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition for which jobs are needed.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> JobList:
        """jobs_list_by_job_definition

        This method gets all the jobs of a given job definition.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition for which jobs are needed. (required)
        :type job_definition_name: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_job_definition_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def jobs_list_by_job_definition_with_http_info(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition for which jobs are needed.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[JobList]:
        """jobs_list_by_job_definition

        This method gets all the jobs of a given job definition.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition for which jobs are needed. (required)
        :type job_definition_name: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_job_definition_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def jobs_list_by_job_definition_without_preload_content(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition for which jobs are needed.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        filter: Annotated[Optional[StrictStr], Field(description="OData Filter options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """jobs_list_by_job_definition

        This method gets all the jobs of a given job definition.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition for which jobs are needed. (required)
        :type job_definition_name: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param filter: OData Filter options
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_list_by_job_definition_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "JobList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _jobs_list_by_job_definition_serialize(
        self,
        data_service_name,
        job_definition_name,
        subscription_id,
        resource_group_name,
        data_manager_name,
        api_version,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_service_name is not None:
            _path_params['dataServiceName'] = data_service_name
        if job_definition_name is not None:
            _path_params['jobDefinitionName'] = job_definition_name
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if data_manager_name is not None:
            _path_params['dataManagerName'] = data_manager_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        if filter is not None:
            
            _query_params.append(('$filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def jobs_resume(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """jobs_resume

        Resumes the given job.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_resume_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def jobs_resume_with_http_info(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """jobs_resume

        Resumes the given job.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_resume_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def jobs_resume_without_preload_content(
        self,
        data_service_name: Annotated[StrictStr, Field(description="The name of the data service of the job definition.")],
        job_definition_name: Annotated[StrictStr, Field(description="The name of the job definition of the job.")],
        job_id: Annotated[StrictStr, Field(description="The job id of the job queried.")],
        subscription_id: Annotated[StrictStr, Field(description="The Subscription Id")],
        resource_group_name: Annotated[StrictStr, Field(description="The Resource Group Name")],
        data_manager_name: Annotated[str, Field(min_length=3, strict=True, max_length=24, description="The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only")],
        api_version: Annotated[StrictStr, Field(description="The API Version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """jobs_resume

        Resumes the given job.

        :param data_service_name: The name of the data service of the job definition. (required)
        :type data_service_name: str
        :param job_definition_name: The name of the job definition of the job. (required)
        :type job_definition_name: str
        :param job_id: The job id of the job queried. (required)
        :type job_id: str
        :param subscription_id: The Subscription Id (required)
        :type subscription_id: str
        :param resource_group_name: The Resource Group Name (required)
        :type resource_group_name: str
        :param data_manager_name: The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
        :type data_manager_name: str
        :param api_version: The API Version (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._jobs_resume_serialize(
            data_service_name=data_service_name,
            job_definition_name=job_definition_name,
            job_id=job_id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            data_manager_name=data_manager_name,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _jobs_resume_serialize(
        self,
        data_service_name,
        job_definition_name,
        job_id,
        subscription_id,
        resource_group_name,
        data_manager_name,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_service_name is not None:
            _path_params['dataServiceName'] = data_service_name
        if job_definition_name is not None:
            _path_params['jobDefinitionName'] = job_definition_name
        if job_id is not None:
            _path_params['jobId'] = job_id
        if subscription_id is not None:
            _path_params['subscriptionId'] = subscription_id
        if resource_group_name is not None:
            _path_params['resourceGroupName'] = resource_group_name
        if data_manager_name is not None:
            _path_params['dataManagerName'] = data_manager_name
        # process the query parameters
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'azure_auth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



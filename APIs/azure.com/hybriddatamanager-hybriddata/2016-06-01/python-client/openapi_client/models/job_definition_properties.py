# coding: utf-8

"""
    HybridDataManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_secret import CustomerSecret
from openapi_client.models.schedule import Schedule
from typing import Optional, Set
from typing_extensions import Self

class JobDefinitionProperties(BaseModel):
    """
    Job Definition
    """ # noqa: E501
    customer_secrets: Optional[List[CustomerSecret]] = Field(default=None, description="List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.", alias="customerSecrets")
    data_service_input: Optional[Dict[str, Any]] = Field(default=None, description="A generic json used differently by each data service type.", alias="dataServiceInput")
    data_sink_id: StrictStr = Field(description="Data Sink Id associated to the job definition.", alias="dataSinkId")
    data_source_id: StrictStr = Field(description="Data Source Id associated to the job definition.", alias="dataSourceId")
    last_modified_time: Optional[datetime] = Field(default=None, description="Last modified time of the job definition.", alias="lastModifiedTime")
    run_location: Optional[StrictStr] = Field(default=None, description="This is the preferred geo location for the job to run.", alias="runLocation")
    schedules: Optional[List[Schedule]] = Field(default=None, description="Schedule for running the job definition")
    state: StrictStr = Field(description="State of the job definition.")
    user_confirmation: Optional[StrictStr] = Field(default='NotRequired', description="Enum to detect if user confirmation is required. If not passed will default to NotRequired.", alias="userConfirmation")
    __properties: ClassVar[List[str]] = ["customerSecrets", "dataServiceInput", "dataSinkId", "dataSourceId", "lastModifiedTime", "runLocation", "schedules", "state", "userConfirmation"]

    @field_validator('run_location')
    def run_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2']):
            raise ValueError("must be one of enum values ('none', 'australiaeast', 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus', 'southindia', 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus', 'westus2')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Disabled', 'Enabled', 'Supported']):
            raise ValueError("must be one of enum values ('Disabled', 'Enabled', 'Supported')")
        return value

    @field_validator('user_confirmation')
    def user_confirmation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotRequired', 'Required']):
            raise ValueError("must be one of enum values ('NotRequired', 'Required')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobDefinitionProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customer_secrets (list)
        _items = []
        if self.customer_secrets:
            for _item_customer_secrets in self.customer_secrets:
                if _item_customer_secrets:
                    _items.append(_item_customer_secrets.to_dict())
            _dict['customerSecrets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item_schedules in self.schedules:
                if _item_schedules:
                    _items.append(_item_schedules.to_dict())
            _dict['schedules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobDefinitionProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerSecrets": [CustomerSecret.from_dict(_item) for _item in obj["customerSecrets"]] if obj.get("customerSecrets") is not None else None,
            "dataServiceInput": obj.get("dataServiceInput"),
            "dataSinkId": obj.get("dataSinkId"),
            "dataSourceId": obj.get("dataSourceId"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "runLocation": obj.get("runLocation"),
            "schedules": [Schedule.from_dict(_item) for _item in obj["schedules"]] if obj.get("schedules") is not None else None,
            "state": obj.get("state"),
            "userConfirmation": obj.get("userConfirmation") if obj.get("userConfirmation") is not None else 'NotRequired'
        })
        return _obj



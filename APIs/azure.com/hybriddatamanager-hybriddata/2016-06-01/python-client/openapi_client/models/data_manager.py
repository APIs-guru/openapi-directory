# coding: utf-8

"""
    HybridDataManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sku import Sku
from typing import Optional, Set
from typing_extensions import Self

class DataManager(BaseModel):
    """
    The DataManager resource.
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="Etag of the Resource.")
    id: Optional[StrictStr] = Field(default=None, description="The Resource Id.")
    location: StrictStr = Field(description="The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East  US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo  region is specified on update the request will succeed.")
    name: Optional[StrictStr] = Field(default=None, description="The Resource Name.")
    sku: Optional[Sku] = None
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource  (across resource groups).")
    type: Optional[StrictStr] = Field(default=None, description="The Resource type.")
    __properties: ClassVar[List[str]] = ["id", "location", "name", "sku", "tags", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataManager from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataManager from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "sku": Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "tags": obj.get("tags"),
            "type": obj.get("type")
        })
        return _obj



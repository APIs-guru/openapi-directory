# coding: utf-8

"""
    HybridDataManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2016-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_details import ErrorDetails
from typing import Optional, Set
from typing_extensions import Self

class JobStages(BaseModel):
    """
    Job stages.
    """ # noqa: E501
    error_details: Optional[List[ErrorDetails]] = Field(default=None, description="Error details for the stage. This is optional", alias="errorDetails")
    job_stage_details: Optional[Dict[str, Any]] = Field(default=None, description="Job Stage Details", alias="jobStageDetails")
    stage_name: Optional[StrictStr] = Field(default=None, description="Name of the job stage.", alias="stageName")
    stage_status: StrictStr = Field(description="Status of the job stage.", alias="stageStatus")
    __properties: ClassVar[List[str]] = ["errorDetails", "jobStageDetails", "stageName", "stageStatus"]

    @field_validator('stage_status')
    def stage_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling']):
            raise ValueError("must be one of enum values ('None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed', 'Cancelled', 'Cancelling')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStages from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_details (list)
        _items = []
        if self.error_details:
            for _item_error_details in self.error_details:
                if _item_error_details:
                    _items.append(_item_error_details.to_dict())
            _dict['errorDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStages from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorDetails": [ErrorDetails.from_dict(_item) for _item in obj["errorDetails"]] if obj.get("errorDetails") is not None else None,
            "jobStageDetails": obj.get("jobStageDetails"),
            "stageName": obj.get("stageName"),
            "stageStatus": obj.get("stageStatus")
        })
        return _obj



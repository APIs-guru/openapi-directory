# coding: utf-8

"""
    CognitiveServicesManagementClient

    Cognitive Services Management Client

    The version of the OpenAPI document: 2017-04-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cognitive_services_account_api_properties import CognitiveServicesAccountApiProperties
from openapi_client.models.network_rule_set import NetworkRuleSet
from typing import Optional, Set
from typing_extensions import Self

class CognitiveServicesAccountProperties(BaseModel):
    """
    Properties of Cognitive Services account.
    """ # noqa: E501
    api_properties: Optional[CognitiveServicesAccountApiProperties] = Field(default=None, alias="apiProperties")
    custom_sub_domain_name: Optional[StrictStr] = Field(default=None, description="Optional subdomain name used for token-based authentication.", alias="customSubDomainName")
    endpoint: Optional[StrictStr] = Field(default=None, description="Endpoint of the created account.")
    internal_id: Optional[StrictStr] = Field(default=None, description="The internal identifier.", alias="internalId")
    network_acls: Optional[NetworkRuleSet] = Field(default=None, alias="networkAcls")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Gets the status of the cognitive services account at the time the operation was called.", alias="provisioningState")
    __properties: ClassVar[List[str]] = ["apiProperties", "customSubDomainName", "endpoint", "internalId", "networkAcls", "provisioningState"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'ResolvingDNS', 'Moving', 'Deleting', 'Succeeded', 'Failed']):
            raise ValueError("must be one of enum values ('Creating', 'ResolvingDNS', 'Moving', 'Deleting', 'Succeeded', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CognitiveServicesAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "endpoint",
            "internal_id",
            "provisioning_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_properties
        if self.api_properties:
            _dict['apiProperties'] = self.api_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_acls
        if self.network_acls:
            _dict['networkAcls'] = self.network_acls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CognitiveServicesAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiProperties": CognitiveServicesAccountApiProperties.from_dict(obj["apiProperties"]) if obj.get("apiProperties") is not None else None,
            "customSubDomainName": obj.get("customSubDomainName"),
            "endpoint": obj.get("endpoint"),
            "internalId": obj.get("internalId"),
            "networkAcls": NetworkRuleSet.from_dict(obj["networkAcls"]) if obj.get("networkAcls") is not None else None,
            "provisioningState": obj.get("provisioningState")
        })
        return _obj



# coding: utf-8

"""
    CognitiveServicesManagementClient

    Cognitive Services Management Client

    The version of the OpenAPI document: 2017-04-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_sku_restriction_info import ResourceSkuRestrictionInfo
from typing import Optional, Set
from typing_extensions import Self

class ResourceSkuRestrictions(BaseModel):
    """
    Describes restrictions of a SKU.
    """ # noqa: E501
    reason_code: Optional[StrictStr] = Field(default=None, description="The reason for restriction.", alias="reasonCode")
    restriction_info: Optional[ResourceSkuRestrictionInfo] = Field(default=None, alias="restrictionInfo")
    type: Optional[StrictStr] = Field(default=None, description="The type of restrictions.")
    values: Optional[List[StrictStr]] = Field(default=None, description="The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.")
    __properties: ClassVar[List[str]] = ["reasonCode", "restrictionInfo", "type", "values"]

    @field_validator('reason_code')
    def reason_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['QuotaId', 'NotAvailableForSubscription']):
            raise ValueError("must be one of enum values ('QuotaId', 'NotAvailableForSubscription')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Location', 'Zone']):
            raise ValueError("must be one of enum values ('Location', 'Zone')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceSkuRestrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "reason_code",
            "type",
            "values",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of restriction_info
        if self.restriction_info:
            _dict['restrictionInfo'] = self.restriction_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceSkuRestrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reasonCode": obj.get("reasonCode"),
            "restrictionInfo": ResourceSkuRestrictionInfo.from_dict(obj["restrictionInfo"]) if obj.get("restrictionInfo") is not None else None,
            "type": obj.get("type"),
            "values": obj.get("values")
        })
        return _obj



# coding: utf-8

"""
    CognitiveServicesManagementClient

    Cognitive Services Management Client

    The version of the OpenAPI document: 2017-04-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CognitiveServicesAccountApiProperties(BaseModel):
    """
    The api properties for special APIs.
    """ # noqa: E501
    event_hub_connection_string: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="(Personalization Only) The flag to enable statistics of Bing Search.", alias="eventHubConnectionString")
    qna_runtime_endpoint: Optional[StrictStr] = Field(default=None, description="(QnAMaker Only) The runtime endpoint of QnAMaker.", alias="qnaRuntimeEndpoint")
    statistics_enabled: Optional[StrictBool] = Field(default=None, description="(Bing Search Only) The flag to enable statistics of Bing Search.", alias="statisticsEnabled")
    storage_account_connection_string: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="(Personalization Only) The storage account connection string.", alias="storageAccountConnectionString")
    __properties: ClassVar[List[str]] = ["eventHubConnectionString", "qnaRuntimeEndpoint", "statisticsEnabled", "storageAccountConnectionString"]

    @field_validator('event_hub_connection_string')
    def event_hub_connection_string_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^( *)Endpoint=sb:\/\/(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$", value):
            raise ValueError(r"must validate the regular expression /^( *)Endpoint=sb:\/\/(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$/")
        return value

    @field_validator('storage_account_connection_string')
    def storage_account_connection_string_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$", value):
            raise ValueError(r"must validate the regular expression /^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CognitiveServicesAccountApiProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CognitiveServicesAccountApiProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventHubConnectionString": obj.get("eventHubConnectionString"),
            "qnaRuntimeEndpoint": obj.get("qnaRuntimeEndpoint"),
            "statisticsEnabled": obj.get("statisticsEnabled"),
            "storageAccountConnectionString": obj.get("storageAccountConnectionString")
        })
        return _obj



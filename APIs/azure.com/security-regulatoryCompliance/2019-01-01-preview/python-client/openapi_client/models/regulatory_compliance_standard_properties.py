# coding: utf-8

"""
    Security Center

    API spec for Microsoft.Security (Azure Security Center) resource provider

    The version of the OpenAPI document: 2019-01-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RegulatoryComplianceStandardProperties(BaseModel):
    """
    Regulatory compliance standard data
    """ # noqa: E501
    failed_controls: Optional[StrictInt] = Field(default=None, description="The number of supported regulatory compliance controls of the given standard with a failed state", alias="failedControls")
    passed_controls: Optional[StrictInt] = Field(default=None, description="The number of supported regulatory compliance controls of the given standard with a passed state", alias="passedControls")
    skipped_controls: Optional[StrictInt] = Field(default=None, description="The number of supported regulatory compliance controls of the given standard with a skipped state", alias="skippedControls")
    state: Optional[StrictStr] = Field(default=None, description="Aggregative state based on the standard's supported controls states")
    unsupported_controls: Optional[StrictInt] = Field(default=None, description="The number of regulatory compliance controls of the given standard which are unsupported by automated assessments", alias="unsupportedControls")
    __properties: ClassVar[List[str]] = ["failedControls", "passedControls", "skippedControls", "state", "unsupportedControls"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Passed', 'Failed', 'Skipped', 'Unsupported']):
            raise ValueError("must be one of enum values ('Passed', 'Failed', 'Skipped', 'Unsupported')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegulatoryComplianceStandardProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "failed_controls",
            "passed_controls",
            "skipped_controls",
            "unsupported_controls",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegulatoryComplianceStandardProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "failedControls": obj.get("failedControls"),
            "passedControls": obj.get("passedControls"),
            "skippedControls": obj.get("skippedControls"),
            "state": obj.get("state"),
            "unsupportedControls": obj.get("unsupportedControls")
        })
        return _obj



# coding: utf-8

"""
    Power BI Embedded Management Client

    Client to manage your Power BI Embedded workspace collections and retrieve workspaces.

    The version of the OpenAPI document: 2016-01-29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CheckNameResponse(BaseModel):
    """
    CheckNameResponse
    """ # noqa: E501
    message: Optional[StrictStr] = Field(default=None, description="Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated.")
    name_available: Optional[StrictBool] = Field(default=None, description="Specifies a Boolean value that indicates whether the specified Power BI Workspace Collection name is available to use.", alias="nameAvailable")
    reason: Optional[StrictStr] = Field(default=None, description="Reason why the workspace collection name cannot be used.")
    __properties: ClassVar[List[str]] = ["message", "nameAvailable", "reason"]

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unavailable', 'Invalid']):
            raise ValueError("must be one of enum values ('Unavailable', 'Invalid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckNameResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckNameResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "nameAvailable": obj.get("nameAvailable"),
            "reason": obj.get("reason")
        })
        return _obj



# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.task import Task

class TestTask(unittest.TestCase):
    """Task unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Task:
        """Test Task
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Task`
        """
        model = Task()
        if include_optional:
            return Task(
                properties = openapi_client.models.task_properties.TaskProperties(
                    agent_configuration = openapi_client.models.agent_properties.AgentProperties(
                        cpu = 56, ), 
                    creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    credentials = openapi_client.models.credentials.Credentials(
                        custom_registries = {
                            'key' : openapi_client.models.custom_registry_credentials.CustomRegistryCredentials(
                                password = openapi_client.models.secret_object.SecretObject(
                                    type = 'Opaque', 
                                    value = '', ), 
                                user_name = openapi_client.models.secret_object.SecretObject(
                                    type = 'Opaque', 
                                    value = '', ), )
                            }, 
                        source_registry = openapi_client.models.source_registry_credentials.SourceRegistryCredentials(
                            login_mode = 'None', ), ), 
                    platform = openapi_client.models.platform_properties.PlatformProperties(
                        architecture = 'amd64', 
                        os = 'Windows', 
                        variant = 'v6', ), 
                    provisioning_state = 'Creating', 
                    status = 'Disabled', 
                    step = openapi_client.models.task_step_properties.TaskStepProperties(
                        base_image_dependencies = [
                            openapi_client.models.base_image_dependency.BaseImageDependency(
                                digest = '', 
                                registry = '', 
                                repository = '', 
                                tag = '', 
                                type = 'BuildTime', )
                            ], 
                        context_access_token = '', 
                        context_path = '', ), 
                    timeout = 3E+2, 
                    trigger = openapi_client.models.trigger_properties.TriggerProperties(
                        base_image_trigger = openapi_client.models.base_image_trigger.BaseImageTrigger(
                            base_image_trigger_type = 'All', 
                            name = '', 
                            status = 'Enabled', ), 
                        source_triggers = [
                            openapi_client.models.source_trigger.SourceTrigger(
                                name = '', 
                                source_repository = openapi_client.models.source_properties.SourceProperties(
                                    branch = '', 
                                    repository_url = '', 
                                    source_control_auth_properties = openapi_client.models.auth_info.AuthInfo(
                                        expires_in = 56, 
                                        refresh_token = '', 
                                        scope = '', 
                                        token = '', 
                                        token_type = 'PAT', ), 
                                    source_control_type = 'Github', ), 
                                source_trigger_events = [
                                    'commit'
                                    ], 
                                status = 'Enabled', )
                            ], ), ),
                id = '',
                location = '',
                name = '',
                tags = {
                    'key' : ''
                    },
                type = ''
            )
        else:
            return Task(
                location = '',
        )
        """

    def testTask(self):
        """Test Task"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

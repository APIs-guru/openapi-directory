# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RunFilter(BaseModel):
    """
    Properties that are enabled for Odata querying on runs.
    """ # noqa: E501
    create_time: Optional[datetime] = Field(default=None, description="The create time for a run.", alias="createTime")
    finish_time: Optional[datetime] = Field(default=None, description="The time the run finished.", alias="finishTime")
    is_archive_enabled: Optional[StrictBool] = Field(default=None, description="The value that indicates whether archiving is enabled or not.", alias="isArchiveEnabled")
    output_image_manifests: Optional[StrictStr] = Field(default=None, description="The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of  build type.", alias="outputImageManifests")
    run_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the run.", alias="runId")
    run_type: Optional[StrictStr] = Field(default=None, description="The type of run.", alias="runType")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the run.")
    task_name: Optional[StrictStr] = Field(default=None, description="The name of the task that the run corresponds to.", alias="taskName")
    __properties: ClassVar[List[str]] = ["createTime", "finishTime", "isArchiveEnabled", "outputImageManifests", "runId", "runType", "status", "taskName"]

    @field_validator('run_type')
    def run_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun']):
            raise ValueError("must be one of enum values ('QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout']):
            raise ValueError("must be one of enum values ('Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "finishTime": obj.get("finishTime"),
            "isArchiveEnabled": obj.get("isArchiveEnabled"),
            "outputImageManifests": obj.get("outputImageManifests"),
            "runId": obj.get("runId"),
            "runType": obj.get("runType"),
            "status": obj.get("status"),
            "taskName": obj.get("taskName")
        })
        return _obj



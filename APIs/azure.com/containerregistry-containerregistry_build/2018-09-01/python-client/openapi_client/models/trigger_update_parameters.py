# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.base_image_trigger_update_parameters import BaseImageTriggerUpdateParameters
from openapi_client.models.source_trigger_update_parameters import SourceTriggerUpdateParameters
from typing import Optional, Set
from typing_extensions import Self

class TriggerUpdateParameters(BaseModel):
    """
    The properties for updating triggers.
    """ # noqa: E501
    base_image_trigger: Optional[BaseImageTriggerUpdateParameters] = Field(default=None, alias="baseImageTrigger")
    source_triggers: Optional[List[SourceTriggerUpdateParameters]] = Field(default=None, description="The collection of triggers based on source code repository.", alias="sourceTriggers")
    __properties: ClassVar[List[str]] = ["baseImageTrigger", "sourceTriggers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TriggerUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_image_trigger
        if self.base_image_trigger:
            _dict['baseImageTrigger'] = self.base_image_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in source_triggers (list)
        _items = []
        if self.source_triggers:
            for _item_source_triggers in self.source_triggers:
                if _item_source_triggers:
                    _items.append(_item_source_triggers.to_dict())
            _dict['sourceTriggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TriggerUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseImageTrigger": BaseImageTriggerUpdateParameters.from_dict(obj["baseImageTrigger"]) if obj.get("baseImageTrigger") is not None else None,
            "sourceTriggers": [SourceTriggerUpdateParameters.from_dict(_item) for _item in obj["sourceTriggers"]] if obj.get("sourceTriggers") is not None else None
        })
        return _obj



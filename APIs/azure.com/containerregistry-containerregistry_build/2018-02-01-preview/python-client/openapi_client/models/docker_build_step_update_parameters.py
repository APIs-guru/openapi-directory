# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_argument import BuildArgument
from openapi_client.models.build_step_properties_update_parameters import BuildStepPropertiesUpdateParameters
from typing import Optional, Set
from typing_extensions import Self

class DockerBuildStepUpdateParameters(BuildStepPropertiesUpdateParameters):
    """
    The properties for updating a docker build step.
    """ # noqa: E501
    base_image_trigger: Optional[StrictStr] = Field(default=None, description="The type of the auto trigger for base image dependency updates.", alias="baseImageTrigger")
    branch: Optional[StrictStr] = Field(default=None, description="The repository branch name.")
    build_arguments: Optional[List[BuildArgument]] = Field(default=None, description="The custom arguments for building this build step.", alias="buildArguments")
    context_path: Optional[StrictStr] = Field(default=None, description="The relative context path for a docker build in the source.", alias="contextPath")
    docker_file_path: Optional[StrictStr] = Field(default=None, description="The Docker file path relative to the source control root.", alias="dockerFilePath")
    image_names: Optional[List[StrictStr]] = Field(default=None, description="The fully qualified image names including the repository and tag.", alias="imageNames")
    is_push_enabled: Optional[StrictBool] = Field(default=None, description="The value of this property indicates whether the image built should be pushed to the registry or not.", alias="isPushEnabled")
    no_cache: Optional[StrictBool] = Field(default=None, description="The value of this property indicates whether the image cache is enabled or not.", alias="noCache")
    __properties: ClassVar[List[str]] = ["type"]

    @field_validator('base_image_trigger')
    def base_image_trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['All', 'Runtime', 'None']):
            raise ValueError("must be one of enum values ('All', 'Runtime', 'None')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DockerBuildStepUpdateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DockerBuildStepUpdateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type")
        })
        return _obj



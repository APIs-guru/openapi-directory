# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-02-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.git_commit_trigger import GitCommitTrigger
from openapi_client.models.image_descriptor import ImageDescriptor
from openapi_client.models.image_update_trigger import ImageUpdateTrigger
from openapi_client.models.platform_properties import PlatformProperties
from typing import Optional, Set
from typing_extensions import Self

class BuildProperties(BaseModel):
    """
    The properties for a build.
    """ # noqa: E501
    build_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the build.", alias="buildId")
    build_task: Optional[StrictStr] = Field(default=None, description="The build task with which the build was started.", alias="buildTask")
    build_type: Optional[StrictStr] = Field(default=None, description="The type of build.", alias="buildType")
    create_time: Optional[datetime] = Field(default=None, description="The time the build was created.", alias="createTime")
    finish_time: Optional[datetime] = Field(default=None, description="The time the build finished.", alias="finishTime")
    git_commit_trigger: Optional[GitCommitTrigger] = Field(default=None, alias="gitCommitTrigger")
    image_update_trigger: Optional[ImageUpdateTrigger] = Field(default=None, alias="imageUpdateTrigger")
    is_archive_enabled: Optional[StrictBool] = Field(default=False, description="The value that indicates whether archiving is enabled or not.", alias="isArchiveEnabled")
    last_updated_time: Optional[datetime] = Field(default=None, description="The last updated time for the build.", alias="lastUpdatedTime")
    output_images: Optional[List[ImageDescriptor]] = Field(default=None, description="The list of all images that were generated from the build.", alias="outputImages")
    platform: Optional[PlatformProperties] = None
    provisioning_state: Optional[StrictStr] = Field(default=None, description="The provisioning state of a build.", alias="provisioningState")
    start_time: Optional[datetime] = Field(default=None, description="The time the build started.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the build.")
    __properties: ClassVar[List[str]] = ["buildId", "buildTask", "buildType", "createTime", "finishTime", "gitCommitTrigger", "imageUpdateTrigger", "isArchiveEnabled", "lastUpdatedTime", "outputImages", "platform", "provisioningState", "startTime", "status"]

    @field_validator('build_type')
    def build_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AutoBuild', 'QuickBuild']):
            raise ValueError("must be one of enum values ('AutoBuild', 'QuickBuild')")
        return value

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled']):
            raise ValueError("must be one of enum values ('Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout']):
            raise ValueError("must be one of enum values ('Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of git_commit_trigger
        if self.git_commit_trigger:
            _dict['gitCommitTrigger'] = self.git_commit_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_update_trigger
        if self.image_update_trigger:
            _dict['imageUpdateTrigger'] = self.image_update_trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output_images (list)
        _items = []
        if self.output_images:
            for _item_output_images in self.output_images:
                if _item_output_images:
                    _items.append(_item_output_images.to_dict())
            _dict['outputImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildId": obj.get("buildId"),
            "buildTask": obj.get("buildTask"),
            "buildType": obj.get("buildType"),
            "createTime": obj.get("createTime"),
            "finishTime": obj.get("finishTime"),
            "gitCommitTrigger": GitCommitTrigger.from_dict(obj["gitCommitTrigger"]) if obj.get("gitCommitTrigger") is not None else None,
            "imageUpdateTrigger": ImageUpdateTrigger.from_dict(obj["imageUpdateTrigger"]) if obj.get("imageUpdateTrigger") is not None else None,
            "isArchiveEnabled": obj.get("isArchiveEnabled") if obj.get("isArchiveEnabled") is not None else False,
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "outputImages": [ImageDescriptor.from_dict(_item) for _item in obj["outputImages"]] if obj.get("outputImages") is not None else None,
            "platform": PlatformProperties.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status")
        })
        return _obj



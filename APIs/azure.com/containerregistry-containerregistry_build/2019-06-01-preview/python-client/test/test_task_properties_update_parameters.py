# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-06-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.task_properties_update_parameters import TaskPropertiesUpdateParameters

class TestTaskPropertiesUpdateParameters(unittest.TestCase):
    """TaskPropertiesUpdateParameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskPropertiesUpdateParameters:
        """Test TaskPropertiesUpdateParameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskPropertiesUpdateParameters`
        """
        model = TaskPropertiesUpdateParameters()
        if include_optional:
            return TaskPropertiesUpdateParameters(
                agent_configuration = openapi_client.models.agent_properties.AgentProperties(
                    cpu = 56, ),
                credentials = openapi_client.models.credentials.Credentials(
                    custom_registries = {
                        'key' : openapi_client.models.custom_registry_credentials.CustomRegistryCredentials(
                            identity = '', 
                            password = openapi_client.models.secret_object.SecretObject(
                                type = 'Opaque', 
                                value = '', ), 
                            user_name = openapi_client.models.secret_object.SecretObject(
                                type = 'Opaque', 
                                value = '', ), )
                        }, 
                    source_registry = openapi_client.models.source_registry_credentials.SourceRegistryCredentials(
                        login_mode = 'None', ), ),
                platform = openapi_client.models.platform_update_parameters.PlatformUpdateParameters(
                    architecture = 'amd64', 
                    os = 'Windows', 
                    variant = 'v6', ),
                status = 'Disabled',
                step = openapi_client.models.task_step_update_parameters.TaskStepUpdateParameters(
                    context_access_token = '', 
                    context_path = '', 
                    type = 'Docker', ),
                timeout = 56,
                trigger = openapi_client.models.trigger_update_parameters.TriggerUpdateParameters(
                    base_image_trigger = openapi_client.models.base_image_trigger_update_parameters.BaseImageTriggerUpdateParameters(
                        base_image_trigger_type = 'All', 
                        name = '', 
                        status = 'Enabled', 
                        update_trigger_endpoint = '', 
                        update_trigger_payload_type = 'Default', ), 
                    source_triggers = [
                        openapi_client.models.source_trigger_update_parameters.SourceTriggerUpdateParameters(
                            name = '', 
                            source_repository = openapi_client.models.source_update_parameters.SourceUpdateParameters(
                                branch = '', 
                                repository_url = '', 
                                source_control_auth_properties = openapi_client.models.auth_info_update_parameters.AuthInfoUpdateParameters(
                                    expires_in = 56, 
                                    refresh_token = '', 
                                    scope = '', 
                                    token = '', 
                                    token_type = 'PAT', ), 
                                source_control_type = 'Github', ), 
                            source_trigger_events = [
                                'commit'
                                ], 
                            status = 'Enabled', )
                        ], 
                    timer_triggers = [
                        openapi_client.models.timer_trigger_update_parameters.TimerTriggerUpdateParameters(
                            name = '', 
                            schedule = '', 
                            status = 'Enabled', )
                        ], )
            )
        else:
            return TaskPropertiesUpdateParameters(
        )
        """

    def testTaskPropertiesUpdateParameters(self):
        """Test TaskPropertiesUpdateParameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

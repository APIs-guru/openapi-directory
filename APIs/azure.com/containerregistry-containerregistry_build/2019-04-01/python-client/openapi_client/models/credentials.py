# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_registry_credentials import CustomRegistryCredentials
from openapi_client.models.source_registry_credentials import SourceRegistryCredentials
from typing import Optional, Set
from typing_extensions import Self

class Credentials(BaseModel):
    """
    The parameters that describes a set of credentials that will be used when a run is invoked.
    """ # noqa: E501
    custom_registries: Optional[Dict[str, CustomRegistryCredentials]] = Field(default=None, description="Describes the credential parameters for accessing other custom registries. The key  for the dictionary item will be the registry login server (myregistry.azurecr.io) and  the value of the item will be the registry credentials for accessing the registry.", alias="customRegistries")
    source_registry: Optional[SourceRegistryCredentials] = Field(default=None, alias="sourceRegistry")
    __properties: ClassVar[List[str]] = ["customRegistries", "sourceRegistry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Credentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in custom_registries (dict)
        _field_dict = {}
        if self.custom_registries:
            for _key_custom_registries in self.custom_registries:
                if self.custom_registries[_key_custom_registries]:
                    _field_dict[_key_custom_registries] = self.custom_registries[_key_custom_registries].to_dict()
            _dict['customRegistries'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of source_registry
        if self.source_registry:
            _dict['sourceRegistry'] = self.source_registry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Credentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customRegistries": dict(
                (_k, CustomRegistryCredentials.from_dict(_v))
                for _k, _v in obj["customRegistries"].items()
            )
            if obj.get("customRegistries") is not None
            else None,
            "sourceRegistry": SourceRegistryCredentials.from_dict(obj["sourceRegistry"]) if obj.get("sourceRegistry") is not None else None
        })
        return _obj



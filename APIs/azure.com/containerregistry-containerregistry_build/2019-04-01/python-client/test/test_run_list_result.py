# coding: utf-8

"""
    ContainerRegistryManagementClient

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2019-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.run_list_result import RunListResult

class TestRunListResult(unittest.TestCase):
    """RunListResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunListResult:
        """Test RunListResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunListResult`
        """
        model = RunListResult()
        if include_optional:
            return RunListResult(
                next_link = '',
                value = [
                    openapi_client.models.run.Run(
                        properties = openapi_client.models.run_properties.RunProperties(
                            agent_configuration = openapi_client.models.agent_properties.AgentProperties(
                                cpu = 56, ), 
                            create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            custom_registries = [
                                ''
                                ], 
                            finish_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            image_update_trigger = openapi_client.models.image_update_trigger.ImageUpdateTrigger(
                                id = '', 
                                images = [
                                    openapi_client.models.image_descriptor.ImageDescriptor(
                                        digest = '', 
                                        registry = '', 
                                        repository = '', 
                                        tag = '', )
                                    ], 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            is_archive_enabled = True, 
                            last_updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            output_images = [
                                openapi_client.models.image_descriptor.ImageDescriptor(
                                    digest = '', 
                                    registry = '', 
                                    repository = '', 
                                    tag = '', )
                                ], 
                            platform = openapi_client.models.platform_properties.PlatformProperties(
                                architecture = 'amd64', 
                                os = 'Windows', 
                                variant = 'v6', ), 
                            provisioning_state = 'Creating', 
                            run_error_message = '', 
                            run_id = '', 
                            run_type = 'QuickBuild', 
                            source_registry_auth = '', 
                            source_trigger = openapi_client.models.source_trigger_descriptor.SourceTriggerDescriptor(
                                branch_name = '', 
                                commit_id = '', 
                                event_type = '', 
                                id = '', 
                                provider_type = '', 
                                pull_request_id = '', 
                                repository_url = '', ), 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = 'Queued', 
                            task = '', 
                            timer_trigger = openapi_client.models.timer_trigger_descriptor.TimerTriggerDescriptor(
                                schedule_occurrence = '', 
                                timer_trigger_name = '', ), ), )
                    ]
            )
        else:
            return RunListResult(
        )
        """

    def testRunListResult(self):
        """Test RunListResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

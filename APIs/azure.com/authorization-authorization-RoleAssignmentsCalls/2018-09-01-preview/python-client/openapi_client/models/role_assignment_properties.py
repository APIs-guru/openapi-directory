# coding: utf-8

"""
    AuthorizationManagementClient

    Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role assignments. A role assignment grants access to Azure Active Directory users.

    The version of the OpenAPI document: 2018-09-01-preview
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RoleAssignmentProperties(BaseModel):
    """
    Role assignment properties.
    """ # noqa: E501
    can_delegate: Optional[StrictBool] = Field(default=None, description="The delegation flag used for creating a role assignment", alias="canDelegate")
    principal_id: StrictStr = Field(description="The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.", alias="principalId")
    principal_type: Optional[StrictStr] = Field(default=None, description="The principal type of the assigned principal ID.", alias="principalType")
    role_definition_id: StrictStr = Field(description="The role definition ID used in the role assignment.", alias="roleDefinitionId")
    __properties: ClassVar[List[str]] = ["canDelegate", "principalId", "principalType", "roleDefinitionId"]

    @field_validator('principal_type')
    def principal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['User', 'Group', 'ServicePrincipal', 'Unknown', 'DirectoryRoleTemplate', 'ForeignGroup', 'Application', 'MSI', 'DirectoryObjectOrGroup', 'Everyone']):
            raise ValueError("must be one of enum values ('User', 'Group', 'ServicePrincipal', 'Unknown', 'DirectoryRoleTemplate', 'ForeignGroup', 'Application', 'MSI', 'DirectoryObjectOrGroup', 'Everyone')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleAssignmentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleAssignmentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canDelegate": obj.get("canDelegate"),
            "principalId": obj.get("principalId"),
            "principalType": obj.get("principalType"),
            "roleDefinitionId": obj.get("roleDefinitionId")
        })
        return _obj



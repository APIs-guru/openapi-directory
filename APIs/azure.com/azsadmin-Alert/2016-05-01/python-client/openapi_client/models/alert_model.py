# coding: utf-8

"""
    InfrastructureInsightsManagementClient

    Alert operation endpoints and objects.

    The version of the OpenAPI document: 2016-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertModel(BaseModel):
    """
    Contains alert data.
    """ # noqa: E501
    alert_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the ID of the alert.", alias="alertId")
    alert_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Properties of the alert.", alias="alertProperties")
    closed_by_user_alias: Optional[StrictStr] = Field(default=None, description="User alias who closed the alert.", alias="closedByUserAlias")
    closed_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp when the alert was closed.", alias="closedTimestamp")
    created_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp when the alert was created.", alias="createdTimestamp")
    description: Optional[List[Dict[str, StrictStr]]] = Field(default=None, description="Description of the alert.")
    fault_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the fault ID of the alert.", alias="faultId")
    fault_type_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the fault type ID of the alert.", alias="faultTypeId")
    has_valid_remediation_action: Optional[StrictBool] = Field(default=None, description="Indicates if the alert can be remediated.", alias="hasValidRemediationAction")
    impacted_resource_display_name: Optional[StrictStr] = Field(default=None, description="Display name for the impacted item.", alias="impactedResourceDisplayName")
    impacted_resource_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the Resource ID for the impacted item.", alias="impactedResourceId")
    last_updated_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp when the alert was last updated.", alias="lastUpdatedTimestamp")
    remediation: Optional[List[Dict[str, StrictStr]]] = Field(default=None, description="Gets or sets the admin friendly remediation instructions for the alert.")
    resource_provider_registration_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the registration ID of the service the alert belongs to.", alias="resourceProviderRegistrationId")
    resource_registration_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the registration ID of the resource associated with the alert. If the alert is not associated with a resource, the resource registration ID is null.", alias="resourceRegistrationId")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of the alert.")
    state: Optional[StrictStr] = Field(default=None, description="State of the alert.")
    title: Optional[StrictStr] = Field(default=None, description="Gets or sets the Resource ID for the impacted item.")
    __properties: ClassVar[List[str]] = ["alertId", "alertProperties", "closedByUserAlias", "closedTimestamp", "createdTimestamp", "description", "faultId", "faultTypeId", "hasValidRemediationAction", "impactedResourceDisplayName", "impactedResourceId", "lastUpdatedTimestamp", "remediation", "resourceProviderRegistrationId", "resourceRegistrationId", "severity", "state", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertId": obj.get("alertId"),
            "alertProperties": obj.get("alertProperties"),
            "closedByUserAlias": obj.get("closedByUserAlias"),
            "closedTimestamp": obj.get("closedTimestamp"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "description": obj.get("description"),
            "faultId": obj.get("faultId"),
            "faultTypeId": obj.get("faultTypeId"),
            "hasValidRemediationAction": obj.get("hasValidRemediationAction"),
            "impactedResourceDisplayName": obj.get("impactedResourceDisplayName"),
            "impactedResourceId": obj.get("impactedResourceId"),
            "lastUpdatedTimestamp": obj.get("lastUpdatedTimestamp"),
            "remediation": obj.get("remediation"),
            "resourceProviderRegistrationId": obj.get("resourceProviderRegistrationId"),
            "resourceRegistrationId": obj.get("resourceRegistrationId"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "title": obj.get("title")
        })
        return _obj



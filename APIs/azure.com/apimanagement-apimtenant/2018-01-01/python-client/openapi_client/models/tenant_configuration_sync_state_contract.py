# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.

    The version of the OpenAPI document: 2018-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TenantConfigurationSyncStateContract(BaseModel):
    """
    Tenant Configuration Synchronization State.
    """ # noqa: E501
    branch: Optional[StrictStr] = Field(default=None, description="The name of Git branch.")
    commit_id: Optional[StrictStr] = Field(default=None, description="The latest commit Id.", alias="commitId")
    configuration_change_date: Optional[datetime] = Field(default=None, description="The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="configurationChangeDate")
    is_export: Optional[StrictBool] = Field(default=None, description="value indicating if last sync was save (true) or deploy (false) operation.", alias="isExport")
    is_git_enabled: Optional[StrictBool] = Field(default=None, description="value indicating whether Git configuration access is enabled.", alias="isGitEnabled")
    is_synced: Optional[StrictBool] = Field(default=None, description="value indicating if last synchronization was later than the configuration change.", alias="isSynced")
    sync_date: Optional[datetime] = Field(default=None, description="The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. ", alias="syncDate")
    __properties: ClassVar[List[str]] = ["branch", "commitId", "configurationChangeDate", "isExport", "isGitEnabled", "isSynced", "syncDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantConfigurationSyncStateContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantConfigurationSyncStateContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branch": obj.get("branch"),
            "commitId": obj.get("commitId"),
            "configurationChangeDate": obj.get("configurationChangeDate"),
            "isExport": obj.get("isExport"),
            "isGitEnabled": obj.get("isGitEnabled"),
            "isSynced": obj.get("isSynced"),
            "syncDate": obj.get("syncDate")
        })
        return _obj



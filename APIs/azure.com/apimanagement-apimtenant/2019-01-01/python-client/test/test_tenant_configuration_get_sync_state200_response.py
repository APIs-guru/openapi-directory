# coding: utf-8

"""
    ApiManagementClient

    Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.

    The version of the OpenAPI document: 2019-01-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tenant_configuration_get_sync_state200_response import TenantConfigurationGetSyncState200Response

class TestTenantConfigurationGetSyncState200Response(unittest.TestCase):
    """TenantConfigurationGetSyncState200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TenantConfigurationGetSyncState200Response:
        """Test TenantConfigurationGetSyncState200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TenantConfigurationGetSyncState200Response`
        """
        model = TenantConfigurationGetSyncState200Response()
        if include_optional:
            return TenantConfigurationGetSyncState200Response(
                branch = '',
                commit_id = '',
                configuration_change_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_export = True,
                is_git_enabled = True,
                is_synced = True,
                sync_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return TenantConfigurationGetSyncState200Response(
        )
        """

    def testTenantConfigurationGetSyncState200Response(self):
        """Test TenantConfigurationGetSyncState200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for Continuous Export of a component.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentExportConfiguration(BaseModel):
    """
    Properties that define a Continuous Export configuration.
    """ # noqa: E501
    application_name: Optional[StrictStr] = Field(default=None, description="The name of the Application Insights component.", alias="ApplicationName")
    container_name: Optional[StrictStr] = Field(default=None, description="The name of the destination storage container.", alias="ContainerName")
    destination_account_id: Optional[StrictStr] = Field(default=None, description="The name of destination account.", alias="DestinationAccountId")
    destination_storage_location_id: Optional[StrictStr] = Field(default=None, description="The destination account location ID.", alias="DestinationStorageLocationId")
    destination_storage_subscription_id: Optional[StrictStr] = Field(default=None, description="The destination storage account subscription ID.", alias="DestinationStorageSubscriptionId")
    destination_type: Optional[StrictStr] = Field(default=None, description="The destination type.", alias="DestinationType")
    export_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the export configuration inside an Application Insights component. It is auto generated when the Continuous Export configuration is created.", alias="ExportId")
    export_status: Optional[StrictStr] = Field(default=None, description="This indicates current Continuous Export configuration status. The possible values are 'Preparing', 'Success', 'Failure'.", alias="ExportStatus")
    instrumentation_key: Optional[StrictStr] = Field(default=None, description="The instrumentation key of the Application Insights component.", alias="InstrumentationKey")
    is_user_enabled: Optional[StrictStr] = Field(default=None, description="This will be 'true' if the Continuous Export configuration is enabled, otherwise it will be 'false'.", alias="IsUserEnabled")
    last_gap_time: Optional[StrictStr] = Field(default=None, description="The last time the Continuous Export configuration started failing.", alias="LastGapTime")
    last_success_time: Optional[StrictStr] = Field(default=None, description="The last time data was successfully delivered to the destination storage container for this Continuous Export configuration.", alias="LastSuccessTime")
    last_user_update: Optional[StrictStr] = Field(default=None, description="Last time the Continuous Export configuration was updated.", alias="LastUserUpdate")
    notification_queue_enabled: Optional[StrictStr] = Field(default=None, description="Deprecated", alias="NotificationQueueEnabled")
    permanent_error_reason: Optional[StrictStr] = Field(default=None, description="This is the reason the Continuous Export configuration started failing. It can be 'AzureStorageNotFound' or 'AzureStorageAccessDenied'.", alias="PermanentErrorReason")
    record_types: Optional[StrictStr] = Field(default=None, description="This comma separated list of document types that will be exported. The possible values include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability', 'Messages'.", alias="RecordTypes")
    resource_group: Optional[StrictStr] = Field(default=None, description="The resource group of the Application Insights component.", alias="ResourceGroup")
    storage_name: Optional[StrictStr] = Field(default=None, description="The name of the destination storage account.", alias="StorageName")
    subscription_id: Optional[StrictStr] = Field(default=None, description="The subscription of the Application Insights component.", alias="SubscriptionId")
    __properties: ClassVar[List[str]] = ["ApplicationName", "ContainerName", "DestinationAccountId", "DestinationStorageLocationId", "DestinationStorageSubscriptionId", "DestinationType", "ExportId", "ExportStatus", "InstrumentationKey", "IsUserEnabled", "LastGapTime", "LastSuccessTime", "LastUserUpdate", "NotificationQueueEnabled", "PermanentErrorReason", "RecordTypes", "ResourceGroup", "StorageName", "SubscriptionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentExportConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "application_name",
            "container_name",
            "destination_account_id",
            "destination_storage_location_id",
            "destination_storage_subscription_id",
            "destination_type",
            "export_id",
            "export_status",
            "instrumentation_key",
            "is_user_enabled",
            "last_gap_time",
            "last_success_time",
            "last_user_update",
            "permanent_error_reason",
            "resource_group",
            "storage_name",
            "subscription_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentExportConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationName": obj.get("ApplicationName"),
            "ContainerName": obj.get("ContainerName"),
            "DestinationAccountId": obj.get("DestinationAccountId"),
            "DestinationStorageLocationId": obj.get("DestinationStorageLocationId"),
            "DestinationStorageSubscriptionId": obj.get("DestinationStorageSubscriptionId"),
            "DestinationType": obj.get("DestinationType"),
            "ExportId": obj.get("ExportId"),
            "ExportStatus": obj.get("ExportStatus"),
            "InstrumentationKey": obj.get("InstrumentationKey"),
            "IsUserEnabled": obj.get("IsUserEnabled"),
            "LastGapTime": obj.get("LastGapTime"),
            "LastSuccessTime": obj.get("LastSuccessTime"),
            "LastUserUpdate": obj.get("LastUserUpdate"),
            "NotificationQueueEnabled": obj.get("NotificationQueueEnabled"),
            "PermanentErrorReason": obj.get("PermanentErrorReason"),
            "RecordTypes": obj.get("RecordTypes"),
            "ResourceGroup": obj.get("ResourceGroup"),
            "StorageName": obj.get("StorageName"),
            "SubscriptionId": obj.get("SubscriptionId")
        })
        return _obj



# coding: utf-8

"""
    ApplicationInsightsManagementClient

    Azure Application Insights client for API keys of a component.

    The version of the OpenAPI document: 2015-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInsightsComponentAPIKey(BaseModel):
    """
    Properties that define an API key of an Application Insights Component.
    """ # noqa: E501
    api_key: Optional[StrictStr] = Field(default=None, description="The API key value. It will be only return once when the API Key was created.", alias="apiKey")
    created_date: Optional[StrictStr] = Field(default=None, description="The create date of this API key.", alias="createdDate")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the API key inside an Application Insights component. It is auto generated when the API key is created.")
    linked_read_properties: Optional[List[StrictStr]] = Field(default=None, description="The read access rights of this API Key.", alias="linkedReadProperties")
    linked_write_properties: Optional[List[StrictStr]] = Field(default=None, description="The write access rights of this API Key.", alias="linkedWriteProperties")
    name: Optional[StrictStr] = Field(default=None, description="The name of the API key.")
    __properties: ClassVar[List[str]] = ["apiKey", "createdDate", "id", "linkedReadProperties", "linkedWriteProperties", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentAPIKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_key",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInsightsComponentAPIKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiKey": obj.get("apiKey"),
            "createdDate": obj.get("createdDate"),
            "id": obj.get("id"),
            "linkedReadProperties": obj.get("linkedReadProperties"),
            "linkedWriteProperties": obj.get("linkedWriteProperties"),
            "name": obj.get("name")
        })
        return _obj



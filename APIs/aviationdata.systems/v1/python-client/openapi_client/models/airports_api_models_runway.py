# coding: utf-8

"""
    AviationData.Systems Airports API V1

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AirportsAPIModelsRunway(BaseModel):
    """
    AirportsAPIModelsRunway
    """ # noqa: E501
    closed: Optional[StrictBool] = None
    h_e_latitude: Optional[StrictStr] = Field(default=None, alias="hE_latitude")
    h_e_longitude: Optional[StrictStr] = Field(default=None, alias="hE_longitude")
    he_displaced_threshold_ft: Optional[StrictStr] = None
    he_elevation_ft: Optional[StrictStr] = None
    he_heading_deg: Optional[StrictStr] = None
    le_displaced_threshold_ft: Optional[StrictStr] = None
    le_elevation_ft: Optional[StrictStr] = None
    le_heading_deg: Optional[StrictStr] = None
    le_latitude: Optional[StrictStr] = None
    le_longitude: Optional[StrictStr] = None
    length_ft: Optional[StrictStr] = None
    lighted: Optional[StrictBool] = None
    surface_type: Optional[StrictStr] = None
    width_ft: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["closed", "hE_latitude", "hE_longitude", "he_displaced_threshold_ft", "he_elevation_ft", "he_heading_deg", "le_displaced_threshold_ft", "le_elevation_ft", "le_heading_deg", "le_latitude", "le_longitude", "length_ft", "lighted", "surface_type", "width_ft"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirportsAPIModelsRunway from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirportsAPIModelsRunway from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closed": obj.get("closed"),
            "hE_latitude": obj.get("hE_latitude"),
            "hE_longitude": obj.get("hE_longitude"),
            "he_displaced_threshold_ft": obj.get("he_displaced_threshold_ft"),
            "he_elevation_ft": obj.get("he_elevation_ft"),
            "he_heading_deg": obj.get("he_heading_deg"),
            "le_displaced_threshold_ft": obj.get("le_displaced_threshold_ft"),
            "le_elevation_ft": obj.get("le_elevation_ft"),
            "le_heading_deg": obj.get("le_heading_deg"),
            "le_latitude": obj.get("le_latitude"),
            "le_longitude": obj.get("le_longitude"),
            "length_ft": obj.get("length_ft"),
            "lighted": obj.get("lighted"),
            "surface_type": obj.get("surface_type"),
            "width_ft": obj.get("width_ft")
        })
        return _obj



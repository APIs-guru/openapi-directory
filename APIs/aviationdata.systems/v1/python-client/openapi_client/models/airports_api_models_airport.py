# coding: utf-8

"""
    AviationData.Systems Airports API V1

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.airports_api_models_frequency import AirportsAPIModelsFrequency
from openapi_client.models.airports_api_models_location_country import AirportsAPIModelsLocationCountry
from openapi_client.models.airports_api_models_location_region import AirportsAPIModelsLocationRegion
from openapi_client.models.airports_api_models_runway import AirportsAPIModelsRunway
from typing import Optional, Set
from typing_extensions import Self

class AirportsAPIModelsAirport(BaseModel):
    """
    AirportsAPIModelsAirport
    """ # noqa: E501
    country: Optional[AirportsAPIModelsLocationCountry] = Field(default=None, alias="Country")
    frequency: Optional[List[AirportsAPIModelsFrequency]] = Field(default=None, alias="Frequency")
    region: Optional[AirportsAPIModelsLocationRegion] = Field(default=None, alias="Region")
    runway: Optional[List[AirportsAPIModelsRunway]] = Field(default=None, alias="Runway")
    airport_name: Optional[StrictStr] = None
    airport_type: Optional[StrictStr] = None
    elevation_ft: Optional[StrictStr] = None
    gps_code: Optional[StrictStr] = None
    iata_code: Optional[StrictStr] = None
    latitude: Optional[StrictStr] = None
    local_code: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    logo_url: Optional[StrictStr] = None
    longitude: Optional[StrictStr] = None
    scheduled_service: Optional[StrictBool] = None
    website: Optional[StrictStr] = None
    wikipedia: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["Country", "Frequency", "Region", "Runway", "airport_name", "airport_type", "elevation_ft", "gps_code", "iata_code", "latitude", "local_code", "location", "logo_url", "longitude", "scheduled_service", "website", "wikipedia"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirportsAPIModelsAirport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['Country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in frequency (list)
        _items = []
        if self.frequency:
            for _item_frequency in self.frequency:
                if _item_frequency:
                    _items.append(_item_frequency.to_dict())
            _dict['Frequency'] = _items
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['Region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runway (list)
        _items = []
        if self.runway:
            for _item_runway in self.runway:
                if _item_runway:
                    _items.append(_item_runway.to_dict())
            _dict['Runway'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirportsAPIModelsAirport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Country": AirportsAPIModelsLocationCountry.from_dict(obj["Country"]) if obj.get("Country") is not None else None,
            "Frequency": [AirportsAPIModelsFrequency.from_dict(_item) for _item in obj["Frequency"]] if obj.get("Frequency") is not None else None,
            "Region": AirportsAPIModelsLocationRegion.from_dict(obj["Region"]) if obj.get("Region") is not None else None,
            "Runway": [AirportsAPIModelsRunway.from_dict(_item) for _item in obj["Runway"]] if obj.get("Runway") is not None else None,
            "airport_name": obj.get("airport_name"),
            "airport_type": obj.get("airport_type"),
            "elevation_ft": obj.get("elevation_ft"),
            "gps_code": obj.get("gps_code"),
            "iata_code": obj.get("iata_code"),
            "latitude": obj.get("latitude"),
            "local_code": obj.get("local_code"),
            "location": obj.get("location"),
            "logo_url": obj.get("logo_url"),
            "longitude": obj.get("longitude"),
            "scheduled_service": obj.get("scheduled_service"),
            "website": obj.get("website"),
            "wikipedia": obj.get("wikipedia")
        })
        return _obj



# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202304191404
    Contact: sales@shipengine.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.dimensions import Dimensions
from openapi_client.models.label_download import LabelDownload
from openapi_client.models.label_messages import LabelMessages
from openapi_client.models.monetary_value import MonetaryValue
from openapi_client.models.optional_link import OptionalLink
from openapi_client.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class Package(BaseModel):
    """
    A package associated with a [shipping label](https://www.shipengine.com/docs/labels/create-a-label/) 
    """ # noqa: E501
    content_description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="A short description of the package content. Required for shipments moving to, from, and through Mexico. ")
    dimensions: Optional[Dimensions] = Field(default=None, description="The package dimensions")
    external_package_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="An external package id.")
    form_download: Optional[OptionalLink] = Field(default=None, description="The form download for any customs that are needed")
    insured_value: Optional[MonetaryValue] = Field(default=None, description="The insured value of the package.  Requires the `insurance_provider` field of the shipment to be set. ")
    label_download: Optional[LabelDownload] = Field(default=None, description="The label download for the package")
    label_messages: Optional[LabelMessages] = None
    package_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type. ")
    package_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=25)]] = Field(default=None, description="A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/)")
    sequence: Optional[StrictInt] = Field(default=None, description="Package sequence")
    tracking_number: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The tracking number for the package.  The format depends on the carrier. ")
    weight: Weight = Field(description="The package weight")
    __properties: ClassVar[List[str]] = ["content_description", "dimensions", "external_package_id", "form_download", "insured_value", "label_download", "label_messages", "package_code", "package_id", "sequence", "tracking_number", "weight"]

    @field_validator('package_code')
    def package_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9]+(_[a-z0-9]+)*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]+(_[a-z0-9]+)*$/")
        return value

    @field_validator('package_id')
    def package_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^se(-[a-z0-9]+)+$", value):
            raise ValueError(r"must validate the regular expression /^se(-[a-z0-9]+)+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Package from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "form_download",
            "label_download",
            "sequence",
            "tracking_number",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_download
        if self.form_download:
            _dict['form_download'] = self.form_download.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insured_value
        if self.insured_value:
            _dict['insured_value'] = self.insured_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label_download
        if self.label_download:
            _dict['label_download'] = self.label_download.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label_messages
        if self.label_messages:
            _dict['label_messages'] = self.label_messages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        # set to None if content_description (nullable) is None
        # and model_fields_set contains the field
        if self.content_description is None and "content_description" in self.model_fields_set:
            _dict['content_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Package from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content_description": obj.get("content_description"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "external_package_id": obj.get("external_package_id"),
            "form_download": OptionalLink.from_dict(obj["form_download"]) if obj.get("form_download") is not None else None,
            "insured_value": MonetaryValue.from_dict(obj["insured_value"]) if obj.get("insured_value") is not None else None,
            "label_download": LabelDownload.from_dict(obj["label_download"]) if obj.get("label_download") is not None else None,
            "label_messages": LabelMessages.from_dict(obj["label_messages"]) if obj.get("label_messages") is not None else None,
            "package_code": obj.get("package_code"),
            "package_id": obj.get("package_id"),
            "sequence": obj.get("sequence"),
            "tracking_number": obj.get("tracking_number"),
            "weight": Weight.from_dict(obj["weight"]) if obj.get("weight") is not None else None
        })
        return _obj



# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202304191404
    Contact: sales@shipengine.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.advanced_shipment_options import AdvancedShipmentOptions
from openapi_client.models.delivery_confirmation import DeliveryConfirmation
from openapi_client.models.insurance_provider import InsuranceProvider
from openapi_client.models.international_shipment_options import InternationalShipmentOptions
from openapi_client.models.order_source_name import OrderSourceName
from openapi_client.models.origin_type import OriginType
from openapi_client.models.package import Package
from openapi_client.models.shipment_item import ShipmentItem
from openapi_client.models.shipment_status import ShipmentStatus
from openapi_client.models.shipping_address import ShippingAddress
from openapi_client.models.tag import Tag
from openapi_client.models.tax_identifier import TaxIdentifier
from openapi_client.models.validate_address import ValidateAddress
from openapi_client.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class AddressValidatingShipment(BaseModel):
    """
    An address validating shipment
    """ # noqa: E501
    validate_address: Optional[ValidateAddress] = None
    advanced_options: Optional[AdvancedShipmentOptions] = Field(default=None, description="Advanced shipment options.  These are entirely optional.")
    carrier_id: Annotated[str, Field(min_length=1, strict=True, max_length=25)] = Field(description="The carrier account that is billed for the shipping charges")
    confirmation: Optional[DeliveryConfirmation] = Field(default=None, description="The type of delivery confirmation that is required for this shipment.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time that the shipment was created in ShipEngine.")
    customs: Optional[InternationalShipmentOptions] = Field(default=None, description="Customs information.  This is usually only needed for international shipments. ")
    external_order_id: Optional[StrictStr] = Field(default=None, description="ID that the Order Source assigned")
    external_shipment_id: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.  > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated. ")
    insurance_provider: Optional[InsuranceProvider] = Field(default=None, description="The insurance provider to use for any insured packages in the shipment. ")
    is_return: Optional[StrictBool] = Field(default=False, description="An optional indicator if the shipment is intended to be a return. Defaults to false if not provided. ")
    items: Optional[List[ShipmentItem]] = Field(default=None, description="Describe the packages included in this shipment as related to potential metadata that was imported from external order sources ")
    modified_at: Optional[datetime] = Field(default=None, description="The date and time that the shipment was created or last modified.")
    order_source_code: Optional[OrderSourceName] = None
    origin_type: Optional[OriginType] = Field(default=None, description="Indicates if the package will be picked up or dropped off by the carrier")
    packages: Optional[Annotated[List[Package], Field(min_length=1)]] = Field(default=None, description="The packages in the shipment.  > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned. ")
    return_to: Optional[ShippingAddress] = Field(default=None, description="The return address for this shipment.  Defaults to the `ship_from` address. ")
    service_code: Annotated[str, Field(strict=True)] = Field(description="The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. ")
    ship_date: Optional[datetime] = Field(default=None, description="The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. ")
    ship_from: ShippingAddress = Field(description="The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time. ")
    ship_to: ShippingAddress = Field(description="The recipient's mailing address")
    shipment_id: Annotated[str, Field(min_length=1, strict=True, max_length=25)] = Field(description="A string that uniquely identifies the shipment")
    shipment_number: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.  > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated. ")
    shipment_status: Optional[ShipmentStatus] = Field(default=None, description="The current status of the shipment")
    tags: Optional[Annotated[List[Tag], Field(min_length=0)]] = Field(default=None, description="Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags. ")
    tax_identifiers: Optional[List[TaxIdentifier]] = None
    total_weight: Optional[Weight] = Field(default=None, description="The combined weight of all packages in the shipment")
    warehouse_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=25)]] = Field(default=None, description="The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified. ")
    __properties: ClassVar[List[str]] = ["validate_address", "advanced_options", "carrier_id", "confirmation", "created_at", "customs", "external_order_id", "external_shipment_id", "insurance_provider", "is_return", "items", "modified_at", "order_source_code", "origin_type", "packages", "return_to", "service_code", "ship_date", "ship_from", "ship_to", "shipment_id", "shipment_number", "shipment_status", "tags", "tax_identifiers", "total_weight", "warehouse_id"]

    @field_validator('carrier_id')
    def carrier_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^se(-[a-z0-9]+)+$", value):
            raise ValueError(r"must validate the regular expression /^se(-[a-z0-9]+)+$/")
        return value

    @field_validator('created_at')
    def created_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/")
        return value

    @field_validator('modified_at')
    def modified_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/")
        return value

    @field_validator('service_code')
    def service_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]+(_[a-z0-9-]+)* ?$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]+(_[a-z0-9-]+)* ?$/")
        return value

    @field_validator('ship_date')
    def ship_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$/")
        return value

    @field_validator('shipment_id')
    def shipment_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^se(-[a-z0-9]+)+$", value):
            raise ValueError(r"must validate the regular expression /^se(-[a-z0-9]+)+$/")
        return value

    @field_validator('warehouse_id')
    def warehouse_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^se(-[a-z0-9]+)+$", value):
            raise ValueError(r"must validate the regular expression /^se(-[a-z0-9]+)+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressValidatingShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "modified_at",
            "shipment_id",
            "shipment_status",
            "tags",
            "total_weight",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_options
        if self.advanced_options:
            _dict['advanced_options'] = self.advanced_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customs
        if self.customs:
            _dict['customs'] = self.customs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item_packages in self.packages:
                if _item_packages:
                    _items.append(_item_packages.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of return_to
        if self.return_to:
            _dict['return_to'] = self.return_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from
        if self.ship_from:
            _dict['ship_from'] = self.ship_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to
        if self.ship_to:
            _dict['ship_to'] = self.ship_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_identifiers (list)
        _items = []
        if self.tax_identifiers:
            for _item_tax_identifiers in self.tax_identifiers:
                if _item_tax_identifiers:
                    _items.append(_item_tax_identifiers.to_dict())
            _dict['tax_identifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_weight
        if self.total_weight:
            _dict['total_weight'] = self.total_weight.to_dict()
        # set to None if customs (nullable) is None
        # and model_fields_set contains the field
        if self.customs is None and "customs" in self.model_fields_set:
            _dict['customs'] = None

        # set to None if external_order_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_order_id is None and "external_order_id" in self.model_fields_set:
            _dict['external_order_id'] = None

        # set to None if external_shipment_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_shipment_id is None and "external_shipment_id" in self.model_fields_set:
            _dict['external_shipment_id'] = None

        # set to None if is_return (nullable) is None
        # and model_fields_set contains the field
        if self.is_return is None and "is_return" in self.model_fields_set:
            _dict['is_return'] = None

        # set to None if origin_type (nullable) is None
        # and model_fields_set contains the field
        if self.origin_type is None and "origin_type" in self.model_fields_set:
            _dict['origin_type'] = None

        # set to None if shipment_number (nullable) is None
        # and model_fields_set contains the field
        if self.shipment_number is None and "shipment_number" in self.model_fields_set:
            _dict['shipment_number'] = None

        # set to None if tax_identifiers (nullable) is None
        # and model_fields_set contains the field
        if self.tax_identifiers is None and "tax_identifiers" in self.model_fields_set:
            _dict['tax_identifiers'] = None

        # set to None if warehouse_id (nullable) is None
        # and model_fields_set contains the field
        if self.warehouse_id is None and "warehouse_id" in self.model_fields_set:
            _dict['warehouse_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressValidatingShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "validate_address": obj.get("validate_address"),
            "advanced_options": AdvancedShipmentOptions.from_dict(obj["advanced_options"]) if obj.get("advanced_options") is not None else None,
            "carrier_id": obj.get("carrier_id"),
            "confirmation": obj.get("confirmation"),
            "created_at": obj.get("created_at"),
            "customs": InternationalShipmentOptions.from_dict(obj["customs"]) if obj.get("customs") is not None else None,
            "external_order_id": obj.get("external_order_id"),
            "external_shipment_id": obj.get("external_shipment_id"),
            "insurance_provider": obj.get("insurance_provider"),
            "is_return": obj.get("is_return") if obj.get("is_return") is not None else False,
            "items": [ShipmentItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "modified_at": obj.get("modified_at"),
            "order_source_code": obj.get("order_source_code"),
            "origin_type": obj.get("origin_type"),
            "packages": [Package.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "return_to": ShippingAddress.from_dict(obj["return_to"]) if obj.get("return_to") is not None else None,
            "service_code": obj.get("service_code"),
            "ship_date": obj.get("ship_date"),
            "ship_from": ShippingAddress.from_dict(obj["ship_from"]) if obj.get("ship_from") is not None else None,
            "ship_to": ShippingAddress.from_dict(obj["ship_to"]) if obj.get("ship_to") is not None else None,
            "shipment_id": obj.get("shipment_id"),
            "shipment_number": obj.get("shipment_number"),
            "shipment_status": obj.get("shipment_status"),
            "tags": [Tag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tax_identifiers": [TaxIdentifier.from_dict(_item) for _item in obj["tax_identifiers"]] if obj.get("tax_identifiers") is not None else None,
            "total_weight": Weight.from_dict(obj["total_weight"]) if obj.get("total_weight") is not None else None,
            "warehouse_id": obj.get("warehouse_id")
        })
        return _obj



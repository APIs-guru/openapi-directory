# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202304191404
    Contact: sales@shipengine.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.advanced_shipment_options_fedex_freight import AdvancedShipmentOptionsFedexFreight
from openapi_client.models.bill_to_party import BillToParty
from openapi_client.models.collect_on_delivery import CollectOnDelivery
from openapi_client.models.origin_type import OriginType
from openapi_client.models.weight import Weight
from typing import Optional, Set
from typing_extensions import Self

class AdvancedShipmentOptions(BaseModel):
    """
    Advanced shipment options
    """ # noqa: E501
    bill_to_account: Optional[StrictStr] = Field(default=None, description="This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the `bill_to_country_code`, `bill_to_party`, and `bill_to_postal_code` fields. ")
    bill_to_country_code: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs. ")
    bill_to_party: Optional[BillToParty] = Field(default=None, description="Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the `bill_to_account`, `bill_to_country_code`, and `bill_to_postal_code` fields must also be set. ")
    bill_to_postal_code: Optional[StrictStr] = Field(default=None, description="The postal code of the third-party that is responsible for shipping costs. ")
    collect_on_delivery: Optional[CollectOnDelivery] = None
    contains_alcohol: Optional[StrictBool] = Field(default=False, description="Indicates that the shipment contains alcohol.")
    custom_field1: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="An arbitrary field that can be used to store information about the shipment. ")
    custom_field2: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="An arbitrary field that can be used to store information about the shipment. ")
    custom_field3: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="An arbitrary field that can be used to store information about the shipment. ")
    delivered_duty_paid: Optional[StrictBool] = Field(default=False, description="Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express. ")
    dry_ice: Optional[StrictBool] = Field(default=False, description="Indicates if the shipment contain dry ice")
    dry_ice_weight: Optional[Weight] = Field(default=None, description="The weight of the dry ice in the shipment")
    fedex_freight: Optional[AdvancedShipmentOptionsFedexFreight] = None
    freight_class: Optional[StrictStr] = Field(default=None, description="The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport=1), such as \"77.5\", \"110\", or \"250\". ")
    non_machinable: Optional[StrictBool] = Field(default=False, description="Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details. ")
    origin_type: Optional[OriginType] = None
    saturday_delivery: Optional[StrictBool] = Field(default=False, description="Enables Saturday delivery, if supported by the carrier.")
    shipper_release: Optional[StrictBool] = None
    third_party_consignee: Optional[StrictBool] = Field(default=False, description="Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached")
    use_ups_ground_freight_pricing: Optional[StrictBool] = Field(default=None, description="Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a `freight_class` must also be specified. ")
    __properties: ClassVar[List[str]] = ["bill_to_account", "bill_to_country_code", "bill_to_party", "bill_to_postal_code", "collect_on_delivery", "contains_alcohol", "custom_field1", "custom_field2", "custom_field3", "delivered_duty_paid", "dry_ice", "dry_ice_weight", "fedex_freight", "freight_class", "non_machinable", "origin_type", "saturday_delivery", "shipper_release", "third_party_consignee", "use_ups_ground_freight_pricing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvancedShipmentOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of collect_on_delivery
        if self.collect_on_delivery:
            _dict['collect_on_delivery'] = self.collect_on_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dry_ice_weight
        if self.dry_ice_weight:
            _dict['dry_ice_weight'] = self.dry_ice_weight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fedex_freight
        if self.fedex_freight:
            _dict['fedex_freight'] = self.fedex_freight.to_dict()
        # set to None if bill_to_account (nullable) is None
        # and model_fields_set contains the field
        if self.bill_to_account is None and "bill_to_account" in self.model_fields_set:
            _dict['bill_to_account'] = None

        # set to None if bill_to_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.bill_to_country_code is None and "bill_to_country_code" in self.model_fields_set:
            _dict['bill_to_country_code'] = None

        # set to None if bill_to_party (nullable) is None
        # and model_fields_set contains the field
        if self.bill_to_party is None and "bill_to_party" in self.model_fields_set:
            _dict['bill_to_party'] = None

        # set to None if bill_to_postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.bill_to_postal_code is None and "bill_to_postal_code" in self.model_fields_set:
            _dict['bill_to_postal_code'] = None

        # set to None if custom_field1 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_field1 is None and "custom_field1" in self.model_fields_set:
            _dict['custom_field1'] = None

        # set to None if custom_field2 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_field2 is None and "custom_field2" in self.model_fields_set:
            _dict['custom_field2'] = None

        # set to None if custom_field3 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_field3 is None and "custom_field3" in self.model_fields_set:
            _dict['custom_field3'] = None

        # set to None if dry_ice_weight (nullable) is None
        # and model_fields_set contains the field
        if self.dry_ice_weight is None and "dry_ice_weight" in self.model_fields_set:
            _dict['dry_ice_weight'] = None

        # set to None if freight_class (nullable) is None
        # and model_fields_set contains the field
        if self.freight_class is None and "freight_class" in self.model_fields_set:
            _dict['freight_class'] = None

        # set to None if origin_type (nullable) is None
        # and model_fields_set contains the field
        if self.origin_type is None and "origin_type" in self.model_fields_set:
            _dict['origin_type'] = None

        # set to None if shipper_release (nullable) is None
        # and model_fields_set contains the field
        if self.shipper_release is None and "shipper_release" in self.model_fields_set:
            _dict['shipper_release'] = None

        # set to None if use_ups_ground_freight_pricing (nullable) is None
        # and model_fields_set contains the field
        if self.use_ups_ground_freight_pricing is None and "use_ups_ground_freight_pricing" in self.model_fields_set:
            _dict['use_ups_ground_freight_pricing'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvancedShipmentOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bill_to_account": obj.get("bill_to_account"),
            "bill_to_country_code": obj.get("bill_to_country_code"),
            "bill_to_party": obj.get("bill_to_party"),
            "bill_to_postal_code": obj.get("bill_to_postal_code"),
            "collect_on_delivery": CollectOnDelivery.from_dict(obj["collect_on_delivery"]) if obj.get("collect_on_delivery") is not None else None,
            "contains_alcohol": obj.get("contains_alcohol") if obj.get("contains_alcohol") is not None else False,
            "custom_field1": obj.get("custom_field1"),
            "custom_field2": obj.get("custom_field2"),
            "custom_field3": obj.get("custom_field3"),
            "delivered_duty_paid": obj.get("delivered_duty_paid") if obj.get("delivered_duty_paid") is not None else False,
            "dry_ice": obj.get("dry_ice") if obj.get("dry_ice") is not None else False,
            "dry_ice_weight": Weight.from_dict(obj["dry_ice_weight"]) if obj.get("dry_ice_weight") is not None else None,
            "fedex_freight": AdvancedShipmentOptionsFedexFreight.from_dict(obj["fedex_freight"]) if obj.get("fedex_freight") is not None else None,
            "freight_class": obj.get("freight_class"),
            "non_machinable": obj.get("non_machinable") if obj.get("non_machinable") is not None else False,
            "origin_type": obj.get("origin_type"),
            "saturday_delivery": obj.get("saturday_delivery") if obj.get("saturday_delivery") is not None else False,
            "shipper_release": obj.get("shipper_release"),
            "third_party_consignee": obj.get("third_party_consignee") if obj.get("third_party_consignee") is not None else False,
            "use_ups_ground_freight_pricing": obj.get("use_ups_ground_freight_pricing")
        })
        return _obj



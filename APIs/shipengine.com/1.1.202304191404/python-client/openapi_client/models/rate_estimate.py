# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202304191404
    Contact: sales@shipengine.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.monetary_value import MonetaryValue
from openapi_client.models.rate_type import RateType
from openapi_client.models.validation_status import ValidationStatus
from typing import Optional, Set
from typing_extensions import Self

class RateEstimate(BaseModel):
    """
    A rate estimate
    """ # noqa: E501
    carrier_code: Annotated[str, Field(min_length=1, strict=True)] = Field(description="carrier code")
    carrier_delivery_days: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The carrier delivery days")
    carrier_friendly_name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="carrier friendly name")
    carrier_id: Annotated[str, Field(min_length=1, strict=True, max_length=25)] = Field(description="A string that uniquely identifies the carrier")
    carrier_nickname: Annotated[str, Field(min_length=1, strict=True)] = Field(description="carrier nickname")
    confirmation_amount: MonetaryValue = Field(description="The confirmation amount")
    delivery_days: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The number of days estimated for delivery, this will show the _actual_ delivery time if for example, the package gets shipped on a Friday ")
    error_messages: Annotated[List[Annotated[str, Field(min_length=0, strict=True)]], Field(min_length=0)] = Field(description="The error messages")
    estimated_delivery_date: Optional[datetime] = Field(default=None, description="An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to `00:00:00` UTC by ShipEngine. ")
    guaranteed_service: StrictBool = Field(description="Indicates if the rate is guaranteed.")
    insurance_amount: MonetaryValue = Field(description="The insurance amount")
    negotiated_rate: StrictBool = Field(description="Indicates if the rates been negotiated")
    other_amount: MonetaryValue = Field(description="Any other charges associated with this rate")
    package_type: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(description="package type that this rate was estimated for")
    rate_type: RateType
    service_code: Annotated[str, Field(min_length=1, strict=True)] = Field(description="service code for the rate")
    service_type: Annotated[str, Field(min_length=1, strict=True)] = Field(description="service type")
    ship_date: Optional[datetime] = Field(default=None, description="ship date")
    shipping_amount: MonetaryValue = Field(description="The shipping amount")
    tax_amount: Optional[MonetaryValue] = Field(default=None, description="Tariff and additional taxes associated with an international shipment.")
    trackable: StrictBool = Field(description="Indicates if rate is trackable")
    validation_status: ValidationStatus
    warning_messages: Annotated[List[Annotated[str, Field(min_length=0, strict=True)]], Field(min_length=0)] = Field(description="The warning messages")
    zone: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(description="Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location ")
    __properties: ClassVar[List[str]] = ["carrier_code", "carrier_delivery_days", "carrier_friendly_name", "carrier_id", "carrier_nickname", "confirmation_amount", "delivery_days", "error_messages", "estimated_delivery_date", "guaranteed_service", "insurance_amount", "negotiated_rate", "other_amount", "package_type", "rate_type", "service_code", "service_type", "ship_date", "shipping_amount", "tax_amount", "trackable", "validation_status", "warning_messages", "zone"]

    @field_validator('carrier_id')
    def carrier_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^se(-[a-z0-9]+)+$", value):
            raise ValueError(r"must validate the regular expression /^se(-[a-z0-9]+)+$/")
        return value

    @field_validator('estimated_delivery_date')
    def estimated_delivery_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "carrier_code",
            "carrier_delivery_days",
            "carrier_friendly_name",
            "carrier_id",
            "carrier_nickname",
            "confirmation_amount",
            "delivery_days",
            "error_messages",
            "estimated_delivery_date",
            "guaranteed_service",
            "insurance_amount",
            "negotiated_rate",
            "other_amount",
            "package_type",
            "rate_type",
            "service_code",
            "service_type",
            "ship_date",
            "shipping_amount",
            "tax_amount",
            "trackable",
            "validation_status",
            "warning_messages",
            "zone",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confirmation_amount
        if self.confirmation_amount:
            _dict['confirmation_amount'] = self.confirmation_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insurance_amount
        if self.insurance_amount:
            _dict['insurance_amount'] = self.insurance_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_amount
        if self.other_amount:
            _dict['other_amount'] = self.other_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_amount
        if self.shipping_amount:
            _dict['shipping_amount'] = self.shipping_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_amount
        if self.tax_amount:
            _dict['tax_amount'] = self.tax_amount.to_dict()
        # set to None if package_type (nullable) is None
        # and model_fields_set contains the field
        if self.package_type is None and "package_type" in self.model_fields_set:
            _dict['package_type'] = None

        # set to None if zone (nullable) is None
        # and model_fields_set contains the field
        if self.zone is None and "zone" in self.model_fields_set:
            _dict['zone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier_code": obj.get("carrier_code"),
            "carrier_delivery_days": obj.get("carrier_delivery_days"),
            "carrier_friendly_name": obj.get("carrier_friendly_name"),
            "carrier_id": obj.get("carrier_id"),
            "carrier_nickname": obj.get("carrier_nickname"),
            "confirmation_amount": MonetaryValue.from_dict(obj["confirmation_amount"]) if obj.get("confirmation_amount") is not None else None,
            "delivery_days": obj.get("delivery_days"),
            "error_messages": obj.get("error_messages"),
            "estimated_delivery_date": obj.get("estimated_delivery_date"),
            "guaranteed_service": obj.get("guaranteed_service"),
            "insurance_amount": MonetaryValue.from_dict(obj["insurance_amount"]) if obj.get("insurance_amount") is not None else None,
            "negotiated_rate": obj.get("negotiated_rate"),
            "other_amount": MonetaryValue.from_dict(obj["other_amount"]) if obj.get("other_amount") is not None else None,
            "package_type": obj.get("package_type"),
            "rate_type": obj.get("rate_type"),
            "service_code": obj.get("service_code"),
            "service_type": obj.get("service_type"),
            "ship_date": obj.get("ship_date"),
            "shipping_amount": MonetaryValue.from_dict(obj["shipping_amount"]) if obj.get("shipping_amount") is not None else None,
            "tax_amount": MonetaryValue.from_dict(obj["tax_amount"]) if obj.get("tax_amount") is not None else None,
            "trackable": obj.get("trackable"),
            "validation_status": obj.get("validation_status"),
            "warning_messages": obj.get("warning_messages"),
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    ShipEngine API

    ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 

    The version of the OpenAPI document: 1.1.202304191404
    Contact: sales@shipengine.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.address_residential_indicator import AddressResidentialIndicator
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Any residential or business mailing address, anywhere in the world.  > **Note:** Either `name` or `company_name` must be set. Both may be specified, if relevant. 
    """ # noqa: E501
    address_line1: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines. ")
    address_line2: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The second line of the street address.  For some addresses, this line may not be needed. ")
    address_line3: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The third line of the street address.  For some addresses, this line may not be needed. ")
    address_residential_indicator: AddressResidentialIndicator = Field(description="Indicates whether this is a residential address.")
    city_locality: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of the city or locality")
    company_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="If this is a business address, then the company name should be specified here. ")
    country_code: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) ")
    email: Optional[StrictStr] = Field(default=None, description="Email for the address owner. ")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field. ")
    phone: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The phone number of a contact person at this address.  The format of this phone number varies depending on the country. ")
    postal_code: Annotated[str, Field(min_length=1, strict=True)] = Field(description="postal code")
    state_province: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation. ")
    __properties: ClassVar[List[str]] = ["address_line1", "address_line2", "address_line3", "address_residential_indicator", "city_locality", "company_name", "country_code", "email", "name", "phone", "postal_code", "state_province"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address_line2 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line2 is None and "address_line2" in self.model_fields_set:
            _dict['address_line2'] = None

        # set to None if address_line3 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line3 is None and "address_line3" in self.model_fields_set:
            _dict['address_line3'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address_line1": obj.get("address_line1"),
            "address_line2": obj.get("address_line2"),
            "address_line3": obj.get("address_line3"),
            "address_residential_indicator": obj.get("address_residential_indicator"),
            "city_locality": obj.get("city_locality"),
            "company_name": obj.get("company_name"),
            "country_code": obj.get("country_code"),
            "email": obj.get("email"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "postal_code": obj.get("postal_code"),
            "state_province": obj.get("state_province")
        })
        return _obj



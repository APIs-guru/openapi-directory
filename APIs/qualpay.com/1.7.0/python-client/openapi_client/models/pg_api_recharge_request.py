# coding: utf-8

"""
    Qualpay Payment Gateway API

    This document describes the Qualpay Payment Gateway API.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PGApiRechargeRequest(BaseModel):
    """
    PGApiRechargeRequest
    """ # noqa: E501
    amt_tran: Union[StrictFloat, StrictInt] = Field(description="<strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Amount to recharge using the payment data from a previous transaction.")
    developer_id: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. ")
    echo_fields: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.")
    loc_id: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.")
    merchant_id: StrictInt = Field(description="<strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.")
    profile_id: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.")
    report_data: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.")
    retry_attempt: Optional[StrictInt] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.")
    retry_id: Optional[StrictInt] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.")
    session_id: Optional[StrictStr] = Field(default=None, description="INTERNAL USE ONLY.")
    user_id: Optional[StrictInt] = Field(default=None, description="INTERNAL USE ONLY.")
    __properties: ClassVar[List[str]] = ["amt_tran", "developer_id", "echo_fields", "loc_id", "merchant_id", "profile_id", "report_data", "retry_attempt", "retry_id", "session_id", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PGApiRechargeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PGApiRechargeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amt_tran": obj.get("amt_tran"),
            "developer_id": obj.get("developer_id"),
            "echo_fields": obj.get("echo_fields"),
            "loc_id": obj.get("loc_id"),
            "merchant_id": obj.get("merchant_id"),
            "profile_id": obj.get("profile_id"),
            "report_data": obj.get("report_data"),
            "retry_attempt": obj.get("retry_attempt"),
            "retry_id": obj.get("retry_id"),
            "session_id": obj.get("session_id"),
            "user_id": obj.get("user_id")
        })
        return _obj



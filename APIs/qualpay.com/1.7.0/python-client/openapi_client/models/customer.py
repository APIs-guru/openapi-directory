# coding: utf-8

"""
    Qualpay Payment Gateway API

    This document describes the Qualpay Payment Gateway API.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    billing_addr1: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer billing address street.")
    billing_addr2: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer billing address, line 2.")
    billing_city: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer billing city.")
    billing_country: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer billing country.")
    billing_country_code: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Fixed length, 3 N<br><strong>Description: </strong>ISO numeric country code for the billing address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes.")
    billing_state: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer billing state (abbreviated).")
    billing_zip: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer billing zip code.")
    billing_zip4: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Fixed length, 4 N<br><strong>Description: </strong>Customer billing zip+4 code if applicable.")
    customer_email: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>Customer e-mail address.")
    customer_firm_name: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>Customer Business name if applicable.<br><strong>Conditional Requirement: </strong>Either customer first and last name or firm name is required. ")
    customer_first_name: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer first name.<br><strong>Conditional Requirement: </strong>Either customer first and last name or firm name is required. ")
    customer_last_name: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer last name.<br><strong>Conditional Requirement: </strong>Either customer first and last name or firm name is required. ")
    customer_phone: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 16 N<br><strong>Description: </strong>Customer phone number.")
    shipping_addresses: Optional[List[ShippingAddress]] = Field(default=None, description="List of shipping addresses for customer.")
    __properties: ClassVar[List[str]] = ["billing_addr1", "billing_addr2", "billing_city", "billing_country", "billing_country_code", "billing_state", "billing_zip", "billing_zip4", "customer_email", "customer_firm_name", "customer_first_name", "customer_last_name", "customer_phone", "shipping_addresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_addresses (list)
        _items = []
        if self.shipping_addresses:
            for _item_shipping_addresses in self.shipping_addresses:
                if _item_shipping_addresses:
                    _items.append(_item_shipping_addresses.to_dict())
            _dict['shipping_addresses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_addr1": obj.get("billing_addr1"),
            "billing_addr2": obj.get("billing_addr2"),
            "billing_city": obj.get("billing_city"),
            "billing_country": obj.get("billing_country"),
            "billing_country_code": obj.get("billing_country_code"),
            "billing_state": obj.get("billing_state"),
            "billing_zip": obj.get("billing_zip"),
            "billing_zip4": obj.get("billing_zip4"),
            "customer_email": obj.get("customer_email"),
            "customer_firm_name": obj.get("customer_firm_name"),
            "customer_first_name": obj.get("customer_first_name"),
            "customer_last_name": obj.get("customer_last_name"),
            "customer_phone": obj.get("customer_phone"),
            "shipping_addresses": [ShippingAddress.from_dict(_item) for _item in obj["shipping_addresses"]] if obj.get("shipping_addresses") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Qualpay Payment Gateway API

    This document describes the Qualpay Payment Gateway API.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShippingAddress(BaseModel):
    """
    ShippingAddress
    """ # noqa: E501
    primary: Optional[StrictBool] = Field(default=None, description="<br><strong>Default: </strong>false<br><strong>Description: </strong>Identifies the primary shipping address where there are multiple shipping addresses.")
    shipping_addr1: StrictStr = Field(description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer street and number, P.O. box, c/o.")
    shipping_addr2: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer apartment, suite, unit, building, floor, etc.")
    shipping_city: StrictStr = Field(description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping city.")
    shipping_country: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping country.")
    shipping_country_code: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Fixed length, 3 N<br><strong>Description: </strong>ISO numeric country code for the shipping address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes. If the country code is provided, the shipping_country will be updated to match the country code. ")
    shipping_firm_name: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>Business name if applicable. ")
    shipping_first_name: StrictStr = Field(description="<strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping first name.")
    shipping_last_name: StrictStr = Field(description="<strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping last name.")
    shipping_state: StrictStr = Field(description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping state (abbreviated).")
    shipping_zip: StrictStr = Field(description="<strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping zip code.")
    shipping_zip4: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Fixed length, 4 N<br><strong>Description: </strong>Customer shipping zip+4 code if applicable.")
    __properties: ClassVar[List[str]] = ["primary", "shipping_addr1", "shipping_addr2", "shipping_city", "shipping_country", "shipping_country_code", "shipping_firm_name", "shipping_first_name", "shipping_last_name", "shipping_state", "shipping_zip", "shipping_zip4"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "primary": obj.get("primary"),
            "shipping_addr1": obj.get("shipping_addr1"),
            "shipping_addr2": obj.get("shipping_addr2"),
            "shipping_city": obj.get("shipping_city"),
            "shipping_country": obj.get("shipping_country"),
            "shipping_country_code": obj.get("shipping_country_code"),
            "shipping_firm_name": obj.get("shipping_firm_name"),
            "shipping_first_name": obj.get("shipping_first_name"),
            "shipping_last_name": obj.get("shipping_last_name"),
            "shipping_state": obj.get("shipping_state"),
            "shipping_zip": obj.get("shipping_zip"),
            "shipping_zip4": obj.get("shipping_zip4")
        })
        return _obj



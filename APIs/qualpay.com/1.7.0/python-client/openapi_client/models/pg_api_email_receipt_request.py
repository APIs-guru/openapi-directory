# coding: utf-8

"""
    Qualpay Payment Gateway API

    This document describes the Qualpay Payment Gateway API.

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PGApiEmailReceiptRequest(BaseModel):
    """
    PGApiEmailReceiptRequest
    """ # noqa: E501
    developer_id: Optional[StrictStr] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. ")
    email_address: List[StrictStr] = Field(description=" AN<br><strong>Description: </strong>An array of email addresses to which the transaction receipt should be sent to. ")
    logo_url: Optional[StrictStr] = Field(default=None, description=" AN<br><strong>Description: </strong>A link to the logo image that will be included in the transaction receipt. ")
    merchant_id: StrictInt = Field(description="<strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.")
    vendor_id: Optional[StrictInt] = Field(default=None, description="<strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this email receipt request applies.")
    __properties: ClassVar[List[str]] = ["developer_id", "email_address", "logo_url", "merchant_id", "vendor_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PGApiEmailReceiptRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PGApiEmailReceiptRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "developer_id": obj.get("developer_id"),
            "email_address": obj.get("email_address"),
            "logo_url": obj.get("logo_url"),
            "merchant_id": obj.get("merchant_id"),
            "vendor_id": obj.get("vendor_id")
        })
        return _obj



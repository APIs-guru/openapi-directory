# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SetGameScorePostRequest(BaseModel):
    """
    SetGameScorePostRequest
    """ # noqa: E501
    chat_id: Optional[StrictInt] = Field(default=None, description="Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat")
    disable_edit_message: Optional[StrictBool] = Field(default=None, description="Pass True, if the game message should not be automatically edited to include the current scoreboard")
    force: Optional[StrictBool] = Field(default=None, description="Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters")
    inline_message_id: Optional[StrictStr] = Field(default=None, description="Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message")
    message_id: Optional[StrictInt] = Field(default=None, description="Required if *inline\\_message\\_id* is not specified. Identifier of the sent message")
    score: StrictInt = Field(description="New score, must be non-negative")
    user_id: StrictInt = Field(description="User identifier")
    __properties: ClassVar[List[str]] = ["chat_id", "disable_edit_message", "force", "inline_message_id", "message_id", "score", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetGameScorePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetGameScorePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chat_id": obj.get("chat_id"),
            "disable_edit_message": obj.get("disable_edit_message"),
            "force": obj.get("force"),
            "inline_message_id": obj.get("inline_message_id"),
            "message_id": obj.get("message_id"),
            "score": obj.get("score"),
            "user_id": obj.get("user_id")
        })
        return _obj



# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_client.models.labeled_price import LabeledPrice
from typing import Optional, Set
from typing_extensions import Self

class SendInvoicePostRequest(BaseModel):
    """
    SendInvoicePostRequest
    """ # noqa: E501
    allow_sending_without_reply: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the message should be sent even if the specified replied-to message is not found")
    chat_id: StrictInt = Field(description="Unique identifier for the target private chat")
    currency: StrictStr = Field(description="Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)")
    description: StrictStr = Field(description="Product description, 1-255 characters")
    disable_notification: Optional[StrictBool] = Field(default=None, description="Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.")
    is_flexible: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the final price depends on the shipping method")
    need_email: Optional[StrictBool] = Field(default=None, description="Pass *True*, if you require the user's email address to complete the order")
    need_name: Optional[StrictBool] = Field(default=None, description="Pass *True*, if you require the user's full name to complete the order")
    need_phone_number: Optional[StrictBool] = Field(default=None, description="Pass *True*, if you require the user's phone number to complete the order")
    need_shipping_address: Optional[StrictBool] = Field(default=None, description="Pass *True*, if you require the user's shipping address to complete the order")
    payload: StrictStr = Field(description="Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.")
    photo_height: Optional[StrictInt] = Field(default=None, description="Photo height")
    photo_size: Optional[StrictInt] = Field(default=None, description="Photo size")
    photo_url: Optional[StrictStr] = Field(default=None, description="URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.")
    photo_width: Optional[StrictInt] = Field(default=None, description="Photo width")
    prices: List[LabeledPrice] = Field(description="Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)")
    provider_data: Optional[StrictStr] = Field(default=None, description="A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.")
    provider_token: StrictStr = Field(description="Payments provider token, obtained via [Botfather](https://t.me/botfather)")
    reply_markup: Optional[InlineKeyboardMarkup] = None
    reply_to_message_id: Optional[StrictInt] = Field(default=None, description="If the message is a reply, ID of the original message")
    send_email_to_provider: Optional[StrictBool] = Field(default=None, description="Pass *True*, if user's email address should be sent to provider")
    send_phone_number_to_provider: Optional[StrictBool] = Field(default=None, description="Pass *True*, if user's phone number should be sent to provider")
    start_parameter: StrictStr = Field(description="Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter")
    title: StrictStr = Field(description="Product name, 1-32 characters")
    __properties: ClassVar[List[str]] = ["allow_sending_without_reply", "chat_id", "currency", "description", "disable_notification", "is_flexible", "need_email", "need_name", "need_phone_number", "need_shipping_address", "payload", "photo_height", "photo_size", "photo_url", "photo_width", "prices", "provider_data", "provider_token", "reply_markup", "reply_to_message_id", "send_email_to_provider", "send_phone_number_to_provider", "start_parameter", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendInvoicePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item_prices in self.prices:
                if _item_prices:
                    _items.append(_item_prices.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendInvoicePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_sending_without_reply": obj.get("allow_sending_without_reply"),
            "chat_id": obj.get("chat_id"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "disable_notification": obj.get("disable_notification"),
            "is_flexible": obj.get("is_flexible"),
            "need_email": obj.get("need_email"),
            "need_name": obj.get("need_name"),
            "need_phone_number": obj.get("need_phone_number"),
            "need_shipping_address": obj.get("need_shipping_address"),
            "payload": obj.get("payload"),
            "photo_height": obj.get("photo_height"),
            "photo_size": obj.get("photo_size"),
            "photo_url": obj.get("photo_url"),
            "photo_width": obj.get("photo_width"),
            "prices": [LabeledPrice.from_dict(_item) for _item in obj["prices"]] if obj.get("prices") is not None else None,
            "provider_data": obj.get("provider_data"),
            "provider_token": obj.get("provider_token"),
            "reply_markup": InlineKeyboardMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "reply_to_message_id": obj.get("reply_to_message_id"),
            "send_email_to_provider": obj.get("send_email_to_provider"),
            "send_phone_number_to_provider": obj.get("send_phone_number_to_provider"),
            "start_parameter": obj.get("start_parameter"),
            "title": obj.get("title")
        })
        return _obj



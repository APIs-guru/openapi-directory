# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_client.models.input_message_content import InputMessageContent
from openapi_client.models.message_entity import MessageEntity
from typing import Optional, Set
from typing_extensions import Self

class InlineQueryResultGif(BaseModel):
    """
    Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.
    """ # noqa: E501
    caption: Optional[StrictStr] = Field(default=None, description="*Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None, description="*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*")
    gif_duration: Optional[StrictInt] = Field(default=None, description="*Optional*. Duration of the GIF")
    gif_height: Optional[StrictInt] = Field(default=None, description="*Optional*. Height of the GIF")
    gif_url: StrictStr = Field(description="A valid URL for the GIF file. File size must not exceed 1MB")
    gif_width: Optional[StrictInt] = Field(default=None, description="*Optional*. Width of the GIF")
    id: StrictStr = Field(description="Unique identifier for this result, 1-64 bytes")
    input_message_content: Optional[InputMessageContent] = None
    parse_mode: Optional[StrictStr] = Field(default=None, description="*Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.")
    reply_markup: Optional[InlineKeyboardMarkup] = None
    thumb_mime_type: Optional[StrictStr] = Field(default='image/jpeg', description="*Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”")
    thumb_url: StrictStr = Field(description="URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result")
    title: Optional[StrictStr] = Field(default=None, description="*Optional*. Title for the result")
    type: StrictStr = Field(description="Type of the result, must be *gif*")
    __properties: ClassVar[List[str]] = ["caption", "caption_entities", "gif_duration", "gif_height", "gif_url", "gif_width", "id", "input_message_content", "parse_mode", "reply_markup", "thumb_mime_type", "thumb_url", "title", "type"]

    @field_validator('thumb_mime_type')
    def thumb_mime_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['image/jpeg', 'image/gif', 'video/mp4']):
            raise ValueError("must be one of enum values ('image/jpeg', 'image/gif', 'video/mp4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineQueryResultGif from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in caption_entities (list)
        _items = []
        if self.caption_entities:
            for _item_caption_entities in self.caption_entities:
                if _item_caption_entities:
                    _items.append(_item_caption_entities.to_dict())
            _dict['caption_entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of input_message_content
        if self.input_message_content:
            _dict['input_message_content'] = self.input_message_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineQueryResultGif from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caption": obj.get("caption"),
            "caption_entities": [MessageEntity.from_dict(_item) for _item in obj["caption_entities"]] if obj.get("caption_entities") is not None else None,
            "gif_duration": obj.get("gif_duration"),
            "gif_height": obj.get("gif_height"),
            "gif_url": obj.get("gif_url"),
            "gif_width": obj.get("gif_width"),
            "id": obj.get("id"),
            "input_message_content": InputMessageContent.from_dict(obj["input_message_content"]) if obj.get("input_message_content") is not None else None,
            "parse_mode": obj.get("parse_mode"),
            "reply_markup": InlineKeyboardMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "thumb_mime_type": obj.get("thumb_mime_type") if obj.get("thumb_mime_type") is not None else 'image/jpeg',
            "thumb_url": obj.get("thumb_url"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



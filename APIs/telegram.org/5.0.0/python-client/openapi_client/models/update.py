# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.callback_query import CallbackQuery
from openapi_client.models.chosen_inline_result import ChosenInlineResult
from openapi_client.models.inline_query import InlineQuery
from openapi_client.models.message import Message
from openapi_client.models.poll import Poll
from openapi_client.models.poll_answer import PollAnswer
from openapi_client.models.pre_checkout_query import PreCheckoutQuery
from openapi_client.models.shipping_query import ShippingQuery
from typing import Optional, Set
from typing_extensions import Self

class Update(BaseModel):
    """
    This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.   At most **one** of the optional parameters can be present in any given update.
    """ # noqa: E501
    callback_query: Optional[CallbackQuery] = None
    channel_post: Optional[Message] = None
    chosen_inline_result: Optional[ChosenInlineResult] = None
    edited_channel_post: Optional[Message] = None
    edited_message: Optional[Message] = None
    inline_query: Optional[InlineQuery] = None
    message: Optional[Message] = None
    poll: Optional[Poll] = None
    poll_answer: Optional[PollAnswer] = None
    pre_checkout_query: Optional[PreCheckoutQuery] = None
    shipping_query: Optional[ShippingQuery] = None
    update_id: StrictInt = Field(description="The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.")
    __properties: ClassVar[List[str]] = ["callback_query", "channel_post", "chosen_inline_result", "edited_channel_post", "edited_message", "inline_query", "message", "poll", "poll_answer", "pre_checkout_query", "shipping_query", "update_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Update from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callback_query
        if self.callback_query:
            _dict['callback_query'] = self.callback_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel_post
        if self.channel_post:
            _dict['channel_post'] = self.channel_post.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chosen_inline_result
        if self.chosen_inline_result:
            _dict['chosen_inline_result'] = self.chosen_inline_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edited_channel_post
        if self.edited_channel_post:
            _dict['edited_channel_post'] = self.edited_channel_post.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edited_message
        if self.edited_message:
            _dict['edited_message'] = self.edited_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inline_query
        if self.inline_query:
            _dict['inline_query'] = self.inline_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poll
        if self.poll:
            _dict['poll'] = self.poll.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poll_answer
        if self.poll_answer:
            _dict['poll_answer'] = self.poll_answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_checkout_query
        if self.pre_checkout_query:
            _dict['pre_checkout_query'] = self.pre_checkout_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_query
        if self.shipping_query:
            _dict['shipping_query'] = self.shipping_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Update from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callback_query": CallbackQuery.from_dict(obj["callback_query"]) if obj.get("callback_query") is not None else None,
            "channel_post": Message.from_dict(obj["channel_post"]) if obj.get("channel_post") is not None else None,
            "chosen_inline_result": ChosenInlineResult.from_dict(obj["chosen_inline_result"]) if obj.get("chosen_inline_result") is not None else None,
            "edited_channel_post": Message.from_dict(obj["edited_channel_post"]) if obj.get("edited_channel_post") is not None else None,
            "edited_message": Message.from_dict(obj["edited_message"]) if obj.get("edited_message") is not None else None,
            "inline_query": InlineQuery.from_dict(obj["inline_query"]) if obj.get("inline_query") is not None else None,
            "message": Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "poll": Poll.from_dict(obj["poll"]) if obj.get("poll") is not None else None,
            "poll_answer": PollAnswer.from_dict(obj["poll_answer"]) if obj.get("poll_answer") is not None else None,
            "pre_checkout_query": PreCheckoutQuery.from_dict(obj["pre_checkout_query"]) if obj.get("pre_checkout_query") is not None else None,
            "shipping_query": ShippingQuery.from_dict(obj["shipping_query"]) if obj.get("shipping_query") is not None else None,
            "update_id": obj.get("update_id")
        })
        return _obj



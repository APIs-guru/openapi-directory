# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from typing import Optional, Set
from typing_extensions import Self

class PromoteChatMemberPostRequest(BaseModel):
    """
    PromoteChatMemberPostRequest
    """ # noqa: E501
    can_change_info: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can change chat title, photo and other settings")
    can_delete_messages: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can delete messages of other users")
    can_edit_messages: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can edit messages of other users and can pin messages, channels only")
    can_invite_users: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can invite new users to the chat")
    can_pin_messages: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can pin messages, supergroups only")
    can_post_messages: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can create channel posts, channels only")
    can_promote_members: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)")
    can_restrict_members: Optional[StrictBool] = Field(default=None, description="Pass True, if the administrator can restrict, ban or unban chat members")
    chat_id: CopyMessagePostRequestChatId
    is_anonymous: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the administrator's presence in the chat is hidden")
    user_id: StrictInt = Field(description="Unique identifier of the target user")
    __properties: ClassVar[List[str]] = ["can_change_info", "can_delete_messages", "can_edit_messages", "can_invite_users", "can_pin_messages", "can_post_messages", "can_promote_members", "can_restrict_members", "chat_id", "is_anonymous", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromoteChatMemberPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_id
        if self.chat_id:
            _dict['chat_id'] = self.chat_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromoteChatMemberPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_change_info": obj.get("can_change_info"),
            "can_delete_messages": obj.get("can_delete_messages"),
            "can_edit_messages": obj.get("can_edit_messages"),
            "can_invite_users": obj.get("can_invite_users"),
            "can_pin_messages": obj.get("can_pin_messages"),
            "can_post_messages": obj.get("can_post_messages"),
            "can_promote_members": obj.get("can_promote_members"),
            "can_restrict_members": obj.get("can_restrict_members"),
            "chat_id": CopyMessagePostRequestChatId.from_dict(obj["chat_id"]) if obj.get("chat_id") is not None else None,
            "is_anonymous": obj.get("is_anonymous"),
            "user_id": obj.get("user_id")
        })
        return _obj



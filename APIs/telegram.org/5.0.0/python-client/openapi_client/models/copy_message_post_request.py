# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_client.models.copy_message_post_request_from_chat_id import CopyMessagePostRequestFromChatId
from openapi_client.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_client.models.message_entity import MessageEntity
from typing import Optional, Set
from typing_extensions import Self

class CopyMessagePostRequest(BaseModel):
    """
    CopyMessagePostRequest
    """ # noqa: E501
    allow_sending_without_reply: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the message should be sent even if the specified replied-to message is not found")
    caption: Optional[StrictStr] = Field(default=None, description="New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None, description="List of special entities that appear in the new caption, which can be specified instead of *parse\\_mode*")
    chat_id: CopyMessagePostRequestChatId
    disable_notification: Optional[StrictBool] = Field(default=None, description="Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.")
    from_chat_id: CopyMessagePostRequestFromChatId
    message_id: StrictInt = Field(description="Message identifier in the chat specified in *from\\_chat\\_id*")
    parse_mode: Optional[StrictStr] = Field(default=None, description="Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.")
    reply_markup: Optional[CopyMessagePostRequestReplyMarkup] = None
    reply_to_message_id: Optional[StrictInt] = Field(default=None, description="If the message is a reply, ID of the original message")
    __properties: ClassVar[List[str]] = ["allow_sending_without_reply", "caption", "caption_entities", "chat_id", "disable_notification", "from_chat_id", "message_id", "parse_mode", "reply_markup", "reply_to_message_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopyMessagePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in caption_entities (list)
        _items = []
        if self.caption_entities:
            for _item_caption_entities in self.caption_entities:
                if _item_caption_entities:
                    _items.append(_item_caption_entities.to_dict())
            _dict['caption_entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of chat_id
        if self.chat_id:
            _dict['chat_id'] = self.chat_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_chat_id
        if self.from_chat_id:
            _dict['from_chat_id'] = self.from_chat_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopyMessagePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_sending_without_reply": obj.get("allow_sending_without_reply"),
            "caption": obj.get("caption"),
            "caption_entities": [MessageEntity.from_dict(_item) for _item in obj["caption_entities"]] if obj.get("caption_entities") is not None else None,
            "chat_id": CopyMessagePostRequestChatId.from_dict(obj["chat_id"]) if obj.get("chat_id") is not None else None,
            "disable_notification": obj.get("disable_notification"),
            "from_chat_id": CopyMessagePostRequestFromChatId.from_dict(obj["from_chat_id"]) if obj.get("from_chat_id") is not None else None,
            "message_id": obj.get("message_id"),
            "parse_mode": obj.get("parse_mode"),
            "reply_markup": CopyMessagePostRequestReplyMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "reply_to_message_id": obj.get("reply_to_message_id")
        })
        return _obj



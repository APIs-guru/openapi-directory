# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chat_location import ChatLocation
from openapi_client.models.chat_permissions import ChatPermissions
from openapi_client.models.chat_photo import ChatPhoto
from typing import Optional, Set
from typing_extensions import Self

class Chat(BaseModel):
    """
    This object represents a chat.
    """ # noqa: E501
    bio: Optional[StrictStr] = Field(default=None, description="*Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    can_set_sticker_set: Optional[StrictBool] = Field(default=None, description="*Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    description: Optional[StrictStr] = Field(default=None, description="*Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    first_name: Optional[StrictStr] = Field(default=None, description="*Optional*. First name of the other party in a private chat")
    id: StrictInt = Field(description="Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.")
    invite_link: Optional[StrictStr] = Field(default=None, description="*Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    last_name: Optional[StrictStr] = Field(default=None, description="*Optional*. Last name of the other party in a private chat")
    linked_chat_id: Optional[StrictInt] = Field(default=None, description="*Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    location: Optional[ChatLocation] = None
    permissions: Optional[ChatPermissions] = None
    photo: Optional[ChatPhoto] = None
    pinned_message: Optional[Message] = None
    slow_mode_delay: Optional[StrictInt] = Field(default=None, description="*Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    sticker_set_name: Optional[StrictStr] = Field(default=None, description="*Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).")
    title: Optional[StrictStr] = Field(default=None, description="*Optional*. Title, for supergroups, channels and group chats")
    type: StrictStr = Field(description="Type of chat, can be either “private”, “group”, “supergroup” or “channel”")
    username: Optional[StrictStr] = Field(default=None, description="*Optional*. Username, for private chats, supergroups and channels if available")
    __properties: ClassVar[List[str]] = ["bio", "can_set_sticker_set", "description", "first_name", "id", "invite_link", "last_name", "linked_chat_id", "location", "permissions", "photo", "pinned_message", "slow_mode_delay", "sticker_set_name", "title", "type", "username"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['private', 'group', 'supergroup', 'channel']):
            raise ValueError("must be one of enum values ('private', 'group', 'supergroup', 'channel')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Chat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photo
        if self.photo:
            _dict['photo'] = self.photo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pinned_message
        if self.pinned_message:
            _dict['pinned_message'] = self.pinned_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Chat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bio": obj.get("bio"),
            "can_set_sticker_set": obj.get("can_set_sticker_set"),
            "description": obj.get("description"),
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "invite_link": obj.get("invite_link"),
            "last_name": obj.get("last_name"),
            "linked_chat_id": obj.get("linked_chat_id"),
            "location": ChatLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "permissions": ChatPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "photo": ChatPhoto.from_dict(obj["photo"]) if obj.get("photo") is not None else None,
            "pinned_message": Message.from_dict(obj["pinned_message"]) if obj.get("pinned_message") is not None else None,
            "slow_mode_delay": obj.get("slow_mode_delay"),
            "sticker_set_name": obj.get("sticker_set_name"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "username": obj.get("username")
        })
        return _obj

from openapi_client.models.message import Message
# TODO: Rewrite to not use raise_errors
Chat.model_rebuild(raise_errors=False)


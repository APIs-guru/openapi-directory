# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_client.models.input_message_content import InputMessageContent
from typing import Optional, Set
from typing_extensions import Self

class InlineQueryResultContact(BaseModel):
    """
    Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the contact.
    """ # noqa: E501
    first_name: StrictStr = Field(description="Contact's first name")
    id: StrictStr = Field(description="Unique identifier for this result, 1-64 Bytes")
    input_message_content: Optional[InputMessageContent] = None
    last_name: Optional[StrictStr] = Field(default=None, description="*Optional*. Contact's last name")
    phone_number: StrictStr = Field(description="Contact's phone number")
    reply_markup: Optional[InlineKeyboardMarkup] = None
    thumb_height: Optional[StrictInt] = Field(default=None, description="*Optional*. Thumbnail height")
    thumb_url: Optional[StrictStr] = Field(default=None, description="*Optional*. Url of the thumbnail for the result")
    thumb_width: Optional[StrictInt] = Field(default=None, description="*Optional*. Thumbnail width")
    type: StrictStr = Field(description="Type of the result, must be *contact*")
    vcard: Optional[StrictStr] = Field(default=None, description="*Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes")
    __properties: ClassVar[List[str]] = ["first_name", "id", "input_message_content", "last_name", "phone_number", "reply_markup", "thumb_height", "thumb_url", "thumb_width", "type", "vcard"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineQueryResultContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_message_content
        if self.input_message_content:
            _dict['input_message_content'] = self.input_message_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineQueryResultContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "input_message_content": InputMessageContent.from_dict(obj["input_message_content"]) if obj.get("input_message_content") is not None else None,
            "last_name": obj.get("last_name"),
            "phone_number": obj.get("phone_number"),
            "reply_markup": InlineKeyboardMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "thumb_height": obj.get("thumb_height"),
            "thumb_url": obj.get("thumb_url"),
            "thumb_width": obj.get("thumb_width"),
            "type": obj.get("type"),
            "vcard": obj.get("vcard")
        })
        return _obj



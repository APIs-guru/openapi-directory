# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.inline_keyboard_markup import InlineKeyboardMarkup
from openapi_client.models.input_message_content import InputMessageContent
from typing import Optional, Set
from typing_extensions import Self

class InlineQueryResultVenue(BaseModel):
    """
    Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the venue.
    """ # noqa: E501
    address: StrictStr = Field(description="Address of the venue")
    foursquare_id: Optional[StrictStr] = Field(default=None, description="*Optional*. Foursquare identifier of the venue if known")
    foursquare_type: Optional[StrictStr] = Field(default=None, description="*Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment/default”, “arts\\_entertainment/aquarium” or “food/icecream”.)")
    google_place_id: Optional[StrictStr] = Field(default=None, description="*Optional*. Google Places identifier of the venue")
    google_place_type: Optional[StrictStr] = Field(default=None, description="*Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)")
    id: StrictStr = Field(description="Unique identifier for this result, 1-64 Bytes")
    input_message_content: Optional[InputMessageContent] = None
    latitude: Union[StrictFloat, StrictInt] = Field(description="Latitude of the venue location in degrees")
    longitude: Union[StrictFloat, StrictInt] = Field(description="Longitude of the venue location in degrees")
    reply_markup: Optional[InlineKeyboardMarkup] = None
    thumb_height: Optional[StrictInt] = Field(default=None, description="*Optional*. Thumbnail height")
    thumb_url: Optional[StrictStr] = Field(default=None, description="*Optional*. Url of the thumbnail for the result")
    thumb_width: Optional[StrictInt] = Field(default=None, description="*Optional*. Thumbnail width")
    title: StrictStr = Field(description="Title of the venue")
    type: StrictStr = Field(description="Type of the result, must be *venue*")
    __properties: ClassVar[List[str]] = ["address", "foursquare_id", "foursquare_type", "google_place_id", "google_place_type", "id", "input_message_content", "latitude", "longitude", "reply_markup", "thumb_height", "thumb_url", "thumb_width", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineQueryResultVenue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_message_content
        if self.input_message_content:
            _dict['input_message_content'] = self.input_message_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineQueryResultVenue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "foursquare_id": obj.get("foursquare_id"),
            "foursquare_type": obj.get("foursquare_type"),
            "google_place_id": obj.get("google_place_id"),
            "google_place_type": obj.get("google_place_type"),
            "id": obj.get("id"),
            "input_message_content": InputMessageContent.from_dict(obj["input_message_content"]) if obj.get("input_message_content") is not None else None,
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "reply_markup": InlineKeyboardMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "thumb_height": obj.get("thumb_height"),
            "thumb_url": obj.get("thumb_url"),
            "thumb_width": obj.get("thumb_width"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



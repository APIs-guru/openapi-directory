# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_client.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from openapi_client.models.message_entity import MessageEntity
from typing import Optional, Set
from typing_extensions import Self

class SendPollPostRequest(BaseModel):
    """
    SendPollPostRequest
    """ # noqa: E501
    allow_sending_without_reply: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the message should be sent even if the specified replied-to message is not found")
    allows_multiple_answers: Optional[StrictBool] = Field(default=None, description="True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*")
    chat_id: CopyMessagePostRequestChatId
    close_date: Optional[StrictInt] = Field(default=None, description="Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\\_period*.")
    correct_option_id: Optional[StrictInt] = Field(default=None, description="0-based identifier of the correct answer option, required for polls in quiz mode")
    disable_notification: Optional[StrictBool] = Field(default=None, description="Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.")
    explanation: Optional[StrictStr] = Field(default=None, description="Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing")
    explanation_entities: Optional[List[MessageEntity]] = Field(default=None, description="List of special entities that appear in the poll explanation, which can be specified instead of *parse\\_mode*")
    explanation_parse_mode: Optional[StrictStr] = Field(default=None, description="Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.")
    is_anonymous: Optional[StrictBool] = Field(default=None, description="True, if the poll needs to be anonymous, defaults to *True*")
    is_closed: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.")
    open_period: Optional[StrictInt] = Field(default=None, description="Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\\_date*.")
    options: List[StrictStr] = Field(description="A JSON-serialized list of answer options, 2-10 strings 1-100 characters each")
    question: StrictStr = Field(description="Poll question, 1-300 characters")
    reply_markup: Optional[CopyMessagePostRequestReplyMarkup] = None
    reply_to_message_id: Optional[StrictInt] = Field(default=None, description="If the message is a reply, ID of the original message")
    type: Optional[StrictStr] = Field(default=None, description="Poll type, “quiz” or “regular”, defaults to “regular”")
    __properties: ClassVar[List[str]] = ["allow_sending_without_reply", "allows_multiple_answers", "chat_id", "close_date", "correct_option_id", "disable_notification", "explanation", "explanation_entities", "explanation_parse_mode", "is_anonymous", "is_closed", "open_period", "options", "question", "reply_markup", "reply_to_message_id", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendPollPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_id
        if self.chat_id:
            _dict['chat_id'] = self.chat_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in explanation_entities (list)
        _items = []
        if self.explanation_entities:
            for _item_explanation_entities in self.explanation_entities:
                if _item_explanation_entities:
                    _items.append(_item_explanation_entities.to_dict())
            _dict['explanation_entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendPollPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_sending_without_reply": obj.get("allow_sending_without_reply"),
            "allows_multiple_answers": obj.get("allows_multiple_answers"),
            "chat_id": CopyMessagePostRequestChatId.from_dict(obj["chat_id"]) if obj.get("chat_id") is not None else None,
            "close_date": obj.get("close_date"),
            "correct_option_id": obj.get("correct_option_id"),
            "disable_notification": obj.get("disable_notification"),
            "explanation": obj.get("explanation"),
            "explanation_entities": [MessageEntity.from_dict(_item) for _item in obj["explanation_entities"]] if obj.get("explanation_entities") is not None else None,
            "explanation_parse_mode": obj.get("explanation_parse_mode"),
            "is_anonymous": obj.get("is_anonymous"),
            "is_closed": obj.get("is_closed"),
            "open_period": obj.get("open_period"),
            "options": obj.get("options"),
            "question": obj.get("question"),
            "reply_markup": CopyMessagePostRequestReplyMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "reply_to_message_id": obj.get("reply_to_message_id"),
            "type": obj.get("type")
        })
        return _obj



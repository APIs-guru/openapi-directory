# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class ChatMember(BaseModel):
    """
    This object contains information about one member of a chat.
    """ # noqa: E501
    can_add_web_page_previews: Optional[StrictBool] = Field(default=None, description="*Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages")
    can_be_edited: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user")
    can_change_info: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings")
    can_delete_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators only. True, if the administrator can delete messages of other users")
    can_edit_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only")
    can_invite_users: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat")
    can_pin_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only")
    can_post_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators only. True, if the administrator can post in the channel; channels only")
    can_promote_members: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)")
    can_restrict_members: Optional[StrictBool] = Field(default=None, description="*Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members")
    can_send_media_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes")
    can_send_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues")
    can_send_other_messages: Optional[StrictBool] = Field(default=None, description="*Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots")
    can_send_polls: Optional[StrictBool] = Field(default=None, description="*Optional*. Restricted only. True, if the user is allowed to send polls")
    custom_title: Optional[StrictStr] = Field(default=None, description="*Optional*. Owner and administrators only. Custom title for this user")
    is_anonymous: Optional[StrictBool] = Field(default=None, description="*Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden")
    is_member: Optional[StrictBool] = Field(default=None, description="*Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request")
    status: StrictStr = Field(description="The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”")
    until_date: Optional[StrictInt] = Field(default=None, description="*Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time")
    user: User
    __properties: ClassVar[List[str]] = ["can_add_web_page_previews", "can_be_edited", "can_change_info", "can_delete_messages", "can_edit_messages", "can_invite_users", "can_pin_messages", "can_post_messages", "can_promote_members", "can_restrict_members", "can_send_media_messages", "can_send_messages", "can_send_other_messages", "can_send_polls", "custom_title", "is_anonymous", "is_member", "status", "until_date", "user"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['creator', 'administrator', 'member', 'restricted', 'left', 'kicked']):
            raise ValueError("must be one of enum values ('creator', 'administrator', 'member', 'restricted', 'left', 'kicked')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_add_web_page_previews": obj.get("can_add_web_page_previews"),
            "can_be_edited": obj.get("can_be_edited"),
            "can_change_info": obj.get("can_change_info"),
            "can_delete_messages": obj.get("can_delete_messages"),
            "can_edit_messages": obj.get("can_edit_messages"),
            "can_invite_users": obj.get("can_invite_users"),
            "can_pin_messages": obj.get("can_pin_messages"),
            "can_post_messages": obj.get("can_post_messages"),
            "can_promote_members": obj.get("can_promote_members"),
            "can_restrict_members": obj.get("can_restrict_members"),
            "can_send_media_messages": obj.get("can_send_media_messages"),
            "can_send_messages": obj.get("can_send_messages"),
            "can_send_other_messages": obj.get("can_send_other_messages"),
            "can_send_polls": obj.get("can_send_polls"),
            "custom_title": obj.get("custom_title"),
            "is_anonymous": obj.get("is_anonymous"),
            "is_member": obj.get("is_member"),
            "status": obj.get("status"),
            "until_date": obj.get("until_date"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.photo_size import PhotoSize
from typing import Optional, Set
from typing_extensions import Self

class Audio(BaseModel):
    """
    This object represents an audio file to be treated as music by the Telegram clients.
    """ # noqa: E501
    duration: StrictInt = Field(description="Duration of the audio in seconds as defined by sender")
    file_id: StrictStr = Field(description="Identifier for this file, which can be used to download or reuse the file")
    file_name: Optional[StrictStr] = Field(default=None, description="*Optional*. Original filename as defined by sender")
    file_size: Optional[StrictInt] = Field(default=None, description="*Optional*. File size")
    file_unique_id: StrictStr = Field(description="Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.")
    mime_type: Optional[StrictStr] = Field(default=None, description="*Optional*. MIME type of the file as defined by sender")
    performer: Optional[StrictStr] = Field(default=None, description="*Optional*. Performer of the audio as defined by sender or by audio tags")
    thumb: Optional[PhotoSize] = None
    title: Optional[StrictStr] = Field(default=None, description="*Optional*. Title of the audio as defined by sender or by audio tags")
    __properties: ClassVar[List[str]] = ["duration", "file_id", "file_name", "file_size", "file_unique_id", "mime_type", "performer", "thumb", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Audio from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thumb
        if self.thumb:
            _dict['thumb'] = self.thumb.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Audio from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "file_id": obj.get("file_id"),
            "file_name": obj.get("file_name"),
            "file_size": obj.get("file_size"),
            "file_unique_id": obj.get("file_unique_id"),
            "mime_type": obj.get("mime_type"),
            "performer": obj.get("performer"),
            "thumb": PhotoSize.from_dict(obj["thumb"]) if obj.get("thumb") is not None else None,
            "title": obj.get("title")
        })
        return _obj



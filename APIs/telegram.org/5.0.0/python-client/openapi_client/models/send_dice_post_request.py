# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.copy_message_post_request_chat_id import CopyMessagePostRequestChatId
from openapi_client.models.copy_message_post_request_reply_markup import CopyMessagePostRequestReplyMarkup
from typing import Optional, Set
from typing_extensions import Self

class SendDicePostRequest(BaseModel):
    """
    SendDicePostRequest
    """ # noqa: E501
    allow_sending_without_reply: Optional[StrictBool] = Field(default=None, description="Pass *True*, if the message should be sent even if the specified replied-to message is not found")
    chat_id: CopyMessagePostRequestChatId
    disable_notification: Optional[StrictBool] = Field(default=None, description="Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.")
    emoji: Optional[StrictStr] = Field(default='üé≤', description="Emoji on which the dice throw animation is based. Currently, must be one of ‚Äú<img alt=\"üé≤\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />‚Äù, ‚Äú<img alt=\"üéØ\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />‚Äù, ‚Äú<img alt=\"üèÄ\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />‚Äù, ‚Äú<img alt=\"‚öΩ\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />‚Äù, or ‚Äú<img alt=\"üé∞\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />‚Äù. Dice can have values 1-6 for ‚Äú<img alt=\"üé≤\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />‚Äù and ‚Äú<img alt=\"üéØ\" src=\"//telegram.org/img/emoji/40/F09F8EAF.png\" height=\"20\" width=\"20\" />‚Äù, values 1-5 for ‚Äú<img alt=\"üèÄ\" src=\"//telegram.org/img/emoji/40/F09F8F80.png\" height=\"20\" width=\"20\" />‚Äù and ‚Äú<img alt=\"‚öΩ\" src=\"//telegram.org/img/emoji/40/E29ABD.png\" height=\"20\" width=\"20\" />‚Äù, and values 1-64 for ‚Äú<img alt=\"üé∞\" src=\"//telegram.org/img/emoji/40/F09F8EB0.png\" height=\"20\" width=\"20\" />‚Äù. Defaults to ‚Äú<img alt=\"üé≤\" src=\"//telegram.org/img/emoji/40/F09F8EB2.png\" height=\"20\" width=\"20\" />‚Äù")
    reply_markup: Optional[CopyMessagePostRequestReplyMarkup] = None
    reply_to_message_id: Optional[StrictInt] = Field(default=None, description="If the message is a reply, ID of the original message")
    __properties: ClassVar[List[str]] = ["allow_sending_without_reply", "chat_id", "disable_notification", "emoji", "reply_markup", "reply_to_message_id"]

    @field_validator('emoji')
    def emoji_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['üé≤', 'üéØ', 'üèÄ', '‚öΩ', 'üé∞']):
            raise ValueError("must be one of enum values ('üé≤', 'üéØ', 'üèÄ', '‚öΩ', 'üé∞')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendDicePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_id
        if self.chat_id:
            _dict['chat_id'] = self.chat_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reply_markup
        if self.reply_markup:
            _dict['reply_markup'] = self.reply_markup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendDicePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_sending_without_reply": obj.get("allow_sending_without_reply"),
            "chat_id": CopyMessagePostRequestChatId.from_dict(obj["chat_id"]) if obj.get("chat_id") is not None else None,
            "disable_notification": obj.get("disable_notification"),
            "emoji": obj.get("emoji") if obj.get("emoji") is not None else 'üé≤',
            "reply_markup": CopyMessagePostRequestReplyMarkup.from_dict(obj["reply_markup"]) if obj.get("reply_markup") is not None else None,
            "reply_to_message_id": obj.get("reply_to_message_id")
        })
        return _obj



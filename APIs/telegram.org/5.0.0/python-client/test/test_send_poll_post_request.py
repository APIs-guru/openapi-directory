# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.send_poll_post_request import SendPollPostRequest

class TestSendPollPostRequest(unittest.TestCase):
    """SendPollPostRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SendPollPostRequest:
        """Test SendPollPostRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SendPollPostRequest`
        """
        model = SendPollPostRequest()
        if include_optional:
            return SendPollPostRequest(
                allow_sending_without_reply = True,
                allows_multiple_answers = True,
                chat_id = None,
                close_date = 56,
                correct_option_id = 56,
                disable_notification = True,
                explanation = '',
                explanation_entities = [
                    openapi_client.models.message_entity.MessageEntity(
                        language = '', 
                        length = 56, 
                        offset = 56, 
                        type = 'mention', 
                        url = '', 
                        user = openapi_client.models.user.User(
                            can_join_groups = True, 
                            can_read_all_group_messages = True, 
                            first_name = '', 
                            id = 56, 
                            is_bot = True, 
                            language_code = '', 
                            last_name = '', 
                            supports_inline_queries = True, 
                            username = '', ), )
                    ],
                explanation_parse_mode = '',
                is_anonymous = True,
                is_closed = True,
                open_period = 56,
                options = [
                    ''
                    ],
                question = '',
                reply_markup = None,
                reply_to_message_id = 56,
                type = ''
            )
        else:
            return SendPollPostRequest(
                chat_id = None,
                options = [
                    ''
                    ],
                question = '',
        )
        """

    def testSendPollPostRequest(self):
        """Test SendPollPostRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.send_contact_post_request_reply_markup import SendContactPostRequestReplyMarkup

class TestSendContactPostRequestReplyMarkup(unittest.TestCase):
    """SendContactPostRequestReplyMarkup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SendContactPostRequestReplyMarkup:
        """Test SendContactPostRequestReplyMarkup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SendContactPostRequestReplyMarkup`
        """
        model = SendContactPostRequestReplyMarkup()
        if include_optional:
            return SendContactPostRequestReplyMarkup(
                inline_keyboard = [
                    [
                        openapi_client.models.inline_keyboard_button.InlineKeyboardButton(
                            callback_data = '', 
                            callback_game = null, 
                            login_url = openapi_client.models.login_url.LoginUrl(
                                bot_username = '', 
                                forward_text = '', 
                                request_write_access = True, 
                                url = '', ), 
                            pay = True, 
                            switch_inline_query = '', 
                            switch_inline_query_current_chat = '', 
                            text = '', 
                            url = '', )
                        ]
                    ],
                keyboard = [
                    [
                        openapi_client.models.keyboard_button.KeyboardButton(
                            request_contact = True, 
                            request_location = True, 
                            request_poll = openapi_client.models.keyboard_button_poll_type.KeyboardButtonPollType(
                                type = '', ), 
                            text = '', )
                        ]
                    ],
                one_time_keyboard = True,
                resize_keyboard = True,
                selective = True,
                remove_keyboard = True,
                force_reply = True
            )
        else:
            return SendContactPostRequestReplyMarkup(
                inline_keyboard = [
                    [
                        openapi_client.models.inline_keyboard_button.InlineKeyboardButton(
                            callback_data = '', 
                            callback_game = null, 
                            login_url = openapi_client.models.login_url.LoginUrl(
                                bot_username = '', 
                                forward_text = '', 
                                request_write_access = True, 
                                url = '', ), 
                            pay = True, 
                            switch_inline_query = '', 
                            switch_inline_query_current_chat = '', 
                            text = '', 
                            url = '', )
                        ]
                    ],
                keyboard = [
                    [
                        openapi_client.models.keyboard_button.KeyboardButton(
                            request_contact = True, 
                            request_location = True, 
                            request_poll = openapi_client.models.keyboard_button_poll_type.KeyboardButtonPollType(
                                type = '', ), 
                            text = '', )
                        ]
                    ],
                remove_keyboard = True,
                force_reply = True,
        )
        """

    def testSendContactPostRequestReplyMarkup(self):
        """Test SendContactPostRequestReplyMarkup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

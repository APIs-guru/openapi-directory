# coding: utf-8

"""
    Telegram Bot API

    Auto-generated OpenAPI schema

    The version of the OpenAPI document: 5.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.stop_poll_post200_response import StopPollPost200Response

class TestStopPollPost200Response(unittest.TestCase):
    """StopPollPost200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StopPollPost200Response:
        """Test StopPollPost200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StopPollPost200Response`
        """
        model = StopPollPost200Response()
        if include_optional:
            return StopPollPost200Response(
                ok = True,
                result = openapi_client.models.poll.Poll(
                    allows_multiple_answers = True, 
                    close_date = 56, 
                    correct_option_id = 56, 
                    explanation = '', 
                    explanation_entities = [
                        openapi_client.models.message_entity.MessageEntity(
                            language = '', 
                            length = 56, 
                            offset = 56, 
                            type = 'mention', 
                            url = '', 
                            user = openapi_client.models.user.User(
                                can_join_groups = True, 
                                can_read_all_group_messages = True, 
                                first_name = '', 
                                id = 56, 
                                is_bot = True, 
                                language_code = '', 
                                last_name = '', 
                                supports_inline_queries = True, 
                                username = '', ), )
                        ], 
                    id = '', 
                    is_anonymous = True, 
                    is_closed = True, 
                    open_period = 56, 
                    options = [
                        openapi_client.models.poll_option.PollOption(
                            text = '', 
                            voter_count = 56, )
                        ], 
                    question = '', 
                    total_voter_count = 56, 
                    type = '', )
            )
        else:
            return StopPollPost200Response(
                ok = True,
                result = openapi_client.models.poll.Poll(
                    allows_multiple_answers = True, 
                    close_date = 56, 
                    correct_option_id = 56, 
                    explanation = '', 
                    explanation_entities = [
                        openapi_client.models.message_entity.MessageEntity(
                            language = '', 
                            length = 56, 
                            offset = 56, 
                            type = 'mention', 
                            url = '', 
                            user = openapi_client.models.user.User(
                                can_join_groups = True, 
                                can_read_all_group_messages = True, 
                                first_name = '', 
                                id = 56, 
                                is_bot = True, 
                                language_code = '', 
                                last_name = '', 
                                supports_inline_queries = True, 
                                username = '', ), )
                        ], 
                    id = '', 
                    is_anonymous = True, 
                    is_closed = True, 
                    open_period = 56, 
                    options = [
                        openapi_client.models.poll_option.PollOption(
                            text = '', 
                            voter_count = 56, )
                        ], 
                    question = '', 
                    total_voter_count = 56, 
                    type = '', ),
        )
        """

    def testStopPollPost200Response(self):
        """Test StopPollPost200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

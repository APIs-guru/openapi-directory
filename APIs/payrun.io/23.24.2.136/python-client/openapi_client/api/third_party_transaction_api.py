# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.link_collection import LinkCollection
from openapi_client.models.tag import Tag

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ThirdPartyTransactionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_third_party_transaction_tag_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete third party transaction tag

        Deletes a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_third_party_transaction_tag_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_third_party_transaction_tag_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete third party transaction tag

        Deletes a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_third_party_transaction_tag_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_third_party_transaction_tag_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete third party transaction tag

        Deletes a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_third_party_transaction_tag_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_third_party_transaction_tag_0_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_third_party_transaction_tags_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all third party transaction tags

        Gets all the third party transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transaction_tags_0_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_third_party_transaction_tags_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all third party transaction tags

        Gets all the third party transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transaction_tags_0_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_third_party_transaction_tags_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all third party transaction tags

        Gets all the third party transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transaction_tags_0_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_third_party_transaction_tags_0_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransactions/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_third_party_transactions_with_tag_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get links to tagged third party transactions

        Gets the third party transactions with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transactions_with_tag_0_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_third_party_transactions_with_tag_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get links to tagged third party transactions

        Gets the third party transactions with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transactions_with_tag_0_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_third_party_transactions_with_tag_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get links to tagged third party transactions

        Gets the third party transactions with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transactions_with_tag_0_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_third_party_transactions_with_tag_0_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransactions/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_third_party_transaction_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get third party transaction tag

        Gets a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_third_party_transaction_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_third_party_transaction_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get third party transaction tag

        Gets a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_third_party_transaction_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_third_party_transaction_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get third party transaction tag

        Gets a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_third_party_transaction_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_third_party_transaction_0_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_third_party_transaction_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get tags from third party transaction

        Gets all tags from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_third_party_transaction_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_third_party_transaction_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get tags from third party transaction

        Gets all tags from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_third_party_transaction_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_third_party_transaction_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get tags from third party transaction

        Gets all tags from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_third_party_transaction_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_third_party_transaction_0_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_third_party_transaction_tag_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """insert third party transaction tag

        Inserts a tag on the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_third_party_transaction_tag_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_third_party_transaction_tag_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """insert third party transaction tag

        Inserts a tag on the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_third_party_transaction_tag_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_third_party_transaction_tag_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """insert third party transaction tag

        Inserts a tag on the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_third_party_transaction_tag_0_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_third_party_transaction_tag_0_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



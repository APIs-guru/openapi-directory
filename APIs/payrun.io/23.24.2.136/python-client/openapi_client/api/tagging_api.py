# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.link_collection import LinkCollection
from openapi_client.models.tag import Tag

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TaggingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_cis_instruction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete CIS instruction tag

        Deletes a tag from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_instruction_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_cis_instruction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete CIS instruction tag

        Deletes a tag from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_instruction_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_cis_instruction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete CIS instruction tag

        Deletes a tag from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_instruction_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_cis_instruction_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_instruction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_instruction_id is not None:
            _path_params['CisInstructionId'] = cis_instruction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_cis_line_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete CIS line tag

        Deletes a tag from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_line_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_cis_line_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete CIS line tag

        Deletes a tag from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_line_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_cis_line_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete CIS line tag

        Deletes a tag from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_line_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_cis_line_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_line_id is not None:
            _path_params['CisLineId'] = cis_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_cis_line_type_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete CIS line type tag

        Deletes a tag from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_line_type_tag_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_cis_line_type_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete CIS line type tag

        Deletes a tag from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_line_type_tag_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_cis_line_type_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete CIS line type tag

        Deletes a tag from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_cis_line_type_tag_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_cis_line_type_tag_serialize(
        self,
        employer_id,
        cis_line_type_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if cis_line_type_id is not None:
            _path_params['CisLineTypeId'] = cis_line_type_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_employee_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete employee tag

        Deletes a tag from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_employee_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_employee_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete employee tag

        Deletes a tag from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_employee_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_employee_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete employee tag

        Deletes a tag from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_employee_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_employee_tag_serialize(
        self,
        employer_id,
        employee_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_employer_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete employer tag

        Deletes a tag from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_employer_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_employer_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete employer tag

        Deletes a tag from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_employer_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_employer_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete employer tag

        Deletes a tag from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_employer_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_employer_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_holiday_scheme_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete holiday scheme tag

        Deletes a tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_tag_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_holiday_scheme_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete holiday scheme tag

        Deletes a tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_tag_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_holiday_scheme_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete holiday scheme tag

        Deletes a tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_tag_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_holiday_scheme_tag_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_journal_line_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete journal line tag

        Deletes a tag from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_journal_line_tag_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_journal_line_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete journal line tag

        Deletes a tag from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_journal_line_tag_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_journal_line_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete journal line tag

        Deletes a tag from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_journal_line_tag_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_journal_line_tag_serialize(
        self,
        employer_id,
        journal_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if journal_line_id is not None:
            _path_params['JournalLineId'] = journal_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_pay_code_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete pay code tag

        Deletes a tag from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_code_tag_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_pay_code_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete pay code tag

        Deletes a tag from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_code_tag_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_pay_code_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete pay code tag

        Deletes a tag from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_code_tag_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_pay_code_tag_serialize(
        self,
        employer_id,
        pay_code_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_code_id is not None:
            _path_params['PayCodeId'] = pay_code_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_pay_instruction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete pay instruction tag

        Deletes a tag from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_instruction_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_pay_instruction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete pay instruction tag

        Deletes a tag from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_instruction_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_pay_instruction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete pay instruction tag

        Deletes a tag from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_instruction_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_pay_instruction_tag_serialize(
        self,
        employer_id,
        employee_id,
        pay_instruction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_instruction_id is not None:
            _path_params['PayInstructionId'] = pay_instruction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_pay_line_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete pay line tag

        Deletes a tag from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_line_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_pay_line_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete pay line tag

        Deletes a tag from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_line_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_pay_line_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete pay line tag

        Deletes a tag from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_line_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_pay_line_tag_serialize(
        self,
        employer_id,
        employee_id,
        pay_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_line_id is not None:
            _path_params['PayLineId'] = pay_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_pay_run_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete pay run tag

        Deletes a tag from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_run_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_pay_run_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete pay run tag

        Deletes a tag from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_run_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_pay_run_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete pay run tag

        Deletes a tag from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_run_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_pay_run_tag_serialize(
        self,
        employer_id,
        pay_schedule_id,
        pay_run_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if pay_run_id is not None:
            _path_params['PayRunId'] = pay_run_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_pay_schedule_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete pay schedule tag

        Deletes a tag from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_schedule_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_pay_schedule_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete pay schedule tag

        Deletes a tag from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_schedule_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_pay_schedule_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete pay schedule tag

        Deletes a tag from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_pay_schedule_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_pay_schedule_tag_serialize(
        self,
        employer_id,
        pay_schedule_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_permission_tag(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Permission tag

        Deletes a tag from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_permission_tag_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_permission_tag_with_http_info(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Permission tag

        Deletes a tag from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_permission_tag_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_permission_tag_without_preload_content(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Permission tag

        Deletes a tag from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_permission_tag_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_permission_tag_serialize(
        self,
        permission_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if permission_id is not None:
            _path_params['PermissionId'] = permission_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Permission/{PermissionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_rti_transaction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete RTI transaction tag

        Deletes a tag from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_rti_transaction_tag_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_rti_transaction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete RTI transaction tag

        Deletes a tag from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_rti_transaction_tag_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_rti_transaction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete RTI transaction tag

        Deletes a tag from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_rti_transaction_tag_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_rti_transaction_tag_serialize(
        self,
        employer_id,
        rti_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if rti_transaction_id is not None:
            _path_params['RtiTransactionId'] = rti_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_sub_contractor_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete sub contractor tag

        Deletes a tag from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sub_contractor_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_sub_contractor_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete sub contractor tag

        Deletes a tag from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sub_contractor_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_sub_contractor_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete sub contractor tag

        Deletes a tag from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sub_contractor_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_sub_contractor_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_third_party_transaction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete third party transaction tag

        Deletes a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_third_party_transaction_tag_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_third_party_transaction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete third party transaction tag

        Deletes a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_third_party_transaction_tag_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_third_party_transaction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete third party transaction tag

        Deletes a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_third_party_transaction_tag_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_third_party_transaction_tag_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_user_tag(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete user tag

        Deletes a tag from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_user_tag_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_user_tag_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete user tag

        Deletes a tag from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_user_tag_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_user_tag_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete user tag

        Deletes a tag from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_user_tag_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_user_tag_serialize(
        self,
        user_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/User/{UserId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_cis_instruction_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all CIS instruction tags

        Gets all the CIS instruction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_instruction_tags_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_cis_instruction_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all CIS instruction tags

        Gets all the CIS instruction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_instruction_tags_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_cis_instruction_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all CIS instruction tags

        Gets all the CIS instruction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_instruction_tags_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_cis_instruction_tags_serialize(
        self,
        employer_id,
        sub_contractor_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_cis_line_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all CIS line tags

        Gets all the CIS line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_line_tags_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_cis_line_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all CIS line tags

        Gets all the CIS line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_line_tags_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_cis_line_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all CIS line tags

        Gets all the CIS line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_line_tags_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_cis_line_tags_serialize(
        self,
        employer_id,
        sub_contractor_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_cis_line_type_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all CIS line type tags

        Gets all the CIS line type tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_line_type_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_cis_line_type_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all CIS line type tags

        Gets all the CIS line type tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_line_type_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_cis_line_type_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all CIS line type tags

        Gets all the CIS line type tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_cis_line_type_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_cis_line_type_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/CisLineTypes/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_employee_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all employee tags

        Gets all the employee tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_employee_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_employee_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all employee tags

        Gets all the employee tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_employee_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_employee_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all employee tags

        Gets all the employee tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_employee_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_employee_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employees/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_employer_tags(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all employer tags

        Gets all the employer tags

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_employer_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_employer_tags_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all employer tags

        Gets all the employer tags

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_employer_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_employer_tags_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all employer tags

        Gets all the employer tags

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_employer_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_employer_tags_serialize(
        self,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employers/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_holiday_scheme_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all holiday scheme tags

        Gets all the holiday scheme tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_holiday_scheme_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_holiday_scheme_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all holiday scheme tags

        Gets all the holiday scheme tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_holiday_scheme_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_holiday_scheme_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all holiday scheme tags

        Gets all the holiday scheme tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_holiday_scheme_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_holiday_scheme_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidaySchemes/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_journal_line_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all journal line tags

        Gets all the journal line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_journal_line_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_journal_line_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all journal line tags

        Gets all the journal line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_journal_line_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_journal_line_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all journal line tags

        Gets all the journal line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_journal_line_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_journal_line_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/JournalLines/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_journal_lines_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get links to tagged journal lines

        Gets the journal lines with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_journal_lines_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_journal_lines_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get links to tagged journal lines

        Gets the journal lines with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_journal_lines_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_journal_lines_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get links to tagged journal lines

        Gets the journal lines with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_journal_lines_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_journal_lines_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/JournalLines/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_pay_code_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay code tags

        Gets all the pay code tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_code_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_pay_code_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay code tags

        Gets all the pay code tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_code_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_pay_code_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay code tags

        Gets all the pay code tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_code_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_pay_code_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PayCodes/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_pay_instruction_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay instruction tags

        Gets all the pay instruction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_instruction_tags_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_pay_instruction_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay instruction tags

        Gets all the pay instruction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_instruction_tags_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_pay_instruction_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay instruction tags

        Gets all the pay instruction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_instruction_tags_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_pay_instruction_tags_serialize(
        self,
        employer_id,
        employee_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_pay_line_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay line tags

        Gets all the pay line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_line_tags_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_pay_line_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay line tags

        Gets all the pay line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_line_tags_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_pay_line_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay line tags

        Gets all the pay line tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_line_tags_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_pay_line_tags_serialize(
        self,
        employer_id,
        employee_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayLines/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_pay_run_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay run tags

        Gets all the pay run tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_run_tags_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_pay_run_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay run tags

        Gets all the pay run tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_run_tags_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_pay_run_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay run tags

        Gets all the pay run tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_run_tags_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_pay_run_tags_serialize(
        self,
        employer_id,
        pay_schedule_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_pay_schedule_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay schedule tags

        Gets all the pay schedule tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_schedule_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_pay_schedule_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay schedule tags

        Gets all the pay schedule tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_schedule_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_pay_schedule_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay schedule tags

        Gets all the pay schedule tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_pay_schedule_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_pay_schedule_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedules/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_permission_tags(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all Permission tags

        Get all tags from all Permissions

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_permission_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_permission_tags_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all Permission tags

        Get all tags from all Permissions

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_permission_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_permission_tags_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all Permission tags

        Get all tags from all Permissions

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_permission_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_permission_tags_serialize(
        self,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Permissions/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_permissions_with_tag(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get links to tagged Permissions

        Gets the Permissions with the specified tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_permissions_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_permissions_with_tag_with_http_info(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get links to tagged Permissions

        Gets the Permissions with the specified tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_permissions_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_permissions_with_tag_without_preload_content(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get links to tagged Permissions

        Gets the Permissions with the specified tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_permissions_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_permissions_with_tag_serialize(
        self,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Permissions/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_rti_transaction_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all RTI transaction tags

        Gets all the RTI transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_rti_transaction_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_rti_transaction_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all RTI transaction tags

        Gets all the RTI transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_rti_transaction_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_rti_transaction_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all RTI transaction tags

        Gets all the RTI transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_rti_transaction_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_rti_transaction_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/RtiTransactions/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_sub_contractor_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all sub contractor tags

        Gets all the sub contractor tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_sub_contractor_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_sub_contractor_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all sub contractor tags

        Gets all the sub contractor tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_sub_contractor_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_sub_contractor_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all sub contractor tags

        Gets all the sub contractor tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_sub_contractor_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_sub_contractor_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractors/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_third_party_transaction_tags(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all third party transaction tags

        Gets all the third party transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transaction_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_third_party_transaction_tags_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all third party transaction tags

        Gets all the third party transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transaction_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_third_party_transaction_tags_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all third party transaction tags

        Gets all the third party transaction tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transaction_tags_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_third_party_transaction_tags_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransactions/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_third_party_transactions_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get links to tagged third party transactions

        Gets the third party transactions with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transactions_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_third_party_transactions_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get links to tagged third party transactions

        Gets the third party transactions with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transactions_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_third_party_transactions_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get links to tagged third party transactions

        Gets the third party transactions with the specified tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_third_party_transactions_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_third_party_transactions_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransactions/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_user_tags(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all user tags

        Get all tags from all users

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_user_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_user_tags_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all user tags

        Get all tags from all users

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_user_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_user_tags_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all user tags

        Get all tags from all users

        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_user_tags_serialize(
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_user_tags_serialize(
        self,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Users/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_users_with_tag(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get links to tagged users

        Gets the users with the specified tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_users_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_users_with_tag_with_http_info(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get links to tagged users

        Gets the users with the specified tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_users_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_users_with_tag_without_preload_content(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get links to tagged users

        Gets the users with the specified tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_users_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_users_with_tag_serialize(
        self,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Users/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_cis_instructions_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get CIS instructions with tag

        Gets the CIS instruction with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_instructions_with_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_cis_instructions_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get CIS instructions with tag

        Gets the CIS instruction with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_instructions_with_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_cis_instructions_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CIS instructions with tag

        Gets the CIS instruction with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_instructions_with_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_cis_instructions_with_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_cis_line_types_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get CIS line types with tag

        Gets the CIS line type with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_line_types_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_cis_line_types_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get CIS line types with tag

        Gets the CIS line type with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_line_types_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_cis_line_types_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CIS line types with tag

        Gets the CIS line type with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_line_types_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_cis_line_types_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/CisLineTypes/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_cis_lines_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get CIS lines with tag

        Gets the CIS line with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_lines_with_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_cis_lines_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get CIS lines with tag

        Gets the CIS line with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_lines_with_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_cis_lines_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CIS lines with tag

        Gets the CIS line with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_cis_lines_with_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_cis_lines_with_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_employees_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get employees with tag

        Gets the employees with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_employees_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_employees_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get employees with tag

        Gets the employees with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_employees_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_employees_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get employees with tag

        Gets the employees with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_employees_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_employees_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employees/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_employers_with_tag(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get employers with tag

        Gets the employers with the tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_employers_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_employers_with_tag_with_http_info(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get employers with tag

        Gets the employers with the tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_employers_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_employers_with_tag_without_preload_content(
        self,
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get employers with tag

        Gets the employers with the tag

        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_employers_with_tag_serialize(
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_employers_with_tag_serialize(
        self,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employers/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_schemes_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get holiday schemes with tag

        Gets the holiday scheme with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_schemes_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get holiday schemes with tag

        Gets the holiday scheme with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_schemes_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday schemes with tag

        Gets the holiday scheme with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_schemes_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pay_codes_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get pay codes with tag

        Gets the pay codes with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_codes_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pay_codes_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get pay codes with tag

        Gets the pay codes with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_codes_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pay_codes_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay codes with tag

        Gets the pay codes with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_codes_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pay_codes_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PayCodes/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pay_instructions_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get pay instructions with tag

        Gets the pay instructions with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_instructions_with_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pay_instructions_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get pay instructions with tag

        Gets the pay instructions with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_instructions_with_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pay_instructions_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay instructions with tag

        Gets the pay instructions with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_instructions_with_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pay_instructions_with_tag_serialize(
        self,
        employer_id,
        employee_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pay_lines_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get pay lines with tag

        Gets the pay line with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_lines_with_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pay_lines_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get pay lines with tag

        Gets the pay line with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_lines_with_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pay_lines_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay lines with tag

        Gets the pay line with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_lines_with_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pay_lines_with_tag_serialize(
        self,
        employer_id,
        employee_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayLines/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pay_runs_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get pay runs with tag

        Gets the pay runs with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_runs_with_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pay_runs_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get pay runs with tag

        Gets the pay runs with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_runs_with_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pay_runs_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay runs with tag

        Gets the pay runs with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_runs_with_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pay_runs_with_tag_serialize(
        self,
        employer_id,
        pay_schedule_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pay_schedules_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get pay schedule with tag

        Gets the pay schedules with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_schedules_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pay_schedules_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get pay schedule with tag

        Gets the pay schedules with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_schedules_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pay_schedules_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay schedule with tag

        Gets the pay schedules with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_schedules_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pay_schedules_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedules/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_rti_transactions_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get RTI transactions with tag

        Gets the RTI transactions with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rti_transactions_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_rti_transactions_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get RTI transactions with tag

        Gets the RTI transactions with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rti_transactions_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_rti_transactions_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get RTI transactions with tag

        Gets the RTI transactions with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rti_transactions_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_rti_transactions_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/RtiTransactions/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sub_contractors_with_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get sub contractors with tag

        Gets the sub contractor with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sub_contractors_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sub_contractors_with_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get sub contractors with tag

        Gets the sub contractor with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sub_contractors_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sub_contractors_with_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get sub contractors with tag

        Gets the sub contractor with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sub_contractors_with_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sub_contractors_with_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractors/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_cis_instruction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get CIS instruction tag

        Gets the tag from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_instruction_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_cis_instruction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get CIS instruction tag

        Gets the tag from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_instruction_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_cis_instruction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CIS instruction tag

        Gets the tag from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_instruction_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_cis_instruction_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_instruction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_instruction_id is not None:
            _path_params['CisInstructionId'] = cis_instruction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_cis_line(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get CIS line tag

        Gets the tag from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_line_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_cis_line_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get CIS line tag

        Gets the tag from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_line_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_cis_line_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CIS line tag

        Gets the tag from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_line_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_cis_line_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_line_id is not None:
            _path_params['CisLineId'] = cis_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_cis_line_type(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get CIS line type tag

        Gets the tag from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_line_type_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_cis_line_type_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get CIS line type tag

        Gets the tag from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_line_type_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_cis_line_type_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CIS line type tag

        Gets the tag from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_cis_line_type_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_cis_line_type_serialize(
        self,
        employer_id,
        cis_line_type_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if cis_line_type_id is not None:
            _path_params['CisLineTypeId'] = cis_line_type_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_employee(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get employee tag

        Gets the tag from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employee_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_employee_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get employee tag

        Gets the tag from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employee_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_employee_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get employee tag

        Gets the tag from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employee_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_employee_serialize(
        self,
        employer_id,
        employee_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_employee_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get employee revision tag

        Gets the tag from the employee revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employee_revision_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_employee_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get employee revision tag

        Gets the tag from the employee revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employee_revision_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_employee_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get employee revision tag

        Gets the tag from the employee revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employee_revision_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_employee_revision_serialize(
        self,
        employer_id,
        employee_id,
        tag_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_employer(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get employer tag

        Gets the tag from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employer_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_employer_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get employer tag

        Gets the tag from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employer_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_employer_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get employer tag

        Gets the tag from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employer_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_employer_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_employer_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get employer revision tag

        Gets the tag from the employer revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employer_revision_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_employer_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get employer revision tag

        Gets the tag from the employer revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employer_revision_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_employer_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get employer revision tag

        Gets the tag from the employer revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_employer_revision_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_employer_revision_serialize(
        self,
        employer_id,
        tag_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Tag/{TagId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_holiday_scheme(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get holiday scheme tag

        Gets the tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_holiday_scheme_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get holiday scheme tag

        Gets the tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_holiday_scheme_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday scheme tag

        Gets the tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_holiday_scheme_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_holiday_scheme_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get holiday scheme revision tag

        Gets the tag from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_holiday_scheme_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get holiday scheme revision tag

        Gets the tag from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_holiday_scheme_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday scheme revision tag

        Gets the tag from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_holiday_scheme_revision_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_journal_line(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get journal line tag

        Gets a tag from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_journal_line_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_journal_line_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get journal line tag

        Gets a tag from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_journal_line_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_journal_line_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get journal line tag

        Gets a tag from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_journal_line_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_journal_line_serialize(
        self,
        employer_id,
        journal_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if journal_line_id is not None:
            _path_params['JournalLineId'] = journal_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_pay_code(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get pay code tag

        Gets the tag from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_code_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_pay_code_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get pay code tag

        Gets the tag from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_code_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_pay_code_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay code tag

        Gets the tag from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_code_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_pay_code_serialize(
        self,
        employer_id,
        pay_code_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_code_id is not None:
            _path_params['PayCodeId'] = pay_code_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_pay_instruction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get pay instruction tag

        Gets the tag from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_instruction_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_pay_instruction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get pay instruction tag

        Gets the tag from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_instruction_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_pay_instruction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay instruction tag

        Gets the tag from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_instruction_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_pay_instruction_serialize(
        self,
        employer_id,
        employee_id,
        pay_instruction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_instruction_id is not None:
            _path_params['PayInstructionId'] = pay_instruction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_pay_line(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get pay line tag

        Gets the tag from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_line_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_pay_line_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get pay line tag

        Gets the tag from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_line_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_pay_line_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay line tag

        Gets the tag from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_line_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_pay_line_serialize(
        self,
        employer_id,
        employee_id,
        pay_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_line_id is not None:
            _path_params['PayLineId'] = pay_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_pay_run(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get pay run tag

        Gets the tag from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_run_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_pay_run_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get pay run tag

        Gets the tag from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_run_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_pay_run_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay run tag

        Gets the tag from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_run_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_pay_run_serialize(
        self,
        employer_id,
        pay_schedule_id,
        pay_run_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if pay_run_id is not None:
            _path_params['PayRunId'] = pay_run_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_pay_schedule(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get pay schedule tag

        Gets the tag from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_schedule_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_pay_schedule_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get pay schedule tag

        Gets the tag from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_schedule_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_pay_schedule_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay schedule tag

        Gets the tag from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_pay_schedule_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_pay_schedule_serialize(
        self,
        employer_id,
        pay_schedule_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_permission(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get Permission tag

        Gets a tag from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_permission_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_permission_with_http_info(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get Permission tag

        Gets a tag from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_permission_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_permission_without_preload_content(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Permission tag

        Gets a tag from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_permission_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_permission_serialize(
        self,
        permission_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if permission_id is not None:
            _path_params['PermissionId'] = permission_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Permission/{PermissionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_rti_transaction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get RTI transaction tag

        Gets the tag from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_rti_transaction_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_rti_transaction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get RTI transaction tag

        Gets the tag from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_rti_transaction_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_rti_transaction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get RTI transaction tag

        Gets the tag from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_rti_transaction_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_rti_transaction_serialize(
        self,
        employer_id,
        rti_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if rti_transaction_id is not None:
            _path_params['RtiTransactionId'] = rti_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_sub_contractor(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get sub contractor tag

        Gets the tag from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_sub_contractor_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_sub_contractor_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get sub contractor tag

        Gets the tag from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_sub_contractor_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_sub_contractor_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get sub contractor tag

        Gets the tag from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_sub_contractor_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_sub_contractor_serialize(
        self,
        employer_id,
        sub_contractor_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_sub_contractor_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get sub contractor revision tag

        Gets the tag from the sub contractor revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_sub_contractor_revision_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_sub_contractor_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get sub contractor revision tag

        Gets the tag from the sub contractor revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_sub_contractor_revision_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_sub_contractor_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get sub contractor revision tag

        Gets the tag from the sub contractor revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_sub_contractor_revision_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_sub_contractor_revision_serialize(
        self,
        employer_id,
        sub_contractor_id,
        tag_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_third_party_transaction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get third party transaction tag

        Gets a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_third_party_transaction_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_third_party_transaction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get third party transaction tag

        Gets a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_third_party_transaction_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_third_party_transaction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get third party transaction tag

        Gets a tag from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_third_party_transaction_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_third_party_transaction_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_user(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get user tag

        Gets a tag from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_user_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_user_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get user tag

        Gets a tag from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_user_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_user_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get user tag

        Gets a tag from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_user_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_user_serialize(
        self,
        user_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/User/{UserId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_cis_instruction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the CIS instruction

        Gets all the tags from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_instruction_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_cis_instruction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the CIS instruction

        Gets all the tags from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_instruction_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_cis_instruction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the CIS instruction

        Gets all the tags from the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_instruction_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_cis_instruction_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_instruction_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_instruction_id is not None:
            _path_params['CisInstructionId'] = cis_instruction_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_cis_line(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the CIS line

        Gets all the tags from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_line_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_cis_line_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the CIS line

        Gets all the tags from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_line_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_cis_line_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the CIS line

        Gets all the tags from the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_line_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_cis_line_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_line_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_line_id is not None:
            _path_params['CisLineId'] = cis_line_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_cis_line_type(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the CIS line type

        Gets all the tags from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_line_type_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_cis_line_type_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the CIS line type

        Gets all the tags from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_line_type_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_cis_line_type_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the CIS line type

        Gets all the tags from the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_cis_line_type_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_cis_line_type_serialize(
        self,
        employer_id,
        cis_line_type_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if cis_line_type_id is not None:
            _path_params['CisLineTypeId'] = cis_line_type_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_employee(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all employee tags

        Gets all the tags from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employee_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_employee_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all employee tags

        Gets all the tags from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employee_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_employee_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all employee tags

        Gets all the tags from the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employee_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_employee_serialize(
        self,
        employer_id,
        employee_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_employee_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all employee revision tags

        Gets all the tags from the employee revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employee_revision_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_employee_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all employee revision tags

        Gets all the tags from the employee revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employee_revision_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_employee_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all employee revision tags

        Gets all the tags from the employee revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employee_revision_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_employee_revision_serialize(
        self,
        employer_id,
        employee_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/Tags/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_employer(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all employer tags

        Gets all the tags from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_employer_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all employer tags

        Gets all the tags from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_employer_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all employer tags

        Gets all the tags from the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_employer_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_employer_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all employer revision tags

        Gets all the tags from the employer revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employer_revision_serialize(
            employer_id=employer_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_employer_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all employer revision tags

        Gets all the tags from the employer revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employer_revision_serialize(
            employer_id=employer_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_employer_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all employer revision tags

        Gets all the tags from the employer revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_employer_revision_serialize(
            employer_id=employer_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_employer_revision_serialize(
        self,
        employer_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Tags/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_holiday_scheme(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the holiday scheme

        Gets all the tags from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_holiday_scheme_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the holiday scheme

        Gets all the tags from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_holiday_scheme_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the holiday scheme

        Gets all the tags from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_holiday_scheme_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_holiday_scheme_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all holiday scheme revision tags

        Gets all the tags from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_holiday_scheme_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all holiday scheme revision tags

        Gets all the tags from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_holiday_scheme_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all holiday scheme revision tags

        Gets all the tags from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_holiday_scheme_revision_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_journal_line(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get tags from journal line

        Gets all tags from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_journal_line_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_journal_line_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get tags from journal line

        Gets all tags from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_journal_line_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_journal_line_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get tags from journal line

        Gets all tags from the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_journal_line_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_journal_line_serialize(
        self,
        employer_id,
        journal_line_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if journal_line_id is not None:
            _path_params['JournalLineId'] = journal_line_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_pay_code(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay code tags

        Gets all the tags from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_code_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_pay_code_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay code tags

        Gets all the tags from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_code_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_pay_code_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay code tags

        Gets all the tags from the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_code_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_pay_code_serialize(
        self,
        employer_id,
        pay_code_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_code_id is not None:
            _path_params['PayCodeId'] = pay_code_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PayCode/{PayCodeId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_pay_instruction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the pay instruction

        Gets all the tags from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_instruction_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_pay_instruction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the pay instruction

        Gets all the tags from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_instruction_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_pay_instruction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the pay instruction

        Gets all the tags from the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_instruction_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_pay_instruction_serialize(
        self,
        employer_id,
        employee_id,
        pay_instruction_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_instruction_id is not None:
            _path_params['PayInstructionId'] = pay_instruction_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_pay_line(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the pay line

        Gets all the tags from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_line_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_pay_line_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the pay line

        Gets all the tags from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_line_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_pay_line_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the pay line

        Gets all the tags from the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_line_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_pay_line_serialize(
        self,
        employer_id,
        employee_id,
        pay_line_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_line_id is not None:
            _path_params['PayLineId'] = pay_line_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_pay_run(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay run tags

        Gets all the tags from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_run_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_pay_run_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay run tags

        Gets all the tags from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_run_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_pay_run_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay run tags

        Gets all the tags from the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_run_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_pay_run_serialize(
        self,
        employer_id,
        pay_schedule_id,
        pay_run_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if pay_run_id is not None:
            _path_params['PayRunId'] = pay_run_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_pay_schedule(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all pay schedule tags

        Gets all the tags from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_schedule_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_pay_schedule_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all pay schedule tags

        Gets all the tags from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_schedule_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_pay_schedule_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pay schedule tags

        Gets all the tags from the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_pay_schedule_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_pay_schedule_serialize(
        self,
        employer_id,
        pay_schedule_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_permission(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get tags from Permission

        Gets all tags from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_permission_serialize(
            permission_id=permission_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_permission_with_http_info(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get tags from Permission

        Gets all tags from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_permission_serialize(
            permission_id=permission_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_permission_without_preload_content(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get tags from Permission

        Gets all tags from the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_permission_serialize(
            permission_id=permission_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_permission_serialize(
        self,
        permission_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if permission_id is not None:
            _path_params['PermissionId'] = permission_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Permission/{PermissionId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_rti_transaction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from RTI transaction

        Gets all the tags from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_rti_transaction_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_rti_transaction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from RTI transaction

        Gets all the tags from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_rti_transaction_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_rti_transaction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from RTI transaction

        Gets all the tags from the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_rti_transaction_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_rti_transaction_serialize(
        self,
        employer_id,
        rti_transaction_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if rti_transaction_id is not None:
            _path_params['RtiTransactionId'] = rti_transaction_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_sub_contractor(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the sub contractor

        Gets all the tags from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_sub_contractor_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_sub_contractor_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the sub contractor

        Gets all the tags from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_sub_contractor_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_sub_contractor_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the sub contractor

        Gets all the tags from the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_sub_contractor_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_sub_contractor_serialize(
        self,
        employer_id,
        sub_contractor_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_sub_contractor_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all sub contractor revision tags

        Gets all the tags from the sub contractor revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_sub_contractor_revision_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_sub_contractor_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all sub contractor revision tags

        Gets all the tags from the sub contractor revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_sub_contractor_revision_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_sub_contractor_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all sub contractor revision tags

        Gets all the tags from the sub contractor revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_sub_contractor_revision_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_sub_contractor_revision_serialize(
        self,
        employer_id,
        sub_contractor_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_third_party_transaction(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get tags from third party transaction

        Gets all tags from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_third_party_transaction_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_third_party_transaction_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get tags from third party transaction

        Gets all tags from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_third_party_transaction_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_third_party_transaction_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get tags from third party transaction

        Gets all tags from the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_third_party_transaction_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_third_party_transaction_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_user(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get tags from user

        Gets all tags from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_user_serialize(
            user_id=user_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_user_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get tags from user

        Gets all tags from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_user_serialize(
            user_id=user_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_user_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get tags from user

        Gets all tags from the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_user_serialize(
            user_id=user_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_user_serialize(
        self,
        user_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/User/{UserId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_cis_instruction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert CIS instruction tag

        Inserts a new tag on the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_instruction_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_cis_instruction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert CIS instruction tag

        Inserts a new tag on the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_instruction_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_cis_instruction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_instruction_id: Annotated[StrictStr, Field(description="The CIS instruction unique identifier. E.g. CIS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert CIS instruction tag

        Inserts a new tag on the CIS instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_instruction_id: The CIS instruction unique identifier. E.g. CIS001 (required)
        :type cis_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_instruction_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_instruction_id=cis_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_cis_instruction_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_instruction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_instruction_id is not None:
            _path_params['CisInstructionId'] = cis_instruction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_cis_line_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert CIS line tag

        Inserts a new tag on the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_line_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_cis_line_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert CIS line tag

        Inserts a new tag on the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_line_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_cis_line_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        cis_line_id: Annotated[StrictStr, Field(description="The CIS line unique identifier. E.g. CISLN001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert CIS line tag

        Inserts a new tag on the CIS line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param cis_line_id: The CIS line unique identifier. E.g. CISLN001 (required)
        :type cis_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_line_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            cis_line_id=cis_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_cis_line_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        cis_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if cis_line_id is not None:
            _path_params['CisLineId'] = cis_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_cis_line_type_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert CIS line type tag

        Inserts a new tag on the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_line_type_tag_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_cis_line_type_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert CIS line type tag

        Inserts a new tag on the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_line_type_tag_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_cis_line_type_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        cis_line_type_id: Annotated[StrictStr, Field(description="The CIS line type unique identifier. E.g. TYPEA")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert CIS line type tag

        Inserts a new tag on the CIS line type

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param cis_line_type_id: The CIS line type unique identifier. E.g. TYPEA (required)
        :type cis_line_type_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_cis_line_type_tag_serialize(
            employer_id=employer_id,
            cis_line_type_id=cis_line_type_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_cis_line_type_tag_serialize(
        self,
        employer_id,
        cis_line_type_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if cis_line_type_id is not None:
            _path_params['CisLineTypeId'] = cis_line_type_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_employee_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert employee tag

        Inserts a new tag on the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_employee_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_employee_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert employee tag

        Inserts a new tag on the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_employee_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_employee_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert employee tag

        Inserts a new tag on the employee

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_employee_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_employee_tag_serialize(
        self,
        employer_id,
        employee_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_employer_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert employer tag

        Inserts a new tag on the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_employer_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_employer_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert employer tag

        Inserts a new tag on the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_employer_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_employer_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert employer tag

        Inserts a new tag on the employer

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_employer_tag_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_employer_tag_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_holiday_scheme_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert holiday scheme tag

        Inserts a new tag on the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_tag_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_holiday_scheme_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert holiday scheme tag

        Inserts a new tag on the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_tag_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_holiday_scheme_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert holiday scheme tag

        Inserts a new tag on the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_tag_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_holiday_scheme_tag_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_journal_line_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert journal line tag

        Inserts a tag on the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_journal_line_tag_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_journal_line_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert journal line tag

        Inserts a tag on the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_journal_line_tag_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_journal_line_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        journal_line_id: Annotated[StrictStr, Field(description="The journal line unique identifier. E.g JL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert journal line tag

        Inserts a tag on the journal line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param journal_line_id: The journal line unique identifier. E.g JL001 (required)
        :type journal_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_journal_line_tag_serialize(
            employer_id=employer_id,
            journal_line_id=journal_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_journal_line_tag_serialize(
        self,
        employer_id,
        journal_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if journal_line_id is not None:
            _path_params['JournalLineId'] = journal_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_pay_code_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert pay code tag

        Inserts a new tag on the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_code_tag_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_pay_code_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert pay code tag

        Inserts a new tag on the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_code_tag_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_pay_code_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_code_id: Annotated[StrictStr, Field(description="The pay code unique identifier. E.g. BASIC")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert pay code tag

        Inserts a new tag on the pay code

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_code_id: The pay code unique identifier. E.g. BASIC (required)
        :type pay_code_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_code_tag_serialize(
            employer_id=employer_id,
            pay_code_id=pay_code_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_pay_code_tag_serialize(
        self,
        employer_id,
        pay_code_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_code_id is not None:
            _path_params['PayCodeId'] = pay_code_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_pay_instruction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert pay instruction tag

        Inserts a new tag on the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_instruction_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_pay_instruction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert pay instruction tag

        Inserts a new tag on the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_instruction_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_pay_instruction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_instruction_id: Annotated[StrictStr, Field(description="The pay instruction unique identifier. E.g. SAL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert pay instruction tag

        Inserts a new tag on the pay instruction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_instruction_id: The pay instruction unique identifier. E.g. SAL001 (required)
        :type pay_instruction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_instruction_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_instruction_id=pay_instruction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_pay_instruction_tag_serialize(
        self,
        employer_id,
        employee_id,
        pay_instruction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_instruction_id is not None:
            _path_params['PayInstructionId'] = pay_instruction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_pay_line_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert pay line tag

        Inserts a new tag on the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_line_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_pay_line_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert pay line tag

        Inserts a new tag on the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_line_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_pay_line_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        employee_id: Annotated[StrictStr, Field(description="The employees' unique identifier. E.g EE001")],
        pay_line_id: Annotated[StrictStr, Field(description="The pay line unique identifier. E.g. PL001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert pay line tag

        Inserts a new tag on the pay line

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param employee_id: The employees' unique identifier. E.g EE001 (required)
        :type employee_id: str
        :param pay_line_id: The pay line unique identifier. E.g. PL001 (required)
        :type pay_line_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_line_tag_serialize(
            employer_id=employer_id,
            employee_id=employee_id,
            pay_line_id=pay_line_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_pay_line_tag_serialize(
        self,
        employer_id,
        employee_id,
        pay_line_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if employee_id is not None:
            _path_params['EmployeeId'] = employee_id
        if pay_line_id is not None:
            _path_params['PayLineId'] = pay_line_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_pay_run_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert pay run tag

        Inserts a new tag on the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_run_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_pay_run_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert pay run tag

        Inserts a new tag on the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_run_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_pay_run_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        pay_run_id: Annotated[StrictStr, Field(description="The pay runs' unique identifier. E.g. PR001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert pay run tag

        Inserts a new tag on the pay run

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param pay_run_id: The pay runs' unique identifier. E.g. PR001 (required)
        :type pay_run_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_run_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            pay_run_id=pay_run_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_pay_run_tag_serialize(
        self,
        employer_id,
        pay_schedule_id,
        pay_run_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if pay_run_id is not None:
            _path_params['PayRunId'] = pay_run_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_pay_schedule_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert pay schedule tag

        Inserts a new tag on the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_schedule_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_pay_schedule_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert pay schedule tag

        Inserts a new tag on the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_schedule_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_pay_schedule_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        pay_schedule_id: Annotated[StrictStr, Field(description="The pay schedules' unique identifier. E.g SCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert pay schedule tag

        Inserts a new tag on the pay schedule

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param pay_schedule_id: The pay schedules' unique identifier. E.g SCH001 (required)
        :type pay_schedule_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_pay_schedule_tag_serialize(
            employer_id=employer_id,
            pay_schedule_id=pay_schedule_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_pay_schedule_tag_serialize(
        self,
        employer_id,
        pay_schedule_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if pay_schedule_id is not None:
            _path_params['PayScheduleId'] = pay_schedule_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_permission_tag(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert Permission tag

        Inserts a tag on the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_permission_tag_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_permission_tag_with_http_info(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert Permission tag

        Inserts a tag on the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_permission_tag_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_permission_tag_without_preload_content(
        self,
        permission_id: Annotated[StrictStr, Field(description="The permission unique identifier. E.g PERM001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert Permission tag

        Inserts a tag on the Permission

        :param permission_id: The permission unique identifier. E.g PERM001 (required)
        :type permission_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_permission_tag_serialize(
            permission_id=permission_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_permission_tag_serialize(
        self,
        permission_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if permission_id is not None:
            _path_params['PermissionId'] = permission_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Permission/{PermissionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_rti_transaction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert RTI transaction tag

        Inserts a new tag on the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_rti_transaction_tag_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_rti_transaction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert RTI transaction tag

        Inserts a new tag on the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_rti_transaction_tag_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_rti_transaction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        rti_transaction_id: Annotated[StrictStr, Field(description="The RTI transaction unique identifier. E.g. FPS001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert RTI transaction tag

        Inserts a new tag on the RTI transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param rti_transaction_id: The RTI transaction unique identifier. E.g. FPS001 (required)
        :type rti_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_rti_transaction_tag_serialize(
            employer_id=employer_id,
            rti_transaction_id=rti_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_rti_transaction_tag_serialize(
        self,
        employer_id,
        rti_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if rti_transaction_id is not None:
            _path_params['RtiTransactionId'] = rti_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_sub_contractor_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert sub contractor tag

        Inserts a new tag on the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_sub_contractor_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_sub_contractor_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert sub contractor tag

        Inserts a new tag on the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_sub_contractor_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_sub_contractor_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        sub_contractor_id: Annotated[StrictStr, Field(description="The sub contractors' unique identifier. E.g SUB001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert sub contractor tag

        Inserts a new tag on the sub contractor

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param sub_contractor_id: The sub contractors' unique identifier. E.g SUB001 (required)
        :type sub_contractor_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_sub_contractor_tag_serialize(
            employer_id=employer_id,
            sub_contractor_id=sub_contractor_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_sub_contractor_tag_serialize(
        self,
        employer_id,
        sub_contractor_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if sub_contractor_id is not None:
            _path_params['SubContractorId'] = sub_contractor_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_third_party_transaction_tag(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """insert third party transaction tag

        Inserts a tag on the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_third_party_transaction_tag_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_third_party_transaction_tag_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """insert third party transaction tag

        Inserts a tag on the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_third_party_transaction_tag_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_third_party_transaction_tag_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        third_party_transaction_id: Annotated[StrictStr, Field(description="The third party transaction unique identifier. E.g TP001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """insert third party transaction tag

        Inserts a tag on the third party transaction

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param third_party_transaction_id: The third party transaction unique identifier. E.g TP001 (required)
        :type third_party_transaction_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_third_party_transaction_tag_serialize(
            employer_id=employer_id,
            third_party_transaction_id=third_party_transaction_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_third_party_transaction_tag_serialize(
        self,
        employer_id,
        third_party_transaction_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if third_party_transaction_id is not None:
            _path_params['ThirdPartyTransactionId'] = third_party_transaction_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_user_tag(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert user tag

        Inserts a tag on the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_user_tag_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_user_tag_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert user tag

        Inserts a tag on the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_user_tag_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_user_tag_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The user unique identifier. E.g USER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert user tag

        Inserts a tag on the user

        :param user_id: The user unique identifier. E.g USER001 (required)
        :type user_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_user_tag_serialize(
            user_id=user_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_user_tag_serialize(
        self,
        user_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/User/{UserId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



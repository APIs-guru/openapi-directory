# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.holiday_scheme import HolidayScheme
from openapi_client.models.link import Link
from openapi_client.models.link_collection import LinkCollection
from openapi_client.models.tag import Tag

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class HolidaySchemeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_holiday_scheme(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an holiday scheme

        Delete the specified holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_holiday_scheme_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an holiday scheme

        Delete the specified holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_holiday_scheme_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an holiday scheme

        Delete the specified holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_holiday_scheme_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_holiday_scheme_revision(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an holiday scheme revision matching the specified revision date.

        Deletes the specified holiday scheme revision for the matching revision date

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_holiday_scheme_revision_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an holiday scheme revision matching the specified revision date.

        Deletes the specified holiday scheme revision for the matching revision date

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_holiday_scheme_revision_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an holiday scheme revision matching the specified revision date.

        Deletes the specified holiday scheme revision for the matching revision date

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_revision_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_holiday_scheme_revision_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_holiday_scheme_revision_by_number(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        revision_number: Annotated[StrictStr, Field(description="The revision number. E.g. 1")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an HolidayScheme revision matching the specified revision number.

        Deletes the specified holiday scheme revision for the matching revision number

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param revision_number: The revision number. E.g. 1 (required)
        :type revision_number: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_revision_by_number_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            revision_number=revision_number,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_holiday_scheme_revision_by_number_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        revision_number: Annotated[StrictStr, Field(description="The revision number. E.g. 1")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an HolidayScheme revision matching the specified revision number.

        Deletes the specified holiday scheme revision for the matching revision number

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param revision_number: The revision number. E.g. 1 (required)
        :type revision_number: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_revision_by_number_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            revision_number=revision_number,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_holiday_scheme_revision_by_number_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        revision_number: Annotated[StrictStr, Field(description="The revision number. E.g. 1")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an HolidayScheme revision matching the specified revision number.

        Deletes the specified holiday scheme revision for the matching revision number

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param revision_number: The revision number. E.g. 1 (required)
        :type revision_number: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_revision_by_number_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            revision_number=revision_number,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_holiday_scheme_revision_by_number_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        revision_number,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if revision_number is not None:
            _path_params['RevisionNumber'] = revision_number
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_holiday_scheme_tag_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete holiday scheme tag

        Deletes a tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_tag_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_holiday_scheme_tag_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete holiday scheme tag

        Deletes a tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_tag_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_holiday_scheme_tag_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete holiday scheme tag

        Deletes a tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_holiday_scheme_tag_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_holiday_scheme_tag_0_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_all_holiday_scheme_tags_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all holiday scheme tags

        Gets all the holiday scheme tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_holiday_scheme_tags_0_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_all_holiday_scheme_tags_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all holiday scheme tags

        Gets all the holiday scheme tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_holiday_scheme_tags_0_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_all_holiday_scheme_tags_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all holiday scheme tags

        Gets all the holiday scheme tags

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_all_holiday_scheme_tags_0_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_all_holiday_scheme_tags_0_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidaySchemes/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_scheme_by_effective_date(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HolidayScheme:
        """Get holiday scheme by effective date.

        Returns the holiday scheme's state at the specified effective date.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_by_effective_date_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_scheme_by_effective_date_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HolidayScheme]:
        """Get holiday scheme by effective date.

        Returns the holiday scheme's state at the specified effective date.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_by_effective_date_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_scheme_by_effective_date_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday scheme by effective date.

        Returns the holiday scheme's state at the specified effective date.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_by_effective_date_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_scheme_by_effective_date_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_scheme_from_employer(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HolidayScheme:
        """Get holiday scheme from employer

        Gets the specified holiday scheme from employer.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_from_employer_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_scheme_from_employer_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HolidayScheme]:
        """Get holiday scheme from employer

        Gets the specified holiday scheme from employer.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_from_employer_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_scheme_from_employer_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday scheme from employer

        Gets the specified holiday scheme from employer.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_from_employer_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_scheme_from_employer_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_scheme_revision_by_number(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        revision_number: Annotated[StrictStr, Field(description="The revision number. E.g. 1")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HolidayScheme:
        """Gets the holiday scheme revision by revision number

        Get the holiday scheme revision matching the specified revision number

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param revision_number: The revision number. E.g. 1 (required)
        :type revision_number: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_revision_by_number_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            revision_number=revision_number,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_scheme_revision_by_number_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        revision_number: Annotated[StrictStr, Field(description="The revision number. E.g. 1")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HolidayScheme]:
        """Gets the holiday scheme revision by revision number

        Get the holiday scheme revision matching the specified revision number

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param revision_number: The revision number. E.g. 1 (required)
        :type revision_number: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_revision_by_number_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            revision_number=revision_number,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_scheme_revision_by_number_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        revision_number: Annotated[StrictStr, Field(description="The revision number. E.g. 1")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets the holiday scheme revision by revision number

        Get the holiday scheme revision matching the specified revision number

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param revision_number: The revision number. E.g. 1 (required)
        :type revision_number: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_revision_by_number_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            revision_number=revision_number,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_scheme_revision_by_number_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        revision_number,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if revision_number is not None:
            _path_params['RevisionNumber'] = revision_number
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_scheme_revisions(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all holiday scheme revisions

        Gets links to all the holiday scheme revisions

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_revisions_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_scheme_revisions_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all holiday scheme revisions

        Gets links to all the holiday scheme revisions

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_revisions_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_scheme_revisions_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all holiday scheme revisions

        Gets links to all the holiday scheme revisions

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_scheme_revisions_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_scheme_revisions_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revisions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_schemes_by_effective_date(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get holiday schemes from employer at a given effective date.

        Get links to all holiday schemes for the employer on specified effective date.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_by_effective_date_serialize(
            employer_id=employer_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_schemes_by_effective_date_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get holiday schemes from employer at a given effective date.

        Get links to all holiday schemes for the employer on specified effective date.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_by_effective_date_serialize(
            employer_id=employer_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_schemes_by_effective_date_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday schemes from employer at a given effective date.

        Get links to all holiday schemes for the employer on specified effective date.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_by_effective_date_serialize(
            employer_id=employer_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_schemes_by_effective_date_serialize(
        self,
        employer_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidaySchemes/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_schemes_from_employer(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get holiday schemes from employer.

        Get links to all holiday schemes for the specified employer.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_from_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_schemes_from_employer_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get holiday schemes from employer.

        Get links to all holiday schemes for the specified employer.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_from_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_schemes_from_employer_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday schemes from employer.

        Get links to all holiday schemes for the specified employer.

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_from_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_schemes_from_employer_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidaySchemes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_holiday_schemes_with_tag_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get holiday schemes with tag

        Gets the holiday scheme with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_with_tag_0_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_holiday_schemes_with_tag_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get holiday schemes with tag

        Gets the holiday scheme with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_with_tag_0_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_holiday_schemes_with_tag_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday schemes with tag

        Gets the holiday scheme with the tag

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_holiday_schemes_with_tag_0_serialize(
            employer_id=employer_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_holiday_schemes_with_tag_0_serialize(
        self,
        employer_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_holiday_scheme_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get holiday scheme tag

        Gets the tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_holiday_scheme_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get holiday scheme tag

        Gets the tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_holiday_scheme_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday scheme tag

        Gets the tag from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_holiday_scheme_0_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tag_from_holiday_scheme_revision_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Get holiday scheme revision tag

        Gets the tag from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_revision_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tag_from_holiday_scheme_revision_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Get holiday scheme revision tag

        Gets the tag from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_revision_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tag_from_holiday_scheme_revision_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get holiday scheme revision tag

        Gets the tag from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tag_from_holiday_scheme_revision_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tag_from_holiday_scheme_revision_0_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_holiday_scheme_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all tags from the holiday scheme

        Gets all the tags from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_holiday_scheme_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all tags from the holiday scheme

        Gets all the tags from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_holiday_scheme_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all tags from the holiday scheme

        Gets all the tags from the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_holiday_scheme_0_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tags_from_holiday_scheme_revision_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LinkCollection:
        """Get all holiday scheme revision tags

        Gets all the tags from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_revision_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tags_from_holiday_scheme_revision_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LinkCollection]:
        """Get all holiday scheme revision tags

        Gets all the tags from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_revision_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tags_from_holiday_scheme_revision_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        effective_date: Annotated[date, Field(description="The effective date to be applied. E.g 2016-04-06")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all holiday scheme revision tags

        Gets all the tags from the holiday scheme revision

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param effective_date: The effective date to be applied. E.g 2016-04-06 (required)
        :type effective_date: date
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tags_from_holiday_scheme_revision_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            effective_date=effective_date,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LinkCollection",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tags_from_holiday_scheme_revision_0_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        effective_date,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if effective_date is not None:
            _path_params['EffectiveDate'] = effective_date
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_holiday_scheme(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HolidayScheme:
        """Patches the holiday scheme

        Patches the specified holiday scheme with the supplied values

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_holiday_scheme_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HolidayScheme]:
        """Patches the holiday scheme

        Patches the specified holiday scheme with the supplied values

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_holiday_scheme_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Patches the holiday scheme

        Patches the specified holiday scheme with the supplied values

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_holiday_scheme_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_holiday_scheme_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        holiday_scheme,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter
        if holiday_scheme is not None:
            _body_params = holiday_scheme


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_holiday_scheme_into_employer(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Link:
        """Create a new holiday scheme

        Create a new holiday scheme object

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_holiday_scheme_into_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Link",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_holiday_scheme_into_employer_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Link]:
        """Create a new holiday scheme

        Create a new holiday scheme object

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_holiday_scheme_into_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Link",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_holiday_scheme_into_employer_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new holiday scheme

        Create a new holiday scheme object

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_holiday_scheme_into_employer_serialize(
            employer_id=employer_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Link",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_holiday_scheme_into_employer_serialize(
        self,
        employer_id,
        authorization,
        api_version,
        holiday_scheme,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter
        if holiday_scheme is not None:
            _body_params = holiday_scheme


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Employer/{EmployerId}/HolidaySchemes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_holiday_scheme_into_employer(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HolidayScheme:
        """Updates the holiday scheme

        Updates the existing specified holiday scheme object

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_into_employer_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_holiday_scheme_into_employer_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HolidayScheme]:
        """Updates the holiday scheme

        Updates the existing specified holiday scheme object

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_into_employer_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_holiday_scheme_into_employer_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        holiday_scheme: Annotated[HolidayScheme, Field(description="The holiday scheme object.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates the holiday scheme

        Updates the existing specified holiday scheme object

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param holiday_scheme: The holiday scheme object. (required)
        :type holiday_scheme: HolidayScheme
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_into_employer_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            authorization=authorization,
            api_version=api_version,
            holiday_scheme=holiday_scheme,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HolidayScheme",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_holiday_scheme_into_employer_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        authorization,
        api_version,
        holiday_scheme,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter
        if holiday_scheme is not None:
            _body_params = holiday_scheme


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_holiday_scheme_tag_0(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tag:
        """Insert holiday scheme tag

        Inserts a new tag on the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_tag_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_holiday_scheme_tag_0_with_http_info(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tag]:
        """Insert holiday scheme tag

        Inserts a new tag on the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_tag_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_holiday_scheme_tag_0_without_preload_content(
        self,
        employer_id: Annotated[StrictStr, Field(description="The employers' unique identifier. E.g ER001")],
        holiday_scheme_id: Annotated[StrictStr, Field(description="The holiday schemes' unique identifier. E.g HOLSCH001")],
        tag_id: Annotated[StrictStr, Field(description="The tag unique identifier. E.g. MyTag")],
        authorization: Annotated[StrictStr, Field(description="The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete.")],
        api_version: Annotated[StrictStr, Field(description="The version of the api to target. Omit or set as &apos;default&apos; to target the current api version.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert holiday scheme tag

        Inserts a new tag on the holiday scheme

        :param employer_id: The employers' unique identifier. E.g ER001 (required)
        :type employer_id: str
        :param holiday_scheme_id: The holiday schemes' unique identifier. E.g HOLSCH001 (required)
        :type holiday_scheme_id: str
        :param tag_id: The tag unique identifier. E.g. MyTag (required)
        :type tag_id: str
        :param authorization: The OAuth 1 authorization header. &apos;Auto&apos; enables auto complete. (required)
        :type authorization: str
        :param api_version: The version of the api to target. Omit or set as &apos;default&apos; to target the current api version. (required)
        :type api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_holiday_scheme_tag_0_serialize(
            employer_id=employer_id,
            holiday_scheme_id=holiday_scheme_id,
            tag_id=tag_id,
            authorization=authorization,
            api_version=api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tag",
            '400': "ErrorModel",
            '401': "ErrorModel",
            '404': "ErrorModel",
            '500': "ErrorModel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_holiday_scheme_tag_0_serialize(
        self,
        employer_id,
        holiday_scheme_id,
        tag_id,
        authorization,
        api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if employer_id is not None:
            _path_params['EmployerId'] = employer_id
        if holiday_scheme_id is not None:
            _path_params['HolidaySchemeId'] = holiday_scheme_id
        if tag_id is not None:
            _path_params['TagId'] = tag_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if api_version is not None:
            _header_params['Api-Version'] = api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DpsMessage1(BaseModel):
    """
    DpsMessage1
    """ # noqa: E501
    form_type: Optional[StrictStr] = Field(default=None, description="The dps messages' form type", alias="FormType")
    issue_date: Optional[date] = Field(default=None, description="The dps messages' issue date", alias="IssueDate")
    last_updated: Optional[datetime] = Field(default=None, description="The dps messages' last updated", alias="LastUpdated")
    message: Optional[StrictStr] = Field(default=None, description="The dps messages' message", alias="Message")
    message_status: Optional[StrictStr] = Field(default=None, description="The dps messages' message status", alias="MessageStatus")
    message_type: Optional[StrictStr] = Field(default=None, description="The dps messages' message type", alias="MessageType")
    processing_result: Optional[StrictStr] = Field(default=None, description="The dps messages' processing result", alias="ProcessingResult")
    retrieve_date: Optional[datetime] = Field(default=None, description="The dps messages' retrieve date", alias="RetrieveDate")
    sequence_number: Optional[StrictInt] = Field(default=None, description="The dps messages' sequence number", alias="SequenceNumber")
    __properties: ClassVar[List[str]] = ["FormType", "IssueDate", "LastUpdated", "Message", "MessageStatus", "MessageType", "ProcessingResult", "RetrieveDate", "SequenceNumber"]

    @field_validator('message_status')
    def message_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Retrieved', 'Applied', 'Unresolved', 'Ignored', 'Information']):
            raise ValueError("must be one of enum values ('Retrieved', 'Applied', 'Unresolved', 'Ignored', 'Information')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DpsMessage1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DpsMessage1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FormType": obj.get("FormType"),
            "IssueDate": obj.get("IssueDate"),
            "LastUpdated": obj.get("LastUpdated"),
            "Message": obj.get("Message"),
            "MessageStatus": obj.get("MessageStatus"),
            "MessageType": obj.get("MessageType"),
            "ProcessingResult": obj.get("ProcessingResult"),
            "RetrieveDate": obj.get("RetrieveDate"),
            "SequenceNumber": obj.get("SequenceNumber")
        })
        return _obj



# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ThirdPartyJobInstruction1(BaseModel):
    """
    ThirdPartyJobInstruction1
    """ # noqa: E501
    employer_href: Optional[StrictStr] = Field(default=None, description="The third party job instructions' employer href", alias="EmployerHref")
    holding_date: Optional[datetime] = Field(default=None, description="The third party job instructions' holding date", alias="HoldingDate")
    instruction_type: Optional[StrictStr] = Field(default=None, description="The third party job instructions' instruction type", alias="InstructionType")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="The third party job instructions' meta data", alias="MetaData")
    pay_load: Optional[StrictStr] = Field(default=None, description="The third party job instructions' pay load", alias="PayLoad")
    __properties: ClassVar[List[str]] = ["EmployerHref", "HoldingDate", "InstructionType", "MetaData", "PayLoad"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThirdPartyJobInstruction1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThirdPartyJobInstruction1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EmployerHref": obj.get("EmployerHref"),
            "HoldingDate": obj.get("HoldingDate"),
            "InstructionType": obj.get("InstructionType"),
            "MetaData": obj.get("MetaData"),
            "PayLoad": obj.get("PayLoad")
        })
        return _obj



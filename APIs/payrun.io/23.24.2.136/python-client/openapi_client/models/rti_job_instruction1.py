# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.employer4 import Employer4
from openapi_client.models.pay_schedule5 import PaySchedule5
from openapi_client.models.rti_transaction import RtiTransaction
from typing import Optional, Set
from typing_extensions import Self

class RtiJobInstruction1(BaseModel):
    """
    RtiJobInstruction1
    """ # noqa: E501
    earlier_tax_year: Optional[StrictInt] = Field(default=None, description="The rti job instructions' earlier tax year", alias="EarlierTaxYear")
    employer: Optional[Employer4] = Field(default=None, alias="Employer")
    final_submission_for_year: Optional[StrictBool] = Field(default=None, description="The rti job instructions' final submission for year", alias="FinalSubmissionForYear")
    generate: Optional[StrictBool] = Field(default=None, description="The rti job instructions' generate", alias="Generate")
    holding_date: Optional[datetime] = Field(default=None, description="The rti job instructions' holding date", alias="HoldingDate")
    late_reason: Optional[StrictStr] = Field(default=None, description="The rti job instructions' late reason", alias="LateReason")
    no_payment_for_period_from: Optional[date] = Field(default=None, description="The rti job instructions' no payment for period from", alias="NoPaymentForPeriodFrom")
    no_payment_for_period_to: Optional[date] = Field(default=None, description="The rti job instructions' no payment for period to", alias="NoPaymentForPeriodTo")
    pay_schedule: Optional[PaySchedule5] = Field(default=None, alias="PaySchedule")
    payment_date: Optional[date] = Field(default=None, description="The rti job instructions' payment date", alias="PaymentDate")
    period_of_inactivity_from: Optional[date] = Field(default=None, description="The rti job instructions' period of inactivity from", alias="PeriodOfInactivityFrom")
    period_of_inactivity_to: Optional[date] = Field(default=None, description="The rti job instructions' period of inactivity to", alias="PeriodOfInactivityTo")
    rti_transaction: Optional[RtiTransaction] = Field(default=None, alias="RtiTransaction")
    rti_type: Optional[StrictStr] = Field(default=None, description="The rti job instructions' rti type", alias="RtiType")
    scheme_ceased: Optional[date] = Field(default=None, description="The rti job instructions' scheme ceased", alias="SchemeCeased")
    tax_month: Optional[StrictInt] = Field(default=None, description="The rti job instructions' tax month", alias="TaxMonth")
    tax_year: Optional[StrictInt] = Field(default=None, description="The rti job instructions' tax year", alias="TaxYear")
    timestamp: Optional[datetime] = Field(default=None, description="The rti job instructions' timestamp", alias="Timestamp")
    transmit: Optional[StrictBool] = Field(default=None, description="The rti job instructions' transmit", alias="Transmit")
    __properties: ClassVar[List[str]] = ["EarlierTaxYear", "Employer", "FinalSubmissionForYear", "Generate", "HoldingDate", "LateReason", "NoPaymentForPeriodFrom", "NoPaymentForPeriodTo", "PaySchedule", "PaymentDate", "PeriodOfInactivityFrom", "PeriodOfInactivityTo", "RtiTransaction", "RtiType", "SchemeCeased", "TaxMonth", "TaxYear", "Timestamp", "Transmit"]

    @field_validator('late_reason')
    def late_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['A', 'B', 'C', 'D', 'F', 'G', 'H']):
            raise ValueError("must be one of enum values ('A', 'B', 'C', 'D', 'F', 'G', 'H')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RtiJobInstruction1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employer
        if self.employer:
            _dict['Employer'] = self.employer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_schedule
        if self.pay_schedule:
            _dict['PaySchedule'] = self.pay_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rti_transaction
        if self.rti_transaction:
            _dict['RtiTransaction'] = self.rti_transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RtiJobInstruction1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EarlierTaxYear": obj.get("EarlierTaxYear"),
            "Employer": Employer4.from_dict(obj["Employer"]) if obj.get("Employer") is not None else None,
            "FinalSubmissionForYear": obj.get("FinalSubmissionForYear"),
            "Generate": obj.get("Generate"),
            "HoldingDate": obj.get("HoldingDate"),
            "LateReason": obj.get("LateReason"),
            "NoPaymentForPeriodFrom": obj.get("NoPaymentForPeriodFrom"),
            "NoPaymentForPeriodTo": obj.get("NoPaymentForPeriodTo"),
            "PaySchedule": PaySchedule5.from_dict(obj["PaySchedule"]) if obj.get("PaySchedule") is not None else None,
            "PaymentDate": obj.get("PaymentDate"),
            "PeriodOfInactivityFrom": obj.get("PeriodOfInactivityFrom"),
            "PeriodOfInactivityTo": obj.get("PeriodOfInactivityTo"),
            "RtiTransaction": RtiTransaction.from_dict(obj["RtiTransaction"]) if obj.get("RtiTransaction") is not None else None,
            "RtiType": obj.get("RtiType"),
            "SchemeCeased": obj.get("SchemeCeased"),
            "TaxMonth": obj.get("TaxMonth"),
            "TaxYear": obj.get("TaxYear"),
            "Timestamp": obj.get("Timestamp"),
            "Transmit": obj.get("Transmit")
        })
        return _obj



# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransformDefinition1(BaseModel):
    """
    TransformDefinition1
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="The transform definitions' active", alias="Active")
    content_type: Optional[StrictStr] = Field(default=None, description="The transform definitions' content type", alias="ContentType")
    definition: Optional[StrictStr] = Field(default=None, description="The transform definitions' definition", alias="Definition")
    definition_type: Optional[StrictStr] = Field(default=None, description="The transform definitions' definition type", alias="DefinitionType")
    readonly: Optional[StrictBool] = Field(default=None, description="The transform definitions' readonly", alias="Readonly")
    supported_reports: Optional[StrictStr] = Field(default=None, description="The transform definitions' supported reports", alias="SupportedReports")
    tax_year: Optional[StrictInt] = Field(default=None, description="The transform definitions' tax year", alias="TaxYear")
    title: Optional[StrictStr] = Field(default=None, description="The transform definitions' title", alias="Title")
    version: Optional[StrictStr] = Field(default=None, description="The transform definitions' version", alias="Version")
    __properties: ClassVar[List[str]] = ["Active", "ContentType", "Definition", "DefinitionType", "Readonly", "SupportedReports", "TaxYear", "Title", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransformDefinition1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransformDefinition1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "ContentType": obj.get("ContentType"),
            "Definition": obj.get("Definition"),
            "DefinitionType": obj.get("DefinitionType"),
            "Readonly": obj.get("Readonly"),
            "SupportedReports": obj.get("SupportedReports"),
            "TaxYear": obj.get("TaxYear"),
            "Title": obj.get("Title"),
            "Version": obj.get("Version")
        })
        return _obj



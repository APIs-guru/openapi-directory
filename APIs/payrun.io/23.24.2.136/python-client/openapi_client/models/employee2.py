# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address import Address
from openapi_client.models.bank_account import BankAccount
from openapi_client.models.employee_partner import EmployeePartner
from openapi_client.models.pay_schedule1 import PaySchedule1
from typing import Optional, Set
from typing_extensions import Self

class Employee2(BaseModel):
    """
    Employee2
    """ # noqa: E501
    ae_assessment_override: Optional[StrictStr] = Field(default=None, description="The employees' a e assessment override", alias="AEAssessmentOverride")
    ae_assessment_override_date: Optional[date] = Field(default=None, description="The employees' a e assessment override date", alias="AEAssessmentOverrideDate")
    ae_exclusion_reason_code: Optional[StrictStr] = Field(default=None, description="The employees' a e exclusion reason code", alias="AEExclusionReasonCode")
    ae_postponement_date: Optional[date] = Field(default=None, description="The employees' a e postponement date", alias="AEPostponementDate")
    address: Optional[Address] = Field(default=None, alias="Address")
    bank_account: Optional[BankAccount] = Field(default=None, alias="BankAccount")
    code: Optional[StrictStr] = Field(default=None, description="The employees' code", alias="Code")
    date_of_birth: Optional[date] = Field(default=None, description="The employees' date of birth", alias="DateOfBirth")
    deactivated: Optional[StrictBool] = Field(default=None, description="The employees' deactivated", alias="Deactivated")
    directorship_appointment_date: Optional[date] = Field(default=None, description="The employees' directorship appointment date", alias="DirectorshipAppointmentDate")
    eea_citizen: Optional[StrictBool] = Field(default=None, description="The employees' e e a citizen", alias="EEACitizen")
    epm6: Optional[StrictBool] = Field(default=None, description="The employees' e p m6", alias="EPM6")
    effective_date: Optional[date] = Field(default=None, description="The employees' effective date", alias="EffectiveDate")
    employee_partner: Optional[EmployeePartner] = Field(default=None, alias="EmployeePartner")
    first_name: Optional[StrictStr] = Field(default=None, description="The employees' the first name", alias="FirstName")
    gender: Optional[StrictStr] = Field(default=None, description="The employees' gender", alias="Gender")
    hours_per_week: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The employees' hours per week", alias="HoursPerWeek")
    initials: Optional[StrictStr] = Field(default=None, description="The employees' initials", alias="Initials")
    irregular_employment: Optional[StrictBool] = Field(default=None, description="The employees' irregular employment", alias="IrregularEmployment")
    is_agency_worker: Optional[StrictBool] = Field(default=None, description="The employees' is agency worker", alias="IsAgencyWorker")
    last_name: Optional[StrictStr] = Field(default=None, description="The employees' last name", alias="LastName")
    leaver_reason: Optional[StrictStr] = Field(default=None, description="The employees' leaver reason", alias="LeaverReason")
    leaving_date: Optional[date] = Field(default=None, description="The employees' leaving date", alias="LeavingDate")
    marital_status: Optional[StrictStr] = Field(default=None, description="The employees' marital status", alias="MaritalStatus")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="The employees' meta data", alias="MetaData")
    middle_name: Optional[StrictStr] = Field(default=None, description="The employees' middle name", alias="MiddleName")
    next_revision_date: Optional[date] = Field(default=None, description="The employees' next revision date", alias="NextRevisionDate")
    ni_number: Optional[StrictStr] = Field(default=None, description="The employees' ni number", alias="NiNumber")
    nic_liability: Optional[StrictStr] = Field(default=None, description="The employees' nic liability", alias="NicLiability")
    off_payroll_worker: Optional[StrictBool] = Field(default=None, description="The employees' off payroll worker", alias="OffPayrollWorker")
    on_strike: Optional[StrictBool] = Field(default=None, description="The employees' on strike", alias="OnStrike")
    p45_issued_date: Optional[date] = Field(default=None, description="The employees' p45 issued date", alias="P45IssuedDate")
    passport_number: Optional[StrictStr] = Field(default=None, description="The employees' passport number", alias="PassportNumber")
    pay_schedule: Optional[PaySchedule1] = Field(default=None, alias="PaySchedule")
    payment_method: Optional[StrictStr] = Field(default=None, description="The employees' payment method", alias="PaymentMethod")
    payment_to_a_non_individual: Optional[StrictBool] = Field(default=None, description="The employees' payment to a non individual", alias="PaymentToANonIndividual")
    region: Optional[StrictStr] = Field(default=None, description="The employees' region", alias="Region")
    revision: Optional[StrictInt] = Field(default=None, description="The employees' revision", alias="Revision")
    rule_exclusions: Optional[StrictStr] = Field(default=None, description="The employees' rule exclusions", alias="RuleExclusions")
    seconded: Optional[StrictStr] = Field(default=None, description="The employees' seconded", alias="Seconded")
    start_date: Optional[date] = Field(default=None, description="The employees' start date", alias="StartDate")
    starter_declaration: Optional[StrictStr] = Field(default=None, description="The employees' starter declaration", alias="StarterDeclaration")
    territory: Optional[StrictStr] = Field(default=None, description="The employees' territory", alias="Territory")
    title: Optional[StrictStr] = Field(default=None, description="The employees' title", alias="Title")
    veteran_period_start_date: Optional[date] = Field(default=None, description="The employees' veteran period start date", alias="VeteranPeriodStartDate")
    working_week: Optional[StrictStr] = Field(default=None, description="The employees' working week", alias="WorkingWeek")
    __properties: ClassVar[List[str]] = ["AEAssessmentOverride", "AEAssessmentOverrideDate", "AEExclusionReasonCode", "AEPostponementDate", "Address", "BankAccount", "Code", "DateOfBirth", "Deactivated", "DirectorshipAppointmentDate", "EEACitizen", "EPM6", "EffectiveDate", "EmployeePartner", "FirstName", "Gender", "HoursPerWeek", "Initials", "IrregularEmployment", "IsAgencyWorker", "LastName", "LeaverReason", "LeavingDate", "MaritalStatus", "MetaData", "MiddleName", "NextRevisionDate", "NiNumber", "NicLiability", "OffPayrollWorker", "OnStrike", "P45IssuedDate", "PassportNumber", "PaySchedule", "PaymentMethod", "PaymentToANonIndividual", "Region", "Revision", "RuleExclusions", "Seconded", "StartDate", "StarterDeclaration", "Territory", "Title", "VeteranPeriodStartDate", "WorkingWeek"]

    @field_validator('ae_assessment_override')
    def ae_assessment_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'OptOut', 'OptIn', 'VoluntaryJoiner', 'ContractualPension', 'CeasedMembership', 'Leaver', 'Excluded']):
            raise ValueError("must be one of enum values ('None', 'OptOut', 'OptIn', 'VoluntaryJoiner', 'ContractualPension', 'CeasedMembership', 'Leaver', 'Excluded')")
        return value

    @field_validator('ae_exclusion_reason_code')
    def ae_exclusion_reason_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OtherNotKnown', 'NotAWorker', 'NotUKWorker', 'TemporaryUKWorker', 'OutsideAgeRange', 'SingleEmployeeDirector', 'CeasedMembershipWithin12Months', 'CeasedMembershipBeyond12Months', 'WorkerWULSWithin12Month', 'WorkerWULSBeyond12Month', 'WorkerInNoticePeriod', 'WorkerTaxProtection']):
            raise ValueError("must be one of enum values ('OtherNotKnown', 'NotAWorker', 'NotUKWorker', 'TemporaryUKWorker', 'OutsideAgeRange', 'SingleEmployeeDirector', 'CeasedMembershipWithin12Months', 'CeasedMembershipBeyond12Months', 'WorkerWULSWithin12Month', 'WorkerWULSBeyond12Month', 'WorkerInNoticePeriod', 'WorkerTaxProtection')")
        return value

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Male', 'Female']):
            raise ValueError("must be one of enum values ('Unknown', 'Male', 'Female')")
        return value

    @field_validator('leaver_reason')
    def leaver_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Resigned', 'Dismissed', 'Redundant', 'Retired', 'Deceased', 'LegalCustody', 'Other']):
            raise ValueError("must be one of enum values ('Resigned', 'Dismissed', 'Redundant', 'Retired', 'Deceased', 'LegalCustody', 'Other')")
        return value

    @field_validator('marital_status')
    def marital_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Single', 'Married', 'Divorced', 'Widowed']):
            raise ValueError("must be one of enum values ('NotSet', 'Single', 'Married', 'Divorced', 'Widowed')")
        return value

    @field_validator('nic_liability')
    def nic_liability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HasOtherJob', 'IsFemaleEntitledToReducedRate', 'IsNotLiable', 'IsContractedOut', 'IsFullyLiable', 'IsApprentice', 'LeaverBeyond6Weeks', 'PaymentAfterLeavingIrregular', 'IsFreePortWorker', 'IsNotLiableForEmployerNi']):
            raise ValueError("must be one of enum values ('HasOtherJob', 'IsFemaleEntitledToReducedRate', 'IsNotLiable', 'IsContractedOut', 'IsFullyLiable', 'IsApprentice', 'LeaverBeyond6Weeks', 'PaymentAfterLeavingIrregular', 'IsFreePortWorker', 'IsNotLiableForEmployerNi')")
        return value

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Cash', 'Cheque', 'BACS', 'FasterPayments', 'Other']):
            raise ValueError("must be one of enum values ('NotSet', 'Cash', 'Cheque', 'BACS', 'FasterPayments', 'Other')")
        return value

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'England', 'Scotland', 'Wales']):
            raise ValueError("must be one of enum values ('NotSet', 'England', 'Scotland', 'Wales')")
        return value

    @field_validator('rule_exclusions')
    def rule_exclusions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'NiMissingPayInstructionRule', 'TaxMissingPayInstructionRule', 'TaxCodeUpliftRule', 'NiSetExpectedLetterRule', 'NiDateOfBirthChangeRetrospectiveCRule', 'NiDefermentStatusChangeRule', 'NiEndContractedOutTransferRule', 'PaymentAfterLeavingTaxCodeRule', 'LeaverEndInstructionsRule', 'P45StudentLoanInstructionRule', 'P45TaxInstructionRule', 'P45YtdTaxRule', 'YtdInstructionRule', 'TaxCodeRegionChangeRule', 'AutoEnrolmentStatusChangeRule', 'EmployeeDeceasedRule', 'BenefitInstructionAutoEndRule']):
            raise ValueError("must be one of enum values ('None', 'NiMissingPayInstructionRule', 'TaxMissingPayInstructionRule', 'TaxCodeUpliftRule', 'NiSetExpectedLetterRule', 'NiDateOfBirthChangeRetrospectiveCRule', 'NiDefermentStatusChangeRule', 'NiEndContractedOutTransferRule', 'PaymentAfterLeavingTaxCodeRule', 'LeaverEndInstructionsRule', 'P45StudentLoanInstructionRule', 'P45TaxInstructionRule', 'P45YtdTaxRule', 'YtdInstructionRule', 'TaxCodeRegionChangeRule', 'AutoEnrolmentStatusChangeRule', 'EmployeeDeceasedRule', 'BenefitInstructionAutoEndRule')")
        return value

    @field_validator('seconded')
    def seconded_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Stay183DaysOrMore', 'StayLessThan183Days', 'InOutUk']):
            raise ValueError("must be one of enum values ('NotSet', 'Stay183DaysOrMore', 'StayLessThan183Days', 'InOutUk')")
        return value

    @field_validator('starter_declaration')
    def starter_declaration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PreviouslyReported', 'A', 'B', 'C']):
            raise ValueError("must be one of enum values ('PreviouslyReported', 'A', 'B', 'C')")
        return value

    @field_validator('territory')
    def territory_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UnitedKingdom']):
            raise ValueError("must be one of enum values ('UnitedKingdom')")
        return value

    @field_validator('working_week')
    def working_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'AllWeekDays', 'Saturday', 'Sunday', 'AllDays']):
            raise ValueError("must be one of enum values ('None', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'AllWeekDays', 'Saturday', 'Sunday', 'AllDays')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Employee2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict['BankAccount'] = self.bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employee_partner
        if self.employee_partner:
            _dict['EmployeePartner'] = self.employee_partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_schedule
        if self.pay_schedule:
            _dict['PaySchedule'] = self.pay_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Employee2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AEAssessmentOverride": obj.get("AEAssessmentOverride"),
            "AEAssessmentOverrideDate": obj.get("AEAssessmentOverrideDate"),
            "AEExclusionReasonCode": obj.get("AEExclusionReasonCode"),
            "AEPostponementDate": obj.get("AEPostponementDate"),
            "Address": Address.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "BankAccount": BankAccount.from_dict(obj["BankAccount"]) if obj.get("BankAccount") is not None else None,
            "Code": obj.get("Code"),
            "DateOfBirth": obj.get("DateOfBirth"),
            "Deactivated": obj.get("Deactivated"),
            "DirectorshipAppointmentDate": obj.get("DirectorshipAppointmentDate"),
            "EEACitizen": obj.get("EEACitizen"),
            "EPM6": obj.get("EPM6"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "EmployeePartner": EmployeePartner.from_dict(obj["EmployeePartner"]) if obj.get("EmployeePartner") is not None else None,
            "FirstName": obj.get("FirstName"),
            "Gender": obj.get("Gender"),
            "HoursPerWeek": obj.get("HoursPerWeek"),
            "Initials": obj.get("Initials"),
            "IrregularEmployment": obj.get("IrregularEmployment"),
            "IsAgencyWorker": obj.get("IsAgencyWorker"),
            "LastName": obj.get("LastName"),
            "LeaverReason": obj.get("LeaverReason"),
            "LeavingDate": obj.get("LeavingDate"),
            "MaritalStatus": obj.get("MaritalStatus"),
            "MetaData": obj.get("MetaData"),
            "MiddleName": obj.get("MiddleName"),
            "NextRevisionDate": obj.get("NextRevisionDate"),
            "NiNumber": obj.get("NiNumber"),
            "NicLiability": obj.get("NicLiability"),
            "OffPayrollWorker": obj.get("OffPayrollWorker"),
            "OnStrike": obj.get("OnStrike"),
            "P45IssuedDate": obj.get("P45IssuedDate"),
            "PassportNumber": obj.get("PassportNumber"),
            "PaySchedule": PaySchedule1.from_dict(obj["PaySchedule"]) if obj.get("PaySchedule") is not None else None,
            "PaymentMethod": obj.get("PaymentMethod"),
            "PaymentToANonIndividual": obj.get("PaymentToANonIndividual"),
            "Region": obj.get("Region"),
            "Revision": obj.get("Revision"),
            "RuleExclusions": obj.get("RuleExclusions"),
            "Seconded": obj.get("Seconded"),
            "StartDate": obj.get("StartDate"),
            "StarterDeclaration": obj.get("StarterDeclaration"),
            "Territory": obj.get("Territory"),
            "Title": obj.get("Title"),
            "VeteranPeriodStartDate": obj.get("VeteranPeriodStartDate"),
            "WorkingWeek": obj.get("WorkingWeek")
        })
        return _obj



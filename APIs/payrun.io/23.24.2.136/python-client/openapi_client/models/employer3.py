# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address1 import Address1
from openapi_client.models.auto_enrolment import AutoEnrolment
from openapi_client.models.bank_account1 import BankAccount1
from openapi_client.models.hmrc_settings import HmrcSettings
from typing import Optional, Set
from typing_extensions import Self

class Employer3(BaseModel):
    """
    Employer3
    """ # noqa: E501
    address: Optional[Address1] = Field(default=None, alias="Address")
    apprenticeship_levy_allowance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The employers' apprenticeship levy allowance", alias="ApprenticeshipLevyAllowance")
    auto_enrolment: Optional[AutoEnrolment] = Field(default=None, alias="AutoEnrolment")
    bacs_service_user_number: Optional[StrictStr] = Field(default=None, description="The employers' bacs service user number", alias="BacsServiceUserNumber")
    bank_account: Optional[BankAccount1] = Field(default=None, alias="BankAccount")
    calculate_apprenticeship_levy: Optional[StrictBool] = Field(default=None, description="The employers' calculate apprenticeship levy", alias="CalculateApprenticeshipLevy")
    claim_employment_allowance: Optional[StrictBool] = Field(default=None, description="The employers' claim employment allowance", alias="ClaimEmploymentAllowance")
    claim_small_employer_relief: Optional[StrictBool] = Field(default=None, description="The employers' claim small employer relief", alias="ClaimSmallEmployerRelief")
    effective_date: Optional[date] = Field(default=None, description="The employers' effective date", alias="EffectiveDate")
    hmrc_settings: Optional[HmrcSettings] = Field(default=None, alias="HmrcSettings")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="The employers' meta data", alias="MetaData")
    name: Optional[StrictStr] = Field(default=None, description="The employers' name", alias="Name")
    next_revision_date: Optional[date] = Field(default=None, description="The employers' next revision date", alias="NextRevisionDate")
    region: Optional[StrictStr] = Field(default=None, description="The employers' region", alias="Region")
    revision: Optional[StrictInt] = Field(default=None, description="The employers' revision", alias="Revision")
    rule_exclusions: Optional[StrictStr] = Field(default=None, description="The employers' rule exclusions", alias="RuleExclusions")
    territory: Optional[StrictStr] = Field(default=None, description="The employers' territory", alias="Territory")
    __properties: ClassVar[List[str]] = ["Address", "ApprenticeshipLevyAllowance", "AutoEnrolment", "BacsServiceUserNumber", "BankAccount", "CalculateApprenticeshipLevy", "ClaimEmploymentAllowance", "ClaimSmallEmployerRelief", "EffectiveDate", "HmrcSettings", "MetaData", "Name", "NextRevisionDate", "Region", "Revision", "RuleExclusions", "Territory"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'England', 'Scotland', 'Wales']):
            raise ValueError("must be one of enum values ('NotSet', 'England', 'Scotland', 'Wales')")
        return value

    @field_validator('rule_exclusions')
    def rule_exclusions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'NiMissingPayInstructionRule', 'TaxMissingPayInstructionRule', 'TaxCodeUpliftRule', 'NiSetExpectedLetterRule', 'NiDateOfBirthChangeRetrospectiveCRule', 'NiDefermentStatusChangeRule', 'NiEndContractedOutTransferRule', 'PaymentAfterLeavingTaxCodeRule', 'LeaverEndInstructionsRule', 'P45StudentLoanInstructionRule', 'P45TaxInstructionRule', 'P45YtdTaxRule', 'YtdInstructionRule', 'TaxCodeRegionChangeRule', 'AutoEnrolmentStatusChangeRule', 'EmployeeDeceasedRule', 'BenefitInstructionAutoEndRule']):
            raise ValueError("must be one of enum values ('None', 'NiMissingPayInstructionRule', 'TaxMissingPayInstructionRule', 'TaxCodeUpliftRule', 'NiSetExpectedLetterRule', 'NiDateOfBirthChangeRetrospectiveCRule', 'NiDefermentStatusChangeRule', 'NiEndContractedOutTransferRule', 'PaymentAfterLeavingTaxCodeRule', 'LeaverEndInstructionsRule', 'P45StudentLoanInstructionRule', 'P45TaxInstructionRule', 'P45YtdTaxRule', 'YtdInstructionRule', 'TaxCodeRegionChangeRule', 'AutoEnrolmentStatusChangeRule', 'EmployeeDeceasedRule', 'BenefitInstructionAutoEndRule')")
        return value

    @field_validator('territory')
    def territory_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UnitedKingdom']):
            raise ValueError("must be one of enum values ('UnitedKingdom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Employer3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_enrolment
        if self.auto_enrolment:
            _dict['AutoEnrolment'] = self.auto_enrolment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict['BankAccount'] = self.bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hmrc_settings
        if self.hmrc_settings:
            _dict['HmrcSettings'] = self.hmrc_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Employer3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": Address1.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "ApprenticeshipLevyAllowance": obj.get("ApprenticeshipLevyAllowance"),
            "AutoEnrolment": AutoEnrolment.from_dict(obj["AutoEnrolment"]) if obj.get("AutoEnrolment") is not None else None,
            "BacsServiceUserNumber": obj.get("BacsServiceUserNumber"),
            "BankAccount": BankAccount1.from_dict(obj["BankAccount"]) if obj.get("BankAccount") is not None else None,
            "CalculateApprenticeshipLevy": obj.get("CalculateApprenticeshipLevy"),
            "ClaimEmploymentAllowance": obj.get("ClaimEmploymentAllowance"),
            "ClaimSmallEmployerRelief": obj.get("ClaimSmallEmployerRelief"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "HmrcSettings": HmrcSettings.from_dict(obj["HmrcSettings"]) if obj.get("HmrcSettings") is not None else None,
            "MetaData": obj.get("MetaData"),
            "Name": obj.get("Name"),
            "NextRevisionDate": obj.get("NextRevisionDate"),
            "Region": obj.get("Region"),
            "Revision": obj.get("Revision"),
            "RuleExclusions": obj.get("RuleExclusions"),
            "Territory": obj.get("Territory")
        })
        return _obj



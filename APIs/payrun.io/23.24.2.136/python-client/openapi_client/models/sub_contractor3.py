# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address2 import Address2
from openapi_client.models.bank_account2 import BankAccount2
from typing import Optional, Set
from typing_extensions import Self

class SubContractor3(BaseModel):
    """
    SubContractor3
    """ # noqa: E501
    address: Optional[Address2] = Field(default=None, alias="Address")
    bank_account: Optional[BankAccount2] = Field(default=None, alias="BankAccount")
    business_type: Optional[StrictStr] = Field(default=None, description="The sub contractors' business type", alias="BusinessType")
    company_name: Optional[StrictStr] = Field(default=None, description="The sub contractors' company name", alias="CompanyName")
    company_registration_number: Optional[StrictStr] = Field(default=None, description="The sub contractors' company registration number", alias="CompanyRegistrationNumber")
    deactivated: Optional[StrictBool] = Field(default=None, description="The sub contractors' deactivated", alias="Deactivated")
    effective_date: Optional[date] = Field(default=None, description="The sub contractors' effective date", alias="EffectiveDate")
    first_name: Optional[StrictStr] = Field(default=None, description="The sub contractors' first name", alias="FirstName")
    initials: Optional[StrictStr] = Field(default=None, description="The sub contractors' initials", alias="Initials")
    last_name: Optional[StrictStr] = Field(default=None, description="The sub contractors' last name", alias="LastName")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="The sub contractors' meta data", alias="MetaData")
    middle_name: Optional[StrictStr] = Field(default=None, description="The sub contractors' middle name", alias="MiddleName")
    next_revision_date: Optional[date] = Field(default=None, description="The sub contractors' next revision date", alias="NextRevisionDate")
    ni_number: Optional[StrictStr] = Field(default=None, description="The sub contractors' ni number", alias="NiNumber")
    partnership_name: Optional[StrictStr] = Field(default=None, description="The sub contractors' partnership name", alias="PartnershipName")
    partnership_unique_tax_reference: Optional[StrictStr] = Field(default=None, description="The sub contractors' partnership unique tax reference", alias="PartnershipUniqueTaxReference")
    pay_frequency: Optional[StrictStr] = Field(default=None, description="The sub contractors' pay frequency", alias="PayFrequency")
    payment_method: Optional[StrictStr] = Field(default=None, description="The sub contractors' payment method", alias="PaymentMethod")
    region: Optional[StrictStr] = Field(default=None, description="The sub contractors' region", alias="Region")
    revision: Optional[StrictInt] = Field(default=None, description="The sub contractors' revision", alias="Revision")
    taxation_status: Optional[StrictStr] = Field(default=None, description="The sub contractors' taxation status", alias="TaxationStatus")
    telephone: Optional[StrictStr] = Field(default=None, description="The sub contractors' telephone", alias="Telephone")
    territory: Optional[StrictStr] = Field(default=None, description="The sub contractors' territory", alias="Territory")
    title: Optional[StrictStr] = Field(default=None, description="The sub contractors' title", alias="Title")
    trading_name: Optional[StrictStr] = Field(default=None, description="The sub contractors' trading name", alias="TradingName")
    unique_tax_reference: Optional[StrictStr] = Field(default=None, description="The sub contractors' unique tax reference", alias="UniqueTaxReference")
    vat_registered: Optional[StrictBool] = Field(default=None, description="The sub contractors' vat registered", alias="VatRegistered")
    vat_registration_number: Optional[StrictStr] = Field(default=None, description="The sub contractors' vat registration number", alias="VatRegistrationNumber")
    verification_date: Optional[datetime] = Field(default=None, description="The sub contractors' verification date", alias="VerificationDate")
    verification_number: Optional[StrictStr] = Field(default=None, description="The sub contractors' verification number", alias="VerificationNumber")
    works_number: Optional[StrictStr] = Field(default=None, description="The sub contractors' works number", alias="WorksNumber")
    __properties: ClassVar[List[str]] = ["Address", "BankAccount", "BusinessType", "CompanyName", "CompanyRegistrationNumber", "Deactivated", "EffectiveDate", "FirstName", "Initials", "LastName", "MetaData", "MiddleName", "NextRevisionDate", "NiNumber", "PartnershipName", "PartnershipUniqueTaxReference", "PayFrequency", "PaymentMethod", "Region", "Revision", "TaxationStatus", "Telephone", "Territory", "Title", "TradingName", "UniqueTaxReference", "VatRegistered", "VatRegistrationNumber", "VerificationDate", "VerificationNumber", "WorksNumber"]

    @field_validator('business_type')
    def business_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SoleTrader', 'Company', 'Partnership', 'Trust']):
            raise ValueError("must be one of enum values ('SoleTrader', 'Company', 'Partnership', 'Trust')")
        return value

    @field_validator('pay_frequency')
    def pay_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Monthly', 'Weekly']):
            raise ValueError("must be one of enum values ('Monthly', 'Weekly')")
        return value

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Cash', 'Cheque', 'BACS', 'FasterPayments', 'Other']):
            raise ValueError("must be one of enum values ('NotSet', 'Cash', 'Cheque', 'BACS', 'FasterPayments', 'Other')")
        return value

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'England', 'Scotland', 'Wales']):
            raise ValueError("must be one of enum values ('NotSet', 'England', 'Scotland', 'Wales')")
        return value

    @field_validator('taxation_status')
    def taxation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unmatched', 'Net', 'Gross']):
            raise ValueError("must be one of enum values ('Unmatched', 'Net', 'Gross')")
        return value

    @field_validator('territory')
    def territory_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UnitedKingdom']):
            raise ValueError("must be one of enum values ('UnitedKingdom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubContractor3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict['BankAccount'] = self.bank_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubContractor3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": Address2.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "BankAccount": BankAccount2.from_dict(obj["BankAccount"]) if obj.get("BankAccount") is not None else None,
            "BusinessType": obj.get("BusinessType"),
            "CompanyName": obj.get("CompanyName"),
            "CompanyRegistrationNumber": obj.get("CompanyRegistrationNumber"),
            "Deactivated": obj.get("Deactivated"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "FirstName": obj.get("FirstName"),
            "Initials": obj.get("Initials"),
            "LastName": obj.get("LastName"),
            "MetaData": obj.get("MetaData"),
            "MiddleName": obj.get("MiddleName"),
            "NextRevisionDate": obj.get("NextRevisionDate"),
            "NiNumber": obj.get("NiNumber"),
            "PartnershipName": obj.get("PartnershipName"),
            "PartnershipUniqueTaxReference": obj.get("PartnershipUniqueTaxReference"),
            "PayFrequency": obj.get("PayFrequency"),
            "PaymentMethod": obj.get("PaymentMethod"),
            "Region": obj.get("Region"),
            "Revision": obj.get("Revision"),
            "TaxationStatus": obj.get("TaxationStatus"),
            "Telephone": obj.get("Telephone"),
            "Territory": obj.get("Territory"),
            "Title": obj.get("Title"),
            "TradingName": obj.get("TradingName"),
            "UniqueTaxReference": obj.get("UniqueTaxReference"),
            "VatRegistered": obj.get("VatRegistered"),
            "VatRegistrationNumber": obj.get("VatRegistrationNumber"),
            "VerificationDate": obj.get("VerificationDate"),
            "VerificationNumber": obj.get("VerificationNumber"),
            "WorksNumber": obj.get("WorksNumber")
        })
        return _obj



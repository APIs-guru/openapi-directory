# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AEAssessment1(BaseModel):
    """
    AEAssessment1
    """ # noqa: E501
    age: Optional[StrictInt] = Field(default=None, description="The a e assessments' age", alias="Age")
    assessment_code: Optional[StrictStr] = Field(default=None, description="The a e assessments' assessment code", alias="AssessmentCode")
    assessment_date: Optional[date] = Field(default=None, description="The a e assessments' assessment date", alias="AssessmentDate")
    assessment_event: Optional[StrictStr] = Field(default=None, description="The a e assessments' assessment event", alias="AssessmentEvent")
    assessment_override: Optional[StrictStr] = Field(default=None, description="The a e assessments' assessment override", alias="AssessmentOverride")
    assessment_result: Optional[StrictStr] = Field(default=None, description="The a e assessments' assessment result", alias="AssessmentResult")
    is_member_of_alternative_pension_scheme: Optional[StrictBool] = Field(default=None, description="The a e assessments' is member of alternative pension scheme", alias="IsMemberOfAlternativePensionScheme")
    opt_out_window_end_date: Optional[date] = Field(default=None, description="The a e assessments' opt out window end date", alias="OptOutWindowEndDate")
    qualifying_earnings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The a e assessments' qualifying earnings", alias="QualifyingEarnings")
    reenrolment_date: Optional[date] = Field(default=None, description="The a e assessments' reenrolment date", alias="ReenrolmentDate")
    state_pension_age: Optional[StrictInt] = Field(default=None, description="The a e assessments' state pension age", alias="StatePensionAge")
    state_pension_date: Optional[date] = Field(default=None, description="The a e assessments' state pension date", alias="StatePensionDate")
    tax_period: Optional[StrictInt] = Field(default=None, description="The a e assessments' tax period", alias="TaxPeriod")
    tax_year: Optional[StrictInt] = Field(default=None, description="The a e assessments' tax year", alias="TaxYear")
    __properties: ClassVar[List[str]] = ["Age", "AssessmentCode", "AssessmentDate", "AssessmentEvent", "AssessmentOverride", "AssessmentResult", "IsMemberOfAlternativePensionScheme", "OptOutWindowEndDate", "QualifyingEarnings", "ReenrolmentDate", "StatePensionAge", "StatePensionDate", "TaxPeriod", "TaxYear"]

    @field_validator('assessment_code')
    def assessment_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Excluded', 'EligibleJobHolder', 'NonEligibleJobHolder', 'EntitledWorker']):
            raise ValueError("must be one of enum values ('Excluded', 'EligibleJobHolder', 'NonEligibleJobHolder', 'EntitledWorker')")
        return value

    @field_validator('assessment_event')
    def assessment_event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NonEnrolmentEvent', 'AutomaticEnrolment', 'OptIn', 'VoluntaryJoiner', 'ContractualEnrolment']):
            raise ValueError("must be one of enum values ('NonEnrolmentEvent', 'AutomaticEnrolment', 'OptIn', 'VoluntaryJoiner', 'ContractualEnrolment')")
        return value

    @field_validator('assessment_override')
    def assessment_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'OptOut', 'OptIn', 'VoluntaryJoiner', 'ContractualPension', 'CeasedMembership', 'Leaver', 'Excluded']):
            raise ValueError("must be one of enum values ('None', 'OptOut', 'OptIn', 'VoluntaryJoiner', 'ContractualPension', 'CeasedMembership', 'Leaver', 'Excluded')")
        return value

    @field_validator('assessment_result')
    def assessment_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Inconclusive', 'NoChange', 'Enrol', 'Exit']):
            raise ValueError("must be one of enum values ('Inconclusive', 'NoChange', 'Enrol', 'Exit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AEAssessment1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AEAssessment1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Age": obj.get("Age"),
            "AssessmentCode": obj.get("AssessmentCode"),
            "AssessmentDate": obj.get("AssessmentDate"),
            "AssessmentEvent": obj.get("AssessmentEvent"),
            "AssessmentOverride": obj.get("AssessmentOverride"),
            "AssessmentResult": obj.get("AssessmentResult"),
            "IsMemberOfAlternativePensionScheme": obj.get("IsMemberOfAlternativePensionScheme"),
            "OptOutWindowEndDate": obj.get("OptOutWindowEndDate"),
            "QualifyingEarnings": obj.get("QualifyingEarnings"),
            "ReenrolmentDate": obj.get("ReenrolmentDate"),
            "StatePensionAge": obj.get("StatePensionAge"),
            "StatePensionDate": obj.get("StatePensionDate"),
            "TaxPeriod": obj.get("TaxPeriod"),
            "TaxYear": obj.get("TaxYear")
        })
        return _obj



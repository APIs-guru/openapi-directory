# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HmrcSettings(BaseModel):
    """
    The employers' hmrc settings
    """ # noqa: E501
    accounting_office_ref: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' accounting office ref", alias="AccountingOfficeRef")
    cotax_ref: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' c o t a x ref", alias="COTAXRef")
    contact_email: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' contact email", alias="ContactEmail")
    contact_fax: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' contact fax", alias="ContactFax")
    contact_first_name: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' contact first name", alias="ContactFirstName")
    contact_last_name: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' contact last name", alias="ContactLastName")
    contact_telephone: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' contact telephone", alias="ContactTelephone")
    employment_allowance_override: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The hmrc settingss' employment allowance override", alias="EmploymentAllowanceOverride")
    password: Optional[SecretStr] = Field(default=None, description="The hmrc settingss' password", alias="Password")
    sautr: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' s a u t r", alias="SAUTR")
    sender: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' sender", alias="Sender")
    sender_id: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' sender id", alias="SenderId")
    state_aid_sector: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' state aid sector", alias="StateAidSector")
    tax_office_number: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' tax office number", alias="TaxOfficeNumber")
    tax_office_reference: Optional[StrictStr] = Field(default=None, description="The hmrc settingss' tax office reference", alias="TaxOfficeReference")
    __properties: ClassVar[List[str]] = ["AccountingOfficeRef", "COTAXRef", "ContactEmail", "ContactFax", "ContactFirstName", "ContactLastName", "ContactTelephone", "EmploymentAllowanceOverride", "Password", "SAUTR", "Sender", "SenderId", "StateAidSector", "TaxOfficeNumber", "TaxOfficeReference"]

    @field_validator('sender')
    def sender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Employer', 'Individual', 'Company', 'Agent', 'Bureau', 'Partnership', 'Trust', 'Government', 'ActingInCapacity', 'Other']):
            raise ValueError("must be one of enum values ('Employer', 'Individual', 'Company', 'Agent', 'Bureau', 'Partnership', 'Trust', 'Government', 'ActingInCapacity', 'Other')")
        return value

    @field_validator('state_aid_sector')
    def state_aid_sector_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Agriculture', 'FisheriesAquaculture', 'RoadTransport', 'Industrial', 'NotApplicable']):
            raise ValueError("must be one of enum values ('Agriculture', 'FisheriesAquaculture', 'RoadTransport', 'Industrial', 'NotApplicable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HmrcSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HmrcSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountingOfficeRef": obj.get("AccountingOfficeRef"),
            "COTAXRef": obj.get("COTAXRef"),
            "ContactEmail": obj.get("ContactEmail"),
            "ContactFax": obj.get("ContactFax"),
            "ContactFirstName": obj.get("ContactFirstName"),
            "ContactLastName": obj.get("ContactLastName"),
            "ContactTelephone": obj.get("ContactTelephone"),
            "EmploymentAllowanceOverride": obj.get("EmploymentAllowanceOverride"),
            "Password": obj.get("Password"),
            "SAUTR": obj.get("SAUTR"),
            "Sender": obj.get("Sender"),
            "SenderId": obj.get("SenderId"),
            "StateAidSector": obj.get("StateAidSector"),
            "TaxOfficeNumber": obj.get("TaxOfficeNumber"),
            "TaxOfficeReference": obj.get("TaxOfficeReference")
        })
        return _obj



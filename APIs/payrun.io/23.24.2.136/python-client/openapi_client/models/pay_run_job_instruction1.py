# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.employee4 import Employee4
from openapi_client.models.pay_schedule3 import PaySchedule3
from typing import Optional, Set
from typing_extensions import Self

class PayRunJobInstruction1(BaseModel):
    """
    PayRunJobInstruction1
    """ # noqa: E501
    employees: Optional[Employee4] = Field(default=None, alias="Employees")
    end_date: Optional[date] = Field(default=None, description="The pay run job instructions' end date", alias="EndDate")
    holding_date: Optional[datetime] = Field(default=None, description="The pay run job instructions' holding date", alias="HoldingDate")
    is_supplementary: Optional[StrictBool] = Field(default=None, description="The pay run job instructions' is supplementary", alias="IsSupplementary")
    pay_schedule: Optional[PaySchedule3] = Field(default=None, alias="PaySchedule")
    payment_date: Optional[date] = Field(default=None, description="The pay run job instructions' payment date", alias="PaymentDate")
    start_date: Optional[date] = Field(default=None, description="The pay run job instructions' start date", alias="StartDate")
    __properties: ClassVar[List[str]] = ["Employees", "EndDate", "HoldingDate", "IsSupplementary", "PaySchedule", "PaymentDate", "StartDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayRunJobInstruction1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employees
        if self.employees:
            _dict['Employees'] = self.employees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_schedule
        if self.pay_schedule:
            _dict['PaySchedule'] = self.pay_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayRunJobInstruction1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Employees": Employee4.from_dict(obj["Employees"]) if obj.get("Employees") is not None else None,
            "EndDate": obj.get("EndDate"),
            "HoldingDate": obj.get("HoldingDate"),
            "IsSupplementary": obj.get("IsSupplementary"),
            "PaySchedule": PaySchedule3.from_dict(obj["PaySchedule"]) if obj.get("PaySchedule") is not None else None,
            "PaymentDate": obj.get("PaymentDate"),
            "StartDate": obj.get("StartDate")
        })
        return _obj



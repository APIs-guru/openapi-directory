# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.nominal_code3 import NominalCode3
from typing import Optional, Set
from typing_extensions import Self

class PayCode1(BaseModel):
    """
    PayCode1
    """ # noqa: E501
    benefit: Optional[StrictBool] = Field(default=None, description="The pay codes' benefit", alias="Benefit")
    code: Optional[StrictStr] = Field(default=None, description="The pay codes' code", alias="Code")
    description: Optional[StrictStr] = Field(default=None, description="The pay codes' description", alias="Description")
    effective_date: Optional[date] = Field(default=None, description="The pay codes' effective date", alias="EffectiveDate")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="The pay codes' meta data", alias="MetaData")
    next_revision_date: Optional[date] = Field(default=None, description="The pay codes' next revision date", alias="NextRevisionDate")
    niable: Optional[StrictBool] = Field(default=None, description="The pay codes' niable", alias="Niable")
    nominal_code: Optional[NominalCode3] = Field(default=None, alias="NominalCode")
    non_arrestable: Optional[StrictBool] = Field(default=None, description="The pay codes' non arrestable", alias="NonArrestable")
    notional: Optional[StrictBool] = Field(default=None, description="The pay codes' notional", alias="Notional")
    readonly: Optional[StrictBool] = Field(default=None, description="The pay codes' readonly", alias="Readonly")
    region: Optional[StrictStr] = Field(default=None, description="The pay codes' region", alias="Region")
    revision: Optional[StrictInt] = Field(default=None, description="The pay codes' revision", alias="Revision")
    taxable: Optional[StrictBool] = Field(default=None, description="The pay codes' taxable", alias="Taxable")
    territory: Optional[StrictStr] = Field(default=None, description="The pay codes' territory", alias="Territory")
    type: Optional[StrictStr] = Field(default=None, description="The pay codes' type", alias="Type")
    __properties: ClassVar[List[str]] = ["Benefit", "Code", "Description", "EffectiveDate", "MetaData", "NextRevisionDate", "Niable", "NominalCode", "NonArrestable", "Notional", "Readonly", "Region", "Revision", "Taxable", "Territory", "Type"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'England', 'Scotland', 'Wales']):
            raise ValueError("must be one of enum values ('NotSet', 'England', 'Scotland', 'Wales')")
        return value

    @field_validator('territory')
    def territory_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UnitedKingdom']):
            raise ValueError("must be one of enum values ('UnitedKingdom')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Payment', 'Deduction']):
            raise ValueError("must be one of enum values ('NotSet', 'Payment', 'Deduction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayCode1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nominal_code
        if self.nominal_code:
            _dict['NominalCode'] = self.nominal_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayCode1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Benefit": obj.get("Benefit"),
            "Code": obj.get("Code"),
            "Description": obj.get("Description"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "MetaData": obj.get("MetaData"),
            "NextRevisionDate": obj.get("NextRevisionDate"),
            "Niable": obj.get("Niable"),
            "NominalCode": NominalCode3.from_dict(obj["NominalCode"]) if obj.get("NominalCode") is not None else None,
            "NonArrestable": obj.get("NonArrestable"),
            "Notional": obj.get("Notional"),
            "Readonly": obj.get("Readonly"),
            "Region": obj.get("Region"),
            "Revision": obj.get("Revision"),
            "Taxable": obj.get("Taxable"),
            "Territory": obj.get("Territory"),
            "Type": obj.get("Type")
        })
        return _obj



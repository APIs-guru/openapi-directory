# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.employer_core import EmployerCore
from typing import Optional, Set
from typing_extensions import Self

class CisTransaction1(BaseModel):
    """
    CisTransaction1
    """ # noqa: E501
    cis_message_type: Optional[StrictStr] = Field(default=None, description="The cis transactions' cis message type", alias="CisMessageType")
    employer_core: Optional[EmployerCore] = Field(default=None, alias="EmployerCore")
    request_data: Optional[StrictStr] = Field(default=None, description="The cis transactions' request data", alias="RequestData")
    response_data: Optional[StrictStr] = Field(default=None, description="The cis transactions' response data", alias="ResponseData")
    tax_year: Optional[StrictInt] = Field(default=None, description="The cis transactions' tax year", alias="TaxYear")
    timestamp: Optional[datetime] = Field(default=None, description="The cis transactions' timestamp", alias="Timestamp")
    transaction_status: Optional[StrictStr] = Field(default=None, description="The cis transactions' transaction status", alias="TransactionStatus")
    transmission_date: Optional[datetime] = Field(default=None, description="The cis transactions' transmission date", alias="TransmissionDate")
    __properties: ClassVar[List[str]] = ["CisMessageType", "EmployerCore", "RequestData", "ResponseData", "TaxYear", "Timestamp", "TransactionStatus", "TransmissionDate"]

    @field_validator('cis_message_type')
    def cis_message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Verification', 'Return']):
            raise ValueError("must be one of enum values ('Verification', 'Return')")
        return value

    @field_validator('transaction_status')
    def transaction_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['New', 'RequestGenerated', 'CompletedWithError', 'CompletedWithSuccess', 'TimeOut']):
            raise ValueError("must be one of enum values ('New', 'RequestGenerated', 'CompletedWithError', 'CompletedWithSuccess', 'TimeOut')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CisTransaction1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employer_core
        if self.employer_core:
            _dict['EmployerCore'] = self.employer_core.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CisTransaction1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CisMessageType": obj.get("CisMessageType"),
            "EmployerCore": EmployerCore.from_dict(obj["EmployerCore"]) if obj.get("EmployerCore") is not None else None,
            "RequestData": obj.get("RequestData"),
            "ResponseData": obj.get("ResponseData"),
            "TaxYear": obj.get("TaxYear"),
            "Timestamp": obj.get("Timestamp"),
            "TransactionStatus": obj.get("TransactionStatus"),
            "TransmissionDate": obj.get("TransmissionDate")
        })
        return _obj



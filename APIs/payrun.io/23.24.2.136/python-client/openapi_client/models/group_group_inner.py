# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.condition_inner import ConditionInner
from openapi_client.models.filter_inner import FilterInner
from openapi_client.models.order_inner import OrderInner
from openapi_client.models.output_inner import OutputInner
from typing import Optional, Set
from typing_extensions import Self

class GroupGroupInner(BaseModel):
    """
    GroupGroupInner
    """ # noqa: E501
    group_name: Optional[StrictStr] = Field(default=None, description="The entity groups' group name", alias="@GroupName")
    item_name: Optional[StrictStr] = Field(default=None, description="The entity groups' item name", alias="@ItemName")
    loop_expression: Optional[StrictStr] = Field(default=None, description="The entity groups' loop expression", alias="@LoopExpression")
    predicate: Optional[StrictStr] = Field(default=None, description="The entity groups' predicate", alias="@Predicate")
    selector: Optional[StrictStr] = Field(default=None, description="The entity groups' selector", alias="@Selector")
    unique_key_variable: Optional[StrictStr] = Field(default=None, description="The entity groups' unique key variable", alias="@UniqueKeyVariable")
    condition: Optional[List[ConditionInner]] = Field(default=None, description="The entity groups' conditions", alias="Condition")
    filter: Optional[List[FilterInner]] = Field(default=None, description="The entity groups' filters", alias="Filter")
    order: Optional[List[OrderInner]] = Field(default=None, description="The entity groups' ordering", alias="Order")
    output: Optional[List[OutputInner]] = Field(default=None, description="The entity groups' outputs", alias="Output")
    __properties: ClassVar[List[str]] = ["@GroupName", "@ItemName", "@LoopExpression", "@Predicate", "@Selector", "@UniqueKeyVariable", "Condition", "Filter", "Order", "Output"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupGroupInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in condition (list)
        _items = []
        if self.condition:
            for _item_condition in self.condition:
                if _item_condition:
                    _items.append(_item_condition.to_dict())
            _dict['Condition'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter (list)
        _items = []
        if self.filter:
            for _item_filter in self.filter:
                if _item_filter:
                    _items.append(_item_filter.to_dict())
            _dict['Filter'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order (list)
        _items = []
        if self.order:
            for _item_order in self.order:
                if _item_order:
                    _items.append(_item_order.to_dict())
            _dict['Order'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output (list)
        _items = []
        if self.output:
            for _item_output in self.output:
                if _item_output:
                    _items.append(_item_output.to_dict())
            _dict['Output'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupGroupInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@GroupName": obj.get("@GroupName"),
            "@ItemName": obj.get("@ItemName"),
            "@LoopExpression": obj.get("@LoopExpression"),
            "@Predicate": obj.get("@Predicate"),
            "@Selector": obj.get("@Selector"),
            "@UniqueKeyVariable": obj.get("@UniqueKeyVariable"),
            "Condition": [ConditionInner.from_dict(_item) for _item in obj["Condition"]] if obj.get("Condition") is not None else None,
            "Filter": [FilterInner.from_dict(_item) for _item in obj["Filter"]] if obj.get("Filter") is not None else None,
            "Order": [OrderInner.from_dict(_item) for _item in obj["Order"]] if obj.get("Order") is not None else None,
            "Output": [OutputInner.from_dict(_item) for _item in obj["Output"]] if obj.get("Output") is not None else None
        })
        return _obj



# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CisLine1(BaseModel):
    """
    CisLine1
    """ # noqa: E501
    cis_deduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cis lines' cis deduction", alias="CisDeduction")
    cis_line_type: Optional[StrictStr] = Field(default=None, description="The cis lines' cis line type", alias="CisLineType")
    description: Optional[StrictStr] = Field(default=None, description="The cis lines' description", alias="Description")
    generated: Optional[datetime] = Field(default=None, description="The cis lines' generated", alias="Generated")
    gross_pay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cis lines' gross pay", alias="GrossPay")
    nominal_code_key: Optional[StrictStr] = Field(default=None, description="The cis lines' nominal code key", alias="NominalCodeKey")
    pay_frequency: Optional[StrictStr] = Field(default=None, description="The cis lines' pay frequency", alias="PayFrequency")
    tax_month: Optional[StrictInt] = Field(default=None, description="The cis lines' tax month", alias="TaxMonth")
    tax_period: Optional[StrictInt] = Field(default=None, description="The cis lines' tax period", alias="TaxPeriod")
    tax_treatment: Optional[StrictStr] = Field(default=None, description="The cis lines' tax treatment", alias="TaxTreatment")
    tax_year: Optional[StrictInt] = Field(default=None, description="The cis lines' tax year", alias="TaxYear")
    uom: Optional[StrictStr] = Field(default=None, description="The cis lines' u o m", alias="UOM")
    unit_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cis lines' unit rate", alias="UnitRate")
    units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cis lines' units", alias="Units")
    vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cis lines' v a t", alias="VAT")
    __properties: ClassVar[List[str]] = ["CisDeduction", "CisLineType", "Description", "Generated", "GrossPay", "NominalCodeKey", "PayFrequency", "TaxMonth", "TaxPeriod", "TaxTreatment", "TaxYear", "UOM", "UnitRate", "Units", "VAT"]

    @field_validator('pay_frequency')
    def pay_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Monthly', 'Weekly']):
            raise ValueError("must be one of enum values ('Monthly', 'Weekly')")
        return value

    @field_validator('tax_treatment')
    def tax_treatment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Taxable', 'NonTaxable', 'Notional', 'Materials']):
            raise ValueError("must be one of enum values ('Taxable', 'NonTaxable', 'Notional', 'Materials')")
        return value

    @field_validator('uom')
    def uom_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year', 'Unit']):
            raise ValueError("must be one of enum values ('NotSet', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year', 'Unit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CisLine1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CisLine1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CisDeduction": obj.get("CisDeduction"),
            "CisLineType": obj.get("CisLineType"),
            "Description": obj.get("Description"),
            "Generated": obj.get("Generated"),
            "GrossPay": obj.get("GrossPay"),
            "NominalCodeKey": obj.get("NominalCodeKey"),
            "PayFrequency": obj.get("PayFrequency"),
            "TaxMonth": obj.get("TaxMonth"),
            "TaxPeriod": obj.get("TaxPeriod"),
            "TaxTreatment": obj.get("TaxTreatment"),
            "TaxYear": obj.get("TaxYear"),
            "UOM": obj.get("UOM"),
            "UnitRate": obj.get("UnitRate"),
            "Units": obj.get("Units"),
            "VAT": obj.get("VAT")
        })
        return _obj



# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.employee_link import EmployeeLink
from openapi_client.models.employer_link import EmployerLink
from openapi_client.models.pay_schedule_link import PayScheduleLink
from typing import Optional, Set
from typing_extensions import Self

class EmployeeSummary1(BaseModel):
    """
    EmployeeSummary1
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="The employee summarys' code", alias="Code")
    effective_date: Optional[date] = Field(default=None, description="The employee summarys' effective date", alias="EffectiveDate")
    employee_link: Optional[EmployeeLink] = Field(default=None, alias="EmployeeLink")
    employer_link: Optional[EmployerLink] = Field(default=None, alias="EmployerLink")
    first_name: Optional[StrictStr] = Field(default=None, description="The employee summarys' first name", alias="FirstName")
    initials: Optional[StrictStr] = Field(default=None, description="The employee summarys' initials", alias="Initials")
    last_name: Optional[StrictStr] = Field(default=None, description="The employee summarys' last name", alias="LastName")
    last_pay_day: Optional[date] = Field(default=None, description="The employee summarys' last pay day", alias="LastPayDay")
    last_pay_day_schedule: Optional[StrictStr] = Field(default=None, description="The employee summarys' last pay day schedule", alias="LastPayDaySchedule")
    last_pay_day_tax_year: Optional[StrictInt] = Field(default=None, description="The employee summarys' last pay day tax year", alias="LastPayDayTaxYear")
    leaving_date: Optional[date] = Field(default=None, description="The employee summarys' leaving date", alias="LeavingDate")
    meta_data: Optional[Dict[str, Any]] = Field(default=None, description="The employee summarys' meta data", alias="MetaData")
    next_pay_day: Optional[date] = Field(default=None, description="The employee summarys' next pay day", alias="NextPayDay")
    next_revision_date: Optional[date] = Field(default=None, description="The employee summarys' next revision date", alias="NextRevisionDate")
    ni_letter: Optional[StrictStr] = Field(default=None, description="The employee summarys' ni letter", alias="NiLetter")
    ni_number: Optional[StrictStr] = Field(default=None, description="The employee summarys' ni number", alias="NiNumber")
    pay_schedule_link: Optional[PayScheduleLink] = Field(default=None, alias="PayScheduleLink")
    pay_schedule_name: Optional[StrictStr] = Field(default=None, description="The employee summarys' pay schedule name", alias="PayScheduleName")
    revision: Optional[StrictInt] = Field(default=None, description="The employee summarys' revision", alias="Revision")
    start_date: Optional[date] = Field(default=None, description="The employee summarys' start date", alias="StartDate")
    status: Optional[StrictStr] = Field(default=None, description="The employee summarys' status", alias="Status")
    tax_basis: Optional[StrictStr] = Field(default=None, description="The employee summarys' tax basis", alias="TaxBasis")
    tax_code: Optional[StrictStr] = Field(default=None, description="The employee summarys' tax code", alias="TaxCode")
    title: Optional[StrictStr] = Field(default=None, description="The employee summarys' title", alias="Title")
    unique_key: Optional[StrictStr] = Field(default=None, description="The employee summarys' unique key", alias="UniqueKey")
    __properties: ClassVar[List[str]] = ["Code", "EffectiveDate", "EmployeeLink", "EmployerLink", "FirstName", "Initials", "LastName", "LastPayDay", "LastPayDaySchedule", "LastPayDayTaxYear", "LeavingDate", "MetaData", "NextPayDay", "NextRevisionDate", "NiLetter", "NiNumber", "PayScheduleLink", "PayScheduleName", "Revision", "StartDate", "Status", "TaxBasis", "TaxCode", "Title", "UniqueKey"]

    @field_validator('tax_basis')
    def tax_basis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Cumulative', 'Week1Month1']):
            raise ValueError("must be one of enum values ('Cumulative', 'Week1Month1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmployeeSummary1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employee_link
        if self.employee_link:
            _dict['EmployeeLink'] = self.employee_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employer_link
        if self.employer_link:
            _dict['EmployerLink'] = self.employer_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_schedule_link
        if self.pay_schedule_link:
            _dict['PayScheduleLink'] = self.pay_schedule_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmployeeSummary1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Code": obj.get("Code"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "EmployeeLink": EmployeeLink.from_dict(obj["EmployeeLink"]) if obj.get("EmployeeLink") is not None else None,
            "EmployerLink": EmployerLink.from_dict(obj["EmployerLink"]) if obj.get("EmployerLink") is not None else None,
            "FirstName": obj.get("FirstName"),
            "Initials": obj.get("Initials"),
            "LastName": obj.get("LastName"),
            "LastPayDay": obj.get("LastPayDay"),
            "LastPayDaySchedule": obj.get("LastPayDaySchedule"),
            "LastPayDayTaxYear": obj.get("LastPayDayTaxYear"),
            "LeavingDate": obj.get("LeavingDate"),
            "MetaData": obj.get("MetaData"),
            "NextPayDay": obj.get("NextPayDay"),
            "NextRevisionDate": obj.get("NextRevisionDate"),
            "NiLetter": obj.get("NiLetter"),
            "NiNumber": obj.get("NiNumber"),
            "PayScheduleLink": PayScheduleLink.from_dict(obj["PayScheduleLink"]) if obj.get("PayScheduleLink") is not None else None,
            "PayScheduleName": obj.get("PayScheduleName"),
            "Revision": obj.get("Revision"),
            "StartDate": obj.get("StartDate"),
            "Status": obj.get("Status"),
            "TaxBasis": obj.get("TaxBasis"),
            "TaxCode": obj.get("TaxCode"),
            "Title": obj.get("Title"),
            "UniqueKey": obj.get("UniqueKey")
        })
        return _obj



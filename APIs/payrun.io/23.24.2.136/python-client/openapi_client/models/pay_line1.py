# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PayLine1(BaseModel):
    """
    PayLine1
    """ # noqa: E501
    calculator: Optional[StrictStr] = Field(default=None, description="The pay lines' calculator", alias="Calculator")
    description: Optional[StrictStr] = Field(default=None, description="The pay lines' description", alias="Description")
    generated: Optional[datetime] = Field(default=None, description="The pay lines' generated", alias="Generated")
    pay_code: Optional[StrictStr] = Field(default=None, description="The pay lines' pay code", alias="PayCode")
    pay_code_type: Optional[StrictStr] = Field(default=None, description="The pay lines' pay code type", alias="PayCodeType")
    pay_run_sequence: Optional[StrictInt] = Field(default=None, description="The pay lines' pay run sequence", alias="PayRunSequence")
    payment_date: Optional[date] = Field(default=None, description="The pay lines' payment date", alias="PaymentDate")
    tax_period: Optional[StrictInt] = Field(default=None, description="The pay lines' tax period", alias="TaxPeriod")
    tax_year: Optional[StrictInt] = Field(default=None, description="The pay lines' tax year", alias="TaxYear")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The pay lines' value", alias="Value")
    __properties: ClassVar[List[str]] = ["Calculator", "Description", "Generated", "PayCode", "PayCodeType", "PayRunSequence", "PaymentDate", "TaxPeriod", "TaxYear", "Value"]

    @field_validator('pay_code_type')
    def pay_code_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NotSet', 'Payment', 'Deduction']):
            raise ValueError("must be one of enum values ('NotSet', 'Payment', 'Deduction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayLine1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayLine1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Calculator": obj.get("Calculator"),
            "Description": obj.get("Description"),
            "Generated": obj.get("Generated"),
            "PayCode": obj.get("PayCode"),
            "PayCodeType": obj.get("PayCodeType"),
            "PayRunSequence": obj.get("PayRunSequence"),
            "PaymentDate": obj.get("PaymentDate"),
            "TaxPeriod": obj.get("TaxPeriod"),
            "TaxYear": obj.get("TaxYear"),
            "Value": obj.get("Value")
        })
        return _obj



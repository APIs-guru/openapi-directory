# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.accrual_pay_codes import AccrualPayCodes
from typing import Optional, Set
from typing_extensions import Self

class HolidayScheme1(BaseModel):
    """
    HolidayScheme1
    """ # noqa: E501
    accrual_pay_codes: Optional[AccrualPayCodes] = Field(default=None, alias="AccrualPayCodes")
    allow_exceed_annual_entitlement: Optional[StrictBool] = Field(default=None, description="The holiday schemes' allow exceed annual entitlement", alias="AllowExceedAnnualEntitlement")
    allow_negative_balance: Optional[StrictBool] = Field(default=None, description="The holiday schemes' allow negative balance", alias="AllowNegativeBalance")
    annual_entitlement_weeks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The holiday schemes' annual entitlement weeks", alias="AnnualEntitlementWeeks")
    bank_holiday_inclusive: Optional[StrictBool] = Field(default=None, description="The holiday schemes' bank holiday inclusive", alias="BankHolidayInclusive")
    code: Optional[StrictStr] = Field(default=None, description="The holiday schemes' code", alias="Code")
    effective_date: Optional[date] = Field(default=None, description="The holiday schemes' effective date", alias="EffectiveDate")
    max_carry_over_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The holiday schemes' max carry over days", alias="MaxCarryOverDays")
    next_revision_date: Optional[date] = Field(default=None, description="The holiday schemes' next revision date", alias="NextRevisionDate")
    offset_payment: Optional[StrictBool] = Field(default=None, description="The holiday schemes' offset payment", alias="OffsetPayment")
    revision: Optional[StrictInt] = Field(default=None, description="The holiday schemes' revision", alias="Revision")
    scheme_ceased_date: Optional[date] = Field(default=None, description="The holiday schemes' scheme ceased date", alias="SchemeCeasedDate")
    scheme_key: Optional[StrictStr] = Field(default=None, description="The holiday schemes' scheme key", alias="SchemeKey")
    scheme_name: Optional[StrictStr] = Field(default=None, description="The holiday schemes' scheme name", alias="SchemeName")
    year_start_day: Optional[StrictInt] = Field(default=None, description="The holiday schemes' year start day", alias="YearStartDay")
    year_start_month: Optional[StrictInt] = Field(default=None, description="The holiday schemes' year start month", alias="YearStartMonth")
    __properties: ClassVar[List[str]] = ["AccrualPayCodes", "AllowExceedAnnualEntitlement", "AllowNegativeBalance", "AnnualEntitlementWeeks", "BankHolidayInclusive", "Code", "EffectiveDate", "MaxCarryOverDays", "NextRevisionDate", "OffsetPayment", "Revision", "SchemeCeasedDate", "SchemeKey", "SchemeName", "YearStartDay", "YearStartMonth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HolidayScheme1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accrual_pay_codes
        if self.accrual_pay_codes:
            _dict['AccrualPayCodes'] = self.accrual_pay_codes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HolidayScheme1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccrualPayCodes": AccrualPayCodes.from_dict(obj["AccrualPayCodes"]) if obj.get("AccrualPayCodes") is not None else None,
            "AllowExceedAnnualEntitlement": obj.get("AllowExceedAnnualEntitlement"),
            "AllowNegativeBalance": obj.get("AllowNegativeBalance"),
            "AnnualEntitlementWeeks": obj.get("AnnualEntitlementWeeks"),
            "BankHolidayInclusive": obj.get("BankHolidayInclusive"),
            "Code": obj.get("Code"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "MaxCarryOverDays": obj.get("MaxCarryOverDays"),
            "NextRevisionDate": obj.get("NextRevisionDate"),
            "OffsetPayment": obj.get("OffsetPayment"),
            "Revision": obj.get("Revision"),
            "SchemeCeasedDate": obj.get("SchemeCeasedDate"),
            "SchemeKey": obj.get("SchemeKey"),
            "SchemeName": obj.get("SchemeName"),
            "YearStartDay": obj.get("YearStartDay"),
            "YearStartMonth": obj.get("YearStartMonth")
        })
        return _obj



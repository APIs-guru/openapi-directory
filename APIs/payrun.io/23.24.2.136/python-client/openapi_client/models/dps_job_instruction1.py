# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.employer2 import Employer2
from openapi_client.models.message import Message
from openapi_client.models.type import Type
from typing import Optional, Set
from typing_extensions import Self

class DpsJobInstruction1(BaseModel):
    """
    DpsJobInstruction1
    """ # noqa: E501
    apply: Optional[StrictBool] = Field(default=None, description="The dps job instructions' apply", alias="Apply")
    employer: Optional[Employer2] = Field(default=None, alias="Employer")
    from_date: Optional[date] = Field(default=None, description="The dps job instructions' from date", alias="FromDate")
    holding_date: Optional[datetime] = Field(default=None, description="The dps job instructions' holding date", alias="HoldingDate")
    message_types: Optional[Type] = Field(default=None, alias="MessageTypes")
    messages_to_process: Optional[Message] = Field(default=None, alias="MessagesToProcess")
    retrieve: Optional[StrictBool] = Field(default=None, description="The dps job instructions' retrieve", alias="Retrieve")
    __properties: ClassVar[List[str]] = ["Apply", "Employer", "FromDate", "HoldingDate", "MessageTypes", "MessagesToProcess", "Retrieve"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DpsJobInstruction1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employer
        if self.employer:
            _dict['Employer'] = self.employer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_types
        if self.message_types:
            _dict['MessageTypes'] = self.message_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of messages_to_process
        if self.messages_to_process:
            _dict['MessagesToProcess'] = self.messages_to_process.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DpsJobInstruction1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Apply": obj.get("Apply"),
            "Employer": Employer2.from_dict(obj["Employer"]) if obj.get("Employer") is not None else None,
            "FromDate": obj.get("FromDate"),
            "HoldingDate": obj.get("HoldingDate"),
            "MessageTypes": Type.from_dict(obj["MessageTypes"]) if obj.get("MessageTypes") is not None else None,
            "MessagesToProcess": Message.from_dict(obj["MessagesToProcess"]) if obj.get("MessagesToProcess") is not None else None,
            "Retrieve": obj.get("Retrieve")
        })
        return _obj



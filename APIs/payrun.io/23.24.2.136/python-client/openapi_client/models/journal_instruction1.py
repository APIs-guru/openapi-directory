# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JournalInstruction1(BaseModel):
    """
    JournalInstruction1
    """ # noqa: E501
    accounting_type: Optional[StrictStr] = Field(default=None, description="The journal instructions' accounting type", alias="AccountingType")
    description: Optional[StrictStr] = Field(default=None, description="The journal instructions' description", alias="Description")
    end_date: Optional[date] = Field(default=None, description="The journal instructions' end date", alias="EndDate")
    expression: Optional[StrictStr] = Field(default=None, description="The journal instructions' expression", alias="Expression")
    journal_line_tag: Optional[StrictStr] = Field(default=None, description="The journal instructions' journal line tag", alias="JournalLineTag")
    ledger_target: Optional[StrictStr] = Field(default=None, description="The journal instructions' ledger target", alias="LedgerTarget")
    nom_code: Optional[StrictStr] = Field(default=None, description="The journal instructions' nom code", alias="NomCode")
    start_date: Optional[date] = Field(default=None, description="The journal instructions' start date", alias="StartDate")
    sub_nom_code: Optional[StrictStr] = Field(default=None, description="The journal instructions' sub nom code", alias="SubNomCode")
    __properties: ClassVar[List[str]] = ["AccountingType", "Description", "EndDate", "Expression", "JournalLineTag", "LedgerTarget", "NomCode", "StartDate", "SubNomCode"]

    @field_validator('accounting_type')
    def accounting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Credit', 'Debit']):
            raise ValueError("must be one of enum values ('Credit', 'Debit')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JournalInstruction1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JournalInstruction1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountingType": obj.get("AccountingType"),
            "Description": obj.get("Description"),
            "EndDate": obj.get("EndDate"),
            "Expression": obj.get("Expression"),
            "JournalLineTag": obj.get("JournalLineTag"),
            "LedgerTarget": obj.get("LedgerTarget"),
            "NomCode": obj.get("NomCode"),
            "StartDate": obj.get("StartDate"),
            "SubNomCode": obj.get("SubNomCode")
        })
        return _obj



# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pension1 import Pension1
from openapi_client.models.primary_address import PrimaryAddress
from openapi_client.models.secondary_address import SecondaryAddress
from typing import Optional, Set
from typing_extensions import Self

class AutoEnrolment(BaseModel):
    """
    The employers' auto enrolment
    """ # noqa: E501
    pension: Optional[Pension1] = Field(default=None, alias="Pension")
    postponement_date: Optional[date] = Field(default=None, description="The employer auto enrolments' postponement date", alias="PostponementDate")
    primary_address: Optional[PrimaryAddress] = Field(default=None, alias="PrimaryAddress")
    primary_email: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' primary email", alias="PrimaryEmail")
    primary_first_name: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' primary first name", alias="PrimaryFirstName")
    primary_job_title: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' primary job title", alias="PrimaryJobTitle")
    primary_last_name: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' primary last name", alias="PrimaryLastName")
    primary_telephone: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' primary telephone", alias="PrimaryTelephone")
    re_enrolment_day_offset: Optional[StrictInt] = Field(default=None, description="The employer auto enrolments' re enrolment day offset", alias="ReEnrolmentDayOffset")
    re_enrolment_month_offset: Optional[StrictInt] = Field(default=None, description="The employer auto enrolments' re enrolment month offset", alias="ReEnrolmentMonthOffset")
    recent_opt_out_re_enrolment_excluded: Optional[StrictBool] = Field(default=None, description="The employer auto enrolments' recent opt out re enrolment excluded", alias="RecentOptOutReEnrolmentExcluded")
    secondary_address: Optional[SecondaryAddress] = Field(default=None, alias="SecondaryAddress")
    secondary_email: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' secondary email", alias="SecondaryEmail")
    secondary_first_name: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' secondary first name", alias="SecondaryFirstName")
    secondary_job_title: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' secondary job title", alias="SecondaryJobTitle")
    secondary_last_name: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' secondary last name", alias="SecondaryLastName")
    secondary_telephone: Optional[StrictStr] = Field(default=None, description="The employer auto enrolments' secondary telephone", alias="SecondaryTelephone")
    staging_date: Optional[date] = Field(default=None, description="The employer auto enrolments' staging date", alias="StagingDate")
    __properties: ClassVar[List[str]] = ["Pension", "PostponementDate", "PrimaryAddress", "PrimaryEmail", "PrimaryFirstName", "PrimaryJobTitle", "PrimaryLastName", "PrimaryTelephone", "ReEnrolmentDayOffset", "ReEnrolmentMonthOffset", "RecentOptOutReEnrolmentExcluded", "SecondaryAddress", "SecondaryEmail", "SecondaryFirstName", "SecondaryJobTitle", "SecondaryLastName", "SecondaryTelephone", "StagingDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoEnrolment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pension
        if self.pension:
            _dict['Pension'] = self.pension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_address
        if self.primary_address:
            _dict['PrimaryAddress'] = self.primary_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_address
        if self.secondary_address:
            _dict['SecondaryAddress'] = self.secondary_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoEnrolment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Pension": Pension1.from_dict(obj["Pension"]) if obj.get("Pension") is not None else None,
            "PostponementDate": obj.get("PostponementDate"),
            "PrimaryAddress": PrimaryAddress.from_dict(obj["PrimaryAddress"]) if obj.get("PrimaryAddress") is not None else None,
            "PrimaryEmail": obj.get("PrimaryEmail"),
            "PrimaryFirstName": obj.get("PrimaryFirstName"),
            "PrimaryJobTitle": obj.get("PrimaryJobTitle"),
            "PrimaryLastName": obj.get("PrimaryLastName"),
            "PrimaryTelephone": obj.get("PrimaryTelephone"),
            "ReEnrolmentDayOffset": obj.get("ReEnrolmentDayOffset"),
            "ReEnrolmentMonthOffset": obj.get("ReEnrolmentMonthOffset"),
            "RecentOptOutReEnrolmentExcluded": obj.get("RecentOptOutReEnrolmentExcluded"),
            "SecondaryAddress": SecondaryAddress.from_dict(obj["SecondaryAddress"]) if obj.get("SecondaryAddress") is not None else None,
            "SecondaryEmail": obj.get("SecondaryEmail"),
            "SecondaryFirstName": obj.get("SecondaryFirstName"),
            "SecondaryJobTitle": obj.get("SecondaryJobTitle"),
            "SecondaryLastName": obj.get("SecondaryLastName"),
            "SecondaryTelephone": obj.get("SecondaryTelephone"),
            "StagingDate": obj.get("StagingDate")
        })
        return _obj



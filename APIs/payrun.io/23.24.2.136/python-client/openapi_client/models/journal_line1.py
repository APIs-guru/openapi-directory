# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.employee3 import Employee3
from openapi_client.models.pay_run2 import PayRun2
from openapi_client.models.sub_contractor2 import SubContractor2
from typing import Optional, Set
from typing_extensions import Self

class JournalLine1(BaseModel):
    """
    JournalLine1
    """ # noqa: E501
    credit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The journal lines' credit", alias="Credit")
    debit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The journal lines' debit", alias="Debit")
    description: Optional[StrictStr] = Field(default=None, description="The journal lines' description", alias="Description")
    employee: Optional[Employee3] = Field(default=None, alias="Employee")
    generated: Optional[datetime] = Field(default=None, description="The journal lines' generated", alias="Generated")
    grouping: Optional[StrictStr] = Field(default=None, description="The journal lines' grouping", alias="Grouping")
    ledger_target: Optional[StrictStr] = Field(default=None, description="The journal lines' ledger target", alias="LedgerTarget")
    nom_code: Optional[StrictStr] = Field(default=None, description="The journal lines' nom code", alias="NomCode")
    pay_frequency: Optional[StrictStr] = Field(default=None, description="The journal lines' pay frequency", alias="PayFrequency")
    pay_run: Optional[PayRun2] = Field(default=None, alias="PayRun")
    sub_contractor: Optional[SubContractor2] = Field(default=None, alias="SubContractor")
    sub_nom_code: Optional[StrictStr] = Field(default=None, description="The journal lines' sub nom code", alias="SubNomCode")
    tax_period: Optional[StrictInt] = Field(default=None, description="The journal lines' tax period", alias="TaxPeriod")
    tax_year: Optional[StrictInt] = Field(default=None, description="The journal lines' tax year", alias="TaxYear")
    __properties: ClassVar[List[str]] = ["Credit", "Debit", "Description", "Employee", "Generated", "Grouping", "LedgerTarget", "NomCode", "PayFrequency", "PayRun", "SubContractor", "SubNomCode", "TaxPeriod", "TaxYear"]

    @field_validator('pay_frequency')
    def pay_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Weekly', 'Monthly', 'TwoWeekly', 'FourWeekly', 'Yearly']):
            raise ValueError("must be one of enum values ('Weekly', 'Monthly', 'TwoWeekly', 'FourWeekly', 'Yearly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JournalLine1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['Employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_run
        if self.pay_run:
            _dict['PayRun'] = self.pay_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_contractor
        if self.sub_contractor:
            _dict['SubContractor'] = self.sub_contractor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JournalLine1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Credit": obj.get("Credit"),
            "Debit": obj.get("Debit"),
            "Description": obj.get("Description"),
            "Employee": Employee3.from_dict(obj["Employee"]) if obj.get("Employee") is not None else None,
            "Generated": obj.get("Generated"),
            "Grouping": obj.get("Grouping"),
            "LedgerTarget": obj.get("LedgerTarget"),
            "NomCode": obj.get("NomCode"),
            "PayFrequency": obj.get("PayFrequency"),
            "PayRun": PayRun2.from_dict(obj["PayRun"]) if obj.get("PayRun") is not None else None,
            "SubContractor": SubContractor2.from_dict(obj["SubContractor"]) if obj.get("SubContractor") is not None else None,
            "SubNomCode": obj.get("SubNomCode"),
            "TaxPeriod": obj.get("TaxPeriod"),
            "TaxYear": obj.get("TaxYear")
        })
        return _obj



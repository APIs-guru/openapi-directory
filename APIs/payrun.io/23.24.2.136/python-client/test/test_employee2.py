# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.employee2 import Employee2

class TestEmployee2(unittest.TestCase):
    """Employee2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Employee2:
        """Test Employee2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Employee2`
        """
        model = Employee2()
        if include_optional:
            return Employee2(
                ae_assessment_override = 'None',
                ae_assessment_override_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                ae_exclusion_reason_code = 'OtherNotKnown',
                ae_postponement_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                address = openapi_client.models.address.Address(
                    address1 = '', 
                    address2 = '', 
                    address3 = '', 
                    address4 = '', 
                    country = '', 
                    postcode = '', ),
                bank_account = openapi_client.models.bank_account.BankAccount(
                    account_name = '', 
                    account_number = '', 
                    branch_name = '', 
                    reference = '', 
                    sort_code = '', ),
                code = '',
                date_of_birth = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                deactivated = True,
                directorship_appointment_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                eea_citizen = True,
                epm6 = True,
                effective_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                employee_partner = openapi_client.models.employee_partner.EmployeePartner(
                    first_name = '', 
                    initials = '', 
                    last_name = '', 
                    middle_name = '', 
                    ni_number = '', ),
                first_name = '',
                gender = 'Unknown',
                hours_per_week = 1.337,
                initials = '',
                irregular_employment = True,
                is_agency_worker = True,
                last_name = '',
                leaver_reason = 'Resigned',
                leaving_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                marital_status = 'NotSet',
                meta_data = openapi_client.models.meta_data.MetaData(),
                middle_name = '',
                next_revision_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                ni_number = '',
                nic_liability = 'HasOtherJob',
                off_payroll_worker = True,
                on_strike = True,
                p45_issued_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                passport_number = '',
                pay_schedule = openapi_client.models.pay_schedule.PaySchedule(
                    @href = '', 
                    @rel = '', 
                    @title = '', ),
                payment_method = 'NotSet',
                payment_to_a_non_individual = True,
                region = 'NotSet',
                revision = 56,
                rule_exclusions = 'None',
                seconded = 'NotSet',
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                starter_declaration = 'PreviouslyReported',
                territory = 'UnitedKingdom',
                title = '',
                veteran_period_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                working_week = 'None'
            )
        else:
            return Employee2(
        )
        """

    def testEmployee2(self):
        """Test Employee2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

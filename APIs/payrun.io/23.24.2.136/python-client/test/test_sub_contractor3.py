# coding: utf-8

"""
    PayRun.IO

    Open, scableable, transparent payroll API.

    The version of the OpenAPI document: 23.24.2.136
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sub_contractor3 import SubContractor3

class TestSubContractor3(unittest.TestCase):
    """SubContractor3 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubContractor3:
        """Test SubContractor3
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubContractor3`
        """
        model = SubContractor3()
        if include_optional:
            return SubContractor3(
                address = openapi_client.models.address.Address(
                    address1 = '', 
                    address2 = '', 
                    address3 = '', 
                    address4 = '', 
                    country = '', 
                    postcode = '', ),
                bank_account = openapi_client.models.bank_account.BankAccount(
                    account_name = '', 
                    account_number = '', 
                    branch_name = '', 
                    reference = '', 
                    sort_code = '', ),
                business_type = 'SoleTrader',
                company_name = '',
                company_registration_number = '',
                deactivated = True,
                effective_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                first_name = '',
                initials = '',
                last_name = '',
                meta_data = openapi_client.models.meta_data.MetaData(),
                middle_name = '',
                next_revision_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                ni_number = '',
                partnership_name = '',
                partnership_unique_tax_reference = '',
                pay_frequency = 'Monthly',
                payment_method = 'NotSet',
                region = 'NotSet',
                revision = 56,
                taxation_status = 'Unmatched',
                telephone = '',
                territory = 'UnitedKingdom',
                title = '',
                trading_name = '',
                unique_tax_reference = '',
                vat_registered = True,
                vat_registration_number = '',
                verification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                verification_number = '',
                works_number = ''
            )
        else:
            return SubContractor3(
        )
        """

    def testSubContractor3(self):
        """Test SubContractor3"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

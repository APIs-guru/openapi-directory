# coding: utf-8

"""
    doqs.dev | PDF filling API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.bounding_box import BoundingBox
from openapi_client.models.eval import Eval
from typing import Optional, Set
from typing_extensions import Self

class CheckBoxField(BaseModel):
    """
    CheckBoxField
    """ # noqa: E501
    bbox: BoundingBox
    eval: Optional[Eval] = None
    name: Annotated[str, Field(min_length=1, strict=True)]
    page: Annotated[int, Field(strict=True, ge=0)]
    required: Optional[StrictBool] = True
    type: StrictStr
    __properties: ClassVar[List[str]] = ["bbox", "eval", "name", "page", "required", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['check']):
            raise ValueError("must be one of enum values ('check')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckBoxField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bbox
        if self.bbox:
            _dict['bbox'] = self.bbox.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eval
        if self.eval:
            _dict['eval'] = self.eval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckBoxField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bbox": BoundingBox.from_dict(obj["bbox"]) if obj.get("bbox") is not None else None,
            "eval": Eval.from_dict(obj["eval"]) if obj.get("eval") is not None else None,
            "name": obj.get("name"),
            "page": obj.get("page"),
            "required": obj.get("required") if obj.get("required") is not None else True,
            "type": obj.get("type")
        })
        return _obj



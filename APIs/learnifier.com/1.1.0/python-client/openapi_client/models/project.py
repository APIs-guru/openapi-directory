# coding: utf-8

"""
    Learnifier

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    admin_url: Optional[StrictStr] = Field(default=None, description="URL to the page where project administration can be done. Administrative access is still required when accessing the url.", alias="adminUrl")
    country: Optional[StrictStr] = Field(default=None, description="The country code")
    created: Optional[datetime] = Field(default=None, description="The timestamp when this project was created.")
    created_by: Optional[StrictStr] = Field(default=None, description="The id of the user that created the project. If the creator is not known this value is *null*", alias="createdBy")
    design_id: Optional[StrictInt] = Field(default=None, description="The id of the design this project are using or null if no design is used", alias="designId")
    external_id: Optional[StrictStr] = Field(default=None, description="The external id (foreign key). Must not exceed 255 characters.", alias="externalId")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier representing a specific project. Id numbers are never reused.")
    locale: Optional[StrictStr] = Field(default=None, description="The primary locale for this project")
    name: Optional[StrictStr] = Field(default=None, description="The internal name of the project")
    note: Optional[StrictStr] = Field(default=None, description="The internal note field")
    org_id: Optional[StrictInt] = Field(default=None, description="The id of the organization unit this project belongs to", alias="orgId")
    status: Optional[StrictStr] = Field(default=None, description="Project status. Can be either ACTIVATED, NEW or DISABLED")
    timezone: Optional[StrictStr] = Field(default=None, description="The main timezone for the project")
    user_description: Optional[StrictStr] = Field(default=None, description="The description presented to participants. This value can be *null*.", alias="userDescription")
    user_title: Optional[StrictStr] = Field(default=None, description="The title presented to participants", alias="userTitle")
    __properties: ClassVar[List[str]] = ["adminUrl", "country", "created", "createdBy", "designId", "externalId", "id", "locale", "name", "note", "orgId", "status", "timezone", "userDescription", "userTitle"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVATED', 'NEW', 'DISABLED']):
            raise ValueError("must be one of enum values ('ACTIVATED', 'NEW', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminUrl": obj.get("adminUrl"),
            "country": obj.get("country"),
            "created": obj.get("created"),
            "createdBy": obj.get("createdBy"),
            "designId": obj.get("designId"),
            "externalId": obj.get("externalId"),
            "id": obj.get("id"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "note": obj.get("note"),
            "orgId": obj.get("orgId"),
            "status": obj.get("status"),
            "timezone": obj.get("timezone"),
            "userDescription": obj.get("userDescription"),
            "userTitle": obj.get("userTitle")
        })
        return _obj



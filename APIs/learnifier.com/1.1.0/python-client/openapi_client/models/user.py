# coding: utf-8

"""
    Learnifier

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_preferences import UserPreferences
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    authorization_possible: Optional[StrictBool] = Field(default=None, description="True if the user can authorize herself/himself", alias="authorizationPossible")
    display_name: Optional[StrictStr] = Field(default=None, description="Full name of the user", alias="displayName")
    external_id: Optional[StrictStr] = Field(default=None, description="The external id (foreign key). Must not exceed 255 characters.", alias="externalId")
    first_login: Optional[datetime] = Field(default=None, description="The timestamp when the first login was made. This value can be *null*.", alias="firstLogin")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the user (or given name)", alias="firstName")
    hard_lock: Optional[StrictBool] = Field(default=None, description="True if the user is locked and the lock has been set by an administrator", alias="hardLock")
    home_org: Optional[StrictInt] = Field(default=None, description="The primary organization for the user. Must match the id of an Organization Unit.", alias="homeOrg")
    id: Optional[StrictStr] = Field(default=None, description="The id of the user this participation belongs to")
    last_login: Optional[datetime] = Field(default=None, description="The timestamp when the last login was made. This value can be *null*.", alias="lastLogin")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the user (or surname)", alias="lastName")
    locked: Optional[StrictBool] = Field(default=None, description="Lock status. A locked user will not be able to access the platform.")
    prefs: Optional[UserPreferences] = None
    primary_email: Optional[StrictStr] = Field(default=None, description="The primary email for this user. If the user has no email this value is *null*.", alias="primaryEmail")
    __properties: ClassVar[List[str]] = ["authorizationPossible", "displayName", "externalId", "firstLogin", "firstName", "hardLock", "homeOrg", "id", "lastLogin", "lastName", "locked", "prefs", "primaryEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prefs
        if self.prefs:
            _dict['prefs'] = self.prefs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationPossible": obj.get("authorizationPossible"),
            "displayName": obj.get("displayName"),
            "externalId": obj.get("externalId"),
            "firstLogin": obj.get("firstLogin"),
            "firstName": obj.get("firstName"),
            "hardLock": obj.get("hardLock"),
            "homeOrg": obj.get("homeOrg"),
            "id": obj.get("id"),
            "lastLogin": obj.get("lastLogin"),
            "lastName": obj.get("lastName"),
            "locked": obj.get("locked"),
            "prefs": UserPreferences.from_dict(obj["prefs"]) if obj.get("prefs") is not None else None,
            "primaryEmail": obj.get("primaryEmail")
        })
        return _obj



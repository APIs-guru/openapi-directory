# coding: utf-8

"""
    Learnifier

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UserParticipationInfo(BaseModel):
    """
    UserParticipationInfo
    """ # noqa: E501
    access_link: Optional[StrictStr] = Field(default=None, description="A link to access this particular participation. The link requires the user to login. Users that access the platform the first time must set a password. This value is null if this participation is not activated. ", alias="accessLink")
    activated: Optional[StrictBool] = Field(default=None, description="True if this participation has been activated and can be used")
    activities_completed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of activities completed", alias="activitiesCompleted")
    activities_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total number of activities", alias="activitiesTotal")
    error_message: Optional[StrictStr] = Field(default=None, description="An optional error message that may describe why the participation is in error state.", alias="errorMessage")
    expiration: Optional[datetime] = Field(default=None, description="The timestamp when this participation will expire. Expiration never happens if this value is *null*.")
    external_id: Optional[StrictStr] = Field(default=None, description="The external id (foreign key). Must not exceed 255 characters.", alias="externalId")
    first_access: Optional[datetime] = Field(default=None, description="The timestamp when the participant accessed the project for the first time. This value can be null", alias="firstAccess")
    first_activation: Optional[datetime] = Field(default=None, description="The timestamp when this participation was first activated. This value can be null", alias="firstActivation")
    first_mail: Optional[datetime] = Field(default=None, description="The timestamp when the first mail was sent to this participant. This value can be null", alias="firstMail")
    id: Optional[StrictInt] = Field(default=None, description="Participation id")
    in_error: Optional[StrictBool] = Field(default=None, description="True if this participation is in an error state. The user is not able to access participations that are in error state.", alias="inError")
    last_access: Optional[datetime] = Field(default=None, description="The timestamp when the participant accessed the project the last time. This value can be null", alias="lastAccess")
    last_activation: Optional[datetime] = Field(default=None, description="The timestamp when this participation was last activated. This value can be null", alias="lastActivation")
    last_mail: Optional[datetime] = Field(default=None, description="The timestamp when the last mail was sent to this participant. This value can be null", alias="lastMail")
    project_id: Optional[StrictInt] = Field(default=None, description="Project id", alias="projectId")
    project_name: Optional[StrictStr] = Field(default=None, description="The internal name of the project", alias="projectName")
    project_org_id: Optional[StrictInt] = Field(default=None, description="The organization id", alias="projectOrgId")
    project_status: Optional[StrictStr] = Field(default=None, description="Project status. Can be either ACTIVATED, NEW or DISABLED", alias="projectStatus")
    project_thumbnail: Optional[StrictStr] = Field(default=None, description="An url to the project thumbnail. This url can be accessed by anyone.", alias="projectThumbnail")
    project_user_title: Optional[StrictStr] = Field(default=None, description="The title presented to participants", alias="projectUserTitle")
    __properties: ClassVar[List[str]] = ["accessLink", "activated", "activitiesCompleted", "activitiesTotal", "errorMessage", "expiration", "externalId", "firstAccess", "firstActivation", "firstMail", "id", "inError", "lastAccess", "lastActivation", "lastMail", "projectId", "projectName", "projectOrgId", "projectStatus", "projectThumbnail", "projectUserTitle"]

    @field_validator('project_status')
    def project_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVATED', 'NEW', 'DISABLED']):
            raise ValueError("must be one of enum values ('ACTIVATED', 'NEW', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserParticipationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserParticipationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessLink": obj.get("accessLink"),
            "activated": obj.get("activated"),
            "activitiesCompleted": obj.get("activitiesCompleted"),
            "activitiesTotal": obj.get("activitiesTotal"),
            "errorMessage": obj.get("errorMessage"),
            "expiration": obj.get("expiration"),
            "externalId": obj.get("externalId"),
            "firstAccess": obj.get("firstAccess"),
            "firstActivation": obj.get("firstActivation"),
            "firstMail": obj.get("firstMail"),
            "id": obj.get("id"),
            "inError": obj.get("inError"),
            "lastAccess": obj.get("lastAccess"),
            "lastActivation": obj.get("lastActivation"),
            "lastMail": obj.get("lastMail"),
            "projectId": obj.get("projectId"),
            "projectName": obj.get("projectName"),
            "projectOrgId": obj.get("projectOrgId"),
            "projectStatus": obj.get("projectStatus"),
            "projectThumbnail": obj.get("projectThumbnail"),
            "projectUserTitle": obj.get("projectUserTitle")
        })
        return _obj



# coding: utf-8

"""
    Learnifier

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddProject(BaseModel):
    """
    AddProject
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="The country code. Default value will be used if not specified")
    created_by: Optional[StrictStr] = Field(default=None, description="The id of the user that created the project. If the creator is not known this value can be *null* or not specified", alias="createdBy")
    design_id: StrictInt = Field(description="The id of the design this project should be based on", alias="designId")
    locale: Optional[StrictStr] = Field(default=None, description="The primary locale for this project. Default value will be used if not specified")
    name: StrictStr = Field(description="The internal name of the project")
    note: Optional[StrictStr] = Field(default=None, description="The internal note field")
    timezone: Optional[StrictStr] = Field(default=None, description="The main timezone for the project. Do not specify for default timezone")
    user_description: Optional[StrictStr] = Field(default=None, description="The description presented to participants. Do not specify for default value from design", alias="userDescription")
    user_title: Optional[StrictStr] = Field(default=None, description="The title presented to participants. Do not specify for default value from design", alias="userTitle")
    __properties: ClassVar[List[str]] = ["country", "createdBy", "designId", "locale", "name", "note", "timezone", "userDescription", "userTitle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "createdBy": obj.get("createdBy"),
            "designId": obj.get("designId"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "note": obj.get("note"),
            "timezone": obj.get("timezone"),
            "userDescription": obj.get("userDescription"),
            "userTitle": obj.get("userTitle")
        })
        return _obj



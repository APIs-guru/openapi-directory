# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.uk_car_search_facets import UKCarSearchFacets

class TestUKCarSearchFacets(unittest.TestCase):
    """UKCarSearchFacets unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UKCarSearchFacets:
        """Test UKCarSearchFacets
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UKCarSearchFacets`
        """
        model = UKCarSearchFacets()
        if include_optional:
            return UKCarSearchFacets(
                base_exterior_color = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                base_interior_color = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                body_subtype = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                body_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                car_location_city = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                car_location_county = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                car_location_seller_name = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                car_location_street = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                car_location_zip = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                car_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                carfax_1_owner = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                carfax_clean_title = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                city = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                co2_emissions = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                cylinders = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                data_source = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                dealer_id = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                dealer_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                dealership_group_name = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                doors = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                drivetrain = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                engine = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                engine_aspiration = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                engine_block = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                engine_size = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                exterior_color = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                fca_status = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                fuel_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                in_transit = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                insurance_group = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                interior_color = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                make = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                mas_code = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                model = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                num_owners = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                powertrain_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                seating_capacity = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                seller_name = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                seller_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                source = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                state = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                transmission = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                trim = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                vehicle_registration_mark = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                vehicle_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                vrm = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                year = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ]
            )
        else:
            return UKCarSearchFacets(
        )
        """

    def testUKCarSearchFacets(self):
        """Test UKCarSearchFacets"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.rv_search_response import RVSearchResponse

class TestRVSearchResponse(unittest.TestCase):
    """RVSearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RVSearchResponse:
        """Test RVSearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RVSearchResponse`
        """
        model = RVSearchResponse()
        if include_optional:
            return RVSearchResponse(
                facets = [
                    openapi_client.models.rv_search_facets.RVSearchFacets(
                        area = [
                            openapi_client.models.facet_item.FacetItem(
                                count = 56, 
                                item = '', )
                            ], 
                        awnings = [
                            openapi_client.models.facet_item.FacetItem(
                                count = 56, 
                                item = '', )
                            ], 
                        city = [
                            
                            ], 
                        class = [
                            
                            ], 
                        dealer_id = [
                            
                            ], 
                        engine = [
                            
                            ], 
                        exterior_color = [
                            
                            ], 
                        fuel_type = [
                            
                            ], 
                        interior_color = [
                            
                            ], 
                        inventory_type = [
                            
                            ], 
                        length = [
                            
                            ], 
                        make = [
                            
                            ], 
                        model = [
                            
                            ], 
                        seller_name = [
                            
                            ], 
                        sleeps = [
                            
                            ], 
                        slideouts = [
                            
                            ], 
                        source = [
                            
                            ], 
                        state = [
                            
                            ], 
                        transmission = [
                            
                            ], 
                        year = [
                            
                            ], )
                    ],
                listings = [
                    openapi_client.models.rv_base_listing.RVBaseListing(
                        build = openapi_client.models.rv_build.RVBuild(
                            area = '', 
                            class = '', 
                            engine = '', 
                            fuel_type = '', 
                            gvwr = '', 
                            length = '', 
                            made_in = '', 
                            make = '', 
                            model = '', 
                            sleeps = '', 
                            slideouts = '', 
                            transmission = '', 
                            year = 56, ), 
                        dealer = openapi_client.models.nest_dealer.NestDealer(
                            city = '', 
                            country = '', 
                            county = '', 
                            dealer_type = '', 
                            dealership_group_name = '', 
                            id = 56, 
                            latitude = '', 
                            longitude = '', 
                            msa_code = '', 
                            name = '', 
                            phone = '', 
                            seller_email = '', 
                            state = '', 
                            street = '', 
                            website = '', 
                            zip = '', ), 
                        dist = 1.337, 
                        dp_url = '', 
                        exterior_color = '', 
                        first_seen_at = 56, 
                        first_seen_at_date = '', 
                        heading = '', 
                        id = '', 
                        interior_color = '', 
                        inventory_type = '', 
                        last_seen_at = 56, 
                        last_seen_at_date = '', 
                        media = openapi_client.models.listing_nest_media.ListingNestMedia(
                            photo_links = [
                                ''
                                ], 
                            photo_links_cached = [
                                ''
                                ], ), 
                        miles = 56, 
                        msrp = 56, 
                        price = 56, 
                        scraped_at = 1.337, 
                        scraped_at_date = '', 
                        seller_type = '', 
                        source = '', 
                        stock_no = '', 
                        vin = '', )
                    ],
                num_found = 56,
                range_facets = [
                    openapi_client.models.motorcycle_search_range_facets.MotorcycleSearchRangeFacets(
                        miles = [
                            openapi_client.models.range_facet_item.RangeFacetItem(
                                after = 56, 
                                before = 56, 
                                between = 56, 
                                counts = [
                                    openapi_client.models.range_facet_item_counts_inner.RangeFacetItem_counts_inner(
                                        count = 56, 
                                        lower_bound = 56, 
                                        upper_bound = 56, )
                                    ], 
                                end = 56, 
                                gap = 56, 
                                start = 56, )
                            ], 
                        price = [
                            openapi_client.models.range_facet_item.RangeFacetItem(
                                after = 56, 
                                before = 56, 
                                between = 56, 
                                end = 56, 
                                gap = 56, 
                                start = 56, )
                            ], )
                    ],
                stats = [
                    openapi_client.models.motorcycle_search_stats.MotorcycleSearchStats(
                        miles = openapi_client.models.stats_item.StatsItem(
                            count = 56, 
                            max = 56, 
                            mean = 1.337, 
                            median = 1.337, 
                            min = 56, 
                            missing = 56, 
                            stddev = 1.337, 
                            sum = 56, 
                            sum_of_squares = 1.337, ), 
                        price = openapi_client.models.stats_item.StatsItem(
                            count = 56, 
                            max = 56, 
                            mean = 1.337, 
                            median = 1.337, 
                            min = 56, 
                            missing = 56, 
                            stddev = 1.337, 
                            sum = 56, 
                            sum_of_squares = 1.337, ), )
                    ]
            )
        else:
            return RVSearchResponse(
        )
        """

    def testRVSearchResponse(self):
        """Test RVSearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

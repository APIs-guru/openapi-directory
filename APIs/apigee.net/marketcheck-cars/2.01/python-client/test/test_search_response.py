# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_response import SearchResponse

class TestSearchResponse(unittest.TestCase):
    """SearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResponse:
        """Test SearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResponse`
        """
        model = SearchResponse()
        if include_optional:
            return SearchResponse(
                facets = openapi_client.models.car_search_facets.CarSearchFacets(
                    base_exterior_color = [
                        openapi_client.models.facet_item.FacetItem(
                            count = 56, 
                            item = '', )
                        ], 
                    base_interior_color = [
                        openapi_client.models.facet_item.FacetItem(
                            count = 56, 
                            item = '', )
                        ], 
                    body_subtype = [
                        
                        ], 
                    body_type = [
                        
                        ], 
                    car_type = [
                        
                        ], 
                    carfax_1_owner = [
                        
                        ], 
                    carfax_clean_title = [
                        
                        ], 
                    city = [
                        
                        ], 
                    cylinders = [
                        
                        ], 
                    data_source = [
                        
                        ], 
                    dealer_id = [
                        
                        ], 
                    dealer_type = [
                        
                        ], 
                    doors = [
                        
                        ], 
                    drivetrain = [
                        
                        ], 
                    engine = [
                        
                        ], 
                    engine_aspiration = [
                        
                        ], 
                    engine_block = [
                        
                        ], 
                    engine_size = [
                        
                        ], 
                    exterior_color = [
                        
                        ], 
                    fuel_type = [
                        
                        ], 
                    interior_color = [
                        
                        ], 
                    make = [
                        
                        ], 
                    model = [
                        
                        ], 
                    seller_name = [
                        
                        ], 
                    seller_name_o = [
                        
                        ], 
                    seller_type = [
                        
                        ], 
                    source = [
                        
                        ], 
                    state = [
                        
                        ], 
                    transmission = [
                        
                        ], 
                    trim = [
                        
                        ], 
                    trim_o = [
                        
                        ], 
                    trim_r = [
                        
                        ], 
                    vehicle_type = [
                        
                        ], 
                    year = [
                        
                        ], ),
                listings = [
                    openapi_client.models.base_listing.BaseListing(
                        base_ext_color = '', 
                        base_int_color = '', 
                        build = openapi_client.models.build.Build(
                            antibrake_sys = '', 
                            body_subtype = '', 
                            body_type = '', 
                            city_miles = '', 
                            city_mpg = 56, 
                            cylinders = 56, 
                            doors = 56, 
                            drivetrain = '', 
                            engine = '', 
                            engine_aspiration = '', 
                            engine_block = '', 
                            engine_measure = '', 
                            engine_size = 1.337, 
                            fuel_type = '', 
                            highway_miles = '', 
                            highway_mpg = 56, 
                            made_in = '', 
                            make = '', 
                            model = '', 
                            opt_seating = '', 
                            overall_height = '', 
                            overall_length = '', 
                            overall_width = '', 
                            powertrain_type = '', 
                            short_trim = '', 
                            std_seating = '', 
                            steering_type = '', 
                            tank_size = '', 
                            transmission = '', 
                            trim = '', 
                            trim_r = '', 
                            vehicle_type = '', 
                            year = 56, ), 
                        carfax_1_owner = True, 
                        carfax_clean_title = True, 
                        data_source = '', 
                        dealer = openapi_client.models.nest_dealer.NestDealer(
                            city = '', 
                            country = '', 
                            county = '', 
                            dealer_type = '', 
                            dealership_group_name = '', 
                            id = 56, 
                            latitude = '', 
                            longitude = '', 
                            msa_code = '', 
                            name = '', 
                            phone = '', 
                            seller_email = '', 
                            state = '', 
                            street = '', 
                            website = '', 
                            zip = '', ), 
                        dist = 1.337, 
                        dom = 56, 
                        dom_180 = 56, 
                        dom_active = 56, 
                        exterior_color = '', 
                        financing_options = [
                            openapi_client.models.listing_finance.ListingFinance(
                                down_payment = 1.337, 
                                down_payment_percentage = 1.337, 
                                estimated_monthly_payment = 1.337, 
                                loan_apr = 1.337, 
                                loan_term = 56, )
                            ], 
                        first_seen_at = 56, 
                        first_seen_at_date = '', 
                        heading = '', 
                        id = '', 
                        in_transit = True, 
                        interior_color = '', 
                        inventory_type = '', 
                        is_certified = 56, 
                        is_translated = True, 
                        last_seen_at = 56, 
                        last_seen_at_date = '', 
                        leasing_options = [
                            openapi_client.models.listing_lease.ListingLease(
                                down_payment = 1.337, 
                                estimated_monthly_payment = 1.337, 
                                lease_term = 56, )
                            ], 
                        media = openapi_client.models.listing_nest_media.ListingNestMedia(
                            photo_links = [
                                ''
                                ], 
                            photo_links_cached = [
                                ''
                                ], ), 
                        miles = 56, 
                        model_code = '', 
                        msrp = 56, 
                        price = 56, 
                        price_change_percent = 1.337, 
                        ref_miles = '', 
                        ref_miles_dt = 56, 
                        ref_price = '', 
                        ref_price_dt = 56, 
                        scraped_at = 1.337, 
                        scraped_at_date = '', 
                        seller_type = '', 
                        source = '', 
                        stock_no = '', 
                        title_type = '', 
                        vdp_url = '', 
                        vin = '', )
                    ],
                num_found = 56,
                range_facets = openapi_client.models.car_search_range_facets.CarSearchRangeFacets(
                    dom = [
                        openapi_client.models.range_facet_item.RangeFacetItem(
                            after = 56, 
                            before = 56, 
                            between = 56, 
                            counts = [
                                openapi_client.models.range_facet_item_counts_inner.RangeFacetItem_counts_inner(
                                    count = 56, 
                                    lower_bound = 56, 
                                    upper_bound = 56, )
                                ], 
                            end = 56, 
                            gap = 56, 
                            start = 56, )
                        ], 
                    dom_180 = [
                        openapi_client.models.range_facet_item.RangeFacetItem(
                            after = 56, 
                            before = 56, 
                            between = 56, 
                            end = 56, 
                            gap = 56, 
                            start = 56, )
                        ], 
                    dom_active = [
                        
                        ], 
                    finance_down_payment = [
                        
                        ], 
                    finance_emp = [
                        
                        ], 
                    finance_loan_apr = [
                        
                        ], 
                    finance_loan_term = [
                        
                        ], 
                    lease_down_payment = [
                        
                        ], 
                    lease_emp = [
                        
                        ], 
                    lease_term = [
                        
                        ], 
                    miles = [
                        
                        ], 
                    msrp = [
                        
                        ], 
                    price = [
                        
                        ], ),
                stats = openapi_client.models.car_search_stats.CarSearchStats(
                    dom = openapi_client.models.stats_item.StatsItem(
                        count = 56, 
                        max = 56, 
                        mean = 1.337, 
                        median = 1.337, 
                        min = 56, 
                        missing = 56, 
                        stddev = 1.337, 
                        sum = 56, 
                        sum_of_squares = 1.337, ), 
                    dom_180 = openapi_client.models.stats_item.StatsItem(
                        count = 56, 
                        max = 56, 
                        mean = 1.337, 
                        median = 1.337, 
                        min = 56, 
                        missing = 56, 
                        stddev = 1.337, 
                        sum = 56, 
                        sum_of_squares = 1.337, ), 
                    dom_active = , 
                    finance_down_payment = , 
                    finance_down_payment_per = , 
                    finance_emp = , 
                    finance_loan_apr = , 
                    finance_loan_term = , 
                    lease_down_payment = , 
                    lease_emp = , 
                    lease_term = , 
                    miles = , 
                    msrp = , 
                    price = , )
            )
        else:
            return SearchResponse(
        )
        """

    def testSearchResponse(self):
        """Test SearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.neo_vin import NeoVIN

class TestNeoVIN(unittest.TestCase):
    """NeoVIN unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NeoVIN:
        """Test NeoVIN
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NeoVIN`
        """
        model = NeoVIN()
        if include_optional:
            return NeoVIN(
                available_options_details = None,
                body_subtype = '',
                body_type = '',
                city_mpg = 1.337,
                combined_msrp = 1.337,
                created_at = 56,
                created_at_date = '',
                decode_version = 56,
                delivery_charges = 1.337,
                doors = 56,
                drivetrain = '',
                engine = '',
                exterior_color = None,
                features = None,
                fuel_type = '',
                height = 1.337,
                highway_mpg = 1.337,
                installed_equipment = None,
                installed_options_details = None,
                installed_options_msrp = 1.337,
                interior_color = None,
                length = 1.337,
                listing_confidence = '',
                make = '',
                manufacturer_code = '',
                model = '',
                msrp = 1.337,
                options_packages = '',
                package_code = '',
                package_description = '',
                seating_capacity = 1.337,
                squish_vin = '',
                transmission = '',
                transmission_confidence = '',
                transmission_description = '',
                trim = '',
                trim_confidence = '',
                updated_at = 56,
                updated_at_date = '',
                version = '',
                version_confidence = '',
                vin = '',
                weight = 1.337,
                width = 1.337,
                year = 56
            )
        else:
            return NeoVIN(
        )
        """

    def testNeoVIN(self):
        """Test NeoVIN"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.rv_search_facets import RVSearchFacets

class TestRVSearchFacets(unittest.TestCase):
    """RVSearchFacets unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RVSearchFacets:
        """Test RVSearchFacets
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RVSearchFacets`
        """
        model = RVSearchFacets()
        if include_optional:
            return RVSearchFacets(
                area = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                awnings = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                city = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                var_class = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                dealer_id = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                engine = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                exterior_color = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                fuel_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                interior_color = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                inventory_type = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                length = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                make = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                model = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                seller_name = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                sleeps = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                slideouts = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                source = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                state = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                transmission = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ],
                year = [
                    openapi_client.models.facet_item.FacetItem(
                        count = 56, 
                        item = '', )
                    ]
            )
        else:
            return RVSearchFacets(
        )
        """

    def testRVSearchFacets(self):
        """Test RVSearchFacets"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

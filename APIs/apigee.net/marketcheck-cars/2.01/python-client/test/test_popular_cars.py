# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.popular_cars import PopularCars

class TestPopularCars(unittest.TestCase):
    """PopularCars unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PopularCars:
        """Test PopularCars
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PopularCars`
        """
        model = PopularCars()
        if include_optional:
            return PopularCars(
                new_top50 = [
                    openapi_client.models.base_popular.BasePopular(
                        city = '', 
                        counts = '', 
                        dom_stats = openapi_client.models.sales_stats.SalesStats(
                            absolute_mean_deviation = 1.337, 
                            iqr = 1.337, 
                            mean = 1.337, 
                            median = 1.337, 
                            population_standard_deviation = 1.337, 
                            standard_deviation = 1.337, 
                            trimmed_mean = 1.337, 
                            variance = 1.337, 
                            weighted_mean = 1.337, ), 
                        inventory_type = '', 
                        make = '', 
                        miles_stats = openapi_client.models.sales_stats.SalesStats(
                            absolute_mean_deviation = 1.337, 
                            iqr = 1.337, 
                            mean = 1.337, 
                            median = 1.337, 
                            population_standard_deviation = 1.337, 
                            standard_deviation = 1.337, 
                            trimmed_mean = 1.337, 
                            variance = 1.337, 
                            weighted_mean = 1.337, ), 
                        model = '', 
                        price_stats = , 
                        state = '', )
                    ],
                used_top50 = [
                    openapi_client.models.base_popular.BasePopular(
                        city = '', 
                        counts = '', 
                        dom_stats = openapi_client.models.sales_stats.SalesStats(
                            absolute_mean_deviation = 1.337, 
                            iqr = 1.337, 
                            mean = 1.337, 
                            median = 1.337, 
                            population_standard_deviation = 1.337, 
                            standard_deviation = 1.337, 
                            trimmed_mean = 1.337, 
                            variance = 1.337, 
                            weighted_mean = 1.337, ), 
                        inventory_type = '', 
                        make = '', 
                        miles_stats = openapi_client.models.sales_stats.SalesStats(
                            absolute_mean_deviation = 1.337, 
                            iqr = 1.337, 
                            mean = 1.337, 
                            median = 1.337, 
                            population_standard_deviation = 1.337, 
                            standard_deviation = 1.337, 
                            trimmed_mean = 1.337, 
                            variance = 1.337, 
                            weighted_mean = 1.337, ), 
                        model = '', 
                        price_stats = , 
                        state = '', )
                    ]
            )
        else:
            return PopularCars(
        )
        """

    def testPopularCars(self):
        """Test PopularCars"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

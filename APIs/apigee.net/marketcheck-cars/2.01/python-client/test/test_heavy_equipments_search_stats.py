# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.heavy_equipments_search_stats import HeavyEquipmentsSearchStats

class TestHeavyEquipmentsSearchStats(unittest.TestCase):
    """HeavyEquipmentsSearchStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HeavyEquipmentsSearchStats:
        """Test HeavyEquipmentsSearchStats
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HeavyEquipmentsSearchStats`
        """
        model = HeavyEquipmentsSearchStats()
        if include_optional:
            return HeavyEquipmentsSearchStats(
                hours_used = openapi_client.models.stats_item.StatsItem(
                    count = 56, 
                    max = 56, 
                    mean = 1.337, 
                    median = 1.337, 
                    min = 56, 
                    missing = 56, 
                    stddev = 1.337, 
                    sum = 56, 
                    sum_of_squares = 1.337, ),
                miles = openapi_client.models.stats_item.StatsItem(
                    count = 56, 
                    max = 56, 
                    mean = 1.337, 
                    median = 1.337, 
                    min = 56, 
                    missing = 56, 
                    stddev = 1.337, 
                    sum = 56, 
                    sum_of_squares = 1.337, ),
                price = openapi_client.models.stats_item.StatsItem(
                    count = 56, 
                    max = 56, 
                    mean = 1.337, 
                    median = 1.337, 
                    min = 56, 
                    missing = 56, 
                    stddev = 1.337, 
                    sum = 56, 
                    sum_of_squares = 1.337, )
            )
        else:
            return HeavyEquipmentsSearchStats(
        )
        """

    def testHeavyEquipmentsSearchStats(self):
        """Test HeavyEquipmentsSearchStats"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

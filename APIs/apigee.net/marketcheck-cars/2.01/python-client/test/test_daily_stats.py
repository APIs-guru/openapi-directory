# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.daily_stats import DailyStats

class TestDailyStats(unittest.TestCase):
    """DailyStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DailyStats:
        """Test DailyStats
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DailyStats`
        """
        model = DailyStats()
        if include_optional:
            return DailyStats(
                dom = openapi_client.models.daily_stats_nested_json.DailyStatsNestedJson(
                    interquartile_range = 1.337, 
                    mean = 1.337, 
                    median = 1.337, 
                    population_standard_deviation = 1.337, 
                    standard_deviation = 1.337, 
                    trimmed_mean = 1.337, 
                    variance = 1.337, ),
                miles_stats = openapi_client.models.daily_stats_nested_json.DailyStatsNestedJson(
                    interquartile_range = 1.337, 
                    mean = 1.337, 
                    median = 1.337, 
                    population_standard_deviation = 1.337, 
                    standard_deviation = 1.337, 
                    trimmed_mean = 1.337, 
                    variance = 1.337, ),
                price_stats = openapi_client.models.daily_stats_nested_json.DailyStatsNestedJson(
                    interquartile_range = 1.337, 
                    mean = 1.337, 
                    median = 1.337, 
                    population_standard_deviation = 1.337, 
                    standard_deviation = 1.337, 
                    trimmed_mean = 1.337, 
                    variance = 1.337, ),
                units_for_sale = 1.337
            )
        else:
            return DailyStats(
        )
        """

    def testDailyStats(self):
        """Test DailyStats"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

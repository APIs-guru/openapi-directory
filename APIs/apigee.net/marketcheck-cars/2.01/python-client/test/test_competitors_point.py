# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.competitors_point import CompetitorsPoint

class TestCompetitorsPoint(unittest.TestCase):
    """CompetitorsPoint unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompetitorsPoint:
        """Test CompetitorsPoint
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompetitorsPoint`
        """
        model = CompetitorsPoint()
        if include_optional:
            return CompetitorsPoint(
                current_car = openapi_client.models.competitors_car_details.CompetitorsCarDetails(
                    avg_market_value = '', 
                    miles = '', 
                    name = '', 
                    price = '', ),
                same_car_models = [
                    openapi_client.models.competitors_same_cars.CompetitorsSameCars(
                        avg_market_value = 1.337, 
                        avg_miles = 1.337, 
                        avg_price = 1.337, 
                        name = '', )
                    ],
                similar_car_models = [
                    openapi_client.models.competitors_similar_cars.CompetitorsSimilarCars(
                        avg_market_value = 1.337, 
                        avg_miles = 1.337, 
                        avg_price = 1.337, 
                        name = '', )
                    ]
            )
        else:
            return CompetitorsPoint(
        )
        """

    def testCompetitorsPoint(self):
        """Test CompetitorsPoint"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

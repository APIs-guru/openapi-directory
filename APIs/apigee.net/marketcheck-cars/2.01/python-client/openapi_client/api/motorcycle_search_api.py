# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.listing_extra_attributes import ListingExtraAttributes
from openapi_client.models.listing_media import ListingMedia
from openapi_client.models.motorcycle_listing import MotorcycleListing
from openapi_client.models.motorcycle_search_response import MotorcycleSearchResponse
from openapi_client.models.search_auto_complete_response import SearchAutoCompleteResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MotorcycleSearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def listing_motorcycle_id_extra_get(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingExtraAttributes:
        """Long text Motorcycle Listings attributes for Listing with the given id

        Get Motorcycle listing options, features, seller comments

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_extra_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingExtraAttributes",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def listing_motorcycle_id_extra_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingExtraAttributes]:
        """Long text Motorcycle Listings attributes for Listing with the given id

        Get Motorcycle listing options, features, seller comments

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_extra_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingExtraAttributes",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def listing_motorcycle_id_extra_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Long text Motorcycle Listings attributes for Listing with the given id

        Get Motorcycle listing options, features, seller comments

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_extra_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingExtraAttributes",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _listing_motorcycle_id_extra_get_serialize(
        self,
        id,
        api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listing/motorcycle/{id}/extra',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def listing_motorcycle_id_get(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MotorcycleListing:
        """Motorcycle listing by id

        Get a particular Motorcycle listing by its id

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MotorcycleListing",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def listing_motorcycle_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MotorcycleListing]:
        """Motorcycle listing by id

        Get a particular Motorcycle listing by its id

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MotorcycleListing",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def listing_motorcycle_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Motorcycle listing by id

        Get a particular Motorcycle listing by its id

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MotorcycleListing",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _listing_motorcycle_id_get_serialize(
        self,
        id,
        api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listing/motorcycle/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def listing_motorcycle_id_media_get(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListingMedia:
        """Motorcycle listing media by id

        Get Motorcycle listing media (photo, photos) by id

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_media_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingMedia",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def listing_motorcycle_id_media_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListingMedia]:
        """Motorcycle listing media by id

        Get Motorcycle listing media (photo, photos) by id

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_media_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingMedia",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def listing_motorcycle_id_media_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Listing id to get all the listing attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Motorcycle listing media by id

        Get Motorcycle listing media (photo, photos) by id

        :param id: Listing id to get all the listing attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._listing_motorcycle_id_media_get_serialize(
            id=id,
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListingMedia",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _listing_motorcycle_id_media_get_serialize(
        self,
        id,
        api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listing/motorcycle/{id}/media',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_motorcycle_active_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        price_range: Annotated[Optional[StrictStr], Field(description="Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        miles_range: Annotated[Optional[StrictStr], Field(description="Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        msrp_range: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="To search a substring across entire document")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        vin: Annotated[Optional[StrictStr], Field(description="To filter listing on their VIN")] = None,
        taxonomy_vin: Annotated[Optional[StrictStr], Field(description="Taxonomy VIN of the motorcycle")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        stock_no: Annotated[Optional[StrictStr], Field(description="To filter listing on their stock number on lot")] = None,
        source: Annotated[Optional[StrictStr], Field(description="To filter listing on their source")] = None,
        dealer_id: Annotated[Optional[StrictStr], Field(description="Dealer id to filter the listings.")] = None,
        color: Annotated[Optional[StrictStr], Field(description="Color of the vehicle")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        cylinders: Annotated[Optional[StrictStr], Field(description="To filter listing on their cylinders")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        msa_code: Annotated[Optional[StrictStr], Field(description="To filter listing on msa code in which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        last_seen_days: Annotated[Optional[StrictStr], Field(description="Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_days: Annotated[Optional[StrictStr], Field(description="First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MotorcycleSearchResponse:
        """Gets active motorcycle listings for the given search criteria

        This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search motorcycles around a given geo-point within a given radius  2. Search motorcycles for a specific year / make / model or combination of these  3. Search motorcycles matching multiple year, make, model combinatins in the same search request 4. Filter results by most motorcycle specification attributes 5. Search for similar motorcycles by VIN or Taxonomy VIN  6. Filter motorcycles within a given price / miles range 7. Specify a sort order for the results on price / miles / listed date  8. Search motorcycles for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles for your search

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param price_range: Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type price_range: str
        :param miles_range: Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :type miles_range: str
        :param msrp_range: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp_range: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param search_text: To search a substring across entire document
        :type search_text: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param vin: To filter listing on their VIN
        :type vin: str
        :param taxonomy_vin: Taxonomy VIN of the motorcycle
        :type taxonomy_vin: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param stock_no: To filter listing on their stock number on lot
        :type stock_no: str
        :param source: To filter listing on their source
        :type source: str
        :param dealer_id: Dealer id to filter the listings.
        :type dealer_id: str
        :param color: Color of the vehicle
        :type color: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param cylinders: To filter listing on their cylinders
        :type cylinders: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param msa_code: To filter listing on msa code in which they are listed
        :type msa_code: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param last_seen_days: Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type last_seen_days: str
        :param first_seen_days: First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_days: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_motorcycle_active_get_serialize(
            api_key=api_key,
            price_range=price_range,
            miles_range=miles_range,
            msrp_range=msrp_range,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            search_text=search_text,
            year=year,
            make=make,
            model=model,
            trim=trim,
            vin=vin,
            taxonomy_vin=taxonomy_vin,
            inventory_type=inventory_type,
            stock_no=stock_no,
            source=source,
            dealer_id=dealer_id,
            color=color,
            body_type=body_type,
            vehicle_type=vehicle_type,
            cylinders=cylinders,
            drivetrain=drivetrain,
            engine=engine,
            fuel_type=fuel_type,
            transmission=transmission,
            state=state,
            city=city,
            zip=zip,
            msa_code=msa_code,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            last_seen_days=last_seen_days,
            first_seen_days=first_seen_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MotorcycleSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_motorcycle_active_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        price_range: Annotated[Optional[StrictStr], Field(description="Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        miles_range: Annotated[Optional[StrictStr], Field(description="Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        msrp_range: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="To search a substring across entire document")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        vin: Annotated[Optional[StrictStr], Field(description="To filter listing on their VIN")] = None,
        taxonomy_vin: Annotated[Optional[StrictStr], Field(description="Taxonomy VIN of the motorcycle")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        stock_no: Annotated[Optional[StrictStr], Field(description="To filter listing on their stock number on lot")] = None,
        source: Annotated[Optional[StrictStr], Field(description="To filter listing on their source")] = None,
        dealer_id: Annotated[Optional[StrictStr], Field(description="Dealer id to filter the listings.")] = None,
        color: Annotated[Optional[StrictStr], Field(description="Color of the vehicle")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        cylinders: Annotated[Optional[StrictStr], Field(description="To filter listing on their cylinders")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        msa_code: Annotated[Optional[StrictStr], Field(description="To filter listing on msa code in which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        last_seen_days: Annotated[Optional[StrictStr], Field(description="Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_days: Annotated[Optional[StrictStr], Field(description="First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MotorcycleSearchResponse]:
        """Gets active motorcycle listings for the given search criteria

        This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search motorcycles around a given geo-point within a given radius  2. Search motorcycles for a specific year / make / model or combination of these  3. Search motorcycles matching multiple year, make, model combinatins in the same search request 4. Filter results by most motorcycle specification attributes 5. Search for similar motorcycles by VIN or Taxonomy VIN  6. Filter motorcycles within a given price / miles range 7. Specify a sort order for the results on price / miles / listed date  8. Search motorcycles for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles for your search

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param price_range: Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type price_range: str
        :param miles_range: Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :type miles_range: str
        :param msrp_range: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp_range: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param search_text: To search a substring across entire document
        :type search_text: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param vin: To filter listing on their VIN
        :type vin: str
        :param taxonomy_vin: Taxonomy VIN of the motorcycle
        :type taxonomy_vin: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param stock_no: To filter listing on their stock number on lot
        :type stock_no: str
        :param source: To filter listing on their source
        :type source: str
        :param dealer_id: Dealer id to filter the listings.
        :type dealer_id: str
        :param color: Color of the vehicle
        :type color: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param cylinders: To filter listing on their cylinders
        :type cylinders: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param msa_code: To filter listing on msa code in which they are listed
        :type msa_code: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param last_seen_days: Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type last_seen_days: str
        :param first_seen_days: First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_days: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_motorcycle_active_get_serialize(
            api_key=api_key,
            price_range=price_range,
            miles_range=miles_range,
            msrp_range=msrp_range,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            search_text=search_text,
            year=year,
            make=make,
            model=model,
            trim=trim,
            vin=vin,
            taxonomy_vin=taxonomy_vin,
            inventory_type=inventory_type,
            stock_no=stock_no,
            source=source,
            dealer_id=dealer_id,
            color=color,
            body_type=body_type,
            vehicle_type=vehicle_type,
            cylinders=cylinders,
            drivetrain=drivetrain,
            engine=engine,
            fuel_type=fuel_type,
            transmission=transmission,
            state=state,
            city=city,
            zip=zip,
            msa_code=msa_code,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            last_seen_days=last_seen_days,
            first_seen_days=first_seen_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MotorcycleSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_motorcycle_active_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        price_range: Annotated[Optional[StrictStr], Field(description="Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        miles_range: Annotated[Optional[StrictStr], Field(description="Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        msrp_range: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="To search a substring across entire document")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        vin: Annotated[Optional[StrictStr], Field(description="To filter listing on their VIN")] = None,
        taxonomy_vin: Annotated[Optional[StrictStr], Field(description="Taxonomy VIN of the motorcycle")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        stock_no: Annotated[Optional[StrictStr], Field(description="To filter listing on their stock number on lot")] = None,
        source: Annotated[Optional[StrictStr], Field(description="To filter listing on their source")] = None,
        dealer_id: Annotated[Optional[StrictStr], Field(description="Dealer id to filter the listings.")] = None,
        color: Annotated[Optional[StrictStr], Field(description="Color of the vehicle")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        cylinders: Annotated[Optional[StrictStr], Field(description="To filter listing on their cylinders")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        msa_code: Annotated[Optional[StrictStr], Field(description="To filter listing on msa code in which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        last_seen_days: Annotated[Optional[StrictStr], Field(description="Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_days: Annotated[Optional[StrictStr], Field(description="First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets active motorcycle listings for the given search criteria

        This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.   The search API facilitates the following use cases -  1. Search motorcycles around a given geo-point within a given radius  2. Search motorcycles for a specific year / make / model or combination of these  3. Search motorcycles matching multiple year, make, model combinatins in the same search request 4. Filter results by most motorcycle specification attributes 5. Search for similar motorcycles by VIN or Taxonomy VIN  6. Filter motorcycles within a given price / miles range 7. Specify a sort order for the results on price / miles / listed date  8. Search motorcycles for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles for your search

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param price_range: Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type price_range: str
        :param miles_range: Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :type miles_range: str
        :param msrp_range: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp_range: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param search_text: To search a substring across entire document
        :type search_text: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param vin: To filter listing on their VIN
        :type vin: str
        :param taxonomy_vin: Taxonomy VIN of the motorcycle
        :type taxonomy_vin: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param stock_no: To filter listing on their stock number on lot
        :type stock_no: str
        :param source: To filter listing on their source
        :type source: str
        :param dealer_id: Dealer id to filter the listings.
        :type dealer_id: str
        :param color: Color of the vehicle
        :type color: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param cylinders: To filter listing on their cylinders
        :type cylinders: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param msa_code: To filter listing on msa code in which they are listed
        :type msa_code: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param last_seen_days: Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type last_seen_days: str
        :param first_seen_days: First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_days: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_motorcycle_active_get_serialize(
            api_key=api_key,
            price_range=price_range,
            miles_range=miles_range,
            msrp_range=msrp_range,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            search_text=search_text,
            year=year,
            make=make,
            model=model,
            trim=trim,
            vin=vin,
            taxonomy_vin=taxonomy_vin,
            inventory_type=inventory_type,
            stock_no=stock_no,
            source=source,
            dealer_id=dealer_id,
            color=color,
            body_type=body_type,
            vehicle_type=vehicle_type,
            cylinders=cylinders,
            drivetrain=drivetrain,
            engine=engine,
            fuel_type=fuel_type,
            transmission=transmission,
            state=state,
            city=city,
            zip=zip,
            msa_code=msa_code,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            last_seen_days=last_seen_days,
            first_seen_days=first_seen_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MotorcycleSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_motorcycle_active_get_serialize(
        self,
        api_key,
        price_range,
        miles_range,
        msrp_range,
        latitude,
        longitude,
        radius,
        search_text,
        year,
        make,
        model,
        trim,
        vin,
        taxonomy_vin,
        inventory_type,
        stock_no,
        source,
        dealer_id,
        color,
        body_type,
        vehicle_type,
        cylinders,
        drivetrain,
        engine,
        fuel_type,
        transmission,
        state,
        city,
        zip,
        msa_code,
        sort_by,
        sort_order,
        rows,
        start,
        facets,
        range_facets,
        facet_sort,
        stats,
        last_seen_range,
        first_seen_range,
        last_seen_days,
        first_seen_days,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if price_range is not None:
            
            _query_params.append(('price_range', price_range))
            
        if miles_range is not None:
            
            _query_params.append(('miles_range', miles_range))
            
        if msrp_range is not None:
            
            _query_params.append(('msrp_range', msrp_range))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if search_text is not None:
            
            _query_params.append(('search_text', search_text))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        if make is not None:
            
            _query_params.append(('make', make))
            
        if model is not None:
            
            _query_params.append(('model', model))
            
        if trim is not None:
            
            _query_params.append(('trim', trim))
            
        if vin is not None:
            
            _query_params.append(('vin', vin))
            
        if taxonomy_vin is not None:
            
            _query_params.append(('taxonomy_vin', taxonomy_vin))
            
        if inventory_type is not None:
            
            _query_params.append(('inventory_type', inventory_type))
            
        if stock_no is not None:
            
            _query_params.append(('stock_no', stock_no))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if dealer_id is not None:
            
            _query_params.append(('dealer_id', dealer_id))
            
        if color is not None:
            
            _query_params.append(('color', color))
            
        if body_type is not None:
            
            _query_params.append(('body_type', body_type))
            
        if vehicle_type is not None:
            
            _query_params.append(('vehicle_type', vehicle_type))
            
        if cylinders is not None:
            
            _query_params.append(('cylinders', cylinders))
            
        if drivetrain is not None:
            
            _query_params.append(('drivetrain', drivetrain))
            
        if engine is not None:
            
            _query_params.append(('engine', engine))
            
        if fuel_type is not None:
            
            _query_params.append(('fuel_type', fuel_type))
            
        if transmission is not None:
            
            _query_params.append(('transmission', transmission))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if msa_code is not None:
            
            _query_params.append(('msa_code', msa_code))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        if facet_sort is not None:
            
            _query_params.append(('facet_sort', facet_sort))
            
        if stats is not None:
            
            _query_params.append(('stats', stats))
            
        if last_seen_range is not None:
            
            _query_params.append(('last_seen_range', last_seen_range))
            
        if first_seen_range is not None:
            
            _query_params.append(('first_seen_range', first_seen_range))
            
        if last_seen_days is not None:
            
            _query_params.append(('last_seen_days', last_seen_days))
            
        if first_seen_days is not None:
            
            _query_params.append(('first_seen_days', first_seen_days))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/motorcycle/active',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_motorcycle_auto_complete_get(
        self,
        var_field: Annotated[StrictStr, Field(description="Field name for which you want auto-completion")],
        input: Annotated[StrictStr, Field(description="Input entered so far")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        color: Annotated[Optional[StrictStr], Field(description="Color of the vehicle")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        ignore_case: Annotated[Optional[StrictBool], Field(description="Boolean variable to indicate ignore case of current input")] = None,
        term_counts: Annotated[Optional[StrictBool], Field(description="Boolean variable to indicate wheather to include term counts as well in response")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the response, either by index or count(default)")] = None,
        seller_type: Annotated[Optional[StrictStr], Field(description="seller type for autocomplete")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        facet_min_count: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Provide minimum count value for facets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchAutoCompleteResponse:
        """API for auto-completion of inputs

        Auto-complete the inputs of your end users

        :param var_field: Field name for which you want auto-completion (required)
        :type var_field: str
        :param input: Input entered so far (required)
        :type input: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param color: Color of the vehicle
        :type color: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param ignore_case: Boolean variable to indicate ignore case of current input
        :type ignore_case: bool
        :param term_counts: Boolean variable to indicate wheather to include term counts as well in response
        :type term_counts: bool
        :param sort_by: Sort the response, either by index or count(default)
        :type sort_by: str
        :param seller_type: seller type for autocomplete
        :type seller_type: str
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param facet_min_count: Provide minimum count value for facets
        :type facet_min_count: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_motorcycle_auto_complete_get_serialize(
            var_field=var_field,
            input=input,
            api_key=api_key,
            year=year,
            make=make,
            model=model,
            trim=trim,
            body_type=body_type,
            vehicle_type=vehicle_type,
            transmission=transmission,
            drivetrain=drivetrain,
            fuel_type=fuel_type,
            color=color,
            engine=engine,
            state=state,
            city=city,
            inventory_type=inventory_type,
            ignore_case=ignore_case,
            term_counts=term_counts,
            sort_by=sort_by,
            seller_type=seller_type,
            radius=radius,
            zip=zip,
            facet_min_count=facet_min_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchAutoCompleteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_motorcycle_auto_complete_get_with_http_info(
        self,
        var_field: Annotated[StrictStr, Field(description="Field name for which you want auto-completion")],
        input: Annotated[StrictStr, Field(description="Input entered so far")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        color: Annotated[Optional[StrictStr], Field(description="Color of the vehicle")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        ignore_case: Annotated[Optional[StrictBool], Field(description="Boolean variable to indicate ignore case of current input")] = None,
        term_counts: Annotated[Optional[StrictBool], Field(description="Boolean variable to indicate wheather to include term counts as well in response")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the response, either by index or count(default)")] = None,
        seller_type: Annotated[Optional[StrictStr], Field(description="seller type for autocomplete")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        facet_min_count: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Provide minimum count value for facets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchAutoCompleteResponse]:
        """API for auto-completion of inputs

        Auto-complete the inputs of your end users

        :param var_field: Field name for which you want auto-completion (required)
        :type var_field: str
        :param input: Input entered so far (required)
        :type input: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param color: Color of the vehicle
        :type color: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param ignore_case: Boolean variable to indicate ignore case of current input
        :type ignore_case: bool
        :param term_counts: Boolean variable to indicate wheather to include term counts as well in response
        :type term_counts: bool
        :param sort_by: Sort the response, either by index or count(default)
        :type sort_by: str
        :param seller_type: seller type for autocomplete
        :type seller_type: str
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param facet_min_count: Provide minimum count value for facets
        :type facet_min_count: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_motorcycle_auto_complete_get_serialize(
            var_field=var_field,
            input=input,
            api_key=api_key,
            year=year,
            make=make,
            model=model,
            trim=trim,
            body_type=body_type,
            vehicle_type=vehicle_type,
            transmission=transmission,
            drivetrain=drivetrain,
            fuel_type=fuel_type,
            color=color,
            engine=engine,
            state=state,
            city=city,
            inventory_type=inventory_type,
            ignore_case=ignore_case,
            term_counts=term_counts,
            sort_by=sort_by,
            seller_type=seller_type,
            radius=radius,
            zip=zip,
            facet_min_count=facet_min_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchAutoCompleteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_motorcycle_auto_complete_get_without_preload_content(
        self,
        var_field: Annotated[StrictStr, Field(description="Field name for which you want auto-completion")],
        input: Annotated[StrictStr, Field(description="Input entered so far")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        color: Annotated[Optional[StrictStr], Field(description="Color of the vehicle")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        ignore_case: Annotated[Optional[StrictBool], Field(description="Boolean variable to indicate ignore case of current input")] = None,
        term_counts: Annotated[Optional[StrictBool], Field(description="Boolean variable to indicate wheather to include term counts as well in response")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort the response, either by index or count(default)")] = None,
        seller_type: Annotated[Optional[StrictStr], Field(description="seller type for autocomplete")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        facet_min_count: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Provide minimum count value for facets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """API for auto-completion of inputs

        Auto-complete the inputs of your end users

        :param var_field: Field name for which you want auto-completion (required)
        :type var_field: str
        :param input: Input entered so far (required)
        :type input: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param color: Color of the vehicle
        :type color: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param ignore_case: Boolean variable to indicate ignore case of current input
        :type ignore_case: bool
        :param term_counts: Boolean variable to indicate wheather to include term counts as well in response
        :type term_counts: bool
        :param sort_by: Sort the response, either by index or count(default)
        :type sort_by: str
        :param seller_type: seller type for autocomplete
        :type seller_type: str
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param facet_min_count: Provide minimum count value for facets
        :type facet_min_count: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_motorcycle_auto_complete_get_serialize(
            var_field=var_field,
            input=input,
            api_key=api_key,
            year=year,
            make=make,
            model=model,
            trim=trim,
            body_type=body_type,
            vehicle_type=vehicle_type,
            transmission=transmission,
            drivetrain=drivetrain,
            fuel_type=fuel_type,
            color=color,
            engine=engine,
            state=state,
            city=city,
            inventory_type=inventory_type,
            ignore_case=ignore_case,
            term_counts=term_counts,
            sort_by=sort_by,
            seller_type=seller_type,
            radius=radius,
            zip=zip,
            facet_min_count=facet_min_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchAutoCompleteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_motorcycle_auto_complete_get_serialize(
        self,
        var_field,
        input,
        api_key,
        year,
        make,
        model,
        trim,
        body_type,
        vehicle_type,
        transmission,
        drivetrain,
        fuel_type,
        color,
        engine,
        state,
        city,
        inventory_type,
        ignore_case,
        term_counts,
        sort_by,
        seller_type,
        radius,
        zip,
        facet_min_count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_field is not None:
            
            _query_params.append(('field', var_field))
            
        if input is not None:
            
            _query_params.append(('input', input))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        if make is not None:
            
            _query_params.append(('make', make))
            
        if model is not None:
            
            _query_params.append(('model', model))
            
        if trim is not None:
            
            _query_params.append(('trim', trim))
            
        if body_type is not None:
            
            _query_params.append(('body_type', body_type))
            
        if vehicle_type is not None:
            
            _query_params.append(('vehicle_type', vehicle_type))
            
        if transmission is not None:
            
            _query_params.append(('transmission', transmission))
            
        if drivetrain is not None:
            
            _query_params.append(('drivetrain', drivetrain))
            
        if fuel_type is not None:
            
            _query_params.append(('fuel_type', fuel_type))
            
        if color is not None:
            
            _query_params.append(('color', color))
            
        if engine is not None:
            
            _query_params.append(('engine', engine))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if inventory_type is not None:
            
            _query_params.append(('inventory_type', inventory_type))
            
        if ignore_case is not None:
            
            _query_params.append(('ignore_case', ignore_case))
            
        if term_counts is not None:
            
            _query_params.append(('term_counts', term_counts))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if seller_type is not None:
            
            _query_params.append(('seller_type', seller_type))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if facet_min_count is not None:
            
            _query_params.append(('facet_min_count', facet_min_count))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/motorcycle/auto-complete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



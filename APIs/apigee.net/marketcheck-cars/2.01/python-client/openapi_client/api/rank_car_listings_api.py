# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.car_rank_request import CarRankRequest
from openapi_client.models.car_rank_response import CarRankResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class RankCarListingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def rank_car(
        self,
        car_rank_request: Annotated[CarRankRequest, Field(description="Inputs needed for ranking a group of car listings")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        append_api_key: Annotated[Optional[StrictBool], Field(description="Flag on whether to include api_key in response API urls (if any)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CarRankResponse:
        """Compute relative rank for car listings.

        Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.

        :param car_rank_request: Inputs needed for ranking a group of car listings (required)
        :type car_rank_request: CarRankRequest
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param append_api_key: Flag on whether to include api_key in response API urls (if any)
        :type append_api_key: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rank_car_serialize(
            car_rank_request=car_rank_request,
            api_key=api_key,
            append_api_key=append_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarRankResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rank_car_with_http_info(
        self,
        car_rank_request: Annotated[CarRankRequest, Field(description="Inputs needed for ranking a group of car listings")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        append_api_key: Annotated[Optional[StrictBool], Field(description="Flag on whether to include api_key in response API urls (if any)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CarRankResponse]:
        """Compute relative rank for car listings.

        Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.

        :param car_rank_request: Inputs needed for ranking a group of car listings (required)
        :type car_rank_request: CarRankRequest
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param append_api_key: Flag on whether to include api_key in response API urls (if any)
        :type append_api_key: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rank_car_serialize(
            car_rank_request=car_rank_request,
            api_key=api_key,
            append_api_key=append_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarRankResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rank_car_without_preload_content(
        self,
        car_rank_request: Annotated[CarRankRequest, Field(description="Inputs needed for ranking a group of car listings")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        append_api_key: Annotated[Optional[StrictBool], Field(description="Flag on whether to include api_key in response API urls (if any)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Compute relative rank for car listings.

        Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.

        :param car_rank_request: Inputs needed for ranking a group of car listings (required)
        :type car_rank_request: CarRankRequest
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param append_api_key: Flag on whether to include api_key in response API urls (if any)
        :type append_api_key: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rank_car_serialize(
            car_rank_request=car_rank_request,
            api_key=api_key,
            append_api_key=append_api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarRankResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rank_car_serialize(
        self,
        car_rank_request,
        api_key,
        append_api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if append_api_key is not None:
            
            _query_params.append(('append_api_key', append_api_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if car_rank_request is not None:
            _body_params = car_rank_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/car/active/rank/listings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_and_rank_car(
        self,
        car_rank_request: Annotated[CarRankRequest, Field(description="Inputs needed for ranking a group of car listings")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        append_api_key: Annotated[Optional[StrictBool], Field(description="Flag on whether to include api_key in response API urls (if any)")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        include_lease: Annotated[Optional[StrictBool], Field(description="Boolean param to search for listings that include leasing options in them")] = None,
        include_finance: Annotated[Optional[StrictBool], Field(description="Boolean param to search for listings that include finance options in them")] = None,
        lease_term: Annotated[Optional[StrictStr], Field(description="Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60")] = None,
        lease_down_payment: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60")] = None,
        lease_emp: Annotated[Optional[StrictStr], Field(description="Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60")] = None,
        finance_loan_term: Annotated[Optional[StrictStr], Field(description="Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60")] = None,
        finance_loan_apr: Annotated[Optional[StrictStr], Field(description="Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60")] = None,
        finance_emp: Annotated[Optional[StrictStr], Field(description="Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60")] = None,
        finance_down_payment: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60")] = None,
        finance_down_payment_per: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60")] = None,
        car_type: Annotated[Optional[StrictStr], Field(description="Car type. Allowed values are - new / used / certified")] = None,
        carfax_1_owner: Annotated[Optional[StrictStr], Field(description="Indicates whether car has had only one owner or not")] = None,
        carfax_clean_title: Annotated[Optional[StrictStr], Field(description="Indicates whether car has clean ownership records")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        vin: Annotated[Optional[StrictStr], Field(description="To filter listing on their VIN")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        body_subtype: Annotated[Optional[StrictStr], Field(description="Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        vins: Annotated[Optional[StrictStr], Field(description="Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc")] = None,
        taxonomy_vins: Annotated[Optional[StrictStr], Field(description="Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.")] = None,
        ymmt: Annotated[Optional[StrictStr], Field(description="Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.")] = None,
        match: Annotated[Optional[StrictStr], Field(description="Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match")] = None,
        cylinders: Annotated[Optional[StrictStr], Field(description="To filter listing on their cylinders")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        doors: Annotated[Optional[StrictStr], Field(description="Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        exterior_color: Annotated[Optional[StrictStr], Field(description="Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated")] = None,
        interior_color: Annotated[Optional[StrictStr], Field(description="Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated")] = None,
        base_exterior_color: Annotated[Optional[StrictStr], Field(description="Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated")] = None,
        base_interior_color: Annotated[Optional[StrictStr], Field(description="Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        engine_size: Annotated[Optional[StrictStr], Field(description="Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated")] = None,
        engine_aspiration: Annotated[Optional[StrictStr], Field(description="Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated")] = None,
        engine_block: Annotated[Optional[StrictStr], Field(description="Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated")] = None,
        highway_mpg_range: Annotated[Optional[StrictStr], Field(description="Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        city_mpg_range: Annotated[Optional[StrictStr], Field(description="City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        miles_range: Annotated[Optional[StrictStr], Field(description="Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        price_range: Annotated[Optional[StrictStr], Field(description="Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        msrp_range: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        dom_range: Annotated[Optional[StrictStr], Field(description="Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        include_non_vin_listings: Annotated[Optional[StrictBool], Field(description="To include non vin listings. Default is false")] = None,
        msa_code: Annotated[Optional[StrictStr], Field(description="To filter listing on msa code in which they are listed")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        plot: Annotated[Optional[StrictBool], Field(description="If plot has value true results in around 25k coordinates with limited fields to plot respective graph")] = None,
        nodedup: Annotated[Optional[StrictBool], Field(description="If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin")] = None,
        dedup: Annotated[Optional[StrictBool], Field(description="If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source")] = None,
        owned: Annotated[Optional[StrictBool], Field(description="Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        trim_o: Annotated[Optional[StrictStr], Field(description="Filter listings on web scraped trim")] = None,
        trim_r: Annotated[Optional[StrictStr], Field(description="Filter trim on custom possible matches")] = None,
        dom_active_range: Annotated[Optional[StrictStr], Field(description="Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        dom_180_range: Annotated[Optional[StrictStr], Field(description="Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        exclude_certified: Annotated[Optional[StrictBool], Field(description="Boolean param to exclude certified cars from search results")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        photo_links: Annotated[Optional[StrictBool], Field(description="A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them")] = None,
        photo_links_cached: Annotated[Optional[StrictBool], Field(description="A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them")] = None,
        stock_no: Annotated[Optional[StrictStr], Field(description="To filter listing on their stock number on lot")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_at_source_range: Annotated[Optional[StrictStr], Field(description="First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_at_mc_range: Annotated[Optional[StrictStr], Field(description="First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        last_seen_days: Annotated[Optional[StrictStr], Field(description="Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_days: Annotated[Optional[StrictStr], Field(description="First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_at_source_days: Annotated[Optional[StrictStr], Field(description="First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_at_mc_days: Annotated[Optional[StrictStr], Field(description="First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CarRankResponse:
        """Compute relative rank for car listings.

        Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.

        :param car_rank_request: Inputs needed for ranking a group of car listings (required)
        :type car_rank_request: CarRankRequest
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param append_api_key: Flag on whether to include api_key in response API urls (if any)
        :type append_api_key: bool
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param include_lease: Boolean param to search for listings that include leasing options in them
        :type include_lease: bool
        :param include_finance: Boolean param to search for listings that include finance options in them
        :type include_finance: bool
        :param lease_term: Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60
        :type lease_term: str
        :param lease_down_payment: Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60
        :type lease_down_payment: str
        :param lease_emp: Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60
        :type lease_emp: str
        :param finance_loan_term: Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60
        :type finance_loan_term: str
        :param finance_loan_apr: Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60
        :type finance_loan_apr: str
        :param finance_emp: Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60
        :type finance_emp: str
        :param finance_down_payment: Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60
        :type finance_down_payment: str
        :param finance_down_payment_per: Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60
        :type finance_down_payment_per: str
        :param car_type: Car type. Allowed values are - new / used / certified
        :type car_type: str
        :param carfax_1_owner: Indicates whether car has had only one owner or not
        :type carfax_1_owner: str
        :param carfax_clean_title: Indicates whether car has clean ownership records
        :type carfax_clean_title: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param vin: To filter listing on their VIN
        :type vin: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param body_subtype: Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
        :type body_subtype: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param vins: Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
        :type vins: str
        :param taxonomy_vins: Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
        :type taxonomy_vins: str
        :param ymmt: Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.
        :type ymmt: str
        :param match: Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
        :type match: str
        :param cylinders: To filter listing on their cylinders
        :type cylinders: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param doors: Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
        :type doors: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param exterior_color: Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
        :type exterior_color: str
        :param interior_color: Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
        :type interior_color: str
        :param base_exterior_color: Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated
        :type base_exterior_color: str
        :param base_interior_color: Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated
        :type base_interior_color: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param engine_size: Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
        :type engine_size: str
        :param engine_aspiration: Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
        :type engine_aspiration: str
        :param engine_block: Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
        :type engine_block: str
        :param highway_mpg_range: Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type highway_mpg_range: str
        :param city_mpg_range: City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type city_mpg_range: str
        :param miles_range: Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :type miles_range: str
        :param price_range: Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type price_range: str
        :param msrp_range: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp_range: str
        :param dom_range: Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_range: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param include_non_vin_listings: To include non vin listings. Default is false
        :type include_non_vin_listings: bool
        :param msa_code: To filter listing on msa code in which they are listed
        :type msa_code: str
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param plot: If plot has value true results in around 25k coordinates with limited fields to plot respective graph
        :type plot: bool
        :param nodedup: If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin
        :type nodedup: bool
        :param dedup: If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source
        :type dedup: bool
        :param owned: Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself
        :type owned: bool
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param trim_o: Filter listings on web scraped trim
        :type trim_o: str
        :param trim_r: Filter trim on custom possible matches
        :type trim_r: str
        :param dom_active_range: Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_active_range: str
        :param dom_180_range: Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_180_range: str
        :param exclude_certified: Boolean param to exclude certified cars from search results
        :type exclude_certified: bool
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param photo_links: A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them
        :type photo_links: bool
        :param photo_links_cached: A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them
        :type photo_links_cached: bool
        :param stock_no: To filter listing on their stock number on lot
        :type stock_no: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param first_seen_at_source_range: First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_at_source_range: str
        :param first_seen_at_mc_range: First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_at_mc_range: str
        :param last_seen_days: Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type last_seen_days: str
        :param first_seen_days: First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_days: str
        :param first_seen_at_source_days: First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_at_source_days: str
        :param first_seen_at_mc_days: First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_at_mc_days: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_and_rank_car_serialize(
            car_rank_request=car_rank_request,
            api_key=api_key,
            append_api_key=append_api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            zip=zip,
            include_lease=include_lease,
            include_finance=include_finance,
            lease_term=lease_term,
            lease_down_payment=lease_down_payment,
            lease_emp=lease_emp,
            finance_loan_term=finance_loan_term,
            finance_loan_apr=finance_loan_apr,
            finance_emp=finance_emp,
            finance_down_payment=finance_down_payment,
            finance_down_payment_per=finance_down_payment_per,
            car_type=car_type,
            carfax_1_owner=carfax_1_owner,
            carfax_clean_title=carfax_clean_title,
            year=year,
            make=make,
            model=model,
            trim=trim,
            vin=vin,
            body_type=body_type,
            body_subtype=body_subtype,
            vehicle_type=vehicle_type,
            vins=vins,
            taxonomy_vins=taxonomy_vins,
            ymmt=ymmt,
            match=match,
            cylinders=cylinders,
            transmission=transmission,
            doors=doors,
            drivetrain=drivetrain,
            exterior_color=exterior_color,
            interior_color=interior_color,
            base_exterior_color=base_exterior_color,
            base_interior_color=base_interior_color,
            engine=engine,
            engine_size=engine_size,
            engine_aspiration=engine_aspiration,
            engine_block=engine_block,
            highway_mpg_range=highway_mpg_range,
            city_mpg_range=city_mpg_range,
            miles_range=miles_range,
            price_range=price_range,
            msrp_range=msrp_range,
            dom_range=dom_range,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            include_non_vin_listings=include_non_vin_listings,
            msa_code=msa_code,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            country=country,
            plot=plot,
            nodedup=nodedup,
            dedup=dedup,
            owned=owned,
            state=state,
            city=city,
            trim_o=trim_o,
            trim_r=trim_r,
            dom_active_range=dom_active_range,
            dom_180_range=dom_180_range,
            exclude_certified=exclude_certified,
            fuel_type=fuel_type,
            dealer_type=dealer_type,
            photo_links=photo_links,
            photo_links_cached=photo_links_cached,
            stock_no=stock_no,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            first_seen_at_source_range=first_seen_at_source_range,
            first_seen_at_mc_range=first_seen_at_mc_range,
            last_seen_days=last_seen_days,
            first_seen_days=first_seen_days,
            first_seen_at_source_days=first_seen_at_source_days,
            first_seen_at_mc_days=first_seen_at_mc_days,
            inventory_type=inventory_type,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarRankResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_and_rank_car_with_http_info(
        self,
        car_rank_request: Annotated[CarRankRequest, Field(description="Inputs needed for ranking a group of car listings")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        append_api_key: Annotated[Optional[StrictBool], Field(description="Flag on whether to include api_key in response API urls (if any)")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        include_lease: Annotated[Optional[StrictBool], Field(description="Boolean param to search for listings that include leasing options in them")] = None,
        include_finance: Annotated[Optional[StrictBool], Field(description="Boolean param to search for listings that include finance options in them")] = None,
        lease_term: Annotated[Optional[StrictStr], Field(description="Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60")] = None,
        lease_down_payment: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60")] = None,
        lease_emp: Annotated[Optional[StrictStr], Field(description="Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60")] = None,
        finance_loan_term: Annotated[Optional[StrictStr], Field(description="Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60")] = None,
        finance_loan_apr: Annotated[Optional[StrictStr], Field(description="Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60")] = None,
        finance_emp: Annotated[Optional[StrictStr], Field(description="Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60")] = None,
        finance_down_payment: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60")] = None,
        finance_down_payment_per: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60")] = None,
        car_type: Annotated[Optional[StrictStr], Field(description="Car type. Allowed values are - new / used / certified")] = None,
        carfax_1_owner: Annotated[Optional[StrictStr], Field(description="Indicates whether car has had only one owner or not")] = None,
        carfax_clean_title: Annotated[Optional[StrictStr], Field(description="Indicates whether car has clean ownership records")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        vin: Annotated[Optional[StrictStr], Field(description="To filter listing on their VIN")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        body_subtype: Annotated[Optional[StrictStr], Field(description="Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        vins: Annotated[Optional[StrictStr], Field(description="Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc")] = None,
        taxonomy_vins: Annotated[Optional[StrictStr], Field(description="Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.")] = None,
        ymmt: Annotated[Optional[StrictStr], Field(description="Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.")] = None,
        match: Annotated[Optional[StrictStr], Field(description="Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match")] = None,
        cylinders: Annotated[Optional[StrictStr], Field(description="To filter listing on their cylinders")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        doors: Annotated[Optional[StrictStr], Field(description="Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        exterior_color: Annotated[Optional[StrictStr], Field(description="Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated")] = None,
        interior_color: Annotated[Optional[StrictStr], Field(description="Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated")] = None,
        base_exterior_color: Annotated[Optional[StrictStr], Field(description="Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated")] = None,
        base_interior_color: Annotated[Optional[StrictStr], Field(description="Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        engine_size: Annotated[Optional[StrictStr], Field(description="Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated")] = None,
        engine_aspiration: Annotated[Optional[StrictStr], Field(description="Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated")] = None,
        engine_block: Annotated[Optional[StrictStr], Field(description="Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated")] = None,
        highway_mpg_range: Annotated[Optional[StrictStr], Field(description="Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        city_mpg_range: Annotated[Optional[StrictStr], Field(description="City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        miles_range: Annotated[Optional[StrictStr], Field(description="Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        price_range: Annotated[Optional[StrictStr], Field(description="Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        msrp_range: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        dom_range: Annotated[Optional[StrictStr], Field(description="Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        include_non_vin_listings: Annotated[Optional[StrictBool], Field(description="To include non vin listings. Default is false")] = None,
        msa_code: Annotated[Optional[StrictStr], Field(description="To filter listing on msa code in which they are listed")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        plot: Annotated[Optional[StrictBool], Field(description="If plot has value true results in around 25k coordinates with limited fields to plot respective graph")] = None,
        nodedup: Annotated[Optional[StrictBool], Field(description="If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin")] = None,
        dedup: Annotated[Optional[StrictBool], Field(description="If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source")] = None,
        owned: Annotated[Optional[StrictBool], Field(description="Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        trim_o: Annotated[Optional[StrictStr], Field(description="Filter listings on web scraped trim")] = None,
        trim_r: Annotated[Optional[StrictStr], Field(description="Filter trim on custom possible matches")] = None,
        dom_active_range: Annotated[Optional[StrictStr], Field(description="Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        dom_180_range: Annotated[Optional[StrictStr], Field(description="Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        exclude_certified: Annotated[Optional[StrictBool], Field(description="Boolean param to exclude certified cars from search results")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        photo_links: Annotated[Optional[StrictBool], Field(description="A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them")] = None,
        photo_links_cached: Annotated[Optional[StrictBool], Field(description="A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them")] = None,
        stock_no: Annotated[Optional[StrictStr], Field(description="To filter listing on their stock number on lot")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_at_source_range: Annotated[Optional[StrictStr], Field(description="First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_at_mc_range: Annotated[Optional[StrictStr], Field(description="First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        last_seen_days: Annotated[Optional[StrictStr], Field(description="Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_days: Annotated[Optional[StrictStr], Field(description="First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_at_source_days: Annotated[Optional[StrictStr], Field(description="First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_at_mc_days: Annotated[Optional[StrictStr], Field(description="First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CarRankResponse]:
        """Compute relative rank for car listings.

        Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.

        :param car_rank_request: Inputs needed for ranking a group of car listings (required)
        :type car_rank_request: CarRankRequest
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param append_api_key: Flag on whether to include api_key in response API urls (if any)
        :type append_api_key: bool
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param include_lease: Boolean param to search for listings that include leasing options in them
        :type include_lease: bool
        :param include_finance: Boolean param to search for listings that include finance options in them
        :type include_finance: bool
        :param lease_term: Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60
        :type lease_term: str
        :param lease_down_payment: Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60
        :type lease_down_payment: str
        :param lease_emp: Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60
        :type lease_emp: str
        :param finance_loan_term: Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60
        :type finance_loan_term: str
        :param finance_loan_apr: Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60
        :type finance_loan_apr: str
        :param finance_emp: Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60
        :type finance_emp: str
        :param finance_down_payment: Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60
        :type finance_down_payment: str
        :param finance_down_payment_per: Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60
        :type finance_down_payment_per: str
        :param car_type: Car type. Allowed values are - new / used / certified
        :type car_type: str
        :param carfax_1_owner: Indicates whether car has had only one owner or not
        :type carfax_1_owner: str
        :param carfax_clean_title: Indicates whether car has clean ownership records
        :type carfax_clean_title: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param vin: To filter listing on their VIN
        :type vin: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param body_subtype: Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
        :type body_subtype: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param vins: Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
        :type vins: str
        :param taxonomy_vins: Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
        :type taxonomy_vins: str
        :param ymmt: Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.
        :type ymmt: str
        :param match: Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
        :type match: str
        :param cylinders: To filter listing on their cylinders
        :type cylinders: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param doors: Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
        :type doors: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param exterior_color: Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
        :type exterior_color: str
        :param interior_color: Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
        :type interior_color: str
        :param base_exterior_color: Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated
        :type base_exterior_color: str
        :param base_interior_color: Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated
        :type base_interior_color: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param engine_size: Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
        :type engine_size: str
        :param engine_aspiration: Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
        :type engine_aspiration: str
        :param engine_block: Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
        :type engine_block: str
        :param highway_mpg_range: Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type highway_mpg_range: str
        :param city_mpg_range: City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type city_mpg_range: str
        :param miles_range: Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :type miles_range: str
        :param price_range: Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type price_range: str
        :param msrp_range: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp_range: str
        :param dom_range: Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_range: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param include_non_vin_listings: To include non vin listings. Default is false
        :type include_non_vin_listings: bool
        :param msa_code: To filter listing on msa code in which they are listed
        :type msa_code: str
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param plot: If plot has value true results in around 25k coordinates with limited fields to plot respective graph
        :type plot: bool
        :param nodedup: If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin
        :type nodedup: bool
        :param dedup: If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source
        :type dedup: bool
        :param owned: Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself
        :type owned: bool
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param trim_o: Filter listings on web scraped trim
        :type trim_o: str
        :param trim_r: Filter trim on custom possible matches
        :type trim_r: str
        :param dom_active_range: Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_active_range: str
        :param dom_180_range: Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_180_range: str
        :param exclude_certified: Boolean param to exclude certified cars from search results
        :type exclude_certified: bool
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param photo_links: A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them
        :type photo_links: bool
        :param photo_links_cached: A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them
        :type photo_links_cached: bool
        :param stock_no: To filter listing on their stock number on lot
        :type stock_no: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param first_seen_at_source_range: First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_at_source_range: str
        :param first_seen_at_mc_range: First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_at_mc_range: str
        :param last_seen_days: Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type last_seen_days: str
        :param first_seen_days: First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_days: str
        :param first_seen_at_source_days: First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_at_source_days: str
        :param first_seen_at_mc_days: First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_at_mc_days: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_and_rank_car_serialize(
            car_rank_request=car_rank_request,
            api_key=api_key,
            append_api_key=append_api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            zip=zip,
            include_lease=include_lease,
            include_finance=include_finance,
            lease_term=lease_term,
            lease_down_payment=lease_down_payment,
            lease_emp=lease_emp,
            finance_loan_term=finance_loan_term,
            finance_loan_apr=finance_loan_apr,
            finance_emp=finance_emp,
            finance_down_payment=finance_down_payment,
            finance_down_payment_per=finance_down_payment_per,
            car_type=car_type,
            carfax_1_owner=carfax_1_owner,
            carfax_clean_title=carfax_clean_title,
            year=year,
            make=make,
            model=model,
            trim=trim,
            vin=vin,
            body_type=body_type,
            body_subtype=body_subtype,
            vehicle_type=vehicle_type,
            vins=vins,
            taxonomy_vins=taxonomy_vins,
            ymmt=ymmt,
            match=match,
            cylinders=cylinders,
            transmission=transmission,
            doors=doors,
            drivetrain=drivetrain,
            exterior_color=exterior_color,
            interior_color=interior_color,
            base_exterior_color=base_exterior_color,
            base_interior_color=base_interior_color,
            engine=engine,
            engine_size=engine_size,
            engine_aspiration=engine_aspiration,
            engine_block=engine_block,
            highway_mpg_range=highway_mpg_range,
            city_mpg_range=city_mpg_range,
            miles_range=miles_range,
            price_range=price_range,
            msrp_range=msrp_range,
            dom_range=dom_range,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            include_non_vin_listings=include_non_vin_listings,
            msa_code=msa_code,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            country=country,
            plot=plot,
            nodedup=nodedup,
            dedup=dedup,
            owned=owned,
            state=state,
            city=city,
            trim_o=trim_o,
            trim_r=trim_r,
            dom_active_range=dom_active_range,
            dom_180_range=dom_180_range,
            exclude_certified=exclude_certified,
            fuel_type=fuel_type,
            dealer_type=dealer_type,
            photo_links=photo_links,
            photo_links_cached=photo_links_cached,
            stock_no=stock_no,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            first_seen_at_source_range=first_seen_at_source_range,
            first_seen_at_mc_range=first_seen_at_mc_range,
            last_seen_days=last_seen_days,
            first_seen_days=first_seen_days,
            first_seen_at_source_days=first_seen_at_source_days,
            first_seen_at_mc_days=first_seen_at_mc_days,
            inventory_type=inventory_type,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarRankResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_and_rank_car_without_preload_content(
        self,
        car_rank_request: Annotated[CarRankRequest, Field(description="Inputs needed for ranking a group of car listings")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        append_api_key: Annotated[Optional[StrictBool], Field(description="Flag on whether to include api_key in response API urls (if any)")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        include_lease: Annotated[Optional[StrictBool], Field(description="Boolean param to search for listings that include leasing options in them")] = None,
        include_finance: Annotated[Optional[StrictBool], Field(description="Boolean param to search for listings that include finance options in them")] = None,
        lease_term: Annotated[Optional[StrictStr], Field(description="Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60")] = None,
        lease_down_payment: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60")] = None,
        lease_emp: Annotated[Optional[StrictStr], Field(description="Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60")] = None,
        finance_loan_term: Annotated[Optional[StrictStr], Field(description="Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60")] = None,
        finance_loan_apr: Annotated[Optional[StrictStr], Field(description="Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60")] = None,
        finance_emp: Annotated[Optional[StrictStr], Field(description="Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60")] = None,
        finance_down_payment: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60")] = None,
        finance_down_payment_per: Annotated[Optional[StrictStr], Field(description="Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60")] = None,
        car_type: Annotated[Optional[StrictStr], Field(description="Car type. Allowed values are - new / used / certified")] = None,
        carfax_1_owner: Annotated[Optional[StrictStr], Field(description="Indicates whether car has had only one owner or not")] = None,
        carfax_clean_title: Annotated[Optional[StrictStr], Field(description="Indicates whether car has clean ownership records")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        vin: Annotated[Optional[StrictStr], Field(description="To filter listing on their VIN")] = None,
        body_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their body type")] = None,
        body_subtype: Annotated[Optional[StrictStr], Field(description="Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated")] = None,
        vehicle_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their vehicle type")] = None,
        vins: Annotated[Optional[StrictStr], Field(description="Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc")] = None,
        taxonomy_vins: Annotated[Optional[StrictStr], Field(description="Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.")] = None,
        ymmt: Annotated[Optional[StrictStr], Field(description="Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.")] = None,
        match: Annotated[Optional[StrictStr], Field(description="Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match")] = None,
        cylinders: Annotated[Optional[StrictStr], Field(description="To filter listing on their cylinders")] = None,
        transmission: Annotated[Optional[StrictStr], Field(description="To filter listing on their transmission")] = None,
        doors: Annotated[Optional[StrictStr], Field(description="Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated")] = None,
        drivetrain: Annotated[Optional[StrictStr], Field(description="To filter listing on their drivetrain")] = None,
        exterior_color: Annotated[Optional[StrictStr], Field(description="Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated")] = None,
        interior_color: Annotated[Optional[StrictStr], Field(description="Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated")] = None,
        base_exterior_color: Annotated[Optional[StrictStr], Field(description="Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated")] = None,
        base_interior_color: Annotated[Optional[StrictStr], Field(description="Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated")] = None,
        engine: Annotated[Optional[StrictStr], Field(description="To filter listing on their engine")] = None,
        engine_size: Annotated[Optional[StrictStr], Field(description="Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated")] = None,
        engine_aspiration: Annotated[Optional[StrictStr], Field(description="Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated")] = None,
        engine_block: Annotated[Optional[StrictStr], Field(description="Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated")] = None,
        highway_mpg_range: Annotated[Optional[StrictStr], Field(description="Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        city_mpg_range: Annotated[Optional[StrictStr], Field(description="City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        miles_range: Annotated[Optional[StrictStr], Field(description="Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        price_range: Annotated[Optional[StrictStr], Field(description="Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        msrp_range: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        dom_range: Annotated[Optional[StrictStr], Field(description="Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        include_non_vin_listings: Annotated[Optional[StrictBool], Field(description="To include non vin listings. Default is false")] = None,
        msa_code: Annotated[Optional[StrictStr], Field(description="To filter listing on msa code in which they are listed")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        plot: Annotated[Optional[StrictBool], Field(description="If plot has value true results in around 25k coordinates with limited fields to plot respective graph")] = None,
        nodedup: Annotated[Optional[StrictBool], Field(description="If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin")] = None,
        dedup: Annotated[Optional[StrictBool], Field(description="If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source")] = None,
        owned: Annotated[Optional[StrictBool], Field(description="Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        trim_o: Annotated[Optional[StrictStr], Field(description="Filter listings on web scraped trim")] = None,
        trim_r: Annotated[Optional[StrictStr], Field(description="Filter trim on custom possible matches")] = None,
        dom_active_range: Annotated[Optional[StrictStr], Field(description="Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        dom_180_range: Annotated[Optional[StrictStr], Field(description="Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50")] = None,
        exclude_certified: Annotated[Optional[StrictBool], Field(description="Boolean param to exclude certified cars from search results")] = None,
        fuel_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their fuel type")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        photo_links: Annotated[Optional[StrictBool], Field(description="A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them")] = None,
        photo_links_cached: Annotated[Optional[StrictBool], Field(description="A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them")] = None,
        stock_no: Annotated[Optional[StrictStr], Field(description="To filter listing on their stock number on lot")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_at_source_range: Annotated[Optional[StrictStr], Field(description="First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_at_mc_range: Annotated[Optional[StrictStr], Field(description="First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        last_seen_days: Annotated[Optional[StrictStr], Field(description="Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_days: Annotated[Optional[StrictStr], Field(description="First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_at_source_days: Annotated[Optional[StrictStr], Field(description="First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        first_seen_at_mc_days: Annotated[Optional[StrictStr], Field(description="First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12")] = None,
        inventory_type: Annotated[Optional[StrictStr], Field(description="To filter listing on their condition. Either used or new")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Compute relative rank for car listings.

        Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.

        :param car_rank_request: Inputs needed for ranking a group of car listings (required)
        :type car_rank_request: CarRankRequest
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param append_api_key: Flag on whether to include api_key in response API urls (if any)
        :type append_api_key: bool
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param include_lease: Boolean param to search for listings that include leasing options in them
        :type include_lease: bool
        :param include_finance: Boolean param to search for listings that include finance options in them
        :type include_finance: bool
        :param lease_term: Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60
        :type lease_term: str
        :param lease_down_payment: Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60
        :type lease_down_payment: str
        :param lease_emp: Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60
        :type lease_emp: str
        :param finance_loan_term: Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60
        :type finance_loan_term: str
        :param finance_loan_apr: Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60
        :type finance_loan_apr: str
        :param finance_emp: Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60
        :type finance_emp: str
        :param finance_down_payment: Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60
        :type finance_down_payment: str
        :param finance_down_payment_per: Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60
        :type finance_down_payment_per: str
        :param car_type: Car type. Allowed values are - new / used / certified
        :type car_type: str
        :param carfax_1_owner: Indicates whether car has had only one owner or not
        :type carfax_1_owner: str
        :param carfax_clean_title: Indicates whether car has clean ownership records
        :type carfax_clean_title: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param vin: To filter listing on their VIN
        :type vin: str
        :param body_type: To filter listing on their body type
        :type body_type: str
        :param body_subtype: Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
        :type body_subtype: str
        :param vehicle_type: To filter listing on their vehicle type
        :type vehicle_type: str
        :param vins: Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
        :type vins: str
        :param taxonomy_vins: Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
        :type taxonomy_vins: str
        :param ymmt: Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.
        :type ymmt: str
        :param match: Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
        :type match: str
        :param cylinders: To filter listing on their cylinders
        :type cylinders: str
        :param transmission: To filter listing on their transmission
        :type transmission: str
        :param doors: Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
        :type doors: str
        :param drivetrain: To filter listing on their drivetrain
        :type drivetrain: str
        :param exterior_color: Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
        :type exterior_color: str
        :param interior_color: Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
        :type interior_color: str
        :param base_exterior_color: Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated
        :type base_exterior_color: str
        :param base_interior_color: Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated
        :type base_interior_color: str
        :param engine: To filter listing on their engine
        :type engine: str
        :param engine_size: Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
        :type engine_size: str
        :param engine_aspiration: Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
        :type engine_aspiration: str
        :param engine_block: Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
        :type engine_block: str
        :param highway_mpg_range: Highway mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type highway_mpg_range: str
        :param city_mpg_range: City mileage range to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type city_mpg_range: str
        :param miles_range: Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :type miles_range: str
        :param price_range: Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type price_range: str
        :param msrp_range: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp_range: str
        :param dom_range: Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_range: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param include_non_vin_listings: To include non vin listings. Default is false
        :type include_non_vin_listings: bool
        :param msa_code: To filter listing on msa code in which they are listed
        :type msa_code: str
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param plot: If plot has value true results in around 25k coordinates with limited fields to plot respective graph
        :type plot: bool
        :param nodedup: If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin
        :type nodedup: bool
        :param dedup: If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source
        :type dedup: bool
        :param owned: Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself
        :type owned: bool
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param trim_o: Filter listings on web scraped trim
        :type trim_o: str
        :param trim_r: Filter trim on custom possible matches
        :type trim_r: str
        :param dom_active_range: Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_active_range: str
        :param dom_180_range: Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :type dom_180_range: str
        :param exclude_certified: Boolean param to exclude certified cars from search results
        :type exclude_certified: bool
        :param fuel_type: To filter listing on their fuel type
        :type fuel_type: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param photo_links: A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them
        :type photo_links: bool
        :param photo_links_cached: A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them
        :type photo_links_cached: bool
        :param stock_no: To filter listing on their stock number on lot
        :type stock_no: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param first_seen_at_source_range: First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_at_source_range: str
        :param first_seen_at_mc_range: First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_at_mc_range: str
        :param last_seen_days: Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type last_seen_days: str
        :param first_seen_days: First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_days: str
        :param first_seen_at_source_days: First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_at_source_days: str
        :param first_seen_at_mc_days: First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12
        :type first_seen_at_mc_days: str
        :param inventory_type: To filter listing on their condition. Either used or new
        :type inventory_type: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_and_rank_car_serialize(
            car_rank_request=car_rank_request,
            api_key=api_key,
            append_api_key=append_api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            zip=zip,
            include_lease=include_lease,
            include_finance=include_finance,
            lease_term=lease_term,
            lease_down_payment=lease_down_payment,
            lease_emp=lease_emp,
            finance_loan_term=finance_loan_term,
            finance_loan_apr=finance_loan_apr,
            finance_emp=finance_emp,
            finance_down_payment=finance_down_payment,
            finance_down_payment_per=finance_down_payment_per,
            car_type=car_type,
            carfax_1_owner=carfax_1_owner,
            carfax_clean_title=carfax_clean_title,
            year=year,
            make=make,
            model=model,
            trim=trim,
            vin=vin,
            body_type=body_type,
            body_subtype=body_subtype,
            vehicle_type=vehicle_type,
            vins=vins,
            taxonomy_vins=taxonomy_vins,
            ymmt=ymmt,
            match=match,
            cylinders=cylinders,
            transmission=transmission,
            doors=doors,
            drivetrain=drivetrain,
            exterior_color=exterior_color,
            interior_color=interior_color,
            base_exterior_color=base_exterior_color,
            base_interior_color=base_interior_color,
            engine=engine,
            engine_size=engine_size,
            engine_aspiration=engine_aspiration,
            engine_block=engine_block,
            highway_mpg_range=highway_mpg_range,
            city_mpg_range=city_mpg_range,
            miles_range=miles_range,
            price_range=price_range,
            msrp_range=msrp_range,
            dom_range=dom_range,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            include_non_vin_listings=include_non_vin_listings,
            msa_code=msa_code,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            country=country,
            plot=plot,
            nodedup=nodedup,
            dedup=dedup,
            owned=owned,
            state=state,
            city=city,
            trim_o=trim_o,
            trim_r=trim_r,
            dom_active_range=dom_active_range,
            dom_180_range=dom_180_range,
            exclude_certified=exclude_certified,
            fuel_type=fuel_type,
            dealer_type=dealer_type,
            photo_links=photo_links,
            photo_links_cached=photo_links_cached,
            stock_no=stock_no,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            first_seen_at_source_range=first_seen_at_source_range,
            first_seen_at_mc_range=first_seen_at_mc_range,
            last_seen_days=last_seen_days,
            first_seen_days=first_seen_days,
            first_seen_at_source_days=first_seen_at_source_days,
            first_seen_at_mc_days=first_seen_at_mc_days,
            inventory_type=inventory_type,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarRankResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_and_rank_car_serialize(
        self,
        car_rank_request,
        api_key,
        append_api_key,
        latitude,
        longitude,
        radius,
        zip,
        include_lease,
        include_finance,
        lease_term,
        lease_down_payment,
        lease_emp,
        finance_loan_term,
        finance_loan_apr,
        finance_emp,
        finance_down_payment,
        finance_down_payment_per,
        car_type,
        carfax_1_owner,
        carfax_clean_title,
        year,
        make,
        model,
        trim,
        vin,
        body_type,
        body_subtype,
        vehicle_type,
        vins,
        taxonomy_vins,
        ymmt,
        match,
        cylinders,
        transmission,
        doors,
        drivetrain,
        exterior_color,
        interior_color,
        base_exterior_color,
        base_interior_color,
        engine,
        engine_size,
        engine_aspiration,
        engine_block,
        highway_mpg_range,
        city_mpg_range,
        miles_range,
        price_range,
        msrp_range,
        dom_range,
        sort_by,
        sort_order,
        rows,
        start,
        include_non_vin_listings,
        msa_code,
        facets,
        range_facets,
        facet_sort,
        stats,
        country,
        plot,
        nodedup,
        dedup,
        owned,
        state,
        city,
        trim_o,
        trim_r,
        dom_active_range,
        dom_180_range,
        exclude_certified,
        fuel_type,
        dealer_type,
        photo_links,
        photo_links_cached,
        stock_no,
        last_seen_range,
        first_seen_range,
        first_seen_at_source_range,
        first_seen_at_mc_range,
        last_seen_days,
        first_seen_days,
        first_seen_at_source_days,
        first_seen_at_mc_days,
        inventory_type,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if append_api_key is not None:
            
            _query_params.append(('append_api_key', append_api_key))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if include_lease is not None:
            
            _query_params.append(('include_lease', include_lease))
            
        if include_finance is not None:
            
            _query_params.append(('include_finance', include_finance))
            
        if lease_term is not None:
            
            _query_params.append(('lease_term', lease_term))
            
        if lease_down_payment is not None:
            
            _query_params.append(('lease_down_payment', lease_down_payment))
            
        if lease_emp is not None:
            
            _query_params.append(('lease_emp', lease_emp))
            
        if finance_loan_term is not None:
            
            _query_params.append(('finance_loan_term', finance_loan_term))
            
        if finance_loan_apr is not None:
            
            _query_params.append(('finance_loan_apr', finance_loan_apr))
            
        if finance_emp is not None:
            
            _query_params.append(('finance_emp', finance_emp))
            
        if finance_down_payment is not None:
            
            _query_params.append(('finance_down_payment', finance_down_payment))
            
        if finance_down_payment_per is not None:
            
            _query_params.append(('finance_down_payment_per', finance_down_payment_per))
            
        if car_type is not None:
            
            _query_params.append(('car_type', car_type))
            
        if carfax_1_owner is not None:
            
            _query_params.append(('carfax_1_owner', carfax_1_owner))
            
        if carfax_clean_title is not None:
            
            _query_params.append(('carfax_clean_title', carfax_clean_title))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        if make is not None:
            
            _query_params.append(('make', make))
            
        if model is not None:
            
            _query_params.append(('model', model))
            
        if trim is not None:
            
            _query_params.append(('trim', trim))
            
        if vin is not None:
            
            _query_params.append(('vin', vin))
            
        if body_type is not None:
            
            _query_params.append(('body_type', body_type))
            
        if body_subtype is not None:
            
            _query_params.append(('body_subtype', body_subtype))
            
        if vehicle_type is not None:
            
            _query_params.append(('vehicle_type', vehicle_type))
            
        if vins is not None:
            
            _query_params.append(('vins', vins))
            
        if taxonomy_vins is not None:
            
            _query_params.append(('taxonomy_vins', taxonomy_vins))
            
        if ymmt is not None:
            
            _query_params.append(('ymmt', ymmt))
            
        if match is not None:
            
            _query_params.append(('match', match))
            
        if cylinders is not None:
            
            _query_params.append(('cylinders', cylinders))
            
        if transmission is not None:
            
            _query_params.append(('transmission', transmission))
            
        if doors is not None:
            
            _query_params.append(('doors', doors))
            
        if drivetrain is not None:
            
            _query_params.append(('drivetrain', drivetrain))
            
        if exterior_color is not None:
            
            _query_params.append(('exterior_color', exterior_color))
            
        if interior_color is not None:
            
            _query_params.append(('interior_color', interior_color))
            
        if base_exterior_color is not None:
            
            _query_params.append(('base_exterior_color', base_exterior_color))
            
        if base_interior_color is not None:
            
            _query_params.append(('base_interior_color', base_interior_color))
            
        if engine is not None:
            
            _query_params.append(('engine', engine))
            
        if engine_size is not None:
            
            _query_params.append(('engine_size', engine_size))
            
        if engine_aspiration is not None:
            
            _query_params.append(('engine_aspiration', engine_aspiration))
            
        if engine_block is not None:
            
            _query_params.append(('engine_block', engine_block))
            
        if highway_mpg_range is not None:
            
            _query_params.append(('highway_mpg_range', highway_mpg_range))
            
        if city_mpg_range is not None:
            
            _query_params.append(('city_mpg_range', city_mpg_range))
            
        if miles_range is not None:
            
            _query_params.append(('miles_range', miles_range))
            
        if price_range is not None:
            
            _query_params.append(('price_range', price_range))
            
        if msrp_range is not None:
            
            _query_params.append(('msrp_range', msrp_range))
            
        if dom_range is not None:
            
            _query_params.append(('dom_range', dom_range))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if include_non_vin_listings is not None:
            
            _query_params.append(('include_non_vin_listings', include_non_vin_listings))
            
        if msa_code is not None:
            
            _query_params.append(('msa_code', msa_code))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        if facet_sort is not None:
            
            _query_params.append(('facet_sort', facet_sort))
            
        if stats is not None:
            
            _query_params.append(('stats', stats))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if plot is not None:
            
            _query_params.append(('plot', plot))
            
        if nodedup is not None:
            
            _query_params.append(('nodedup', nodedup))
            
        if dedup is not None:
            
            _query_params.append(('dedup', dedup))
            
        if owned is not None:
            
            _query_params.append(('owned', owned))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if trim_o is not None:
            
            _query_params.append(('trim_o', trim_o))
            
        if trim_r is not None:
            
            _query_params.append(('trim_r', trim_r))
            
        if dom_active_range is not None:
            
            _query_params.append(('dom_active_range', dom_active_range))
            
        if dom_180_range is not None:
            
            _query_params.append(('dom_180_range', dom_180_range))
            
        if exclude_certified is not None:
            
            _query_params.append(('exclude_certified', exclude_certified))
            
        if fuel_type is not None:
            
            _query_params.append(('fuel_type', fuel_type))
            
        if dealer_type is not None:
            
            _query_params.append(('dealer_type', dealer_type))
            
        if photo_links is not None:
            
            _query_params.append(('photo_links', photo_links))
            
        if photo_links_cached is not None:
            
            _query_params.append(('photo_links_cached', photo_links_cached))
            
        if stock_no is not None:
            
            _query_params.append(('stock_no', stock_no))
            
        if last_seen_range is not None:
            
            _query_params.append(('last_seen_range', last_seen_range))
            
        if first_seen_range is not None:
            
            _query_params.append(('first_seen_range', first_seen_range))
            
        if first_seen_at_source_range is not None:
            
            _query_params.append(('first_seen_at_source_range', first_seen_at_source_range))
            
        if first_seen_at_mc_range is not None:
            
            _query_params.append(('first_seen_at_mc_range', first_seen_at_mc_range))
            
        if last_seen_days is not None:
            
            _query_params.append(('last_seen_days', last_seen_days))
            
        if first_seen_days is not None:
            
            _query_params.append(('first_seen_days', first_seen_days))
            
        if first_seen_at_source_days is not None:
            
            _query_params.append(('first_seen_at_source_days', first_seen_at_source_days))
            
        if first_seen_at_mc_days is not None:
            
            _query_params.append(('first_seen_at_mc_days', first_seen_at_mc_days))
            
        if inventory_type is not None:
            
            _query_params.append(('inventory_type', inventory_type))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if car_rank_request is not None:
            _body_params = car_rank_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/car/active/rank',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



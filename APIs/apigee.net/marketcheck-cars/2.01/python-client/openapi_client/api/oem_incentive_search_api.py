# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.search_response import SearchResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OEMIncentiveSearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def oem_search(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        offer_type: Annotated[Optional[StrictStr], Field(description="The type of the incentive")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        msrp: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        apr: Annotated[Optional[StrictStr], Field(description="APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        monthly: Annotated[Optional[StrictStr], Field(description="To filter listing on Monthly payment amount, usually populated in Lease offers")] = None,
        monthly_per_thousand: Annotated[Optional[StrictStr], Field(description="To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate")] = None,
        down_payment: Annotated[Optional[StrictStr], Field(description="To filter listing on down payment offer on car")] = None,
        due_at_signing: Annotated[Optional[StrictStr], Field(description="To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc")] = None,
        security_deposit: Annotated[Optional[StrictStr], Field(description="To filter listing on security deposit required for the offer")] = None,
        disposition_fee: Annotated[Optional[StrictStr], Field(description="To filter listing on disposition fee of the car")] = None,
        acquisition_fee: Annotated[Optional[StrictStr], Field(description="To filter listing on acquisition fee of the car")] = None,
        duration: Annotated[Optional[StrictStr], Field(description="To filter listing on offer duration in months")] = None,
        dealer_contribution: Annotated[Optional[StrictStr], Field(description="To filter listing on any contribution from dealer's side")] = None,
        mileage_charge: Annotated[Optional[StrictStr], Field(description="Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000")] = None,
        mileage_charge_limit: Annotated[Optional[StrictStr], Field(description="To filter listing on mileage charge limit the offer is valid up to under the default clauses")] = None,
        cashback_amount: Annotated[Optional[StrictStr], Field(description="To filter listing on cashback amounts listed in offer")] = None,
        cashback_target_group: Annotated[Optional[StrictStr], Field(description="To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc")] = None,
        lease_end_purchase_option: Annotated[Optional[StrictStr], Field(description="To filter listing on amount at the lease end to pay for buying the car")] = None,
        net_capitalised_cost: Annotated[Optional[StrictStr], Field(description="To filter listing on net capitalised cost of the car")] = None,
        gross_capitalised_cost: Annotated[Optional[StrictStr], Field(description="To filter listing on gross capitalised cost of the car")] = None,
        total_monthly_payment: Annotated[Optional[StrictStr], Field(description="To filter listing on gross capitalised cost of the car")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="To search a substring across entire document")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResponse:
        """Gets oem incentive listings for the given search criteria

        This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param offer_type: The type of the incentive
        :type offer_type: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param msrp: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp: str
        :param apr: APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type apr: str
        :param monthly: To filter listing on Monthly payment amount, usually populated in Lease offers
        :type monthly: str
        :param monthly_per_thousand: To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate
        :type monthly_per_thousand: str
        :param down_payment: To filter listing on down payment offer on car
        :type down_payment: str
        :param due_at_signing: To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc
        :type due_at_signing: str
        :param security_deposit: To filter listing on security deposit required for the offer
        :type security_deposit: str
        :param disposition_fee: To filter listing on disposition fee of the car
        :type disposition_fee: str
        :param acquisition_fee: To filter listing on acquisition fee of the car
        :type acquisition_fee: str
        :param duration: To filter listing on offer duration in months
        :type duration: str
        :param dealer_contribution: To filter listing on any contribution from dealer's side
        :type dealer_contribution: str
        :param mileage_charge: Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000
        :type mileage_charge: str
        :param mileage_charge_limit: To filter listing on mileage charge limit the offer is valid up to under the default clauses
        :type mileage_charge_limit: str
        :param cashback_amount: To filter listing on cashback amounts listed in offer
        :type cashback_amount: str
        :param cashback_target_group: To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc
        :type cashback_target_group: str
        :param lease_end_purchase_option: To filter listing on amount at the lease end to pay for buying the car
        :type lease_end_purchase_option: str
        :param net_capitalised_cost: To filter listing on net capitalised cost of the car
        :type net_capitalised_cost: str
        :param gross_capitalised_cost: To filter listing on gross capitalised cost of the car
        :type gross_capitalised_cost: str
        :param total_monthly_payment: To filter listing on gross capitalised cost of the car
        :type total_monthly_payment: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param search_text: To search a substring across entire document
        :type search_text: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oem_search_serialize(
            api_key=api_key,
            offer_type=offer_type,
            year=year,
            make=make,
            model=model,
            trim=trim,
            msrp=msrp,
            apr=apr,
            monthly=monthly,
            monthly_per_thousand=monthly_per_thousand,
            down_payment=down_payment,
            due_at_signing=due_at_signing,
            security_deposit=security_deposit,
            disposition_fee=disposition_fee,
            acquisition_fee=acquisition_fee,
            duration=duration,
            dealer_contribution=dealer_contribution,
            mileage_charge=mileage_charge,
            mileage_charge_limit=mileage_charge_limit,
            cashback_amount=cashback_amount,
            cashback_target_group=cashback_target_group,
            lease_end_purchase_option=lease_end_purchase_option,
            net_capitalised_cost=net_capitalised_cost,
            gross_capitalised_cost=gross_capitalised_cost,
            total_monthly_payment=total_monthly_payment,
            zip=zip,
            city=city,
            state=state,
            country=country,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            search_text=search_text,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def oem_search_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        offer_type: Annotated[Optional[StrictStr], Field(description="The type of the incentive")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        msrp: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        apr: Annotated[Optional[StrictStr], Field(description="APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        monthly: Annotated[Optional[StrictStr], Field(description="To filter listing on Monthly payment amount, usually populated in Lease offers")] = None,
        monthly_per_thousand: Annotated[Optional[StrictStr], Field(description="To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate")] = None,
        down_payment: Annotated[Optional[StrictStr], Field(description="To filter listing on down payment offer on car")] = None,
        due_at_signing: Annotated[Optional[StrictStr], Field(description="To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc")] = None,
        security_deposit: Annotated[Optional[StrictStr], Field(description="To filter listing on security deposit required for the offer")] = None,
        disposition_fee: Annotated[Optional[StrictStr], Field(description="To filter listing on disposition fee of the car")] = None,
        acquisition_fee: Annotated[Optional[StrictStr], Field(description="To filter listing on acquisition fee of the car")] = None,
        duration: Annotated[Optional[StrictStr], Field(description="To filter listing on offer duration in months")] = None,
        dealer_contribution: Annotated[Optional[StrictStr], Field(description="To filter listing on any contribution from dealer's side")] = None,
        mileage_charge: Annotated[Optional[StrictStr], Field(description="Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000")] = None,
        mileage_charge_limit: Annotated[Optional[StrictStr], Field(description="To filter listing on mileage charge limit the offer is valid up to under the default clauses")] = None,
        cashback_amount: Annotated[Optional[StrictStr], Field(description="To filter listing on cashback amounts listed in offer")] = None,
        cashback_target_group: Annotated[Optional[StrictStr], Field(description="To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc")] = None,
        lease_end_purchase_option: Annotated[Optional[StrictStr], Field(description="To filter listing on amount at the lease end to pay for buying the car")] = None,
        net_capitalised_cost: Annotated[Optional[StrictStr], Field(description="To filter listing on net capitalised cost of the car")] = None,
        gross_capitalised_cost: Annotated[Optional[StrictStr], Field(description="To filter listing on gross capitalised cost of the car")] = None,
        total_monthly_payment: Annotated[Optional[StrictStr], Field(description="To filter listing on gross capitalised cost of the car")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="To search a substring across entire document")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResponse]:
        """Gets oem incentive listings for the given search criteria

        This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param offer_type: The type of the incentive
        :type offer_type: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param msrp: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp: str
        :param apr: APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type apr: str
        :param monthly: To filter listing on Monthly payment amount, usually populated in Lease offers
        :type monthly: str
        :param monthly_per_thousand: To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate
        :type monthly_per_thousand: str
        :param down_payment: To filter listing on down payment offer on car
        :type down_payment: str
        :param due_at_signing: To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc
        :type due_at_signing: str
        :param security_deposit: To filter listing on security deposit required for the offer
        :type security_deposit: str
        :param disposition_fee: To filter listing on disposition fee of the car
        :type disposition_fee: str
        :param acquisition_fee: To filter listing on acquisition fee of the car
        :type acquisition_fee: str
        :param duration: To filter listing on offer duration in months
        :type duration: str
        :param dealer_contribution: To filter listing on any contribution from dealer's side
        :type dealer_contribution: str
        :param mileage_charge: Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000
        :type mileage_charge: str
        :param mileage_charge_limit: To filter listing on mileage charge limit the offer is valid up to under the default clauses
        :type mileage_charge_limit: str
        :param cashback_amount: To filter listing on cashback amounts listed in offer
        :type cashback_amount: str
        :param cashback_target_group: To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc
        :type cashback_target_group: str
        :param lease_end_purchase_option: To filter listing on amount at the lease end to pay for buying the car
        :type lease_end_purchase_option: str
        :param net_capitalised_cost: To filter listing on net capitalised cost of the car
        :type net_capitalised_cost: str
        :param gross_capitalised_cost: To filter listing on gross capitalised cost of the car
        :type gross_capitalised_cost: str
        :param total_monthly_payment: To filter listing on gross capitalised cost of the car
        :type total_monthly_payment: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param search_text: To search a substring across entire document
        :type search_text: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oem_search_serialize(
            api_key=api_key,
            offer_type=offer_type,
            year=year,
            make=make,
            model=model,
            trim=trim,
            msrp=msrp,
            apr=apr,
            monthly=monthly,
            monthly_per_thousand=monthly_per_thousand,
            down_payment=down_payment,
            due_at_signing=due_at_signing,
            security_deposit=security_deposit,
            disposition_fee=disposition_fee,
            acquisition_fee=acquisition_fee,
            duration=duration,
            dealer_contribution=dealer_contribution,
            mileage_charge=mileage_charge,
            mileage_charge_limit=mileage_charge_limit,
            cashback_amount=cashback_amount,
            cashback_target_group=cashback_target_group,
            lease_end_purchase_option=lease_end_purchase_option,
            net_capitalised_cost=net_capitalised_cost,
            gross_capitalised_cost=gross_capitalised_cost,
            total_monthly_payment=total_monthly_payment,
            zip=zip,
            city=city,
            state=state,
            country=country,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            search_text=search_text,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def oem_search_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        offer_type: Annotated[Optional[StrictStr], Field(description="The type of the incentive")] = None,
        year: Annotated[Optional[Annotated[str, Field(min_length=4, strict=True)]], Field(description="To filter listing on their year")] = None,
        make: Annotated[Optional[StrictStr], Field(description="To filter listings on their make")] = None,
        model: Annotated[Optional[StrictStr], Field(description="To filter listings on their model")] = None,
        trim: Annotated[Optional[StrictStr], Field(description="To filter listing on their trim")] = None,
        msrp: Annotated[Optional[StrictStr], Field(description="MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        apr: Annotated[Optional[StrictStr], Field(description="APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000")] = None,
        monthly: Annotated[Optional[StrictStr], Field(description="To filter listing on Monthly payment amount, usually populated in Lease offers")] = None,
        monthly_per_thousand: Annotated[Optional[StrictStr], Field(description="To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate")] = None,
        down_payment: Annotated[Optional[StrictStr], Field(description="To filter listing on down payment offer on car")] = None,
        due_at_signing: Annotated[Optional[StrictStr], Field(description="To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc")] = None,
        security_deposit: Annotated[Optional[StrictStr], Field(description="To filter listing on security deposit required for the offer")] = None,
        disposition_fee: Annotated[Optional[StrictStr], Field(description="To filter listing on disposition fee of the car")] = None,
        acquisition_fee: Annotated[Optional[StrictStr], Field(description="To filter listing on acquisition fee of the car")] = None,
        duration: Annotated[Optional[StrictStr], Field(description="To filter listing on offer duration in months")] = None,
        dealer_contribution: Annotated[Optional[StrictStr], Field(description="To filter listing on any contribution from dealer's side")] = None,
        mileage_charge: Annotated[Optional[StrictStr], Field(description="Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000")] = None,
        mileage_charge_limit: Annotated[Optional[StrictStr], Field(description="To filter listing on mileage charge limit the offer is valid up to under the default clauses")] = None,
        cashback_amount: Annotated[Optional[StrictStr], Field(description="To filter listing on cashback amounts listed in offer")] = None,
        cashback_target_group: Annotated[Optional[StrictStr], Field(description="To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc")] = None,
        lease_end_purchase_option: Annotated[Optional[StrictStr], Field(description="To filter listing on amount at the lease end to pay for buying the car")] = None,
        net_capitalised_cost: Annotated[Optional[StrictStr], Field(description="To filter listing on net capitalised cost of the car")] = None,
        gross_capitalised_cost: Annotated[Optional[StrictStr], Field(description="To filter listing on gross capitalised cost of the car")] = None,
        total_monthly_payment: Annotated[Optional[StrictStr], Field(description="To filter listing on gross capitalised cost of the car")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        search_text: Annotated[Optional[StrictStr], Field(description="To search a substring across entire document")] = None,
        last_seen_range: Annotated[Optional[StrictStr], Field(description="Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        first_seen_range: Annotated[Optional[StrictStr], Field(description="First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        facet_sort: Annotated[Optional[StrictStr], Field(description="Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param")] = None,
        stats: Annotated[Optional[StrictStr], Field(description="The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets oem incentive listings for the given search criteria

        This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom for your search

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param offer_type: The type of the incentive
        :type offer_type: str
        :param year: To filter listing on their year
        :type year: str
        :param make: To filter listings on their make
        :type make: str
        :param model: To filter listings on their model
        :type model: str
        :param trim: To filter listing on their trim
        :type trim: str
        :param msrp: MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type msrp: str
        :param apr: APR range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :type apr: str
        :param monthly: To filter listing on Monthly payment amount, usually populated in Lease offers
        :type monthly: str
        :param monthly_per_thousand: To filter listing on monthly amount to be paid by customer for every $1000 financed at the advertised APR rate
        :type monthly_per_thousand: str
        :param down_payment: To filter listing on down payment offer on car
        :type down_payment: str
        :param due_at_signing: To filter listing on total amount due at signing, that usually includes first month payment, down payment, acquisition fee etc
        :type due_at_signing: str
        :param security_deposit: To filter listing on security deposit required for the offer
        :type security_deposit: str
        :param disposition_fee: To filter listing on disposition fee of the car
        :type disposition_fee: str
        :param acquisition_fee: To filter listing on acquisition fee of the car
        :type acquisition_fee: str
        :param duration: To filter listing on offer duration in months
        :type duration: str
        :param dealer_contribution: To filter listing on any contribution from dealer's side
        :type dealer_contribution: str
        :param mileage_charge: Mileage Charge Range range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 100-1000
        :type mileage_charge: str
        :param mileage_charge_limit: To filter listing on mileage charge limit the offer is valid up to under the default clauses
        :type mileage_charge_limit: str
        :param cashback_amount: To filter listing on cashback amounts listed in offer
        :type cashback_amount: str
        :param cashback_target_group: To filter listing on the demographic or any other entity for whom this cashback offer is for. Not all target groups are identified but the most common ones are tagged like Military, Grad students Current owners etc
        :type cashback_target_group: str
        :param lease_end_purchase_option: To filter listing on amount at the lease end to pay for buying the car
        :type lease_end_purchase_option: str
        :param net_capitalised_cost: To filter listing on net capitalised cost of the car
        :type net_capitalised_cost: str
        :param gross_capitalised_cost: To filter listing on gross capitalised cost of the car
        :type gross_capitalised_cost: str
        :param total_monthly_payment: To filter listing on gross capitalised cost of the car
        :type total_monthly_payment: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param search_text: To search a substring across entire document
        :type search_text: str
        :param last_seen_range: Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type last_seen_range: str
        :param first_seen_range: First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623
        :type first_seen_range: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param facet_sort: Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param
        :type facet_sort: str
        :param stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :type stats: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oem_search_serialize(
            api_key=api_key,
            offer_type=offer_type,
            year=year,
            make=make,
            model=model,
            trim=trim,
            msrp=msrp,
            apr=apr,
            monthly=monthly,
            monthly_per_thousand=monthly_per_thousand,
            down_payment=down_payment,
            due_at_signing=due_at_signing,
            security_deposit=security_deposit,
            disposition_fee=disposition_fee,
            acquisition_fee=acquisition_fee,
            duration=duration,
            dealer_contribution=dealer_contribution,
            mileage_charge=mileage_charge,
            mileage_charge_limit=mileage_charge_limit,
            cashback_amount=cashback_amount,
            cashback_target_group=cashback_target_group,
            lease_end_purchase_option=lease_end_purchase_option,
            net_capitalised_cost=net_capitalised_cost,
            gross_capitalised_cost=gross_capitalised_cost,
            total_monthly_payment=total_monthly_payment,
            zip=zip,
            city=city,
            state=state,
            country=country,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            search_text=search_text,
            last_seen_range=last_seen_range,
            first_seen_range=first_seen_range,
            sort_by=sort_by,
            sort_order=sort_order,
            rows=rows,
            start=start,
            facets=facets,
            range_facets=range_facets,
            facet_sort=facet_sort,
            stats=stats,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _oem_search_serialize(
        self,
        api_key,
        offer_type,
        year,
        make,
        model,
        trim,
        msrp,
        apr,
        monthly,
        monthly_per_thousand,
        down_payment,
        due_at_signing,
        security_deposit,
        disposition_fee,
        acquisition_fee,
        duration,
        dealer_contribution,
        mileage_charge,
        mileage_charge_limit,
        cashback_amount,
        cashback_target_group,
        lease_end_purchase_option,
        net_capitalised_cost,
        gross_capitalised_cost,
        total_monthly_payment,
        zip,
        city,
        state,
        country,
        latitude,
        longitude,
        radius,
        search_text,
        last_seen_range,
        first_seen_range,
        sort_by,
        sort_order,
        rows,
        start,
        facets,
        range_facets,
        facet_sort,
        stats,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if offer_type is not None:
            
            _query_params.append(('offer_type', offer_type))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        if make is not None:
            
            _query_params.append(('make', make))
            
        if model is not None:
            
            _query_params.append(('model', model))
            
        if trim is not None:
            
            _query_params.append(('trim', trim))
            
        if msrp is not None:
            
            _query_params.append(('msrp', msrp))
            
        if apr is not None:
            
            _query_params.append(('apr', apr))
            
        if monthly is not None:
            
            _query_params.append(('monthly', monthly))
            
        if monthly_per_thousand is not None:
            
            _query_params.append(('monthly_per_thousand', monthly_per_thousand))
            
        if down_payment is not None:
            
            _query_params.append(('down_payment', down_payment))
            
        if due_at_signing is not None:
            
            _query_params.append(('due_at_signing', due_at_signing))
            
        if security_deposit is not None:
            
            _query_params.append(('security_deposit', security_deposit))
            
        if disposition_fee is not None:
            
            _query_params.append(('disposition_fee', disposition_fee))
            
        if acquisition_fee is not None:
            
            _query_params.append(('acquisition_fee', acquisition_fee))
            
        if duration is not None:
            
            _query_params.append(('duration', duration))
            
        if dealer_contribution is not None:
            
            _query_params.append(('dealer_contribution', dealer_contribution))
            
        if mileage_charge is not None:
            
            _query_params.append(('mileage_charge', mileage_charge))
            
        if mileage_charge_limit is not None:
            
            _query_params.append(('mileage_charge_limit', mileage_charge_limit))
            
        if cashback_amount is not None:
            
            _query_params.append(('cashback_amount', cashback_amount))
            
        if cashback_target_group is not None:
            
            _query_params.append(('cashback_target_group', cashback_target_group))
            
        if lease_end_purchase_option is not None:
            
            _query_params.append(('lease_end_purchase_option', lease_end_purchase_option))
            
        if net_capitalised_cost is not None:
            
            _query_params.append(('net_capitalised_cost', net_capitalised_cost))
            
        if gross_capitalised_cost is not None:
            
            _query_params.append(('gross_capitalised_cost', gross_capitalised_cost))
            
        if total_monthly_payment is not None:
            
            _query_params.append(('total_monthly_payment', total_monthly_payment))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if search_text is not None:
            
            _query_params.append(('search_text', search_text))
            
        if last_seen_range is not None:
            
            _query_params.append(('last_seen_range', last_seen_range))
            
        if first_seen_range is not None:
            
            _query_params.append(('first_seen_range', first_seen_range))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        if facet_sort is not None:
            
            _query_params.append(('facet_sort', facet_sort))
            
        if stats is not None:
            
            _query_params.append(('stats', stats))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/car/incentive/oem',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



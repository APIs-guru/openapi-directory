# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.historical_listing import HistoricalListing

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CarsHistoryAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_car_history(
        self,
        vin: Annotated[str, Field(min_length=10, strict=True, description="The VIN to identify the car. Must be a valid 17 char VIN")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="List of fields to fetch, in case the default fields list in the response is to be trimmed down")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        include_duplicates: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether to include duplicate historical records as well in the response")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[HistoricalListing]:
        """Get a cars online listing history

        The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date

        :param vin: The VIN to identify the car. Must be a valid 17 char VIN (required)
        :type vin: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param fields: List of fields to fetch, in case the default fields list in the response is to be trimmed down
        :type fields: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param include_duplicates: Flag to indicate whether to include duplicate historical records as well in the response
        :type include_duplicates: bool
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_car_history_serialize(
            vin=vin,
            api_key=api_key,
            fields=fields,
            page=page,
            include_duplicates=include_duplicates,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HistoricalListing]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_car_history_with_http_info(
        self,
        vin: Annotated[str, Field(min_length=10, strict=True, description="The VIN to identify the car. Must be a valid 17 char VIN")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="List of fields to fetch, in case the default fields list in the response is to be trimmed down")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        include_duplicates: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether to include duplicate historical records as well in the response")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[HistoricalListing]]:
        """Get a cars online listing history

        The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date

        :param vin: The VIN to identify the car. Must be a valid 17 char VIN (required)
        :type vin: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param fields: List of fields to fetch, in case the default fields list in the response is to be trimmed down
        :type fields: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param include_duplicates: Flag to indicate whether to include duplicate historical records as well in the response
        :type include_duplicates: bool
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_car_history_serialize(
            vin=vin,
            api_key=api_key,
            fields=fields,
            page=page,
            include_duplicates=include_duplicates,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HistoricalListing]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_car_history_without_preload_content(
        self,
        vin: Annotated[str, Field(min_length=10, strict=True, description="The VIN to identify the car. Must be a valid 17 char VIN")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="List of fields to fetch, in case the default fields list in the response is to be trimmed down")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        include_duplicates: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether to include duplicate historical records as well in the response")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a cars online listing history

        The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date

        :param vin: The VIN to identify the car. Must be a valid 17 char VIN (required)
        :type vin: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param fields: List of fields to fetch, in case the default fields list in the response is to be trimmed down
        :type fields: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param include_duplicates: Flag to indicate whether to include duplicate historical records as well in the response
        :type include_duplicates: bool
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_car_history_serialize(
            vin=vin,
            api_key=api_key,
            fields=fields,
            page=page,
            include_duplicates=include_duplicates,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HistoricalListing]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_car_history_serialize(
        self,
        vin,
        api_key,
        fields,
        page,
        include_duplicates,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if vin is not None:
            _path_params['vin'] = vin
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if include_duplicates is not None:
            
            _query_params.append(('include_duplicates', include_duplicates))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/history/car/{vin}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def history_car_uk_vrm_get(
        self,
        vrm: Annotated[StrictStr, Field(description="The VRM to identify the car.")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        include_duplicates: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether to include duplicate historical records as well in the response")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[HistoricalListing]:
        """Get a cars online listing history

        The history API returns online listing history for a car identified by its VRM. History listings are sorted in the descending order of the listing date / last seen date

        :param vrm: The VRM to identify the car. (required)
        :type vrm: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param include_duplicates: Flag to indicate whether to include duplicate historical records as well in the response
        :type include_duplicates: bool
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._history_car_uk_vrm_get_serialize(
            vrm=vrm,
            api_key=api_key,
            page=page,
            include_duplicates=include_duplicates,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HistoricalListing]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def history_car_uk_vrm_get_with_http_info(
        self,
        vrm: Annotated[StrictStr, Field(description="The VRM to identify the car.")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        include_duplicates: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether to include duplicate historical records as well in the response")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[HistoricalListing]]:
        """Get a cars online listing history

        The history API returns online listing history for a car identified by its VRM. History listings are sorted in the descending order of the listing date / last seen date

        :param vrm: The VRM to identify the car. (required)
        :type vrm: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param include_duplicates: Flag to indicate whether to include duplicate historical records as well in the response
        :type include_duplicates: bool
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._history_car_uk_vrm_get_serialize(
            vrm=vrm,
            api_key=api_key,
            page=page,
            include_duplicates=include_duplicates,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HistoricalListing]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def history_car_uk_vrm_get_without_preload_content(
        self,
        vrm: Annotated[StrictStr, Field(description="The VRM to identify the car.")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number to fetch the results for the given criteria. Default is 1.")] = None,
        include_duplicates: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether to include duplicate historical records as well in the response")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a cars online listing history

        The history API returns online listing history for a car identified by its VRM. History listings are sorted in the descending order of the listing date / last seen date

        :param vrm: The VRM to identify the car. (required)
        :type vrm: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param page: Page number to fetch the results for the given criteria. Default is 1.
        :type page: float
        :param include_duplicates: Flag to indicate whether to include duplicate historical records as well in the response
        :type include_duplicates: bool
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._history_car_uk_vrm_get_serialize(
            vrm=vrm,
            api_key=api_key,
            page=page,
            include_duplicates=include_duplicates,
            sort_order=sort_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HistoricalListing]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _history_car_uk_vrm_get_serialize(
        self,
        vrm,
        api_key,
        page,
        include_duplicates,
        sort_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if vrm is not None:
            _path_params['vrm'] = vrm
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if include_duplicates is not None:
            
            _query_params.append(('include_duplicates', include_duplicates))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/history/car/uk/{vrm}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.dealer import Dealer
from openapi_client.models.dealers_response import DealersResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DealerAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def dealer_car_uk_id_get(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dealer:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_car_uk_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealer_car_uk_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dealer]:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_car_uk_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealer_car_uk_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_car_uk_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealer_car_uk_id_get_serialize(
        self,
        id,
        api_key,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealer/car/uk/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealer_heavy_equipment_id_get(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dealer:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_heavy_equipment_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealer_heavy_equipment_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dealer]:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_heavy_equipment_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealer_heavy_equipment_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_heavy_equipment_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealer_heavy_equipment_id_get_serialize(
        self,
        id,
        api_key,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealer/heavy-equipment/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealer_motorcycle_id_get(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dealer:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_motorcycle_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealer_motorcycle_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dealer]:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_motorcycle_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealer_motorcycle_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_motorcycle_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealer_motorcycle_id_get_serialize(
        self,
        id,
        api_key,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealer/motorcycle/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealer_rv_id_get(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dealer:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_rv_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealer_rv_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dealer]:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_rv_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealer_rv_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_rv_id_get_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealer_rv_id_get_serialize(
        self,
        id,
        api_key,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealer/rv/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealer_search(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealersResponse:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_search_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealer_search_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealersResponse]:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_search_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealer_search_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealer_search_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealer_search_serialize(
        self,
        api_key,
        latitude,
        longitude,
        radius,
        rows,
        start,
        country,
        dealer_type,
        city,
        state,
        listing_count_range,
        inventory_url,
        zip,
        sort_by,
        sort_order,
        provider,
        facets,
        range_facets,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if dealer_type is not None:
            
            _query_params.append(('dealer_type', dealer_type))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if listing_count_range is not None:
            
            _query_params.append(('listing_count_range', listing_count_range))
            
        if inventory_url is not None:
            
            _query_params.append(('inventory_url', inventory_url))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealers/car',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealers_car_uk_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        county: Annotated[Optional[StrictStr], Field(description="To filter listing on county in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="To filter listing on postal code around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealersResponse:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param county: To filter listing on county in which they are listed
        :type county: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param postal_code: To filter listing on postal code around which they are listed
        :type postal_code: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_car_uk_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            county=county,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            postal_code=postal_code,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealers_car_uk_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        county: Annotated[Optional[StrictStr], Field(description="To filter listing on county in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="To filter listing on postal code around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealersResponse]:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param county: To filter listing on county in which they are listed
        :type county: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param postal_code: To filter listing on postal code around which they are listed
        :type postal_code: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_car_uk_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            county=county,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            postal_code=postal_code,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealers_car_uk_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        county: Annotated[Optional[StrictStr], Field(description="To filter listing on county in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="To filter listing on postal code around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param county: To filter listing on county in which they are listed
        :type county: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param postal_code: To filter listing on postal code around which they are listed
        :type postal_code: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_car_uk_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            county=county,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            postal_code=postal_code,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealers_car_uk_get_serialize(
        self,
        api_key,
        latitude,
        longitude,
        radius,
        rows,
        start,
        country,
        dealer_type,
        city,
        county,
        listing_count_range,
        inventory_url,
        postal_code,
        sort_by,
        sort_order,
        provider,
        facets,
        range_facets,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if dealer_type is not None:
            
            _query_params.append(('dealer_type', dealer_type))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if county is not None:
            
            _query_params.append(('county', county))
            
        if listing_count_range is not None:
            
            _query_params.append(('listing_count_range', listing_count_range))
            
        if inventory_url is not None:
            
            _query_params.append(('inventory_url', inventory_url))
            
        if postal_code is not None:
            
            _query_params.append(('postal_code', postal_code))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealers/car/uk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealers_heavy_equipment_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealersResponse:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_heavy_equipment_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealers_heavy_equipment_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealersResponse]:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_heavy_equipment_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealers_heavy_equipment_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_heavy_equipment_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealers_heavy_equipment_get_serialize(
        self,
        api_key,
        latitude,
        longitude,
        radius,
        rows,
        start,
        country,
        dealer_type,
        city,
        state,
        listing_count_range,
        inventory_url,
        zip,
        sort_by,
        sort_order,
        provider,
        facets,
        range_facets,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if dealer_type is not None:
            
            _query_params.append(('dealer_type', dealer_type))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if listing_count_range is not None:
            
            _query_params.append(('listing_count_range', listing_count_range))
            
        if inventory_url is not None:
            
            _query_params.append(('inventory_url', inventory_url))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealers/heavy-equipment',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealers_motorcycle_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealersResponse:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_motorcycle_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealers_motorcycle_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealersResponse]:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_motorcycle_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealers_motorcycle_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_motorcycle_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealers_motorcycle_get_serialize(
        self,
        api_key,
        latitude,
        longitude,
        radius,
        rows,
        start,
        country,
        dealer_type,
        city,
        state,
        listing_count_range,
        inventory_url,
        zip,
        sort_by,
        sort_order,
        provider,
        facets,
        range_facets,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if dealer_type is not None:
            
            _query_params.append(('dealer_type', dealer_type))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if listing_count_range is not None:
            
            _query_params.append(('listing_count_range', listing_count_range))
            
        if inventory_url is not None:
            
            _query_params.append(('inventory_url', inventory_url))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealers/motorcycle',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dealers_rv_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealersResponse:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_rv_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dealers_rv_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealersResponse]:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_rv_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dealers_rv_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude component of location")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude component of location")] = None,
        radius: Annotated[Optional[Annotated[int, Field(le=7000, strict=True, ge=0)]], Field(description="Radius around the search location (Unit - Miles)")] = None,
        rows: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of results to return. Default is 10. Max is 50")] = None,
        start: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows")] = None,
        country: Annotated[Optional[StrictStr], Field(description="To filter listing on Country in which they are listed")] = None,
        dealer_type: Annotated[Optional[StrictStr], Field(description="Filter based on dealer type independant or franchise")] = None,
        city: Annotated[Optional[StrictStr], Field(description="To filter listing on City in which they are listed")] = None,
        state: Annotated[Optional[StrictStr], Field(description="To filter listing on State in which they are listed")] = None,
        listing_count_range: Annotated[Optional[StrictStr], Field(description="To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100")] = None,
        inventory_url: Annotated[Optional[StrictStr], Field(description="inventory_url of dealer to be searched")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="To filter listing on ZIP around which they are listed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort by field. Default sort field is distance from the given point")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order - asc or desc. Default sort order is asc")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.")] = None,
        range_facets: Annotated[Optional[StrictStr], Field(description="The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find car dealers around

        The dealers API returns a list of dealers around a given point and radius.

        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param latitude: Latitude component of location
        :type latitude: float
        :param longitude: Longitude component of location
        :type longitude: float
        :param radius: Radius around the search location (Unit - Miles)
        :type radius: int
        :param rows: Number of results to return. Default is 10. Max is 50
        :type rows: int
        :param start: Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows
        :type start: int
        :param country: To filter listing on Country in which they are listed
        :type country: str
        :param dealer_type: Filter based on dealer type independant or franchise
        :type dealer_type: str
        :param city: To filter listing on City in which they are listed
        :type city: str
        :param state: To filter listing on State in which they are listed
        :type state: str
        :param listing_count_range: To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100
        :type listing_count_range: str
        :param inventory_url: inventory_url of dealer to be searched
        :type inventory_url: str
        :param zip: To filter listing on ZIP around which they are listed
        :type zip: str
        :param sort_by: Sort by field. Default sort field is distance from the given point
        :type sort_by: str
        :param sort_order: Sort order - asc or desc. Default sort order is asc
        :type sort_order: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param facets: The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :type facets: str
        :param range_facets: The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond.
        :type range_facets: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dealers_rv_get_serialize(
            api_key=api_key,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            rows=rows,
            start=start,
            country=country,
            dealer_type=dealer_type,
            city=city,
            state=state,
            listing_count_range=listing_count_range,
            inventory_url=inventory_url,
            zip=zip,
            sort_by=sort_by,
            sort_order=sort_order,
            provider=provider,
            facets=facets,
            range_facets=range_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dealers_rv_get_serialize(
        self,
        api_key,
        latitude,
        longitude,
        radius,
        rows,
        start,
        country,
        dealer_type,
        city,
        state,
        listing_count_range,
        inventory_url,
        zip,
        sort_by,
        sort_order,
        provider,
        facets,
        range_facets,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if dealer_type is not None:
            
            _query_params.append(('dealer_type', dealer_type))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if listing_count_range is not None:
            
            _query_params.append(('listing_count_range', listing_count_range))
            
        if inventory_url is not None:
            
            _query_params.append(('inventory_url', inventory_url))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if range_facets is not None:
            
            _query_params.append(('range_facets', range_facets))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealers/rv',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dealer(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dealer:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealer_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dealer_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dealer]:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealer_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dealer_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Dealer id to get all the dealer info attributes")],
        api_key: Annotated[Optional[StrictStr], Field(description="The API Authentication Key. Mandatory with all API calls.")] = None,
        provider: Annotated[Optional[StrictBool], Field(description="boolean param to include site providers name in response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dealer by id

        Get a particular dealer's information by its id

        :param id: Dealer id to get all the dealer info attributes (required)
        :type id: str
        :param api_key: The API Authentication Key. Mandatory with all API calls.
        :type api_key: str
        :param provider: boolean param to include site providers name in response
        :type provider: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dealer_serialize(
            id=id,
            api_key=api_key,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dealer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dealer_serialize(
        self,
        id,
        api_key,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authorizeEndpoint'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dealer/car/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



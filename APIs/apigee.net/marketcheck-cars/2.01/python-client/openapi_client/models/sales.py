# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sales_stats import SalesStats
from typing import Optional, Set
from typing_extensions import Self

class Sales(BaseModel):
    """
    Sales count query response
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="City")
    counts: Optional[StrictInt] = Field(default=None, description="Sales count")
    cpo: Optional[StrictInt] = Field(default=None, description="cpo sales count")
    dom_stats: Optional[SalesStats] = None
    inventory_type: Optional[StrictStr] = Field(default=None, description="inventory_type")
    make: Optional[StrictStr] = Field(default=None, description="Make")
    miles_stats: Optional[SalesStats] = None
    model: Optional[StrictStr] = Field(default=None, description="model")
    non_cpo: Optional[StrictInt] = Field(default=None, description="Non-cpo sales count", alias="non-cpo")
    price_stats: Optional[SalesStats] = None
    state: Optional[StrictStr] = Field(default=None, description="State")
    taxonomy_vin: Optional[StrictStr] = Field(default=None, description="taxonomy_vin")
    trim: Optional[StrictStr] = Field(default=None, description="trim")
    year: Optional[StrictStr] = Field(default=None, description="year")
    __properties: ClassVar[List[str]] = ["city", "counts", "cpo", "dom_stats", "inventory_type", "make", "miles_stats", "model", "non-cpo", "price_stats", "state", "taxonomy_vin", "trim", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sales from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dom_stats
        if self.dom_stats:
            _dict['dom_stats'] = self.dom_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of miles_stats
        if self.miles_stats:
            _dict['miles_stats'] = self.miles_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_stats
        if self.price_stats:
            _dict['price_stats'] = self.price_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sales from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "counts": obj.get("counts"),
            "cpo": obj.get("cpo"),
            "dom_stats": SalesStats.from_dict(obj["dom_stats"]) if obj.get("dom_stats") is not None else None,
            "inventory_type": obj.get("inventory_type"),
            "make": obj.get("make"),
            "miles_stats": SalesStats.from_dict(obj["miles_stats"]) if obj.get("miles_stats") is not None else None,
            "model": obj.get("model"),
            "non-cpo": obj.get("non-cpo"),
            "price_stats": SalesStats.from_dict(obj["price_stats"]) if obj.get("price_stats") is not None else None,
            "state": obj.get("state"),
            "taxonomy_vin": obj.get("taxonomy_vin"),
            "trim": obj.get("trim"),
            "year": obj.get("year")
        })
        return _obj



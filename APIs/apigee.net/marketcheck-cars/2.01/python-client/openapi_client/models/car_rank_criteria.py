# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CarRankCriteria(BaseModel):
    """
    Ranking query request
    """ # noqa: E501
    carfax_1_owner: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Flag to indicate whether listing is carfax_1_owner.Weight for this is ranking process between 0-1.")
    carfax_clean_title: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Flag to indicate whether listing is carfax_clean_title.Weight for this is ranking process between 0-1")
    dom: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1")
    dom_180: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1")
    dom_active: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1")
    is_certified: Optional[Union[StrictFloat, StrictInt]] = Field(default=1, description="Certified car.Weight for this is ranking process between 0-1")
    miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Odometer reading / reported miles usage for the car.Weight for this is ranking process between 0-1")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Asking price for the vehicle. Weight for this is ranking process between 0-1.")
    __properties: ClassVar[List[str]] = ["carfax_1_owner", "carfax_clean_title", "dom", "dom_180", "dom_active", "is_certified", "miles", "price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CarRankCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CarRankCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carfax_1_owner": obj.get("carfax_1_owner") if obj.get("carfax_1_owner") is not None else 0.9,
            "carfax_clean_title": obj.get("carfax_clean_title") if obj.get("carfax_clean_title") is not None else 0.9,
            "dom": obj.get("dom") if obj.get("dom") is not None else 0.9,
            "dom_180": obj.get("dom_180") if obj.get("dom_180") is not None else 0.9,
            "dom_active": obj.get("dom_active") if obj.get("dom_active") is not None else 0.9,
            "is_certified": obj.get("is_certified") if obj.get("is_certified") is not None else 1,
            "miles": obj.get("miles") if obj.get("miles") is not None else 0.9,
            "price": obj.get("price") if obj.get("price") is not None else 0.9
        })
        return _obj



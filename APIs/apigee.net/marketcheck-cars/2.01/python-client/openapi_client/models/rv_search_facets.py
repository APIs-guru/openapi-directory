# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.facet_item import FacetItem
from typing import Optional, Set
from typing_extensions import Self

class RVSearchFacets(BaseModel):
    """
    RVSearchFacets
    """ # noqa: E501
    area: Optional[List[FacetItem]] = None
    awnings: Optional[List[FacetItem]] = None
    city: Optional[List[FacetItem]] = None
    var_class: Optional[List[FacetItem]] = Field(default=None, alias="class")
    dealer_id: Optional[List[FacetItem]] = None
    engine: Optional[List[FacetItem]] = None
    exterior_color: Optional[List[FacetItem]] = None
    fuel_type: Optional[List[FacetItem]] = None
    interior_color: Optional[List[FacetItem]] = None
    inventory_type: Optional[List[FacetItem]] = None
    length: Optional[List[FacetItem]] = None
    make: Optional[List[FacetItem]] = None
    model: Optional[List[FacetItem]] = None
    seller_name: Optional[List[FacetItem]] = None
    sleeps: Optional[List[FacetItem]] = None
    slideouts: Optional[List[FacetItem]] = None
    source: Optional[List[FacetItem]] = None
    state: Optional[List[FacetItem]] = None
    transmission: Optional[List[FacetItem]] = None
    year: Optional[List[FacetItem]] = None
    __properties: ClassVar[List[str]] = ["area", "awnings", "city", "class", "dealer_id", "engine", "exterior_color", "fuel_type", "interior_color", "inventory_type", "length", "make", "model", "seller_name", "sleeps", "slideouts", "source", "state", "transmission", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RVSearchFacets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in area (list)
        _items = []
        if self.area:
            for _item_area in self.area:
                if _item_area:
                    _items.append(_item_area.to_dict())
            _dict['area'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in awnings (list)
        _items = []
        if self.awnings:
            for _item_awnings in self.awnings:
                if _item_awnings:
                    _items.append(_item_awnings.to_dict())
            _dict['awnings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in city (list)
        _items = []
        if self.city:
            for _item_city in self.city:
                if _item_city:
                    _items.append(_item_city.to_dict())
            _dict['city'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_class (list)
        _items = []
        if self.var_class:
            for _item_var_class in self.var_class:
                if _item_var_class:
                    _items.append(_item_var_class.to_dict())
            _dict['class'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dealer_id (list)
        _items = []
        if self.dealer_id:
            for _item_dealer_id in self.dealer_id:
                if _item_dealer_id:
                    _items.append(_item_dealer_id.to_dict())
            _dict['dealer_id'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engine (list)
        _items = []
        if self.engine:
            for _item_engine in self.engine:
                if _item_engine:
                    _items.append(_item_engine.to_dict())
            _dict['engine'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exterior_color (list)
        _items = []
        if self.exterior_color:
            for _item_exterior_color in self.exterior_color:
                if _item_exterior_color:
                    _items.append(_item_exterior_color.to_dict())
            _dict['exterior_color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fuel_type (list)
        _items = []
        if self.fuel_type:
            for _item_fuel_type in self.fuel_type:
                if _item_fuel_type:
                    _items.append(_item_fuel_type.to_dict())
            _dict['fuel_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interior_color (list)
        _items = []
        if self.interior_color:
            for _item_interior_color in self.interior_color:
                if _item_interior_color:
                    _items.append(_item_interior_color.to_dict())
            _dict['interior_color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inventory_type (list)
        _items = []
        if self.inventory_type:
            for _item_inventory_type in self.inventory_type:
                if _item_inventory_type:
                    _items.append(_item_inventory_type.to_dict())
            _dict['inventory_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in length (list)
        _items = []
        if self.length:
            for _item_length in self.length:
                if _item_length:
                    _items.append(_item_length.to_dict())
            _dict['length'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in make (list)
        _items = []
        if self.make:
            for _item_make in self.make:
                if _item_make:
                    _items.append(_item_make.to_dict())
            _dict['make'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in model (list)
        _items = []
        if self.model:
            for _item_model in self.model:
                if _item_model:
                    _items.append(_item_model.to_dict())
            _dict['model'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_name (list)
        _items = []
        if self.seller_name:
            for _item_seller_name in self.seller_name:
                if _item_seller_name:
                    _items.append(_item_seller_name.to_dict())
            _dict['seller_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sleeps (list)
        _items = []
        if self.sleeps:
            for _item_sleeps in self.sleeps:
                if _item_sleeps:
                    _items.append(_item_sleeps.to_dict())
            _dict['sleeps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in slideouts (list)
        _items = []
        if self.slideouts:
            for _item_slideouts in self.slideouts:
                if _item_slideouts:
                    _items.append(_item_slideouts.to_dict())
            _dict['slideouts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in source (list)
        _items = []
        if self.source:
            for _item_source in self.source:
                if _item_source:
                    _items.append(_item_source.to_dict())
            _dict['source'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state (list)
        _items = []
        if self.state:
            for _item_state in self.state:
                if _item_state:
                    _items.append(_item_state.to_dict())
            _dict['state'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transmission (list)
        _items = []
        if self.transmission:
            for _item_transmission in self.transmission:
                if _item_transmission:
                    _items.append(_item_transmission.to_dict())
            _dict['transmission'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in year (list)
        _items = []
        if self.year:
            for _item_year in self.year:
                if _item_year:
                    _items.append(_item_year.to_dict())
            _dict['year'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RVSearchFacets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": [FacetItem.from_dict(_item) for _item in obj["area"]] if obj.get("area") is not None else None,
            "awnings": [FacetItem.from_dict(_item) for _item in obj["awnings"]] if obj.get("awnings") is not None else None,
            "city": [FacetItem.from_dict(_item) for _item in obj["city"]] if obj.get("city") is not None else None,
            "class": [FacetItem.from_dict(_item) for _item in obj["class"]] if obj.get("class") is not None else None,
            "dealer_id": [FacetItem.from_dict(_item) for _item in obj["dealer_id"]] if obj.get("dealer_id") is not None else None,
            "engine": [FacetItem.from_dict(_item) for _item in obj["engine"]] if obj.get("engine") is not None else None,
            "exterior_color": [FacetItem.from_dict(_item) for _item in obj["exterior_color"]] if obj.get("exterior_color") is not None else None,
            "fuel_type": [FacetItem.from_dict(_item) for _item in obj["fuel_type"]] if obj.get("fuel_type") is not None else None,
            "interior_color": [FacetItem.from_dict(_item) for _item in obj["interior_color"]] if obj.get("interior_color") is not None else None,
            "inventory_type": [FacetItem.from_dict(_item) for _item in obj["inventory_type"]] if obj.get("inventory_type") is not None else None,
            "length": [FacetItem.from_dict(_item) for _item in obj["length"]] if obj.get("length") is not None else None,
            "make": [FacetItem.from_dict(_item) for _item in obj["make"]] if obj.get("make") is not None else None,
            "model": [FacetItem.from_dict(_item) for _item in obj["model"]] if obj.get("model") is not None else None,
            "seller_name": [FacetItem.from_dict(_item) for _item in obj["seller_name"]] if obj.get("seller_name") is not None else None,
            "sleeps": [FacetItem.from_dict(_item) for _item in obj["sleeps"]] if obj.get("sleeps") is not None else None,
            "slideouts": [FacetItem.from_dict(_item) for _item in obj["slideouts"]] if obj.get("slideouts") is not None else None,
            "source": [FacetItem.from_dict(_item) for _item in obj["source"]] if obj.get("source") is not None else None,
            "state": [FacetItem.from_dict(_item) for _item in obj["state"]] if obj.get("state") is not None else None,
            "transmission": [FacetItem.from_dict(_item) for _item in obj["transmission"]] if obj.get("transmission") is not None else None,
            "year": [FacetItem.from_dict(_item) for _item in obj["year"]] if obj.get("year") is not None else None
        })
        return _obj



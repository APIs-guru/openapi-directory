# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Dealer(BaseModel):
    """
    Dealer
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="City of the dealer")
    country: Optional[StrictStr] = Field(default=None, description="country of the dealer")
    data_source: Optional[StrictStr] = Field(default=None, description="Datasource of the dealer")
    dealer_type: Optional[StrictStr] = Field(default=None, description="Type of dealer (franchise/independent)")
    dealership_group_name: Optional[StrictStr] = Field(default=None, description="Dealership group name of dealer")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Distance of dealer from given location")
    id: Optional[StrictStr] = Field(default=None, description="The unique id associated with the dealer in the Marketcheck database")
    inventory_url: Optional[StrictStr] = Field(default=None, description="Website of the dealer")
    latitude: Optional[StrictStr] = Field(default=None, description="Latutide for the dealer location")
    listing_count: Optional[StrictInt] = Field(default=None, description="Listing count of the dealer")
    location_ll: Optional[StrictStr] = Field(default=None, description="location_ll for the dealer location")
    longitude: Optional[StrictStr] = Field(default=None, description="Longitude for the dealer location")
    seller_email: Optional[StrictStr] = Field(default=None, description="Contact email of the dealer")
    seller_name: Optional[StrictStr] = Field(default=None, description="Name of the dealer")
    seller_phone: Optional[StrictStr] = Field(default=None, description="Contact no of the dealer")
    state: Optional[StrictStr] = Field(default=None, description="State of the dealer")
    status: Optional[StrictStr] = Field(default=None, description="Status of the dealer")
    street: Optional[StrictStr] = Field(default=None, description="Street of the dealer")
    zip: Optional[StrictStr] = Field(default=None, description="Zip of the dealer")
    __properties: ClassVar[List[str]] = ["city", "country", "data_source", "dealer_type", "dealership_group_name", "distance", "id", "inventory_url", "latitude", "listing_count", "location_ll", "longitude", "seller_email", "seller_name", "seller_phone", "state", "status", "street", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dealer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dealer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "country": obj.get("country"),
            "data_source": obj.get("data_source"),
            "dealer_type": obj.get("dealer_type"),
            "dealership_group_name": obj.get("dealership_group_name"),
            "distance": obj.get("distance"),
            "id": obj.get("id"),
            "inventory_url": obj.get("inventory_url"),
            "latitude": obj.get("latitude"),
            "listing_count": obj.get("listing_count"),
            "location_ll": obj.get("location_ll"),
            "longitude": obj.get("longitude"),
            "seller_email": obj.get("seller_email"),
            "seller_name": obj.get("seller_name"),
            "seller_phone": obj.get("seller_phone"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "street": obj.get("street"),
            "zip": obj.get("zip")
        })
        return _obj



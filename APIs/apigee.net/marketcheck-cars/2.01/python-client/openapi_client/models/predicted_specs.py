# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PredictedSpecs(BaseModel):
    """
    Specs of predicted vehicle
    """ # noqa: E501
    base_exterior_color: Optional[StrictStr] = Field(default=None, description="Base exterior color of vehicle")
    base_interior_color: Optional[StrictStr] = Field(default=None, description="base interior color of vehicle")
    carfax_1_owner: Optional[StrictBool] = Field(default=None, description="Indicates whether car has had only one owner or not")
    carfax_clean_title: Optional[StrictBool] = Field(default=None, description="Indicates whether car has clean ownership records")
    city_mpg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="City mileage")
    cylinders: Optional[StrictInt] = Field(default=None, description="Number of cylinders")
    doors: Optional[StrictInt] = Field(default=None, description="Number of doors")
    drivetrain: Optional[StrictStr] = Field(default=None, description="Drivetrain of the vehicle")
    engine_block: Optional[StrictStr] = Field(default=None, description="Engine block of the vehicle")
    engine_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Engine size")
    highway_mpg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Highway mileage")
    is_certified: Optional[StrictBool] = Field(default=None, description="Certified vehicle")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latutide for the vehicle location")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude for the vehicle location")
    make: Optional[StrictStr] = Field(default=None, description="make")
    miles: Optional[StrictInt] = Field(default=None, description="Miles")
    model: Optional[StrictStr] = Field(default=None, description="model")
    transmission: Optional[StrictStr] = Field(default=None, description="transmission")
    trim: Optional[StrictStr] = Field(default=None, description="trim")
    year: Optional[StrictInt] = Field(default=None, description="year")
    __properties: ClassVar[List[str]] = ["base_exterior_color", "base_interior_color", "carfax_1_owner", "carfax_clean_title", "city_mpg", "cylinders", "doors", "drivetrain", "engine_block", "engine_size", "highway_mpg", "is_certified", "latitude", "longitude", "make", "miles", "model", "transmission", "trim", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PredictedSpecs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PredictedSpecs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_exterior_color": obj.get("base_exterior_color"),
            "base_interior_color": obj.get("base_interior_color"),
            "carfax_1_owner": obj.get("carfax_1_owner"),
            "carfax_clean_title": obj.get("carfax_clean_title"),
            "city_mpg": obj.get("city_mpg"),
            "cylinders": obj.get("cylinders"),
            "doors": obj.get("doors"),
            "drivetrain": obj.get("drivetrain"),
            "engine_block": obj.get("engine_block"),
            "engine_size": obj.get("engine_size"),
            "highway_mpg": obj.get("highway_mpg"),
            "is_certified": obj.get("is_certified"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "make": obj.get("make"),
            "miles": obj.get("miles"),
            "model": obj.get("model"),
            "transmission": obj.get("transmission"),
            "trim": obj.get("trim"),
            "year": obj.get("year")
        })
        return _obj



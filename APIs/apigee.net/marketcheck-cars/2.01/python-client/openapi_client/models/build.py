# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Build(BaseModel):
    """
    Describes the Car specification
    """ # noqa: E501
    antibrake_sys: Optional[StrictStr] = Field(default=None, description="Antibrake system of the car")
    body_subtype: Optional[StrictStr] = Field(default=None, description="Body subtype of the car")
    body_type: Optional[StrictStr] = Field(default=None, description="Body type of the car")
    city_miles: Optional[StrictStr] = Field(default=None, description="City miles of the car")
    city_mpg: Optional[StrictInt] = Field(default=None, description="City Mileage in MPG")
    cylinders: Optional[StrictInt] = Field(default=None, description="No of cylinders of the car")
    doors: Optional[StrictInt] = Field(default=None, description="No of doors of the car")
    drivetrain: Optional[StrictStr] = Field(default=None, description="Drivetrain of the car")
    engine: Optional[StrictStr] = Field(default=None, description="Engine of the car")
    engine_aspiration: Optional[StrictStr] = Field(default=None, description="Engine aspiration of the car")
    engine_block: Optional[StrictStr] = Field(default=None, description="Engine block of the car")
    engine_measure: Optional[StrictStr] = Field(default=None, description="Engine block of the car")
    engine_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Engine size of the car")
    fuel_type: Optional[StrictStr] = Field(default=None, description="Fuel type of the car")
    highway_miles: Optional[StrictStr] = Field(default=None, description="Highway miles of the car")
    highway_mpg: Optional[StrictInt] = Field(default=None, description="Highway Mileage in MPG")
    made_in: Optional[StrictStr] = Field(default=None, description="Made in of the car")
    make: Optional[StrictStr] = Field(default=None, description="Car Make")
    model: Optional[StrictStr] = Field(default=None, description="Car model")
    opt_seating: Optional[StrictStr] = Field(default=None, description="opt seating of the car")
    overall_height: Optional[StrictStr] = Field(default=None, description="Overall height of the car")
    overall_length: Optional[StrictStr] = Field(default=None, description="Overall length of the car")
    overall_width: Optional[StrictStr] = Field(default=None, description="Overall width of the car")
    powertrain_type: Optional[StrictStr] = Field(default=None, description="powertrain_type of the car")
    short_trim: Optional[StrictStr] = Field(default=None, description="Short trim of the car")
    std_seating: Optional[StrictStr] = Field(default=None, description="Std seating of the car")
    steering_type: Optional[StrictStr] = Field(default=None, description="Steering type of the car")
    tank_size: Optional[StrictStr] = Field(default=None, description="Tank size of the car")
    transmission: Optional[StrictStr] = Field(default=None, description="Transmission of the car")
    trim: Optional[StrictStr] = Field(default=None, description="Trim of the car")
    trim_r: Optional[StrictStr] = Field(default=None, description="Trim_r of the car")
    vehicle_type: Optional[StrictStr] = Field(default=None, description="Vehicle type of the car")
    year: Optional[StrictInt] = Field(default=None, description="Year of the Car")
    __properties: ClassVar[List[str]] = ["antibrake_sys", "body_subtype", "body_type", "city_miles", "city_mpg", "cylinders", "doors", "drivetrain", "engine", "engine_aspiration", "engine_block", "engine_measure", "engine_size", "fuel_type", "highway_miles", "highway_mpg", "made_in", "make", "model", "opt_seating", "overall_height", "overall_length", "overall_width", "powertrain_type", "short_trim", "std_seating", "steering_type", "tank_size", "transmission", "trim", "trim_r", "vehicle_type", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Build from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Build from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antibrake_sys": obj.get("antibrake_sys"),
            "body_subtype": obj.get("body_subtype"),
            "body_type": obj.get("body_type"),
            "city_miles": obj.get("city_miles"),
            "city_mpg": obj.get("city_mpg"),
            "cylinders": obj.get("cylinders"),
            "doors": obj.get("doors"),
            "drivetrain": obj.get("drivetrain"),
            "engine": obj.get("engine"),
            "engine_aspiration": obj.get("engine_aspiration"),
            "engine_block": obj.get("engine_block"),
            "engine_measure": obj.get("engine_measure"),
            "engine_size": obj.get("engine_size"),
            "fuel_type": obj.get("fuel_type"),
            "highway_miles": obj.get("highway_miles"),
            "highway_mpg": obj.get("highway_mpg"),
            "made_in": obj.get("made_in"),
            "make": obj.get("make"),
            "model": obj.get("model"),
            "opt_seating": obj.get("opt_seating"),
            "overall_height": obj.get("overall_height"),
            "overall_length": obj.get("overall_length"),
            "overall_width": obj.get("overall_width"),
            "powertrain_type": obj.get("powertrain_type"),
            "short_trim": obj.get("short_trim"),
            "std_seating": obj.get("std_seating"),
            "steering_type": obj.get("steering_type"),
            "tank_size": obj.get("tank_size"),
            "transmission": obj.get("transmission"),
            "trim": obj.get("trim"),
            "trim_r": obj.get("trim_r"),
            "vehicle_type": obj.get("vehicle_type"),
            "year": obj.get("year")
        })
        return _obj



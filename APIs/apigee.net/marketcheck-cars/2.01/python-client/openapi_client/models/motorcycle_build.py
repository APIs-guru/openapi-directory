# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MotorcycleBuild(BaseModel):
    """
    Describes the Motorcycle specification
    """ # noqa: E501
    body_type: Optional[StrictStr] = Field(default=None, description="Body type of the motorcycle")
    cylinders: Optional[StrictInt] = Field(default=None, description="No of cylinders of the motorcycle")
    drivetrain: Optional[StrictStr] = Field(default=None, description="Drivetrain of the motorcycle")
    dry_weight: Optional[StrictStr] = Field(default=None, description="Dry weight of motorcycle")
    engine: Optional[StrictStr] = Field(default=None, description="Engine of the motorcycle")
    fuel_type: Optional[StrictStr] = Field(default=None, description="Fuel type of the motorcycle")
    made_in: Optional[StrictStr] = Field(default=None, description="Made in of the motorcycle")
    make: Optional[StrictStr] = Field(default=None, description="Motorcycle Make")
    model: Optional[StrictStr] = Field(default=None, description="Motorcycle model")
    transmission: Optional[StrictStr] = Field(default=None, description="Transmission of the motorcycle")
    trim: Optional[StrictStr] = Field(default=None, description="Trim of the motorcycle")
    vehicle_type: Optional[StrictStr] = Field(default=None, description="Vehicle type of the motorcycle")
    year: Optional[StrictInt] = Field(default=None, description="Year of the motorcycle")
    __properties: ClassVar[List[str]] = ["body_type", "cylinders", "drivetrain", "dry_weight", "engine", "fuel_type", "made_in", "make", "model", "transmission", "trim", "vehicle_type", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MotorcycleBuild from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MotorcycleBuild from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body_type": obj.get("body_type"),
            "cylinders": obj.get("cylinders"),
            "drivetrain": obj.get("drivetrain"),
            "dry_weight": obj.get("dry_weight"),
            "engine": obj.get("engine"),
            "fuel_type": obj.get("fuel_type"),
            "made_in": obj.get("made_in"),
            "make": obj.get("make"),
            "model": obj.get("model"),
            "transmission": obj.get("transmission"),
            "trim": obj.get("trim"),
            "vehicle_type": obj.get("vehicle_type"),
            "year": obj.get("year")
        })
        return _obj



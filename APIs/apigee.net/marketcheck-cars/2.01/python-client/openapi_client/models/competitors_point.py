# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.competitors_car_details import CompetitorsCarDetails
from openapi_client.models.competitors_same_cars import CompetitorsSameCars
from openapi_client.models.competitors_similar_cars import CompetitorsSimilarCars
from typing import Optional, Set
from typing_extensions import Self

class CompetitorsPoint(BaseModel):
    """
    CompetitorsPoint
    """ # noqa: E501
    current_car: Optional[CompetitorsCarDetails] = None
    same_car_models: Optional[List[CompetitorsSameCars]] = None
    similar_car_models: Optional[List[CompetitorsSimilarCars]] = None
    __properties: ClassVar[List[str]] = ["current_car", "same_car_models", "similar_car_models"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompetitorsPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_car
        if self.current_car:
            _dict['current_car'] = self.current_car.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in same_car_models (list)
        _items = []
        if self.same_car_models:
            for _item_same_car_models in self.same_car_models:
                if _item_same_car_models:
                    _items.append(_item_same_car_models.to_dict())
            _dict['same_car_models'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in similar_car_models (list)
        _items = []
        if self.similar_car_models:
            for _item_similar_car_models in self.similar_car_models:
                if _item_similar_car_models:
                    _items.append(_item_similar_car_models.to_dict())
            _dict['similar_car_models'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompetitorsPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "current_car": CompetitorsCarDetails.from_dict(obj["current_car"]) if obj.get("current_car") is not None else None,
            "same_car_models": [CompetitorsSameCars.from_dict(_item) for _item in obj["same_car_models"]] if obj.get("same_car_models") is not None else None,
            "similar_car_models": [CompetitorsSimilarCars.from_dict(_item) for _item in obj["similar_car_models"]] if obj.get("similar_car_models") is not None else None
        })
        return _obj



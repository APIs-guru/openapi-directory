# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.review_components import ReviewComponents
from typing import Optional, Set
from typing_extensions import Self

class DealerReview(BaseModel):
    """
    DealerReview
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="City of the dealer")
    latitude: Optional[StrictStr] = Field(default=None, description="Latutide for the dealer location")
    longitude: Optional[StrictStr] = Field(default=None, description="Longitude for the dealer location")
    name: Optional[StrictStr] = Field(default=None, description="Name of the dealer")
    overall_reviews: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall reviews of the dealership")
    review_components: Optional[List[ReviewComponents]] = None
    state: Optional[StrictStr] = Field(default=None, description="State of the dealer")
    street: Optional[StrictStr] = Field(default=None, description="Street of the dealer")
    zip: Optional[StrictStr] = Field(default=None, description="Zip of the dealer")
    __properties: ClassVar[List[str]] = ["city", "latitude", "longitude", "name", "overall_reviews", "review_components", "state", "street", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealerReview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in review_components (list)
        _items = []
        if self.review_components:
            for _item_review_components in self.review_components:
                if _item_review_components:
                    _items.append(_item_review_components.to_dict())
            _dict['review_components'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealerReview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "name": obj.get("name"),
            "overall_reviews": obj.get("overall_reviews"),
            "review_components": [ReviewComponents.from_dict(_item) for _item in obj["review_components"]] if obj.get("review_components") is not None else None,
            "state": obj.get("state"),
            "street": obj.get("street"),
            "zip": obj.get("zip")
        })
        return _obj



# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DepreciationStats(BaseModel):
    """
    DepreciationStats
    """ # noqa: E501
    current_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of year make model combination")
    five_year_from_now: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price after five year from now")
    five_year_from_now_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price depreciation percent after five year from now")
    name: Optional[StrictStr] = Field(default=None, description="ymm_comb_name")
    one_year_from_now: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price after one year from now")
    one_year_from_now_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price depreciation percent after one year from now")
    two_year_from_now: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price after two year from now")
    two_year_from_now_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price depreciation percent after two year from now")
    __properties: ClassVar[List[str]] = ["current_value", "five_year_from_now", "five_year_from_now_percent", "name", "one_year_from_now", "one_year_from_now_percent", "two_year_from_now", "two_year_from_now_percent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DepreciationStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DepreciationStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "current_value": obj.get("current_value"),
            "five_year_from_now": obj.get("five_year_from_now"),
            "five_year_from_now_percent": obj.get("five_year_from_now_percent"),
            "name": obj.get("name"),
            "one_year_from_now": obj.get("one_year_from_now"),
            "one_year_from_now_percent": obj.get("one_year_from_now_percent"),
            "two_year_from_now": obj.get("two_year_from_now"),
            "two_year_from_now_percent": obj.get("two_year_from_now_percent")
        })
        return _obj



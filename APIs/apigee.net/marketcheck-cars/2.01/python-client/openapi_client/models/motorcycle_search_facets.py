# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.facet_item import FacetItem
from typing import Optional, Set
from typing_extensions import Self

class MotorcycleSearchFacets(BaseModel):
    """
    MotorcycleSearchFacets
    """ # noqa: E501
    body_type: Optional[List[FacetItem]] = None
    city: Optional[List[FacetItem]] = None
    color: Optional[List[FacetItem]] = None
    cylinders: Optional[List[FacetItem]] = None
    dealer_id: Optional[List[FacetItem]] = None
    drivetrain: Optional[List[FacetItem]] = None
    engine: Optional[List[FacetItem]] = None
    fuel_type: Optional[List[FacetItem]] = None
    inventory_type: Optional[List[FacetItem]] = None
    make: Optional[List[FacetItem]] = None
    model: Optional[List[FacetItem]] = None
    seller_name: Optional[List[FacetItem]] = None
    source: Optional[List[FacetItem]] = None
    state: Optional[List[FacetItem]] = None
    transmission: Optional[List[FacetItem]] = None
    trim: Optional[List[FacetItem]] = None
    vehicle_type: Optional[List[FacetItem]] = None
    year: Optional[List[FacetItem]] = None
    __properties: ClassVar[List[str]] = ["body_type", "city", "color", "cylinders", "dealer_id", "drivetrain", "engine", "fuel_type", "inventory_type", "make", "model", "seller_name", "source", "state", "transmission", "trim", "vehicle_type", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MotorcycleSearchFacets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in body_type (list)
        _items = []
        if self.body_type:
            for _item_body_type in self.body_type:
                if _item_body_type:
                    _items.append(_item_body_type.to_dict())
            _dict['body_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in city (list)
        _items = []
        if self.city:
            for _item_city in self.city:
                if _item_city:
                    _items.append(_item_city.to_dict())
            _dict['city'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in color (list)
        _items = []
        if self.color:
            for _item_color in self.color:
                if _item_color:
                    _items.append(_item_color.to_dict())
            _dict['color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cylinders (list)
        _items = []
        if self.cylinders:
            for _item_cylinders in self.cylinders:
                if _item_cylinders:
                    _items.append(_item_cylinders.to_dict())
            _dict['cylinders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dealer_id (list)
        _items = []
        if self.dealer_id:
            for _item_dealer_id in self.dealer_id:
                if _item_dealer_id:
                    _items.append(_item_dealer_id.to_dict())
            _dict['dealer_id'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in drivetrain (list)
        _items = []
        if self.drivetrain:
            for _item_drivetrain in self.drivetrain:
                if _item_drivetrain:
                    _items.append(_item_drivetrain.to_dict())
            _dict['drivetrain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engine (list)
        _items = []
        if self.engine:
            for _item_engine in self.engine:
                if _item_engine:
                    _items.append(_item_engine.to_dict())
            _dict['engine'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fuel_type (list)
        _items = []
        if self.fuel_type:
            for _item_fuel_type in self.fuel_type:
                if _item_fuel_type:
                    _items.append(_item_fuel_type.to_dict())
            _dict['fuel_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inventory_type (list)
        _items = []
        if self.inventory_type:
            for _item_inventory_type in self.inventory_type:
                if _item_inventory_type:
                    _items.append(_item_inventory_type.to_dict())
            _dict['inventory_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in make (list)
        _items = []
        if self.make:
            for _item_make in self.make:
                if _item_make:
                    _items.append(_item_make.to_dict())
            _dict['make'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in model (list)
        _items = []
        if self.model:
            for _item_model in self.model:
                if _item_model:
                    _items.append(_item_model.to_dict())
            _dict['model'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_name (list)
        _items = []
        if self.seller_name:
            for _item_seller_name in self.seller_name:
                if _item_seller_name:
                    _items.append(_item_seller_name.to_dict())
            _dict['seller_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in source (list)
        _items = []
        if self.source:
            for _item_source in self.source:
                if _item_source:
                    _items.append(_item_source.to_dict())
            _dict['source'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state (list)
        _items = []
        if self.state:
            for _item_state in self.state:
                if _item_state:
                    _items.append(_item_state.to_dict())
            _dict['state'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transmission (list)
        _items = []
        if self.transmission:
            for _item_transmission in self.transmission:
                if _item_transmission:
                    _items.append(_item_transmission.to_dict())
            _dict['transmission'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trim (list)
        _items = []
        if self.trim:
            for _item_trim in self.trim:
                if _item_trim:
                    _items.append(_item_trim.to_dict())
            _dict['trim'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vehicle_type (list)
        _items = []
        if self.vehicle_type:
            for _item_vehicle_type in self.vehicle_type:
                if _item_vehicle_type:
                    _items.append(_item_vehicle_type.to_dict())
            _dict['vehicle_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in year (list)
        _items = []
        if self.year:
            for _item_year in self.year:
                if _item_year:
                    _items.append(_item_year.to_dict())
            _dict['year'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MotorcycleSearchFacets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body_type": [FacetItem.from_dict(_item) for _item in obj["body_type"]] if obj.get("body_type") is not None else None,
            "city": [FacetItem.from_dict(_item) for _item in obj["city"]] if obj.get("city") is not None else None,
            "color": [FacetItem.from_dict(_item) for _item in obj["color"]] if obj.get("color") is not None else None,
            "cylinders": [FacetItem.from_dict(_item) for _item in obj["cylinders"]] if obj.get("cylinders") is not None else None,
            "dealer_id": [FacetItem.from_dict(_item) for _item in obj["dealer_id"]] if obj.get("dealer_id") is not None else None,
            "drivetrain": [FacetItem.from_dict(_item) for _item in obj["drivetrain"]] if obj.get("drivetrain") is not None else None,
            "engine": [FacetItem.from_dict(_item) for _item in obj["engine"]] if obj.get("engine") is not None else None,
            "fuel_type": [FacetItem.from_dict(_item) for _item in obj["fuel_type"]] if obj.get("fuel_type") is not None else None,
            "inventory_type": [FacetItem.from_dict(_item) for _item in obj["inventory_type"]] if obj.get("inventory_type") is not None else None,
            "make": [FacetItem.from_dict(_item) for _item in obj["make"]] if obj.get("make") is not None else None,
            "model": [FacetItem.from_dict(_item) for _item in obj["model"]] if obj.get("model") is not None else None,
            "seller_name": [FacetItem.from_dict(_item) for _item in obj["seller_name"]] if obj.get("seller_name") is not None else None,
            "source": [FacetItem.from_dict(_item) for _item in obj["source"]] if obj.get("source") is not None else None,
            "state": [FacetItem.from_dict(_item) for _item in obj["state"]] if obj.get("state") is not None else None,
            "transmission": [FacetItem.from_dict(_item) for _item in obj["transmission"]] if obj.get("transmission") is not None else None,
            "trim": [FacetItem.from_dict(_item) for _item in obj["trim"]] if obj.get("trim") is not None else None,
            "vehicle_type": [FacetItem.from_dict(_item) for _item in obj["vehicle_type"]] if obj.get("vehicle_type") is not None else None,
            "year": [FacetItem.from_dict(_item) for _item in obj["year"]] if obj.get("year") is not None else None
        })
        return _obj



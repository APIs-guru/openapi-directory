# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ListingExtraAttributes(BaseModel):
    """
    ListingExtraAttributes
    """ # noqa: E501
    dealer_added_f: Optional[List[StrictStr]] = Field(default=None, description="List of dealer added features available with the car")
    electronics_f: Optional[List[StrictStr]] = Field(default=None, description="List of electronic features available with the car")
    exterior_f: Optional[List[StrictStr]] = Field(default=None, description="List of exterior features available with the car")
    features: Optional[List[StrictStr]] = Field(default=None, description="List of Features available with the car")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier representing a specific listing from the Marketcheck database")
    interior_f: Optional[List[StrictStr]] = Field(default=None, description="List of interior features available with the car")
    options: Optional[List[StrictStr]] = Field(default=None, description="Installed Options of the car")
    safety_f: Optional[List[StrictStr]] = Field(default=None, description="List of safety features available with the car")
    seller_cmts: Optional[StrictStr] = Field(default=None, description="Seller comment for the car")
    standard_f: Optional[List[StrictStr]] = Field(default=None, description="List of standard features available with the car")
    technical_f: Optional[List[StrictStr]] = Field(default=None, description="List of technical features available with the car")
    __properties: ClassVar[List[str]] = ["dealer_added_f", "electronics_f", "exterior_f", "features", "id", "interior_f", "options", "safety_f", "seller_cmts", "standard_f", "technical_f"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListingExtraAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListingExtraAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dealer_added_f": obj.get("dealer_added_f"),
            "electronics_f": obj.get("electronics_f"),
            "exterior_f": obj.get("exterior_f"),
            "features": obj.get("features"),
            "id": obj.get("id"),
            "interior_f": obj.get("interior_f"),
            "options": obj.get("options"),
            "safety_f": obj.get("safety_f"),
            "seller_cmts": obj.get("seller_cmts"),
            "standard_f": obj.get("standard_f"),
            "technical_f": obj.get("technical_f")
        })
        return _obj



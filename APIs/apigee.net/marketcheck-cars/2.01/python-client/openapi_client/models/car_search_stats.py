# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.stats_item import StatsItem
from typing import Optional, Set
from typing_extensions import Self

class CarSearchStats(BaseModel):
    """
    CarSearchStats
    """ # noqa: E501
    dom: Optional[StatsItem] = None
    dom_180: Optional[StatsItem] = None
    dom_active: Optional[StatsItem] = None
    finance_down_payment: Optional[StatsItem] = None
    finance_down_payment_per: Optional[StatsItem] = None
    finance_emp: Optional[StatsItem] = None
    finance_loan_apr: Optional[StatsItem] = None
    finance_loan_term: Optional[StatsItem] = None
    lease_down_payment: Optional[StatsItem] = None
    lease_emp: Optional[StatsItem] = None
    lease_term: Optional[StatsItem] = None
    miles: Optional[StatsItem] = None
    msrp: Optional[StatsItem] = None
    price: Optional[StatsItem] = None
    __properties: ClassVar[List[str]] = ["dom", "dom_180", "dom_active", "finance_down_payment", "finance_down_payment_per", "finance_emp", "finance_loan_apr", "finance_loan_term", "lease_down_payment", "lease_emp", "lease_term", "miles", "msrp", "price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CarSearchStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dom
        if self.dom:
            _dict['dom'] = self.dom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dom_180
        if self.dom_180:
            _dict['dom_180'] = self.dom_180.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dom_active
        if self.dom_active:
            _dict['dom_active'] = self.dom_active.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finance_down_payment
        if self.finance_down_payment:
            _dict['finance_down_payment'] = self.finance_down_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finance_down_payment_per
        if self.finance_down_payment_per:
            _dict['finance_down_payment_per'] = self.finance_down_payment_per.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finance_emp
        if self.finance_emp:
            _dict['finance_emp'] = self.finance_emp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finance_loan_apr
        if self.finance_loan_apr:
            _dict['finance_loan_apr'] = self.finance_loan_apr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finance_loan_term
        if self.finance_loan_term:
            _dict['finance_loan_term'] = self.finance_loan_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lease_down_payment
        if self.lease_down_payment:
            _dict['lease_down_payment'] = self.lease_down_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lease_emp
        if self.lease_emp:
            _dict['lease_emp'] = self.lease_emp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lease_term
        if self.lease_term:
            _dict['lease_term'] = self.lease_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of miles
        if self.miles:
            _dict['miles'] = self.miles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of msrp
        if self.msrp:
            _dict['msrp'] = self.msrp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CarSearchStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dom": StatsItem.from_dict(obj["dom"]) if obj.get("dom") is not None else None,
            "dom_180": StatsItem.from_dict(obj["dom_180"]) if obj.get("dom_180") is not None else None,
            "dom_active": StatsItem.from_dict(obj["dom_active"]) if obj.get("dom_active") is not None else None,
            "finance_down_payment": StatsItem.from_dict(obj["finance_down_payment"]) if obj.get("finance_down_payment") is not None else None,
            "finance_down_payment_per": StatsItem.from_dict(obj["finance_down_payment_per"]) if obj.get("finance_down_payment_per") is not None else None,
            "finance_emp": StatsItem.from_dict(obj["finance_emp"]) if obj.get("finance_emp") is not None else None,
            "finance_loan_apr": StatsItem.from_dict(obj["finance_loan_apr"]) if obj.get("finance_loan_apr") is not None else None,
            "finance_loan_term": StatsItem.from_dict(obj["finance_loan_term"]) if obj.get("finance_loan_term") is not None else None,
            "lease_down_payment": StatsItem.from_dict(obj["lease_down_payment"]) if obj.get("lease_down_payment") is not None else None,
            "lease_emp": StatsItem.from_dict(obj["lease_emp"]) if obj.get("lease_emp") is not None else None,
            "lease_term": StatsItem.from_dict(obj["lease_term"]) if obj.get("lease_term") is not None else None,
            "miles": StatsItem.from_dict(obj["miles"]) if obj.get("miles") is not None else None,
            "msrp": StatsItem.from_dict(obj["msrp"]) if obj.get("msrp") is not None else None,
            "price": StatsItem.from_dict(obj["price"]) if obj.get("price") is not None else None
        })
        return _obj



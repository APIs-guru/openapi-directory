# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.heavy_equipments_build import HeavyEquipmentsBuild
from openapi_client.models.listing_nest_media import ListingNestMedia
from openapi_client.models.nest_dealer import NestDealer
from typing import Optional, Set
from typing_extensions import Self

class HeavyEquipmentsBaseListing(BaseModel):
    """
    Base heavy equipment listing
    """ # noqa: E501
    build: Optional[HeavyEquipmentsBuild] = None
    dealer: Optional[NestDealer] = None
    dist: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Distance of the quipments's location from the specified user lcoation")
    dp_url: Optional[StrictStr] = Field(default=None, description="Details Page url of the specific heavy equipment")
    exterior_color: Optional[StrictStr] = Field(default=None, description="Exterior color of the heavy equipment")
    first_seen_at: Optional[StrictInt] = Field(default=None, description="Listing first seen at first scraped timestamp")
    first_seen_at_date: Optional[StrictStr] = Field(default=None, description="Listing first seen at first scraped date")
    heading: Optional[StrictStr] = Field(default=None, description="Listing title as displayed on the source website")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier representing a specific listing from the Marketcheck database")
    interior_color: Optional[StrictStr] = Field(default=None, description="Interior color of the heavy equipment")
    inventory_type: Optional[StrictStr] = Field(default=None, description="Inventory type of heavy equipment")
    last_seen_at: Optional[StrictInt] = Field(default=None, description="Listing last seen at (most recent) timestamp")
    last_seen_at_date: Optional[StrictStr] = Field(default=None, description="Listing last seen at (most recent) date")
    media: Optional[ListingNestMedia] = None
    miles: Optional[StrictInt] = Field(default=None, description="Odometer reading / reported miles usage for the heavy equipment")
    msrp: Optional[StrictInt] = Field(default=None, description="MSRP for the heavy equipment")
    price: Optional[StrictInt] = Field(default=None, description="Asking price for the heavy equipment")
    scraped_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Listing last seen at date timestamp")
    scraped_at_date: Optional[StrictStr] = Field(default=None, description="Listing last seen at date")
    seller_type: Optional[StrictStr] = Field(default=None, description="Seller type for the heavy equipment")
    source: Optional[StrictStr] = Field(default=None, description="Source domain of the listing")
    stock_no: Optional[StrictStr] = Field(default=None, description="Stock number of heavy equipment in dealers inventory")
    vin: Optional[StrictStr] = Field(default=None, description="VIN for the heavy equipment")
    __properties: ClassVar[List[str]] = ["build", "dealer", "dist", "dp_url", "exterior_color", "first_seen_at", "first_seen_at_date", "heading", "id", "interior_color", "inventory_type", "last_seen_at", "last_seen_at_date", "media", "miles", "msrp", "price", "scraped_at", "scraped_at_date", "seller_type", "source", "stock_no", "vin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeavyEquipmentsBaseListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dealer
        if self.dealer:
            _dict['dealer'] = self.dealer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeavyEquipmentsBaseListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": HeavyEquipmentsBuild.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "dealer": NestDealer.from_dict(obj["dealer"]) if obj.get("dealer") is not None else None,
            "dist": obj.get("dist"),
            "dp_url": obj.get("dp_url"),
            "exterior_color": obj.get("exterior_color"),
            "first_seen_at": obj.get("first_seen_at"),
            "first_seen_at_date": obj.get("first_seen_at_date"),
            "heading": obj.get("heading"),
            "id": obj.get("id"),
            "interior_color": obj.get("interior_color"),
            "inventory_type": obj.get("inventory_type"),
            "last_seen_at": obj.get("last_seen_at"),
            "last_seen_at_date": obj.get("last_seen_at_date"),
            "media": ListingNestMedia.from_dict(obj["media"]) if obj.get("media") is not None else None,
            "miles": obj.get("miles"),
            "msrp": obj.get("msrp"),
            "price": obj.get("price"),
            "scraped_at": obj.get("scraped_at"),
            "scraped_at_date": obj.get("scraped_at_date"),
            "seller_type": obj.get("seller_type"),
            "source": obj.get("source"),
            "stock_no": obj.get("stock_no"),
            "vin": obj.get("vin")
        })
        return _obj



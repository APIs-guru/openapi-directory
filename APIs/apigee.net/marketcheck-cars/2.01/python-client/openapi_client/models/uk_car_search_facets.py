# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.facet_item import FacetItem
from typing import Optional, Set
from typing_extensions import Self

class UKCarSearchFacets(BaseModel):
    """
    UKCarSearchFacets
    """ # noqa: E501
    base_exterior_color: Optional[List[FacetItem]] = None
    base_interior_color: Optional[List[FacetItem]] = None
    body_subtype: Optional[List[FacetItem]] = None
    body_type: Optional[List[FacetItem]] = None
    car_location_city: Optional[List[FacetItem]] = None
    car_location_county: Optional[List[FacetItem]] = None
    car_location_seller_name: Optional[List[FacetItem]] = None
    car_location_street: Optional[List[FacetItem]] = None
    car_location_zip: Optional[List[FacetItem]] = None
    car_type: Optional[List[FacetItem]] = None
    carfax_1_owner: Optional[List[FacetItem]] = None
    carfax_clean_title: Optional[List[FacetItem]] = None
    city: Optional[List[FacetItem]] = None
    co2_emissions: Optional[List[FacetItem]] = None
    cylinders: Optional[List[FacetItem]] = None
    data_source: Optional[List[FacetItem]] = None
    dealer_id: Optional[List[FacetItem]] = None
    dealer_type: Optional[List[FacetItem]] = None
    dealership_group_name: Optional[List[FacetItem]] = None
    doors: Optional[List[FacetItem]] = None
    drivetrain: Optional[List[FacetItem]] = None
    engine: Optional[List[FacetItem]] = None
    engine_aspiration: Optional[List[FacetItem]] = None
    engine_block: Optional[List[FacetItem]] = None
    engine_size: Optional[List[FacetItem]] = None
    exterior_color: Optional[List[FacetItem]] = None
    fca_status: Optional[List[FacetItem]] = None
    fuel_type: Optional[List[FacetItem]] = None
    in_transit: Optional[List[FacetItem]] = None
    insurance_group: Optional[List[FacetItem]] = None
    interior_color: Optional[List[FacetItem]] = None
    make: Optional[List[FacetItem]] = None
    mas_code: Optional[List[FacetItem]] = None
    model: Optional[List[FacetItem]] = None
    num_owners: Optional[List[FacetItem]] = None
    powertrain_type: Optional[List[FacetItem]] = None
    seating_capacity: Optional[List[FacetItem]] = None
    seller_name: Optional[List[FacetItem]] = None
    seller_type: Optional[List[FacetItem]] = None
    source: Optional[List[FacetItem]] = None
    state: Optional[List[FacetItem]] = None
    transmission: Optional[List[FacetItem]] = None
    trim: Optional[List[FacetItem]] = None
    vehicle_registration_mark: Optional[List[FacetItem]] = None
    vehicle_type: Optional[List[FacetItem]] = None
    vrm: Optional[List[FacetItem]] = None
    year: Optional[List[FacetItem]] = None
    __properties: ClassVar[List[str]] = ["base_exterior_color", "base_interior_color", "body_subtype", "body_type", "car_location_city", "car_location_county", "car_location_seller_name", "car_location_street", "car_location_zip", "car_type", "carfax_1_owner", "carfax_clean_title", "city", "co2_emissions", "cylinders", "data_source", "dealer_id", "dealer_type", "dealership_group_name", "doors", "drivetrain", "engine", "engine_aspiration", "engine_block", "engine_size", "exterior_color", "fca_status", "fuel_type", "in_transit", "insurance_group", "interior_color", "make", "mas_code", "model", "num_owners", "powertrain_type", "seating_capacity", "seller_name", "seller_type", "source", "state", "transmission", "trim", "vehicle_registration_mark", "vehicle_type", "vrm", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UKCarSearchFacets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in base_exterior_color (list)
        _items = []
        if self.base_exterior_color:
            for _item_base_exterior_color in self.base_exterior_color:
                if _item_base_exterior_color:
                    _items.append(_item_base_exterior_color.to_dict())
            _dict['base_exterior_color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in base_interior_color (list)
        _items = []
        if self.base_interior_color:
            for _item_base_interior_color in self.base_interior_color:
                if _item_base_interior_color:
                    _items.append(_item_base_interior_color.to_dict())
            _dict['base_interior_color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in body_subtype (list)
        _items = []
        if self.body_subtype:
            for _item_body_subtype in self.body_subtype:
                if _item_body_subtype:
                    _items.append(_item_body_subtype.to_dict())
            _dict['body_subtype'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in body_type (list)
        _items = []
        if self.body_type:
            for _item_body_type in self.body_type:
                if _item_body_type:
                    _items.append(_item_body_type.to_dict())
            _dict['body_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in car_location_city (list)
        _items = []
        if self.car_location_city:
            for _item_car_location_city in self.car_location_city:
                if _item_car_location_city:
                    _items.append(_item_car_location_city.to_dict())
            _dict['car_location_city'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in car_location_county (list)
        _items = []
        if self.car_location_county:
            for _item_car_location_county in self.car_location_county:
                if _item_car_location_county:
                    _items.append(_item_car_location_county.to_dict())
            _dict['car_location_county'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in car_location_seller_name (list)
        _items = []
        if self.car_location_seller_name:
            for _item_car_location_seller_name in self.car_location_seller_name:
                if _item_car_location_seller_name:
                    _items.append(_item_car_location_seller_name.to_dict())
            _dict['car_location_seller_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in car_location_street (list)
        _items = []
        if self.car_location_street:
            for _item_car_location_street in self.car_location_street:
                if _item_car_location_street:
                    _items.append(_item_car_location_street.to_dict())
            _dict['car_location_street'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in car_location_zip (list)
        _items = []
        if self.car_location_zip:
            for _item_car_location_zip in self.car_location_zip:
                if _item_car_location_zip:
                    _items.append(_item_car_location_zip.to_dict())
            _dict['car_location_zip'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in car_type (list)
        _items = []
        if self.car_type:
            for _item_car_type in self.car_type:
                if _item_car_type:
                    _items.append(_item_car_type.to_dict())
            _dict['car_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in carfax_1_owner (list)
        _items = []
        if self.carfax_1_owner:
            for _item_carfax_1_owner in self.carfax_1_owner:
                if _item_carfax_1_owner:
                    _items.append(_item_carfax_1_owner.to_dict())
            _dict['carfax_1_owner'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in carfax_clean_title (list)
        _items = []
        if self.carfax_clean_title:
            for _item_carfax_clean_title in self.carfax_clean_title:
                if _item_carfax_clean_title:
                    _items.append(_item_carfax_clean_title.to_dict())
            _dict['carfax_clean_title'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in city (list)
        _items = []
        if self.city:
            for _item_city in self.city:
                if _item_city:
                    _items.append(_item_city.to_dict())
            _dict['city'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in co2_emissions (list)
        _items = []
        if self.co2_emissions:
            for _item_co2_emissions in self.co2_emissions:
                if _item_co2_emissions:
                    _items.append(_item_co2_emissions.to_dict())
            _dict['co2_emissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cylinders (list)
        _items = []
        if self.cylinders:
            for _item_cylinders in self.cylinders:
                if _item_cylinders:
                    _items.append(_item_cylinders.to_dict())
            _dict['cylinders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_source (list)
        _items = []
        if self.data_source:
            for _item_data_source in self.data_source:
                if _item_data_source:
                    _items.append(_item_data_source.to_dict())
            _dict['data_source'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dealer_id (list)
        _items = []
        if self.dealer_id:
            for _item_dealer_id in self.dealer_id:
                if _item_dealer_id:
                    _items.append(_item_dealer_id.to_dict())
            _dict['dealer_id'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dealer_type (list)
        _items = []
        if self.dealer_type:
            for _item_dealer_type in self.dealer_type:
                if _item_dealer_type:
                    _items.append(_item_dealer_type.to_dict())
            _dict['dealer_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dealership_group_name (list)
        _items = []
        if self.dealership_group_name:
            for _item_dealership_group_name in self.dealership_group_name:
                if _item_dealership_group_name:
                    _items.append(_item_dealership_group_name.to_dict())
            _dict['dealership_group_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in doors (list)
        _items = []
        if self.doors:
            for _item_doors in self.doors:
                if _item_doors:
                    _items.append(_item_doors.to_dict())
            _dict['doors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in drivetrain (list)
        _items = []
        if self.drivetrain:
            for _item_drivetrain in self.drivetrain:
                if _item_drivetrain:
                    _items.append(_item_drivetrain.to_dict())
            _dict['drivetrain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engine (list)
        _items = []
        if self.engine:
            for _item_engine in self.engine:
                if _item_engine:
                    _items.append(_item_engine.to_dict())
            _dict['engine'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engine_aspiration (list)
        _items = []
        if self.engine_aspiration:
            for _item_engine_aspiration in self.engine_aspiration:
                if _item_engine_aspiration:
                    _items.append(_item_engine_aspiration.to_dict())
            _dict['engine_aspiration'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engine_block (list)
        _items = []
        if self.engine_block:
            for _item_engine_block in self.engine_block:
                if _item_engine_block:
                    _items.append(_item_engine_block.to_dict())
            _dict['engine_block'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in engine_size (list)
        _items = []
        if self.engine_size:
            for _item_engine_size in self.engine_size:
                if _item_engine_size:
                    _items.append(_item_engine_size.to_dict())
            _dict['engine_size'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exterior_color (list)
        _items = []
        if self.exterior_color:
            for _item_exterior_color in self.exterior_color:
                if _item_exterior_color:
                    _items.append(_item_exterior_color.to_dict())
            _dict['exterior_color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fca_status (list)
        _items = []
        if self.fca_status:
            for _item_fca_status in self.fca_status:
                if _item_fca_status:
                    _items.append(_item_fca_status.to_dict())
            _dict['fca_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fuel_type (list)
        _items = []
        if self.fuel_type:
            for _item_fuel_type in self.fuel_type:
                if _item_fuel_type:
                    _items.append(_item_fuel_type.to_dict())
            _dict['fuel_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in in_transit (list)
        _items = []
        if self.in_transit:
            for _item_in_transit in self.in_transit:
                if _item_in_transit:
                    _items.append(_item_in_transit.to_dict())
            _dict['in_transit'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in insurance_group (list)
        _items = []
        if self.insurance_group:
            for _item_insurance_group in self.insurance_group:
                if _item_insurance_group:
                    _items.append(_item_insurance_group.to_dict())
            _dict['insurance_group'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in interior_color (list)
        _items = []
        if self.interior_color:
            for _item_interior_color in self.interior_color:
                if _item_interior_color:
                    _items.append(_item_interior_color.to_dict())
            _dict['interior_color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in make (list)
        _items = []
        if self.make:
            for _item_make in self.make:
                if _item_make:
                    _items.append(_item_make.to_dict())
            _dict['make'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mas_code (list)
        _items = []
        if self.mas_code:
            for _item_mas_code in self.mas_code:
                if _item_mas_code:
                    _items.append(_item_mas_code.to_dict())
            _dict['mas_code'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in model (list)
        _items = []
        if self.model:
            for _item_model in self.model:
                if _item_model:
                    _items.append(_item_model.to_dict())
            _dict['model'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in num_owners (list)
        _items = []
        if self.num_owners:
            for _item_num_owners in self.num_owners:
                if _item_num_owners:
                    _items.append(_item_num_owners.to_dict())
            _dict['num_owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in powertrain_type (list)
        _items = []
        if self.powertrain_type:
            for _item_powertrain_type in self.powertrain_type:
                if _item_powertrain_type:
                    _items.append(_item_powertrain_type.to_dict())
            _dict['powertrain_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seating_capacity (list)
        _items = []
        if self.seating_capacity:
            for _item_seating_capacity in self.seating_capacity:
                if _item_seating_capacity:
                    _items.append(_item_seating_capacity.to_dict())
            _dict['seating_capacity'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_name (list)
        _items = []
        if self.seller_name:
            for _item_seller_name in self.seller_name:
                if _item_seller_name:
                    _items.append(_item_seller_name.to_dict())
            _dict['seller_name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_type (list)
        _items = []
        if self.seller_type:
            for _item_seller_type in self.seller_type:
                if _item_seller_type:
                    _items.append(_item_seller_type.to_dict())
            _dict['seller_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in source (list)
        _items = []
        if self.source:
            for _item_source in self.source:
                if _item_source:
                    _items.append(_item_source.to_dict())
            _dict['source'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state (list)
        _items = []
        if self.state:
            for _item_state in self.state:
                if _item_state:
                    _items.append(_item_state.to_dict())
            _dict['state'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transmission (list)
        _items = []
        if self.transmission:
            for _item_transmission in self.transmission:
                if _item_transmission:
                    _items.append(_item_transmission.to_dict())
            _dict['transmission'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trim (list)
        _items = []
        if self.trim:
            for _item_trim in self.trim:
                if _item_trim:
                    _items.append(_item_trim.to_dict())
            _dict['trim'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vehicle_registration_mark (list)
        _items = []
        if self.vehicle_registration_mark:
            for _item_vehicle_registration_mark in self.vehicle_registration_mark:
                if _item_vehicle_registration_mark:
                    _items.append(_item_vehicle_registration_mark.to_dict())
            _dict['vehicle_registration_mark'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vehicle_type (list)
        _items = []
        if self.vehicle_type:
            for _item_vehicle_type in self.vehicle_type:
                if _item_vehicle_type:
                    _items.append(_item_vehicle_type.to_dict())
            _dict['vehicle_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vrm (list)
        _items = []
        if self.vrm:
            for _item_vrm in self.vrm:
                if _item_vrm:
                    _items.append(_item_vrm.to_dict())
            _dict['vrm'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in year (list)
        _items = []
        if self.year:
            for _item_year in self.year:
                if _item_year:
                    _items.append(_item_year.to_dict())
            _dict['year'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UKCarSearchFacets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_exterior_color": [FacetItem.from_dict(_item) for _item in obj["base_exterior_color"]] if obj.get("base_exterior_color") is not None else None,
            "base_interior_color": [FacetItem.from_dict(_item) for _item in obj["base_interior_color"]] if obj.get("base_interior_color") is not None else None,
            "body_subtype": [FacetItem.from_dict(_item) for _item in obj["body_subtype"]] if obj.get("body_subtype") is not None else None,
            "body_type": [FacetItem.from_dict(_item) for _item in obj["body_type"]] if obj.get("body_type") is not None else None,
            "car_location_city": [FacetItem.from_dict(_item) for _item in obj["car_location_city"]] if obj.get("car_location_city") is not None else None,
            "car_location_county": [FacetItem.from_dict(_item) for _item in obj["car_location_county"]] if obj.get("car_location_county") is not None else None,
            "car_location_seller_name": [FacetItem.from_dict(_item) for _item in obj["car_location_seller_name"]] if obj.get("car_location_seller_name") is not None else None,
            "car_location_street": [FacetItem.from_dict(_item) for _item in obj["car_location_street"]] if obj.get("car_location_street") is not None else None,
            "car_location_zip": [FacetItem.from_dict(_item) for _item in obj["car_location_zip"]] if obj.get("car_location_zip") is not None else None,
            "car_type": [FacetItem.from_dict(_item) for _item in obj["car_type"]] if obj.get("car_type") is not None else None,
            "carfax_1_owner": [FacetItem.from_dict(_item) for _item in obj["carfax_1_owner"]] if obj.get("carfax_1_owner") is not None else None,
            "carfax_clean_title": [FacetItem.from_dict(_item) for _item in obj["carfax_clean_title"]] if obj.get("carfax_clean_title") is not None else None,
            "city": [FacetItem.from_dict(_item) for _item in obj["city"]] if obj.get("city") is not None else None,
            "co2_emissions": [FacetItem.from_dict(_item) for _item in obj["co2_emissions"]] if obj.get("co2_emissions") is not None else None,
            "cylinders": [FacetItem.from_dict(_item) for _item in obj["cylinders"]] if obj.get("cylinders") is not None else None,
            "data_source": [FacetItem.from_dict(_item) for _item in obj["data_source"]] if obj.get("data_source") is not None else None,
            "dealer_id": [FacetItem.from_dict(_item) for _item in obj["dealer_id"]] if obj.get("dealer_id") is not None else None,
            "dealer_type": [FacetItem.from_dict(_item) for _item in obj["dealer_type"]] if obj.get("dealer_type") is not None else None,
            "dealership_group_name": [FacetItem.from_dict(_item) for _item in obj["dealership_group_name"]] if obj.get("dealership_group_name") is not None else None,
            "doors": [FacetItem.from_dict(_item) for _item in obj["doors"]] if obj.get("doors") is not None else None,
            "drivetrain": [FacetItem.from_dict(_item) for _item in obj["drivetrain"]] if obj.get("drivetrain") is not None else None,
            "engine": [FacetItem.from_dict(_item) for _item in obj["engine"]] if obj.get("engine") is not None else None,
            "engine_aspiration": [FacetItem.from_dict(_item) for _item in obj["engine_aspiration"]] if obj.get("engine_aspiration") is not None else None,
            "engine_block": [FacetItem.from_dict(_item) for _item in obj["engine_block"]] if obj.get("engine_block") is not None else None,
            "engine_size": [FacetItem.from_dict(_item) for _item in obj["engine_size"]] if obj.get("engine_size") is not None else None,
            "exterior_color": [FacetItem.from_dict(_item) for _item in obj["exterior_color"]] if obj.get("exterior_color") is not None else None,
            "fca_status": [FacetItem.from_dict(_item) for _item in obj["fca_status"]] if obj.get("fca_status") is not None else None,
            "fuel_type": [FacetItem.from_dict(_item) for _item in obj["fuel_type"]] if obj.get("fuel_type") is not None else None,
            "in_transit": [FacetItem.from_dict(_item) for _item in obj["in_transit"]] if obj.get("in_transit") is not None else None,
            "insurance_group": [FacetItem.from_dict(_item) for _item in obj["insurance_group"]] if obj.get("insurance_group") is not None else None,
            "interior_color": [FacetItem.from_dict(_item) for _item in obj["interior_color"]] if obj.get("interior_color") is not None else None,
            "make": [FacetItem.from_dict(_item) for _item in obj["make"]] if obj.get("make") is not None else None,
            "mas_code": [FacetItem.from_dict(_item) for _item in obj["mas_code"]] if obj.get("mas_code") is not None else None,
            "model": [FacetItem.from_dict(_item) for _item in obj["model"]] if obj.get("model") is not None else None,
            "num_owners": [FacetItem.from_dict(_item) for _item in obj["num_owners"]] if obj.get("num_owners") is not None else None,
            "powertrain_type": [FacetItem.from_dict(_item) for _item in obj["powertrain_type"]] if obj.get("powertrain_type") is not None else None,
            "seating_capacity": [FacetItem.from_dict(_item) for _item in obj["seating_capacity"]] if obj.get("seating_capacity") is not None else None,
            "seller_name": [FacetItem.from_dict(_item) for _item in obj["seller_name"]] if obj.get("seller_name") is not None else None,
            "seller_type": [FacetItem.from_dict(_item) for _item in obj["seller_type"]] if obj.get("seller_type") is not None else None,
            "source": [FacetItem.from_dict(_item) for _item in obj["source"]] if obj.get("source") is not None else None,
            "state": [FacetItem.from_dict(_item) for _item in obj["state"]] if obj.get("state") is not None else None,
            "transmission": [FacetItem.from_dict(_item) for _item in obj["transmission"]] if obj.get("transmission") is not None else None,
            "trim": [FacetItem.from_dict(_item) for _item in obj["trim"]] if obj.get("trim") is not None else None,
            "vehicle_registration_mark": [FacetItem.from_dict(_item) for _item in obj["vehicle_registration_mark"]] if obj.get("vehicle_registration_mark") is not None else None,
            "vehicle_type": [FacetItem.from_dict(_item) for _item in obj["vehicle_type"]] if obj.get("vehicle_type") is not None else None,
            "vrm": [FacetItem.from_dict(_item) for _item in obj["vrm"]] if obj.get("vrm") is not None else None,
            "year": [FacetItem.from_dict(_item) for _item in obj["year"]] if obj.get("year") is not None else None
        })
        return _obj



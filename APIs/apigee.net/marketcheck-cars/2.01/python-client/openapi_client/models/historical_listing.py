# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.listing_finance import ListingFinance
from openapi_client.models.listing_lease import ListingLease
from typing import Optional, Set
from typing_extensions import Self

class HistoricalListing(BaseModel):
    """
    Represents a car history entry
    """ # noqa: E501
    carfax_1_owner: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether listing is carfax_1_owner")
    carfax_clean_title: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether listing is carfax_clean_title")
    city: Optional[StrictStr] = Field(default=None, description="City of the listing")
    data_source: Optional[StrictStr] = Field(default=None, description="Data source of the listing")
    dealer_id: Optional[StrictInt] = Field(default=None, description="Unique MC assigned dealers id for the listing")
    dom: Optional[StrictInt] = Field(default=None, description="Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car")
    dom_180: Optional[StrictInt] = Field(default=None, description="Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car")
    dom_active: Optional[StrictInt] = Field(default=None, description="Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car")
    exterior_color: Optional[StrictStr] = Field(default=None, description="Exterior color of the car")
    financing_options: Optional[List[ListingFinance]] = Field(default=None, description="Array of all finance offers for this listing")
    first_seen_at: Optional[StrictInt] = Field(default=None, description="Listing first seen at first scraped timestamp")
    first_seen_at_date: Optional[StrictStr] = Field(default=None, description="Listing first seen at first scraped date")
    heading: Optional[StrictStr] = Field(default=None, description="Listing title as displayed on the source website")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier representing a specific listing from the Marketcheck database")
    interior_color: Optional[StrictStr] = Field(default=None, description="Interior color of the car")
    inventory_type: Optional[StrictStr] = Field(default=None, description="Inventory type of car")
    is_certified: Optional[StrictInt] = Field(default=None, description="Certified car")
    is_searchable: Optional[StrictStr] = Field(default=None, description="Flag to indicate listing is marked searchable or not")
    last_seen_at: Optional[StrictInt] = Field(default=None, description="Listing last seen at (most recent) timestamp")
    last_seen_at_date: Optional[StrictStr] = Field(default=None, description="Listing last seen at (most recent) date")
    latitude: Optional[StrictStr] = Field(default=None, description="Latitude of the listing")
    leasing_options: Optional[List[ListingLease]] = Field(default=None, description="Array of all finance offers for this listing")
    longitude: Optional[StrictStr] = Field(default=None, description="Longitude of the listing")
    miles: Optional[StrictInt] = Field(default=None, description="Odometer reading / reported miles usage for the car")
    msrp: Optional[StrictInt] = Field(default=None, description="MSRP for the car")
    price: Optional[StrictInt] = Field(default=None, description="Asking price for the car")
    ref_miles: Optional[StrictStr] = Field(default=None, description="Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date")
    ref_miles_dt: Optional[StrictInt] = Field(default=None, description="The date at which the last miles was reported online. This is earlier to last_seen_date")
    ref_price: Optional[StrictStr] = Field(default=None, description="Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date")
    ref_price_dt: Optional[StrictInt] = Field(default=None, description="The date at which the last price was reported online. This is earlier to last_seen_date")
    scraped_at: Optional[StrictInt] = Field(default=None, description="Listing last seen at date timestamp")
    scraped_at_date: Optional[StrictStr] = Field(default=None, description="Listing last seen at date")
    seller_name: Optional[StrictStr] = Field(default=None, description="Seller name of the listing from the Marketcheck database")
    seller_name_o: Optional[StrictStr] = Field(default=None, description="Seller name of the listing from the Marketcheck database")
    seller_type: Optional[StrictStr] = Field(default=None, description="Seller type for the car")
    source: Optional[StrictStr] = Field(default=None, description="Source domain of the listing")
    state: Optional[StrictStr] = Field(default=None, description="State of the listing")
    status_date: Optional[StrictInt] = Field(default=None, description="Timestamp of status date")
    stock_no: Optional[StrictStr] = Field(default=None, description="Stock number of car in dealers inventory")
    street: Optional[StrictStr] = Field(default=None, description="Street of the listing")
    trim_r: Optional[StrictStr] = Field(default=None, description="Trim of the car")
    vdp_url: Optional[StrictStr] = Field(default=None, description="Vehicle Details Page url of the specific car")
    vin: Optional[StrictStr] = Field(default=None, description="VIN for the car")
    zip: Optional[StrictStr] = Field(default=None, description="Zip of the listing")
    __properties: ClassVar[List[str]] = ["carfax_1_owner", "carfax_clean_title", "city", "data_source", "dealer_id", "dom", "dom_180", "dom_active", "exterior_color", "financing_options", "first_seen_at", "first_seen_at_date", "heading", "id", "interior_color", "inventory_type", "is_certified", "is_searchable", "last_seen_at", "last_seen_at_date", "latitude", "leasing_options", "longitude", "miles", "msrp", "price", "ref_miles", "ref_miles_dt", "ref_price", "ref_price_dt", "scraped_at", "scraped_at_date", "seller_name", "seller_name_o", "seller_type", "source", "state", "status_date", "stock_no", "street", "trim_r", "vdp_url", "vin", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistoricalListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in financing_options (list)
        _items = []
        if self.financing_options:
            for _item_financing_options in self.financing_options:
                if _item_financing_options:
                    _items.append(_item_financing_options.to_dict())
            _dict['financing_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in leasing_options (list)
        _items = []
        if self.leasing_options:
            for _item_leasing_options in self.leasing_options:
                if _item_leasing_options:
                    _items.append(_item_leasing_options.to_dict())
            _dict['leasing_options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistoricalListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carfax_1_owner": obj.get("carfax_1_owner"),
            "carfax_clean_title": obj.get("carfax_clean_title"),
            "city": obj.get("city"),
            "data_source": obj.get("data_source"),
            "dealer_id": obj.get("dealer_id"),
            "dom": obj.get("dom"),
            "dom_180": obj.get("dom_180"),
            "dom_active": obj.get("dom_active"),
            "exterior_color": obj.get("exterior_color"),
            "financing_options": [ListingFinance.from_dict(_item) for _item in obj["financing_options"]] if obj.get("financing_options") is not None else None,
            "first_seen_at": obj.get("first_seen_at"),
            "first_seen_at_date": obj.get("first_seen_at_date"),
            "heading": obj.get("heading"),
            "id": obj.get("id"),
            "interior_color": obj.get("interior_color"),
            "inventory_type": obj.get("inventory_type"),
            "is_certified": obj.get("is_certified"),
            "is_searchable": obj.get("is_searchable"),
            "last_seen_at": obj.get("last_seen_at"),
            "last_seen_at_date": obj.get("last_seen_at_date"),
            "latitude": obj.get("latitude"),
            "leasing_options": [ListingLease.from_dict(_item) for _item in obj["leasing_options"]] if obj.get("leasing_options") is not None else None,
            "longitude": obj.get("longitude"),
            "miles": obj.get("miles"),
            "msrp": obj.get("msrp"),
            "price": obj.get("price"),
            "ref_miles": obj.get("ref_miles"),
            "ref_miles_dt": obj.get("ref_miles_dt"),
            "ref_price": obj.get("ref_price"),
            "ref_price_dt": obj.get("ref_price_dt"),
            "scraped_at": obj.get("scraped_at"),
            "scraped_at_date": obj.get("scraped_at_date"),
            "seller_name": obj.get("seller_name"),
            "seller_name_o": obj.get("seller_name_o"),
            "seller_type": obj.get("seller_type"),
            "source": obj.get("source"),
            "state": obj.get("state"),
            "status_date": obj.get("status_date"),
            "stock_no": obj.get("stock_no"),
            "street": obj.get("street"),
            "trim_r": obj.get("trim_r"),
            "vdp_url": obj.get("vdp_url"),
            "vin": obj.get("vin"),
            "zip": obj.get("zip")
        })
        return _obj



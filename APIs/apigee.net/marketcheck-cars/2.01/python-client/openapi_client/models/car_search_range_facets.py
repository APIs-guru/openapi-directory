# coding: utf-8

"""
    Marketcheck APIs

    One API serving data spanned across multiple verticals

    The version of the OpenAPI document: 2.01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.range_facet_item import RangeFacetItem
from typing import Optional, Set
from typing_extensions import Self

class CarSearchRangeFacets(BaseModel):
    """
    CarSearchRangeFacets
    """ # noqa: E501
    dom: Optional[List[RangeFacetItem]] = None
    dom_180: Optional[List[RangeFacetItem]] = None
    dom_active: Optional[List[RangeFacetItem]] = None
    finance_down_payment: Optional[List[RangeFacetItem]] = None
    finance_emp: Optional[List[RangeFacetItem]] = None
    finance_loan_apr: Optional[List[RangeFacetItem]] = None
    finance_loan_term: Optional[List[RangeFacetItem]] = None
    lease_down_payment: Optional[List[RangeFacetItem]] = None
    lease_emp: Optional[List[RangeFacetItem]] = None
    lease_term: Optional[List[RangeFacetItem]] = None
    miles: Optional[List[RangeFacetItem]] = None
    msrp: Optional[List[RangeFacetItem]] = None
    price: Optional[List[RangeFacetItem]] = None
    __properties: ClassVar[List[str]] = ["dom", "dom_180", "dom_active", "finance_down_payment", "finance_emp", "finance_loan_apr", "finance_loan_term", "lease_down_payment", "lease_emp", "lease_term", "miles", "msrp", "price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CarSearchRangeFacets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dom (list)
        _items = []
        if self.dom:
            for _item_dom in self.dom:
                if _item_dom:
                    _items.append(_item_dom.to_dict())
            _dict['dom'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dom_180 (list)
        _items = []
        if self.dom_180:
            for _item_dom_180 in self.dom_180:
                if _item_dom_180:
                    _items.append(_item_dom_180.to_dict())
            _dict['dom_180'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dom_active (list)
        _items = []
        if self.dom_active:
            for _item_dom_active in self.dom_active:
                if _item_dom_active:
                    _items.append(_item_dom_active.to_dict())
            _dict['dom_active'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in finance_down_payment (list)
        _items = []
        if self.finance_down_payment:
            for _item_finance_down_payment in self.finance_down_payment:
                if _item_finance_down_payment:
                    _items.append(_item_finance_down_payment.to_dict())
            _dict['finance_down_payment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in finance_emp (list)
        _items = []
        if self.finance_emp:
            for _item_finance_emp in self.finance_emp:
                if _item_finance_emp:
                    _items.append(_item_finance_emp.to_dict())
            _dict['finance_emp'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in finance_loan_apr (list)
        _items = []
        if self.finance_loan_apr:
            for _item_finance_loan_apr in self.finance_loan_apr:
                if _item_finance_loan_apr:
                    _items.append(_item_finance_loan_apr.to_dict())
            _dict['finance_loan_apr'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in finance_loan_term (list)
        _items = []
        if self.finance_loan_term:
            for _item_finance_loan_term in self.finance_loan_term:
                if _item_finance_loan_term:
                    _items.append(_item_finance_loan_term.to_dict())
            _dict['finance_loan_term'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lease_down_payment (list)
        _items = []
        if self.lease_down_payment:
            for _item_lease_down_payment in self.lease_down_payment:
                if _item_lease_down_payment:
                    _items.append(_item_lease_down_payment.to_dict())
            _dict['lease_down_payment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lease_emp (list)
        _items = []
        if self.lease_emp:
            for _item_lease_emp in self.lease_emp:
                if _item_lease_emp:
                    _items.append(_item_lease_emp.to_dict())
            _dict['lease_emp'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lease_term (list)
        _items = []
        if self.lease_term:
            for _item_lease_term in self.lease_term:
                if _item_lease_term:
                    _items.append(_item_lease_term.to_dict())
            _dict['lease_term'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in miles (list)
        _items = []
        if self.miles:
            for _item_miles in self.miles:
                if _item_miles:
                    _items.append(_item_miles.to_dict())
            _dict['miles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in msrp (list)
        _items = []
        if self.msrp:
            for _item_msrp in self.msrp:
                if _item_msrp:
                    _items.append(_item_msrp.to_dict())
            _dict['msrp'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in price (list)
        _items = []
        if self.price:
            for _item_price in self.price:
                if _item_price:
                    _items.append(_item_price.to_dict())
            _dict['price'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CarSearchRangeFacets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dom": [RangeFacetItem.from_dict(_item) for _item in obj["dom"]] if obj.get("dom") is not None else None,
            "dom_180": [RangeFacetItem.from_dict(_item) for _item in obj["dom_180"]] if obj.get("dom_180") is not None else None,
            "dom_active": [RangeFacetItem.from_dict(_item) for _item in obj["dom_active"]] if obj.get("dom_active") is not None else None,
            "finance_down_payment": [RangeFacetItem.from_dict(_item) for _item in obj["finance_down_payment"]] if obj.get("finance_down_payment") is not None else None,
            "finance_emp": [RangeFacetItem.from_dict(_item) for _item in obj["finance_emp"]] if obj.get("finance_emp") is not None else None,
            "finance_loan_apr": [RangeFacetItem.from_dict(_item) for _item in obj["finance_loan_apr"]] if obj.get("finance_loan_apr") is not None else None,
            "finance_loan_term": [RangeFacetItem.from_dict(_item) for _item in obj["finance_loan_term"]] if obj.get("finance_loan_term") is not None else None,
            "lease_down_payment": [RangeFacetItem.from_dict(_item) for _item in obj["lease_down_payment"]] if obj.get("lease_down_payment") is not None else None,
            "lease_emp": [RangeFacetItem.from_dict(_item) for _item in obj["lease_emp"]] if obj.get("lease_emp") is not None else None,
            "lease_term": [RangeFacetItem.from_dict(_item) for _item in obj["lease_term"]] if obj.get("lease_term") is not None else None,
            "miles": [RangeFacetItem.from_dict(_item) for _item in obj["miles"]] if obj.get("miles") is not None else None,
            "msrp": [RangeFacetItem.from_dict(_item) for _item in obj["msrp"]] if obj.get("msrp") is not None else None,
            "price": [RangeFacetItem.from_dict(_item) for _item in obj["price"]] if obj.get("price") is not None else None
        })
        return _obj



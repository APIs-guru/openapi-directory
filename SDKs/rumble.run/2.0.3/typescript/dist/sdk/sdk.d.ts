import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateAccountCredential(req: operations.CreateAccountCredentialRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountCredentialResponse>;
    CreateAccountKey(req: operations.CreateAccountKeyRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountKeyResponse>;
    CreateAccountOrganization(req: operations.CreateAccountOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountOrganizationResponse>;
    CreateAccountUser(req: operations.CreateAccountUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountUserResponse>;
    CreateAccountUserInvite(req: operations.CreateAccountUserInviteRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountUserInviteResponse>;
    CreateScan(req: operations.CreateScanRequest, config?: AxiosRequestConfig): Promise<operations.CreateScanResponse>;
    CreateSite(req: operations.CreateSiteRequest, config?: AxiosRequestConfig): Promise<operations.CreateSiteResponse>;
    DeleteAccountOrganizationExportToken(req: operations.DeleteAccountOrganizationExportTokenRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAccountOrganizationExportTokenResponse>;
    ExportAssetsCsv(req: operations.ExportAssetsCsvRequest, config?: AxiosRequestConfig): Promise<operations.ExportAssetsCsvResponse>;
    ExportAssetsCiscoCsv(req: operations.ExportAssetsCiscoCsvRequest, config?: AxiosRequestConfig): Promise<operations.ExportAssetsCiscoCsvResponse>;
    ExportAssetsJson(req: operations.ExportAssetsJsonRequest, config?: AxiosRequestConfig): Promise<operations.ExportAssetsJsonResponse>;
    ExportAssetsJsonl(req: operations.ExportAssetsJsonlRequest, config?: AxiosRequestConfig): Promise<operations.ExportAssetsJsonlResponse>;
    ExportAssetsNmapXml(req: operations.ExportAssetsNmapXmlRequest, config?: AxiosRequestConfig): Promise<operations.ExportAssetsNmapXmlResponse>;
    ExportEventsJson(req: operations.ExportEventsJsonRequest, config?: AxiosRequestConfig): Promise<operations.ExportEventsJsonResponse>;
    ExportEventsJsonl(req: operations.ExportEventsJsonlRequest, config?: AxiosRequestConfig): Promise<operations.ExportEventsJsonlResponse>;
    ExportServicesCsv(req: operations.ExportServicesCsvRequest, config?: AxiosRequestConfig): Promise<operations.ExportServicesCsvResponse>;
    ExportServicesJson(req: operations.ExportServicesJsonRequest, config?: AxiosRequestConfig): Promise<operations.ExportServicesJsonResponse>;
    ExportServicesJsonl(req: operations.ExportServicesJsonlRequest, config?: AxiosRequestConfig): Promise<operations.ExportServicesJsonlResponse>;
    ExportSitesCsv(req: operations.ExportSitesCsvRequest, config?: AxiosRequestConfig): Promise<operations.ExportSitesCsvResponse>;
    ExportSitesJson(req: operations.ExportSitesJsonRequest, config?: AxiosRequestConfig): Promise<operations.ExportSitesJsonResponse>;
    ExportSitesJsonl(req: operations.ExportSitesJsonlRequest, config?: AxiosRequestConfig): Promise<operations.ExportSitesJsonlResponse>;
    ExportWirelessCsv(req: operations.ExportWirelessCsvRequest, config?: AxiosRequestConfig): Promise<operations.ExportWirelessCsvResponse>;
    ExportWirelessJson(req: operations.ExportWirelessJsonRequest, config?: AxiosRequestConfig): Promise<operations.ExportWirelessJsonResponse>;
    ExportWirelessJsonl(req: operations.ExportWirelessJsonlRequest, config?: AxiosRequestConfig): Promise<operations.ExportWirelessJsonlResponse>;
    GetAccountAgents(req: operations.GetAccountAgentsRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountAgentsResponse>;
    GetAccountCredential(req: operations.GetAccountCredentialRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountCredentialResponse>;
    GetAccountCredentials(req: operations.GetAccountCredentialsRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountCredentialsResponse>;
    GetAccountKey(req: operations.GetAccountKeyRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountKeyResponse>;
    GetAccountKeys(req: operations.GetAccountKeysRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountKeysResponse>;
    GetAccountLicense(req: operations.GetAccountLicenseRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountLicenseResponse>;
    GetAccountOrganization(req: operations.GetAccountOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountOrganizationResponse>;
    GetAccountOrganizations(req: operations.GetAccountOrganizationsRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountOrganizationsResponse>;
    GetAccountSites(req: operations.GetAccountSitesRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountSitesResponse>;
    GetAccountTasks(req: operations.GetAccountTasksRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountTasksResponse>;
    GetAccountUser(req: operations.GetAccountUserRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountUserResponse>;
    GetAccountUsers(req: operations.GetAccountUsersRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountUsersResponse>;
    GetAgent(req: operations.GetAgentRequest, config?: AxiosRequestConfig): Promise<operations.GetAgentResponse>;
    GetAgents(req: operations.GetAgentsRequest, config?: AxiosRequestConfig): Promise<operations.GetAgentsResponse>;
    GetAsset(req: operations.GetAssetRequest, config?: AxiosRequestConfig): Promise<operations.GetAssetResponse>;
    GetAssets(req: operations.GetAssetsRequest, config?: AxiosRequestConfig): Promise<operations.GetAssetsResponse>;
    GetKey(req: operations.GetKeyRequest, config?: AxiosRequestConfig): Promise<operations.GetKeyResponse>;
    GetLatestAgentVersion(config?: AxiosRequestConfig): Promise<operations.GetLatestAgentVersionResponse>;
    GetLatestPlatformVersion(config?: AxiosRequestConfig): Promise<operations.GetLatestPlatformVersionResponse>;
    GetLatestScannerVersion(config?: AxiosRequestConfig): Promise<operations.GetLatestScannerVersionResponse>;
    GetOrganization(req: operations.GetOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.GetOrganizationResponse>;
    GetService(req: operations.GetServiceRequest, config?: AxiosRequestConfig): Promise<operations.GetServiceResponse>;
    GetServices(req: operations.GetServicesRequest, config?: AxiosRequestConfig): Promise<operations.GetServicesResponse>;
    GetSite(req: operations.GetSiteRequest, config?: AxiosRequestConfig): Promise<operations.GetSiteResponse>;
    GetSites(req: operations.GetSitesRequest, config?: AxiosRequestConfig): Promise<operations.GetSitesResponse>;
    GetTask(req: operations.GetTaskRequest, config?: AxiosRequestConfig): Promise<operations.GetTaskResponse>;
    GetTaskChangeReport(req: operations.GetTaskChangeReportRequest, config?: AxiosRequestConfig): Promise<operations.GetTaskChangeReportResponse>;
    GetTaskScanData(req: operations.GetTaskScanDataRequest, config?: AxiosRequestConfig): Promise<operations.GetTaskScanDataResponse>;
    GetTasks(req: operations.GetTasksRequest, config?: AxiosRequestConfig): Promise<operations.GetTasksResponse>;
    GetWirelessLan(req: operations.GetWirelessLanRequest, config?: AxiosRequestConfig): Promise<operations.GetWirelessLanResponse>;
    GetWirelessLaNs(req: operations.GetWirelessLaNsRequest, config?: AxiosRequestConfig): Promise<operations.GetWirelessLaNsResponse>;
    HideTask(req: operations.HideTaskRequest, config?: AxiosRequestConfig): Promise<operations.HideTaskResponse>;
    ImportScanData(req: operations.ImportScanDataRequest, config?: AxiosRequestConfig): Promise<operations.ImportScanDataResponse>;
    RemoveAccountCredential(req: operations.RemoveAccountCredentialRequest, config?: AxiosRequestConfig): Promise<operations.RemoveAccountCredentialResponse>;
    RemoveAccountKey(req: operations.RemoveAccountKeyRequest, config?: AxiosRequestConfig): Promise<operations.RemoveAccountKeyResponse>;
    RemoveAccountOrganization(req: operations.RemoveAccountOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.RemoveAccountOrganizationResponse>;
    RemoveAccountUser(req: operations.RemoveAccountUserRequest, config?: AxiosRequestConfig): Promise<operations.RemoveAccountUserResponse>;
    RemoveAgent(req: operations.RemoveAgentRequest, config?: AxiosRequestConfig): Promise<operations.RemoveAgentResponse>;
    RemoveAsset(req: operations.RemoveAssetRequest, config?: AxiosRequestConfig): Promise<operations.RemoveAssetResponse>;
    RemoveKey(req: operations.RemoveKeyRequest, config?: AxiosRequestConfig): Promise<operations.RemoveKeyResponse>;
    RemoveService(req: operations.RemoveServiceRequest, config?: AxiosRequestConfig): Promise<operations.RemoveServiceResponse>;
    RemoveSite(req: operations.RemoveSiteRequest, config?: AxiosRequestConfig): Promise<operations.RemoveSiteResponse>;
    RemoveWirelessLan(req: operations.RemoveWirelessLanRequest, config?: AxiosRequestConfig): Promise<operations.RemoveWirelessLanResponse>;
    ResetAccountUserLockout(req: operations.ResetAccountUserLockoutRequest, config?: AxiosRequestConfig): Promise<operations.ResetAccountUserLockoutResponse>;
    ResetAccountUserMfa(req: operations.ResetAccountUserMfaRequest, config?: AxiosRequestConfig): Promise<operations.ResetAccountUserMfaResponse>;
    ResetAccountUserPassword(req: operations.ResetAccountUserPasswordRequest, config?: AxiosRequestConfig): Promise<operations.ResetAccountUserPasswordResponse>;
    RotateAccountKey(req: operations.RotateAccountKeyRequest, config?: AxiosRequestConfig): Promise<operations.RotateAccountKeyResponse>;
    RotateAccountOrganizationExportToken(req: operations.RotateAccountOrganizationExportTokenRequest, config?: AxiosRequestConfig): Promise<operations.RotateAccountOrganizationExportTokenResponse>;
    RotateKey(req: operations.RotateKeyRequest, config?: AxiosRequestConfig): Promise<operations.RotateKeyResponse>;
    SnowExportAssetsCsv(req: operations.SnowExportAssetsCsvRequest, config?: AxiosRequestConfig): Promise<operations.SnowExportAssetsCsvResponse>;
    SnowExportAssetsJson(req: operations.SnowExportAssetsJsonRequest, config?: AxiosRequestConfig): Promise<operations.SnowExportAssetsJsonResponse>;
    SnowExportServicesCsv(req: operations.SnowExportServicesCsvRequest, config?: AxiosRequestConfig): Promise<operations.SnowExportServicesCsvResponse>;
    SplunkAssetSyncCreatedJson(req: operations.SplunkAssetSyncCreatedJsonRequest, config?: AxiosRequestConfig): Promise<operations.SplunkAssetSyncCreatedJsonResponse>;
    SplunkAssetSyncUpdatedJson(req: operations.SplunkAssetSyncUpdatedJsonRequest, config?: AxiosRequestConfig): Promise<operations.SplunkAssetSyncUpdatedJsonResponse>;
    StopTask(req: operations.StopTaskRequest, config?: AxiosRequestConfig): Promise<operations.StopTaskResponse>;
    UpdateAccountOrganization(req: operations.UpdateAccountOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAccountOrganizationResponse>;
    UpdateAccountUser(req: operations.UpdateAccountUserRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAccountUserResponse>;
    UpdateAgentSite(req: operations.UpdateAgentSiteRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAgentSiteResponse>;
    UpdateAssetComments(req: operations.UpdateAssetCommentsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssetCommentsResponse>;
    UpdateAssetTags(req: operations.UpdateAssetTagsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssetTagsResponse>;
    UpdateOrganization(req: operations.UpdateOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateOrganizationResponse>;
    UpdateSite(req: operations.UpdateSiteRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSiteResponse>;
    UpdateTask(req: operations.UpdateTaskRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskResponse>;
    UpgradeAgent(req: operations.UpgradeAgentRequest, config?: AxiosRequestConfig): Promise<operations.UpgradeAgentResponse>;
}
export {};

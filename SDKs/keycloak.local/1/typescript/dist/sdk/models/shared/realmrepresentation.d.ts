import { SpeakeasyBase } from "../../../internal/utils";
import { AuthenticationFlowRepresentation } from "./authenticationflowrepresentation";
import { AuthenticatorConfigRepresentation } from "./authenticatorconfigrepresentation";
import { ClientScopeRepresentation } from "./clientscoperepresentation";
import { ClientRepresentation } from "./clientrepresentation";
import { MultivaluedHashMap } from "./multivaluedhashmap";
import { UserRepresentation } from "./userrepresentation";
import { GroupRepresentation } from "./grouprepresentation";
import { IdentityProviderMapperRepresentation } from "./identityprovidermapperrepresentation";
import { IdentityProviderRepresentation } from "./identityproviderrepresentation";
import { ProtocolMapperRepresentation } from "./protocolmapperrepresentation";
import { RequiredActionProviderRepresentation } from "./requiredactionproviderrepresentation";
import { RolesRepresentation } from "./rolesrepresentation";
import { ScopeMappingRepresentation } from "./scopemappingrepresentation";
import { UserFederationMapperRepresentation } from "./userfederationmapperrepresentation";
import { UserFederationProviderRepresentation } from "./userfederationproviderrepresentation";
export declare class RealmRepresentation extends SpeakeasyBase {
    accessCodeLifespan?: number;
    accessCodeLifespanLogin?: number;
    accessCodeLifespanUserAction?: number;
    accessTokenLifespan?: number;
    accessTokenLifespanForImplicitFlow?: number;
    accountTheme?: string;
    actionTokenGeneratedByAdminLifespan?: number;
    actionTokenGeneratedByUserLifespan?: number;
    adminEventsDetailsEnabled?: boolean;
    adminEventsEnabled?: boolean;
    adminTheme?: string;
    attributes?: Map<string, any>;
    authenticationFlows?: AuthenticationFlowRepresentation[];
    authenticatorConfig?: AuthenticatorConfigRepresentation[];
    browserFlow?: string;
    browserSecurityHeaders?: Map<string, any>;
    bruteForceProtected?: boolean;
    clientAuthenticationFlow?: string;
    clientScopeMappings?: Map<string, any>;
    clientScopes?: ClientScopeRepresentation[];
    clientSessionIdleTimeout?: number;
    clientSessionMaxLifespan?: number;
    clients?: ClientRepresentation[];
    components?: MultivaluedHashMap;
    defaultDefaultClientScopes?: string[];
    defaultGroups?: string[];
    defaultLocale?: string;
    defaultOptionalClientScopes?: string[];
    defaultRoles?: string[];
    defaultSignatureAlgorithm?: string;
    directGrantFlow?: string;
    displayName?: string;
    displayNameHtml?: string;
    dockerAuthenticationFlow?: string;
    duplicateEmailsAllowed?: boolean;
    editUsernameAllowed?: boolean;
    emailTheme?: string;
    enabled?: boolean;
    enabledEventTypes?: string[];
    eventsEnabled?: boolean;
    eventsExpiration?: number;
    eventsListeners?: string[];
    failureFactor?: number;
    federatedUsers?: UserRepresentation[];
    groups?: GroupRepresentation[];
    id?: string;
    identityProviderMappers?: IdentityProviderMapperRepresentation[];
    identityProviders?: IdentityProviderRepresentation[];
    internationalizationEnabled?: boolean;
    keycloakVersion?: string;
    loginTheme?: string;
    loginWithEmailAllowed?: boolean;
    maxDeltaTimeSeconds?: number;
    maxFailureWaitSeconds?: number;
    minimumQuickLoginWaitSeconds?: number;
    notBefore?: number;
    offlineSessionIdleTimeout?: number;
    offlineSessionMaxLifespan?: number;
    offlineSessionMaxLifespanEnabled?: boolean;
    otpPolicyAlgorithm?: string;
    otpPolicyDigits?: number;
    otpPolicyInitialCounter?: number;
    otpPolicyLookAheadWindow?: number;
    otpPolicyPeriod?: number;
    otpPolicyType?: string;
    otpSupportedApplications?: string[];
    passwordPolicy?: string;
    permanentLockout?: boolean;
    protocolMappers?: ProtocolMapperRepresentation[];
    quickLoginCheckMilliSeconds?: number;
    realm?: string;
    refreshTokenMaxReuse?: number;
    registrationAllowed?: boolean;
    registrationEmailAsUsername?: boolean;
    registrationFlow?: string;
    rememberMe?: boolean;
    requiredActions?: RequiredActionProviderRepresentation[];
    resetCredentialsFlow?: string;
    resetPasswordAllowed?: boolean;
    revokeRefreshToken?: boolean;
    roles?: RolesRepresentation;
    scopeMappings?: ScopeMappingRepresentation[];
    smtpServer?: Map<string, any>;
    sslRequired?: string;
    ssoSessionIdleTimeout?: number;
    ssoSessionIdleTimeoutRememberMe?: number;
    ssoSessionMaxLifespan?: number;
    ssoSessionMaxLifespanRememberMe?: number;
    supportedLocales?: string[];
    userFederationMappers?: UserFederationMapperRepresentation[];
    userFederationProviders?: UserFederationProviderRepresentation[];
    userManagedAccessAllowed?: boolean;
    users?: UserRepresentation[];
    verifyEmail?: boolean;
    waitIncrementSeconds?: number;
    webAuthnPolicyAcceptableAaguids?: string[];
    webAuthnPolicyAttestationConveyancePreference?: string;
    webAuthnPolicyAuthenticatorAttachment?: string;
    webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;
    webAuthnPolicyCreateTimeout?: number;
    webAuthnPolicyPasswordlessAcceptableAaguids?: string[];
    webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;
    webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;
    webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;
    webAuthnPolicyPasswordlessCreateTimeout?: number;
    webAuthnPolicyPasswordlessRequireResidentKey?: string;
    webAuthnPolicyPasswordlessRpEntityName?: string;
    webAuthnPolicyPasswordlessRpId?: string;
    webAuthnPolicyPasswordlessSignatureAlgorithms?: string[];
    webAuthnPolicyPasswordlessUserVerificationRequirement?: string;
    webAuthnPolicyRequireResidentKey?: string;
    webAuthnPolicyRpEntityName?: string;
    webAuthnPolicyRpId?: string;
    webAuthnPolicySignatureAlgorithms?: string[];
    webAuthnPolicyUserVerificationRequirement?: string;
}

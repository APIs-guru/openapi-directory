from dataclasses import dataclass, field
from typing import Any,List,Optional
from dataclasses_json import dataclass_json
from sdk import utils
from . import *


@dataclass_json
@dataclass
class RealmRepresentation:
    access_code_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('accessCodeLifespan') }})
    access_code_lifespan_login: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('accessCodeLifespanLogin') }})
    access_code_lifespan_user_action: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('accessCodeLifespanUserAction') }})
    access_token_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('accessTokenLifespan') }})
    access_token_lifespan_for_implicit_flow: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('accessTokenLifespanForImplicitFlow') }})
    account_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('accountTheme') }})
    action_token_generated_by_admin_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('actionTokenGeneratedByAdminLifespan') }})
    action_token_generated_by_user_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('actionTokenGeneratedByUserLifespan') }})
    admin_events_details_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('adminEventsDetailsEnabled') }})
    admin_events_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('adminEventsEnabled') }})
    admin_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('adminTheme') }})
    attributes: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('attributes') }})
    authentication_flows: Optional[List[AuthenticationFlowRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('authenticationFlows') }})
    authenticator_config: Optional[List[AuthenticatorConfigRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('authenticatorConfig') }})
    browser_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('browserFlow') }})
    browser_security_headers: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('browserSecurityHeaders') }})
    brute_force_protected: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('bruteForceProtected') }})
    client_authentication_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('clientAuthenticationFlow') }})
    client_scope_mappings: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('clientScopeMappings') }})
    client_scopes: Optional[List[ClientScopeRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('clientScopes') }})
    client_session_idle_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('clientSessionIdleTimeout') }})
    client_session_max_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('clientSessionMaxLifespan') }})
    clients: Optional[List[ClientRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('clients') }})
    components: Optional[MultivaluedHashMap] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('components') }})
    default_default_client_scopes: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('defaultDefaultClientScopes') }})
    default_groups: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('defaultGroups') }})
    default_locale: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('defaultLocale') }})
    default_optional_client_scopes: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('defaultOptionalClientScopes') }})
    default_roles: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('defaultRoles') }})
    default_signature_algorithm: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('defaultSignatureAlgorithm') }})
    direct_grant_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('directGrantFlow') }})
    display_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('displayName') }})
    display_name_html: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('displayNameHtml') }})
    docker_authentication_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('dockerAuthenticationFlow') }})
    duplicate_emails_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('duplicateEmailsAllowed') }})
    edit_username_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('editUsernameAllowed') }})
    email_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('emailTheme') }})
    enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('enabled') }})
    enabled_event_types: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('enabledEventTypes') }})
    events_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventsEnabled') }})
    events_expiration: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventsExpiration') }})
    events_listeners: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('eventsListeners') }})
    failure_factor: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('failureFactor') }})
    federated_users: Optional[List[UserRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('federatedUsers') }})
    groups: Optional[List[GroupRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('groups') }})
    id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('id') }})
    identity_provider_mappers: Optional[List[IdentityProviderMapperRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('identityProviderMappers') }})
    identity_providers: Optional[List[IdentityProviderRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('identityProviders') }})
    internationalization_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('internationalizationEnabled') }})
    keycloak_version: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('keycloakVersion') }})
    login_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('loginTheme') }})
    login_with_email_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('loginWithEmailAllowed') }})
    max_delta_time_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('maxDeltaTimeSeconds') }})
    max_failure_wait_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('maxFailureWaitSeconds') }})
    minimum_quick_login_wait_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('minimumQuickLoginWaitSeconds') }})
    not_before: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('notBefore') }})
    offline_session_idle_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('offlineSessionIdleTimeout') }})
    offline_session_max_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('offlineSessionMaxLifespan') }})
    offline_session_max_lifespan_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('offlineSessionMaxLifespanEnabled') }})
    otp_policy_algorithm: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpPolicyAlgorithm') }})
    otp_policy_digits: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpPolicyDigits') }})
    otp_policy_initial_counter: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpPolicyInitialCounter') }})
    otp_policy_look_ahead_window: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpPolicyLookAheadWindow') }})
    otp_policy_period: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpPolicyPeriod') }})
    otp_policy_type: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpPolicyType') }})
    otp_supported_applications: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('otpSupportedApplications') }})
    password_policy: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('passwordPolicy') }})
    permanent_lockout: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('permanentLockout') }})
    protocol_mappers: Optional[List[ProtocolMapperRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('protocolMappers') }})
    quick_login_check_milli_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('quickLoginCheckMilliSeconds') }})
    realm: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('realm') }})
    refresh_token_max_reuse: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('refreshTokenMaxReuse') }})
    registration_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('registrationAllowed') }})
    registration_email_as_username: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('registrationEmailAsUsername') }})
    registration_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('registrationFlow') }})
    remember_me: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('rememberMe') }})
    required_actions: Optional[List[RequiredActionProviderRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('requiredActions') }})
    reset_credentials_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('resetCredentialsFlow') }})
    reset_password_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('resetPasswordAllowed') }})
    revoke_refresh_token: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('revokeRefreshToken') }})
    roles: Optional[RolesRepresentation] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('roles') }})
    scope_mappings: Optional[List[ScopeMappingRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('scopeMappings') }})
    smtp_server: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('smtpServer') }})
    ssl_required: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('sslRequired') }})
    sso_session_idle_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ssoSessionIdleTimeout') }})
    sso_session_idle_timeout_remember_me: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ssoSessionIdleTimeoutRememberMe') }})
    sso_session_max_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ssoSessionMaxLifespan') }})
    sso_session_max_lifespan_remember_me: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ssoSessionMaxLifespanRememberMe') }})
    supported_locales: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('supportedLocales') }})
    user_federation_mappers: Optional[List[UserFederationMapperRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('userFederationMappers') }})
    user_federation_providers: Optional[List[UserFederationProviderRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('userFederationProviders') }})
    user_managed_access_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('userManagedAccessAllowed') }})
    users: Optional[List[UserRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('users') }})
    verify_email: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('verifyEmail') }})
    wait_increment_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('waitIncrementSeconds') }})
    web_authn_policy_acceptable_aaguids: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyAcceptableAaguids') }})
    web_authn_policy_attestation_conveyance_preference: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyAttestationConveyancePreference') }})
    web_authn_policy_authenticator_attachment: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyAuthenticatorAttachment') }})
    web_authn_policy_avoid_same_authenticator_register: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyAvoidSameAuthenticatorRegister') }})
    web_authn_policy_create_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyCreateTimeout') }})
    web_authn_policy_passwordless_acceptable_aaguids: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessAcceptableAaguids') }})
    web_authn_policy_passwordless_attestation_conveyance_preference: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessAttestationConveyancePreference') }})
    web_authn_policy_passwordless_authenticator_attachment: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessAuthenticatorAttachment') }})
    web_authn_policy_passwordless_avoid_same_authenticator_register: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister') }})
    web_authn_policy_passwordless_create_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessCreateTimeout') }})
    web_authn_policy_passwordless_require_resident_key: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessRequireResidentKey') }})
    web_authn_policy_passwordless_rp_entity_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessRpEntityName') }})
    web_authn_policy_passwordless_rp_id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessRpId') }})
    web_authn_policy_passwordless_signature_algorithms: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessSignatureAlgorithms') }})
    web_authn_policy_passwordless_user_verification_requirement: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyPasswordlessUserVerificationRequirement') }})
    web_authn_policy_require_resident_key: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyRequireResidentKey') }})
    web_authn_policy_rp_entity_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyRpEntityName') }})
    web_authn_policy_rp_id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyRpId') }})
    web_authn_policy_signature_algorithms: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicySignatureAlgorithms') }})
    web_authn_policy_user_verification_requirement: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('webAuthnPolicyUserVerificationRequirement') }})
    

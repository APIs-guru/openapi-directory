from dataclasses import dataclass, field
from typing import Any,List,Optional
from dataclasses_json import dataclass_json
from . import authenticationflowrepresentation
from . import authenticatorconfigrepresentation
from . import clientscoperepresentation
from . import clientrepresentation
from . import multivaluedhashmap
from . import userrepresentation
from . import grouprepresentation
from . import identityprovidermapperrepresentation
from . import identityproviderrepresentation
from . import protocolmapperrepresentation
from . import requiredactionproviderrepresentation
from . import rolesrepresentation
from . import scopemappingrepresentation
from . import userfederationmapperrepresentation
from . import userfederationproviderrepresentation
from . import userrepresentation


@dataclass_json
@dataclass
class RealmRepresentation:
    access_code_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'accessCodeLifespan' }})
    access_code_lifespan_login: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'accessCodeLifespanLogin' }})
    access_code_lifespan_user_action: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'accessCodeLifespanUserAction' }})
    access_token_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'accessTokenLifespan' }})
    access_token_lifespan_for_implicit_flow: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'accessTokenLifespanForImplicitFlow' }})
    account_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'accountTheme' }})
    action_token_generated_by_admin_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'actionTokenGeneratedByAdminLifespan' }})
    action_token_generated_by_user_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'actionTokenGeneratedByUserLifespan' }})
    admin_events_details_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'adminEventsDetailsEnabled' }})
    admin_events_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'adminEventsEnabled' }})
    admin_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'adminTheme' }})
    attributes: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'attributes' }})
    authentication_flows: Optional[List[authenticationflowrepresentation.AuthenticationFlowRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'authenticationFlows' }})
    authenticator_config: Optional[List[authenticatorconfigrepresentation.AuthenticatorConfigRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'authenticatorConfig' }})
    browser_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'browserFlow' }})
    browser_security_headers: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'browserSecurityHeaders' }})
    brute_force_protected: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'bruteForceProtected' }})
    client_authentication_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'clientAuthenticationFlow' }})
    client_scope_mappings: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'clientScopeMappings' }})
    client_scopes: Optional[List[clientscoperepresentation.ClientScopeRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'clientScopes' }})
    client_session_idle_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'clientSessionIdleTimeout' }})
    client_session_max_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'clientSessionMaxLifespan' }})
    clients: Optional[List[clientrepresentation.ClientRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'clients' }})
    components: Optional[multivaluedhashmap.MultivaluedHashMap] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'components' }})
    default_default_client_scopes: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'defaultDefaultClientScopes' }})
    default_groups: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'defaultGroups' }})
    default_locale: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'defaultLocale' }})
    default_optional_client_scopes: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'defaultOptionalClientScopes' }})
    default_roles: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'defaultRoles' }})
    default_signature_algorithm: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'defaultSignatureAlgorithm' }})
    direct_grant_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'directGrantFlow' }})
    display_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'displayName' }})
    display_name_html: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'displayNameHtml' }})
    docker_authentication_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'dockerAuthenticationFlow' }})
    duplicate_emails_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'duplicateEmailsAllowed' }})
    edit_username_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'editUsernameAllowed' }})
    email_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'emailTheme' }})
    enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'enabled' }})
    enabled_event_types: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'enabledEventTypes' }})
    events_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'eventsEnabled' }})
    events_expiration: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'eventsExpiration' }})
    events_listeners: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'eventsListeners' }})
    failure_factor: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'failureFactor' }})
    federated_users: Optional[List[userrepresentation.UserRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'federatedUsers' }})
    groups: Optional[List[grouprepresentation.GroupRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'groups' }})
    id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'id' }})
    identity_provider_mappers: Optional[List[identityprovidermapperrepresentation.IdentityProviderMapperRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'identityProviderMappers' }})
    identity_providers: Optional[List[identityproviderrepresentation.IdentityProviderRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'identityProviders' }})
    internationalization_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'internationalizationEnabled' }})
    keycloak_version: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'keycloakVersion' }})
    login_theme: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'loginTheme' }})
    login_with_email_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'loginWithEmailAllowed' }})
    max_delta_time_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'maxDeltaTimeSeconds' }})
    max_failure_wait_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'maxFailureWaitSeconds' }})
    minimum_quick_login_wait_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'minimumQuickLoginWaitSeconds' }})
    not_before: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'notBefore' }})
    offline_session_idle_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'offlineSessionIdleTimeout' }})
    offline_session_max_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'offlineSessionMaxLifespan' }})
    offline_session_max_lifespan_enabled: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'offlineSessionMaxLifespanEnabled' }})
    otp_policy_algorithm: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpPolicyAlgorithm' }})
    otp_policy_digits: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpPolicyDigits' }})
    otp_policy_initial_counter: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpPolicyInitialCounter' }})
    otp_policy_look_ahead_window: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpPolicyLookAheadWindow' }})
    otp_policy_period: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpPolicyPeriod' }})
    otp_policy_type: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpPolicyType' }})
    otp_supported_applications: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'otpSupportedApplications' }})
    password_policy: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'passwordPolicy' }})
    permanent_lockout: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'permanentLockout' }})
    protocol_mappers: Optional[List[protocolmapperrepresentation.ProtocolMapperRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'protocolMappers' }})
    quick_login_check_milli_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'quickLoginCheckMilliSeconds' }})
    realm: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'realm' }})
    refresh_token_max_reuse: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'refreshTokenMaxReuse' }})
    registration_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'registrationAllowed' }})
    registration_email_as_username: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'registrationEmailAsUsername' }})
    registration_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'registrationFlow' }})
    remember_me: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'rememberMe' }})
    required_actions: Optional[List[requiredactionproviderrepresentation.RequiredActionProviderRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'requiredActions' }})
    reset_credentials_flow: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'resetCredentialsFlow' }})
    reset_password_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'resetPasswordAllowed' }})
    revoke_refresh_token: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'revokeRefreshToken' }})
    roles: Optional[rolesrepresentation.RolesRepresentation] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'roles' }})
    scope_mappings: Optional[List[scopemappingrepresentation.ScopeMappingRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'scopeMappings' }})
    smtp_server: Optional[dict[str, Any]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'smtpServer' }})
    ssl_required: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'sslRequired' }})
    sso_session_idle_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'ssoSessionIdleTimeout' }})
    sso_session_idle_timeout_remember_me: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'ssoSessionIdleTimeoutRememberMe' }})
    sso_session_max_lifespan: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'ssoSessionMaxLifespan' }})
    sso_session_max_lifespan_remember_me: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'ssoSessionMaxLifespanRememberMe' }})
    supported_locales: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'supportedLocales' }})
    user_federation_mappers: Optional[List[userfederationmapperrepresentation.UserFederationMapperRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'userFederationMappers' }})
    user_federation_providers: Optional[List[userfederationproviderrepresentation.UserFederationProviderRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'userFederationProviders' }})
    user_managed_access_allowed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'userManagedAccessAllowed' }})
    users: Optional[List[userrepresentation.UserRepresentation]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'users' }})
    verify_email: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'verifyEmail' }})
    wait_increment_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'waitIncrementSeconds' }})
    web_authn_policy_acceptable_aaguids: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyAcceptableAaguids' }})
    web_authn_policy_attestation_conveyance_preference: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyAttestationConveyancePreference' }})
    web_authn_policy_authenticator_attachment: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyAuthenticatorAttachment' }})
    web_authn_policy_avoid_same_authenticator_register: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyAvoidSameAuthenticatorRegister' }})
    web_authn_policy_create_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyCreateTimeout' }})
    web_authn_policy_passwordless_acceptable_aaguids: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessAcceptableAaguids' }})
    web_authn_policy_passwordless_attestation_conveyance_preference: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessAttestationConveyancePreference' }})
    web_authn_policy_passwordless_authenticator_attachment: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessAuthenticatorAttachment' }})
    web_authn_policy_passwordless_avoid_same_authenticator_register: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister' }})
    web_authn_policy_passwordless_create_timeout: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessCreateTimeout' }})
    web_authn_policy_passwordless_require_resident_key: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessRequireResidentKey' }})
    web_authn_policy_passwordless_rp_entity_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessRpEntityName' }})
    web_authn_policy_passwordless_rp_id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessRpId' }})
    web_authn_policy_passwordless_signature_algorithms: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessSignatureAlgorithms' }})
    web_authn_policy_passwordless_user_verification_requirement: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyPasswordlessUserVerificationRequirement' }})
    web_authn_policy_require_resident_key: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyRequireResidentKey' }})
    web_authn_policy_rp_entity_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyRpEntityName' }})
    web_authn_policy_rp_id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyRpId' }})
    web_authn_policy_signature_algorithms: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicySignatureAlgorithms' }})
    web_authn_policy_user_verification_requirement: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'field_name': 'webAuthnPolicyUserVerificationRequirement' }})
    

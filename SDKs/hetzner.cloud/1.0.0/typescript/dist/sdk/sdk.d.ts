import { AxiosInstance } from "axios";
import { Actions } from "./actions";
import { CertificateActions } from "./certificateactions";
import { Certificates } from "./certificates";
import { Datacenters } from "./datacenters";
import { FirewallActions } from "./firewallactions";
import { Firewalls } from "./firewalls";
import { FloatingIpActions } from "./floatingipactions";
import { FloatingIPs } from "./floatingips";
import { IsOs } from "./isos";
import { ImageActions } from "./imageactions";
import { Images } from "./images";
import { LoadBalancerActions } from "./loadbalanceractions";
import { LoadBalancerTypes } from "./loadbalancertypes";
import { LoadBalancers } from "./loadbalancers";
import { Locations } from "./locations";
import { NetworkActions } from "./networkactions";
import { Networks } from "./networks";
import { PlacementGroups } from "./placementgroups";
import { Pricing } from "./pricing";
import { SshKeys } from "./sshkeys";
import { ServerActions } from "./serveractions";
import { ServerTypes } from "./servertypes";
import { Servers } from "./servers";
import { VolumeActions } from "./volumeactions";
import { Volumes } from "./volumes";
type OptsFunc = (sdk: SDK) => void;
export declare const ServerList: readonly ["https://api.hetzner.cloud/v1"];
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    actions: Actions;
    certificateActions: CertificateActions;
    certificates: Certificates;
    datacenters: Datacenters;
    firewallActions: FirewallActions;
    firewalls: Firewalls;
    floatingIpActions: FloatingIpActions;
    floatingIPs: FloatingIPs;
    isOs: IsOs;
    imageActions: ImageActions;
    images: Images;
    loadBalancerActions: LoadBalancerActions;
    loadBalancerTypes: LoadBalancerTypes;
    loadBalancers: LoadBalancers;
    locations: Locations;
    networkActions: NetworkActions;
    networks: Networks;
    placementGroups: PlacementGroups;
    pricing: Pricing;
    sshKeys: SshKeys;
    serverActions: ServerActions;
    serverTypes: ServerTypes;
    servers: Servers;
    volumeActions: VolumeActions;
    volumes: Volumes;
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(...opts: OptsFunc[]);
}
export {};

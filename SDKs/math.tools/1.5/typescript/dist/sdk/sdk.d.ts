import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    GetNumbersBase(req: operations.GetNumbersBaseRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersBaseResponse>;
    GetNumbersBaseBinary(req: operations.GetNumbersBaseBinaryRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersBaseBinaryResponse>;
    GetNumbersBaseHex(req: operations.GetNumbersBaseHexRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersBaseHexResponse>;
    GetNumbersBaseOctal(req: operations.GetNumbersBaseOctalRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersBaseOctalResponse>;
    GetNumbersCardinal(req: operations.GetNumbersCardinalRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersCardinalResponse>;
    GetNumbersCurrency(req: operations.GetNumbersCurrencyRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersCurrencyResponse>;
    GetNumbersFact(req: operations.GetNumbersFactRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersFactResponse>;
    GetNumbersIsCube(req: operations.GetNumbersIsCubeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersIsCubeResponse>;
    GetNumbersIsPalindrome(req: operations.GetNumbersIsPalindromeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersIsPalindromeResponse>;
    GetNumbersIsSquare(req: operations.GetNumbersIsSquareRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersIsSquareResponse>;
    GetNumbersIsTriangle(req: operations.GetNumbersIsTriangleRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersIsTriangleResponse>;
    GetNumbersNod(req: operations.GetNumbersNodRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersNodResponse>;
    GetNumbersNumeralChinese(req: operations.GetNumbersNumeralChineseRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersNumeralChineseResponse>;
    GetNumbersNumeralEgyptian(req: operations.GetNumbersNumeralEgyptianRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersNumeralEgyptianResponse>;
    GetNumbersNumeralRoman(req: operations.GetNumbersNumeralRomanRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersNumeralRomanResponse>;
    GetNumbersOrdinal(req: operations.GetNumbersOrdinalRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersOrdinalResponse>;
    GetNumbersPi(req: operations.GetNumbersPiRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPiResponse>;
    GetNumbersPrimeFactors(req: operations.GetNumbersPrimeFactorsRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeFactorsResponse>;
    GetNumbersPrimeIsFermatPrime(req: operations.GetNumbersPrimeIsFermatPrimeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsFermatPrimeResponse>;
    GetNumbersPrimeIsFibonacciPrime(req: operations.GetNumbersPrimeIsFibonacciPrimeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsFibonacciPrimeResponse>;
    GetNumbersPrimeIsMersennePrime(req: operations.GetNumbersPrimeIsMersennePrimeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsMersennePrimeResponse>;
    GetNumbersPrimeIsPartitionPrime(req: operations.GetNumbersPrimeIsPartitionPrimeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsPartitionPrimeResponse>;
    GetNumbersPrimeIsPellPrime(req: operations.GetNumbersPrimeIsPellPrimeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsPellPrimeResponse>;
    GetNumbersPrimeIsPerfect(req: operations.GetNumbersPrimeIsPerfectRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsPerfectResponse>;
    GetNumbersPrimeIsPrime(req: operations.GetNumbersPrimeIsPrimeRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersPrimeIsPrimeResponse>;
    GetNumbersRandom(req: operations.GetNumbersRandomRequest, config?: AxiosRequestConfig): Promise<operations.GetNumbersRandomResponse>;
}
export {};

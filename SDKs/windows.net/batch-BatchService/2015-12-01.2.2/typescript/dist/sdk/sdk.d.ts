import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    ApplicationGet(req: operations.ApplicationGetRequest, config?: AxiosRequestConfig): Promise<operations.ApplicationGetResponse>;
    ApplicationList(req: operations.ApplicationListRequest, config?: AxiosRequestConfig): Promise<operations.ApplicationListResponse>;
    CertificateAdd(req: operations.CertificateAddRequest, config?: AxiosRequestConfig): Promise<operations.CertificateAddResponse>;
    CertificateCancelDeletion(req: operations.CertificateCancelDeletionRequest, config?: AxiosRequestConfig): Promise<operations.CertificateCancelDeletionResponse>;
    CertificateDelete(req: operations.CertificateDeleteRequest, config?: AxiosRequestConfig): Promise<operations.CertificateDeleteResponse>;
    CertificateGet(req: operations.CertificateGetRequest, config?: AxiosRequestConfig): Promise<operations.CertificateGetResponse>;
    CertificateList(req: operations.CertificateListRequest, config?: AxiosRequestConfig): Promise<operations.CertificateListResponse>;
    ComputeNodeAddUser(req: operations.ComputeNodeAddUserRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeAddUserResponse>;
    ComputeNodeDeleteUser(req: operations.ComputeNodeDeleteUserRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeDeleteUserResponse>;
    ComputeNodeDisableScheduling(req: operations.ComputeNodeDisableSchedulingRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeDisableSchedulingResponse>;
    ComputeNodeEnableScheduling(req: operations.ComputeNodeEnableSchedulingRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeEnableSchedulingResponse>;
    ComputeNodeGet(req: operations.ComputeNodeGetRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeGetResponse>;
    ComputeNodeGetRemoteDesktop(req: operations.ComputeNodeGetRemoteDesktopRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeGetRemoteDesktopResponse>;
    ComputeNodeList(req: operations.ComputeNodeListRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeListResponse>;
    ComputeNodeReboot(req: operations.ComputeNodeRebootRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeRebootResponse>;
    ComputeNodeReimage(req: operations.ComputeNodeReimageRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeReimageResponse>;
    ComputeNodeUpdateUser(req: operations.ComputeNodeUpdateUserRequest, config?: AxiosRequestConfig): Promise<operations.ComputeNodeUpdateUserResponse>;
    FileDeleteFromComputeNode(req: operations.FileDeleteFromComputeNodeRequest, config?: AxiosRequestConfig): Promise<operations.FileDeleteFromComputeNodeResponse>;
    FileDeleteFromTask(req: operations.FileDeleteFromTaskRequest, config?: AxiosRequestConfig): Promise<operations.FileDeleteFromTaskResponse>;
    FileGetFromComputeNode(req: operations.FileGetFromComputeNodeRequest, config?: AxiosRequestConfig): Promise<operations.FileGetFromComputeNodeResponse>;
    FileGetFromTask(req: operations.FileGetFromTaskRequest, config?: AxiosRequestConfig): Promise<operations.FileGetFromTaskResponse>;
    FileGetNodeFilePropertiesFromComputeNode(req: operations.FileGetNodeFilePropertiesFromComputeNodeRequest, config?: AxiosRequestConfig): Promise<operations.FileGetNodeFilePropertiesFromComputeNodeResponse>;
    FileGetNodeFilePropertiesFromTask(req: operations.FileGetNodeFilePropertiesFromTaskRequest, config?: AxiosRequestConfig): Promise<operations.FileGetNodeFilePropertiesFromTaskResponse>;
    FileListFromComputeNode(req: operations.FileListFromComputeNodeRequest, config?: AxiosRequestConfig): Promise<operations.FileListFromComputeNodeResponse>;
    FileListFromTask(req: operations.FileListFromTaskRequest, config?: AxiosRequestConfig): Promise<operations.FileListFromTaskResponse>;
    JobScheduleAdd(req: operations.JobScheduleAddRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleAddResponse>;
    JobScheduleDelete(req: operations.JobScheduleDeleteRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleDeleteResponse>;
    JobScheduleDisable(req: operations.JobScheduleDisableRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleDisableResponse>;
    JobScheduleEnable(req: operations.JobScheduleEnableRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleEnableResponse>;
    JobScheduleExists(req: operations.JobScheduleExistsRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleExistsResponse>;
    JobScheduleGet(req: operations.JobScheduleGetRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleGetResponse>;
    JobScheduleList(req: operations.JobScheduleListRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleListResponse>;
    JobSchedulePatch(req: operations.JobSchedulePatchRequest, config?: AxiosRequestConfig): Promise<operations.JobSchedulePatchResponse>;
    JobScheduleTerminate(req: operations.JobScheduleTerminateRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleTerminateResponse>;
    JobScheduleUpdate(req: operations.JobScheduleUpdateRequest, config?: AxiosRequestConfig): Promise<operations.JobScheduleUpdateResponse>;
    JobAdd(req: operations.JobAddRequest, config?: AxiosRequestConfig): Promise<operations.JobAddResponse>;
    JobDelete(req: operations.JobDeleteRequest, config?: AxiosRequestConfig): Promise<operations.JobDeleteResponse>;
    JobDisable(req: operations.JobDisableRequest, config?: AxiosRequestConfig): Promise<operations.JobDisableResponse>;
    JobEnable(req: operations.JobEnableRequest, config?: AxiosRequestConfig): Promise<operations.JobEnableResponse>;
    JobGet(req: operations.JobGetRequest, config?: AxiosRequestConfig): Promise<operations.JobGetResponse>;
    JobGetAllJobsLifetimeStatistics(req: operations.JobGetAllJobsLifetimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.JobGetAllJobsLifetimeStatisticsResponse>;
    JobList(req: operations.JobListRequest, config?: AxiosRequestConfig): Promise<operations.JobListResponse>;
    JobListFromJobSchedule(req: operations.JobListFromJobScheduleRequest, config?: AxiosRequestConfig): Promise<operations.JobListFromJobScheduleResponse>;
    JobListPreparationAndReleaseTaskStatus(req: operations.JobListPreparationAndReleaseTaskStatusRequest, config?: AxiosRequestConfig): Promise<operations.JobListPreparationAndReleaseTaskStatusResponse>;
    JobPatch(req: operations.JobPatchRequest, config?: AxiosRequestConfig): Promise<operations.JobPatchResponse>;
    JobTerminate(req: operations.JobTerminateRequest, config?: AxiosRequestConfig): Promise<operations.JobTerminateResponse>;
    JobUpdate(req: operations.JobUpdateRequest, config?: AxiosRequestConfig): Promise<operations.JobUpdateResponse>;
    PoolAdd(req: operations.PoolAddRequest, config?: AxiosRequestConfig): Promise<operations.PoolAddResponse>;
    PoolDelete(req: operations.PoolDeleteRequest, config?: AxiosRequestConfig): Promise<operations.PoolDeleteResponse>;
    PoolDisableAutoScale(req: operations.PoolDisableAutoScaleRequest, config?: AxiosRequestConfig): Promise<operations.PoolDisableAutoScaleResponse>;
    PoolEnableAutoScale(req: operations.PoolEnableAutoScaleRequest, config?: AxiosRequestConfig): Promise<operations.PoolEnableAutoScaleResponse>;
    PoolEvaluateAutoScale(req: operations.PoolEvaluateAutoScaleRequest, config?: AxiosRequestConfig): Promise<operations.PoolEvaluateAutoScaleResponse>;
    PoolExists(req: operations.PoolExistsRequest, config?: AxiosRequestConfig): Promise<operations.PoolExistsResponse>;
    PoolGet(req: operations.PoolGetRequest, config?: AxiosRequestConfig): Promise<operations.PoolGetResponse>;
    PoolGetAllPoolsLifetimeStatistics(req: operations.PoolGetAllPoolsLifetimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.PoolGetAllPoolsLifetimeStatisticsResponse>;
    PoolList(req: operations.PoolListRequest, config?: AxiosRequestConfig): Promise<operations.PoolListResponse>;
    PoolListPoolUsageMetrics(req: operations.PoolListPoolUsageMetricsRequest, config?: AxiosRequestConfig): Promise<operations.PoolListPoolUsageMetricsResponse>;
    PoolPatch(req: operations.PoolPatchRequest, config?: AxiosRequestConfig): Promise<operations.PoolPatchResponse>;
    PoolRemoveNodes(req: operations.PoolRemoveNodesRequest, config?: AxiosRequestConfig): Promise<operations.PoolRemoveNodesResponse>;
    PoolResize(req: operations.PoolResizeRequest, config?: AxiosRequestConfig): Promise<operations.PoolResizeResponse>;
    PoolStopResize(req: operations.PoolStopResizeRequest, config?: AxiosRequestConfig): Promise<operations.PoolStopResizeResponse>;
    PoolUpdateProperties(req: operations.PoolUpdatePropertiesRequest, config?: AxiosRequestConfig): Promise<operations.PoolUpdatePropertiesResponse>;
    PoolUpgradeOs(req: operations.PoolUpgradeOsRequest, config?: AxiosRequestConfig): Promise<operations.PoolUpgradeOsResponse>;
    TaskAdd(req: operations.TaskAddRequest, config?: AxiosRequestConfig): Promise<operations.TaskAddResponse>;
    TaskDelete(req: operations.TaskDeleteRequest, config?: AxiosRequestConfig): Promise<operations.TaskDeleteResponse>;
    TaskGet(req: operations.TaskGetRequest, config?: AxiosRequestConfig): Promise<operations.TaskGetResponse>;
    TaskList(req: operations.TaskListRequest, config?: AxiosRequestConfig): Promise<operations.TaskListResponse>;
    TaskListSubtasks(req: operations.TaskListSubtasksRequest, config?: AxiosRequestConfig): Promise<operations.TaskListSubtasksResponse>;
    TaskTerminate(req: operations.TaskTerminateRequest, config?: AxiosRequestConfig): Promise<operations.TaskTerminateResponse>;
    TaskUpdate(req: operations.TaskUpdateRequest, config?: AxiosRequestConfig): Promise<operations.TaskUpdateResponse>;
}
export {};

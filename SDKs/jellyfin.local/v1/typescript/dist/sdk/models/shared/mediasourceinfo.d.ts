import { SpeakeasyBase } from "../../../internal/utils";
import { MediaProtocolEnum } from "./mediaprotocolenum";
import { IsoTypeEnum } from "./isotypeenum";
import { MediaAttachment } from "./mediaattachment";
import { MediaStream } from "./mediastream";
import { TransportStreamTimestampEnum } from "./transportstreamtimestampenum";
import { MediaSourceTypeEnum } from "./mediasourcetypeenum";
import { Video3DFormatEnum } from "./video3dformatenum";
import { VideoTypeEnum } from "./videotypeenum";
import { MediaStreamInput } from "./mediastream";
export declare class MediaSourceInfo extends SpeakeasyBase {
    analyzeDurationMs?: number;
    bitrate?: number;
    bufferMs?: number;
    container?: string;
    defaultAudioStreamIndex?: number;
    defaultSubtitleStreamIndex?: number;
    eTag?: string;
    encoderPath?: string;
    encoderProtocol?: MediaProtocolEnum;
    formats?: string[];
    genPtsInput?: boolean;
    id?: string;
    ignoreDts?: boolean;
    ignoreIndex?: boolean;
    isInfiniteStream?: boolean;
    isRemote?: boolean;
    isoType?: IsoTypeEnum;
    liveStreamId?: string;
    mediaAttachments?: MediaAttachment[];
    mediaStreams?: MediaStream[];
    name?: string;
    openToken?: string;
    path?: string;
    protocol?: MediaProtocolEnum;
    readAtNativeFramerate?: boolean;
    requiredHttpHeaders?: Map<string, string>;
    requiresClosing?: boolean;
    requiresLooping?: boolean;
    requiresOpening?: boolean;
    runTimeTicks?: number;
    size?: number;
    supportsDirectPlay?: boolean;
    supportsDirectStream?: boolean;
    supportsProbing?: boolean;
    supportsTranscoding?: boolean;
    timestamp?: TransportStreamTimestampEnum;
    transcodingContainer?: string;
    transcodingSubProtocol?: string;
    transcodingUrl?: string;
    type?: MediaSourceTypeEnum;
    video3DFormat?: Video3DFormatEnum;
    videoType?: VideoTypeEnum;
}
export declare class MediaSourceInfoInput extends SpeakeasyBase {
    analyzeDurationMs?: number;
    bitrate?: number;
    bufferMs?: number;
    container?: string;
    defaultAudioStreamIndex?: number;
    defaultSubtitleStreamIndex?: number;
    eTag?: string;
    encoderPath?: string;
    encoderProtocol?: MediaProtocolEnum;
    formats?: string[];
    genPtsInput?: boolean;
    id?: string;
    ignoreDts?: boolean;
    ignoreIndex?: boolean;
    isInfiniteStream?: boolean;
    isRemote?: boolean;
    isoType?: IsoTypeEnum;
    liveStreamId?: string;
    mediaAttachments?: MediaAttachment[];
    mediaStreams?: MediaStreamInput[];
    name?: string;
    openToken?: string;
    path?: string;
    protocol?: MediaProtocolEnum;
    readAtNativeFramerate?: boolean;
    requiredHttpHeaders?: Map<string, string>;
    requiresClosing?: boolean;
    requiresLooping?: boolean;
    requiresOpening?: boolean;
    runTimeTicks?: number;
    size?: number;
    supportsDirectPlay?: boolean;
    supportsDirectStream?: boolean;
    supportsProbing?: boolean;
    supportsTranscoding?: boolean;
    timestamp?: TransportStreamTimestampEnum;
    transcodingContainer?: string;
    transcodingSubProtocol?: string;
    transcodingUrl?: string;
    type?: MediaSourceTypeEnum;
    video3DFormat?: Video3DFormatEnum;
    videoType?: VideoTypeEnum;
}

from dataclasses import dataclass, field
from typing import List,Optional
from enum import Enum
from dataclasses_json import dataclass_json
from sdk import utils
from . import *


@dataclass_json
@dataclass
class ServerConfiguration:
    r"""ServerConfiguration
    Represents the server configuration.
    """
    
    activity_log_retention_days: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ActivityLogRetentionDays') }})
    auto_discovery: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('AutoDiscovery') }})
    auto_discovery_tracing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('AutoDiscoveryTracing') }})
    base_url: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('BaseUrl') }})
    cache_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CachePath') }})
    certificate_password: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CertificatePassword') }})
    certificate_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CertificatePath') }})
    codecs_used: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CodecsUsed') }})
    content_types: Optional[List[NameValuePair]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ContentTypes') }})
    cors_hosts: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CorsHosts') }})
    disable_live_tv_channel_user_data_name: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DisableLiveTvChannelUserDataName') }})
    disable_plugin_images: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DisablePluginImages') }})
    display_specials_within_seasons: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DisplaySpecialsWithinSeasons') }})
    enable_case_sensitive_item_ids: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableCaseSensitiveItemIds') }})
    enable_dashboard_response_caching: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableDashboardResponseCaching') }})
    enable_external_content_in_suggestions: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableExternalContentInSuggestions') }})
    enable_folder_view: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableFolderView') }})
    enable_grouping_into_collections: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableGroupingIntoCollections') }})
    enable_https: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableHttps') }})
    enable_ipv4: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableIPV4') }})
    enable_ipv6: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableIPV6') }})
    enable_metrics: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableMetrics') }})
    enable_multi_socket_binding: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableMultiSocketBinding') }})
    enable_new_omdb_support: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableNewOmdbSupport') }})
    enable_normalized_item_by_name_ids: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableNormalizedItemByNameIds') }})
    enable_remote_access: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableRemoteAccess') }})
    enable_ssdp_tracing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableSSDPTracing') }})
    enable_simple_artist_detection: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableSimpleArtistDetection') }})
    enable_slow_response_warning: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableSlowResponseWarning') }})
    enable_u_pn_p: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableUPnP') }})
    gateway_monitor_period: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('GatewayMonitorPeriod') }})
    hd_homerun_port_range: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('HDHomerunPortRange') }})
    http_server_port_number: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('HttpServerPortNumber') }})
    https_port_number: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('HttpsPortNumber') }})
    ignore_virtual_interfaces: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IgnoreVirtualInterfaces') }})
    image_extraction_timeout_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ImageExtractionTimeoutMs') }})
    image_saving_convention: Optional[ImageSavingConventionEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ImageSavingConvention') }})
    is_port_authorized: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsPortAuthorized') }})
    is_remote_ip_filter_blacklist: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsRemoteIPFilterBlacklist') }})
    is_startup_wizard_completed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsStartupWizardCompleted') }})
    known_proxies: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('KnownProxies') }})
    library_metadata_refresh_concurrency: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LibraryMetadataRefreshConcurrency') }})
    library_monitor_delay: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LibraryMonitorDelay') }})
    library_scan_fanout_concurrency: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LibraryScanFanoutConcurrency') }})
    local_network_addresses: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LocalNetworkAddresses') }})
    local_network_subnets: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LocalNetworkSubnets') }})
    log_file_retention_days: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LogFileRetentionDays') }})
    max_audiobook_resume: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MaxAudiobookResume') }})
    max_resume_pct: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MaxResumePct') }})
    metadata_country_code: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataCountryCode') }})
    metadata_network_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataNetworkPath') }})
    metadata_options: Optional[List[MetadataOptions]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataOptions') }})
    metadata_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataPath') }})
    min_audiobook_resume: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MinAudiobookResume') }})
    min_resume_duration_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MinResumeDurationSeconds') }})
    min_resume_pct: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MinResumePct') }})
    path_substitutions: Optional[List[PathSubstitution]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PathSubstitutions') }})
    plugin_repositories: Optional[List[RepositoryInfo]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PluginRepositories') }})
    preferred_metadata_language: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PreferredMetadataLanguage') }})
    previous_version: Optional[Version] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PreviousVersion') }})
    previous_version_str: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PreviousVersionStr') }})
    public_https_port: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PublicHttpsPort') }})
    public_port: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PublicPort') }})
    published_server_uri_by_subnet: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PublishedServerUriBySubnet') }})
    quick_connect_available: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('QuickConnectAvailable') }})
    remote_client_bitrate_limit: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RemoteClientBitrateLimit') }})
    remote_ip_filter: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RemoteIPFilter') }})
    remove_old_plugins: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RemoveOldPlugins') }})
    require_https: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequireHttps') }})
    ssdp_tracing_filter: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SSDPTracingFilter') }})
    save_metadata_hidden: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SaveMetadataHidden') }})
    server_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ServerName') }})
    skip_deserialization_for_basic_types: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SkipDeserializationForBasicTypes') }})
    slow_response_threshold_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SlowResponseThresholdMs') }})
    sort_remove_characters: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SortRemoveCharacters') }})
    sort_remove_words: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SortRemoveWords') }})
    sort_replace_characters: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SortReplaceCharacters') }})
    trust_all_ip6_interfaces: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TrustAllIP6Interfaces') }})
    udp_port_range: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UDPPortRange') }})
    udp_send_count: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UDPSendCount') }})
    udp_send_delay: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UDPSendDelay') }})
    ui_culture: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UICulture') }})
    u_pn_p_create_http_port_map: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UPnPCreateHttpPortMap') }})
    uninstalled_plugins: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UninstalledPlugins') }})
    virtual_interface_names: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('VirtualInterfaceNames') }})
    

@dataclass_json
@dataclass
class ServerConfigurationInput:
    r"""ServerConfigurationInput
    Represents the server configuration.
    """
    
    activity_log_retention_days: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ActivityLogRetentionDays') }})
    auto_discovery: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('AutoDiscovery') }})
    auto_discovery_tracing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('AutoDiscoveryTracing') }})
    base_url: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('BaseUrl') }})
    cache_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CachePath') }})
    certificate_password: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CertificatePassword') }})
    certificate_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CertificatePath') }})
    codecs_used: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CodecsUsed') }})
    content_types: Optional[List[NameValuePair]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ContentTypes') }})
    cors_hosts: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('CorsHosts') }})
    disable_live_tv_channel_user_data_name: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DisableLiveTvChannelUserDataName') }})
    disable_plugin_images: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DisablePluginImages') }})
    display_specials_within_seasons: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DisplaySpecialsWithinSeasons') }})
    enable_case_sensitive_item_ids: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableCaseSensitiveItemIds') }})
    enable_dashboard_response_caching: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableDashboardResponseCaching') }})
    enable_external_content_in_suggestions: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableExternalContentInSuggestions') }})
    enable_folder_view: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableFolderView') }})
    enable_grouping_into_collections: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableGroupingIntoCollections') }})
    enable_https: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableHttps') }})
    enable_ipv4: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableIPV4') }})
    enable_ipv6: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableIPV6') }})
    enable_metrics: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableMetrics') }})
    enable_new_omdb_support: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableNewOmdbSupport') }})
    enable_normalized_item_by_name_ids: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableNormalizedItemByNameIds') }})
    enable_remote_access: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableRemoteAccess') }})
    enable_ssdp_tracing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableSSDPTracing') }})
    enable_simple_artist_detection: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableSimpleArtistDetection') }})
    enable_slow_response_warning: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableSlowResponseWarning') }})
    enable_u_pn_p: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EnableUPnP') }})
    gateway_monitor_period: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('GatewayMonitorPeriod') }})
    hd_homerun_port_range: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('HDHomerunPortRange') }})
    http_server_port_number: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('HttpServerPortNumber') }})
    https_port_number: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('HttpsPortNumber') }})
    ignore_virtual_interfaces: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IgnoreVirtualInterfaces') }})
    image_extraction_timeout_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ImageExtractionTimeoutMs') }})
    image_saving_convention: Optional[ImageSavingConventionEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ImageSavingConvention') }})
    is_port_authorized: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsPortAuthorized') }})
    is_remote_ip_filter_blacklist: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsRemoteIPFilterBlacklist') }})
    is_startup_wizard_completed: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsStartupWizardCompleted') }})
    known_proxies: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('KnownProxies') }})
    library_metadata_refresh_concurrency: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LibraryMetadataRefreshConcurrency') }})
    library_monitor_delay: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LibraryMonitorDelay') }})
    library_scan_fanout_concurrency: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LibraryScanFanoutConcurrency') }})
    local_network_addresses: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LocalNetworkAddresses') }})
    local_network_subnets: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LocalNetworkSubnets') }})
    log_file_retention_days: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LogFileRetentionDays') }})
    max_audiobook_resume: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MaxAudiobookResume') }})
    max_resume_pct: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MaxResumePct') }})
    metadata_country_code: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataCountryCode') }})
    metadata_network_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataNetworkPath') }})
    metadata_options: Optional[List[MetadataOptions]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataOptions') }})
    metadata_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MetadataPath') }})
    min_audiobook_resume: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MinAudiobookResume') }})
    min_resume_duration_seconds: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MinResumeDurationSeconds') }})
    min_resume_pct: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MinResumePct') }})
    path_substitutions: Optional[List[PathSubstitution]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PathSubstitutions') }})
    plugin_repositories: Optional[List[RepositoryInfo]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PluginRepositories') }})
    preferred_metadata_language: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PreferredMetadataLanguage') }})
    previous_version_str: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PreviousVersionStr') }})
    public_https_port: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PublicHttpsPort') }})
    public_port: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PublicPort') }})
    published_server_uri_by_subnet: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('PublishedServerUriBySubnet') }})
    quick_connect_available: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('QuickConnectAvailable') }})
    remote_client_bitrate_limit: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RemoteClientBitrateLimit') }})
    remote_ip_filter: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RemoteIPFilter') }})
    remove_old_plugins: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RemoveOldPlugins') }})
    require_https: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequireHttps') }})
    ssdp_tracing_filter: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SSDPTracingFilter') }})
    save_metadata_hidden: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SaveMetadataHidden') }})
    server_name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ServerName') }})
    skip_deserialization_for_basic_types: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SkipDeserializationForBasicTypes') }})
    slow_response_threshold_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SlowResponseThresholdMs') }})
    sort_remove_characters: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SortRemoveCharacters') }})
    sort_remove_words: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SortRemoveWords') }})
    sort_replace_characters: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SortReplaceCharacters') }})
    trust_all_ip6_interfaces: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TrustAllIP6Interfaces') }})
    udp_port_range: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UDPPortRange') }})
    udp_send_count: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UDPSendCount') }})
    udp_send_delay: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UDPSendDelay') }})
    ui_culture: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UICulture') }})
    u_pn_p_create_http_port_map: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UPnPCreateHttpPortMap') }})
    uninstalled_plugins: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('UninstalledPlugins') }})
    virtual_interface_names: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('VirtualInterfaceNames') }})
    

from dataclasses import dataclass, field
from typing import List,Optional
from enum import Enum
from dataclasses_json import dataclass_json
from sdk import utils
from . import *


@dataclass_json
@dataclass
class MediaSourceInfo:
    analyze_duration_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('AnalyzeDurationMs') }})
    bitrate: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Bitrate') }})
    buffer_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('BufferMs') }})
    container: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Container') }})
    default_audio_stream_index: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DefaultAudioStreamIndex') }})
    default_subtitle_stream_index: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DefaultSubtitleStreamIndex') }})
    e_tag: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ETag') }})
    encoder_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EncoderPath') }})
    encoder_protocol: Optional[MediaProtocolEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EncoderProtocol') }})
    formats: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Formats') }})
    gen_pts_input: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('GenPtsInput') }})
    id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Id') }})
    ignore_dts: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IgnoreDts') }})
    ignore_index: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IgnoreIndex') }})
    is_infinite_stream: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsInfiniteStream') }})
    is_remote: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsRemote') }})
    iso_type: Optional[IsoTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsoType') }})
    live_stream_id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LiveStreamId') }})
    media_attachments: Optional[List[MediaAttachment]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MediaAttachments') }})
    media_streams: Optional[List[MediaStream]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MediaStreams') }})
    name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Name') }})
    open_token: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('OpenToken') }})
    path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Path') }})
    protocol: Optional[MediaProtocolEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Protocol') }})
    read_at_native_framerate: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ReadAtNativeFramerate') }})
    required_http_headers: Optional[dict[str, str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiredHttpHeaders') }})
    requires_closing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiresClosing') }})
    requires_looping: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiresLooping') }})
    requires_opening: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiresOpening') }})
    run_time_ticks: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RunTimeTicks') }})
    size: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Size') }})
    supports_direct_play: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsDirectPlay') }})
    supports_direct_stream: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsDirectStream') }})
    supports_probing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsProbing') }})
    supports_transcoding: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsTranscoding') }})
    timestamp: Optional[TransportStreamTimestampEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Timestamp') }})
    transcoding_container: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TranscodingContainer') }})
    transcoding_sub_protocol: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TranscodingSubProtocol') }})
    transcoding_url: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TranscodingUrl') }})
    type: Optional[MediaSourceTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Type') }})
    video3_d_format: Optional[Video3DFormatEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Video3DFormat') }})
    video_type: Optional[VideoTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('VideoType') }})
    

@dataclass_json
@dataclass
class MediaSourceInfoInput:
    analyze_duration_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('AnalyzeDurationMs') }})
    bitrate: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Bitrate') }})
    buffer_ms: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('BufferMs') }})
    container: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Container') }})
    default_audio_stream_index: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DefaultAudioStreamIndex') }})
    default_subtitle_stream_index: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('DefaultSubtitleStreamIndex') }})
    e_tag: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ETag') }})
    encoder_path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EncoderPath') }})
    encoder_protocol: Optional[MediaProtocolEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('EncoderProtocol') }})
    formats: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Formats') }})
    gen_pts_input: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('GenPtsInput') }})
    id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Id') }})
    ignore_dts: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IgnoreDts') }})
    ignore_index: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IgnoreIndex') }})
    is_infinite_stream: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsInfiniteStream') }})
    is_remote: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsRemote') }})
    iso_type: Optional[IsoTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('IsoType') }})
    live_stream_id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('LiveStreamId') }})
    media_attachments: Optional[List[MediaAttachment]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MediaAttachments') }})
    media_streams: Optional[List[MediaStreamInput]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('MediaStreams') }})
    name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Name') }})
    open_token: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('OpenToken') }})
    path: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Path') }})
    protocol: Optional[MediaProtocolEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Protocol') }})
    read_at_native_framerate: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('ReadAtNativeFramerate') }})
    required_http_headers: Optional[dict[str, str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiredHttpHeaders') }})
    requires_closing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiresClosing') }})
    requires_looping: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiresLooping') }})
    requires_opening: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RequiresOpening') }})
    run_time_ticks: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('RunTimeTicks') }})
    size: Optional[int] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Size') }})
    supports_direct_play: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsDirectPlay') }})
    supports_direct_stream: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsDirectStream') }})
    supports_probing: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsProbing') }})
    supports_transcoding: Optional[bool] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('SupportsTranscoding') }})
    timestamp: Optional[TransportStreamTimestampEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Timestamp') }})
    transcoding_container: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TranscodingContainer') }})
    transcoding_sub_protocol: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TranscodingSubProtocol') }})
    transcoding_url: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('TranscodingUrl') }})
    type: Optional[MediaSourceTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Type') }})
    video3_d_format: Optional[Video3DFormatEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('Video3DFormat') }})
    video_type: Optional[VideoTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('VideoType') }})
    

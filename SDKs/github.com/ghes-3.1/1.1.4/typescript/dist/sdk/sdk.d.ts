import { AxiosInstance } from "axios";
import { Actions } from "./actions";
import { Activity } from "./activity";
import { Apps } from "./apps";
import { Checks } from "./checks";
import { CodeScanning } from "./codescanning";
import { CodesOfConduct } from "./codesofconduct";
import { Emojis } from "./emojis";
import { EnterpriseAdmin } from "./enterpriseadmin";
import { Gists } from "./gists";
import { Git } from "./git";
import { Gitignore } from "./gitignore";
import { Issues } from "./issues";
import { Licenses } from "./licenses";
import { Markdown } from "./markdown";
import { Meta } from "./meta";
import { OauthAuthorizations } from "./oauthauthorizations";
import { Orgs } from "./orgs";
import { Projects } from "./projects";
import { Pulls } from "./pulls";
import { RateLimit } from "./ratelimit";
import { Reactions } from "./reactions";
import { Repos } from "./repos";
import { Search } from "./search";
import { SecretScanning } from "./secretscanning";
import { Teams } from "./teams";
import { Users } from "./users";
type OptsFunc = (sdk: SDK) => void;
export declare const ServerList: readonly ["https://github.com/", "https://{protocol}://{hostname}"];
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    actions: Actions;
    activity: Activity;
    apps: Apps;
    checks: Checks;
    codeScanning: CodeScanning;
    codesOfConduct: CodesOfConduct;
    emojis: Emojis;
    enterpriseAdmin: EnterpriseAdmin;
    gists: Gists;
    git: Git;
    gitignore: Gitignore;
    issues: Issues;
    licenses: Licenses;
    markdown: Markdown;
    meta: Meta;
    oauthAuthorizations: OauthAuthorizations;
    orgs: Orgs;
    projects: Projects;
    pulls: Pulls;
    rateLimit: RateLimit;
    reactions: Reactions;
    repos: Repos;
    search: Search;
    secretScanning: SecretScanning;
    teams: Teams;
    users: Users;
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(...opts: OptsFunc[]);
}
export {};

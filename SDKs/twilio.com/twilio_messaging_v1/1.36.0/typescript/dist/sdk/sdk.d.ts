import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateAlphaSender(req: operations.CreateAlphaSenderRequest, config?: AxiosRequestConfig): Promise<operations.CreateAlphaSenderResponse>;
    CreateBrandRegistrations(req: operations.CreateBrandRegistrationsRequest, config?: AxiosRequestConfig): Promise<operations.CreateBrandRegistrationsResponse>;
    CreateBrandVetting(req: operations.CreateBrandVettingRequest, config?: AxiosRequestConfig): Promise<operations.CreateBrandVettingResponse>;
    CreateExternalCampaign(req: operations.CreateExternalCampaignRequest, config?: AxiosRequestConfig): Promise<operations.CreateExternalCampaignResponse>;
    CreatePhoneNumber(req: operations.CreatePhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.CreatePhoneNumberResponse>;
    CreateService(req: operations.CreateServiceRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceResponse>;
    CreateShortCode(req: operations.CreateShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.CreateShortCodeResponse>;
    CreateTollfreeVerification(req: operations.CreateTollfreeVerificationRequest, config?: AxiosRequestConfig): Promise<operations.CreateTollfreeVerificationResponse>;
    CreateUsAppToPerson(req: operations.CreateUsAppToPersonRequest, config?: AxiosRequestConfig): Promise<operations.CreateUsAppToPersonResponse>;
    DeleteAlphaSender(req: operations.DeleteAlphaSenderRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAlphaSenderResponse>;
    DeletePhoneNumber(req: operations.DeletePhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.DeletePhoneNumberResponse>;
    DeleteService(req: operations.DeleteServiceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceResponse>;
    DeleteShortCode(req: operations.DeleteShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.DeleteShortCodeResponse>;
    DeleteUsAppToPerson(req: operations.DeleteUsAppToPersonRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUsAppToPersonResponse>;
    FetchAlphaSender(req: operations.FetchAlphaSenderRequest, config?: AxiosRequestConfig): Promise<operations.FetchAlphaSenderResponse>;
    FetchBrandRegistrations(req: operations.FetchBrandRegistrationsRequest, config?: AxiosRequestConfig): Promise<operations.FetchBrandRegistrationsResponse>;
    FetchBrandVetting(req: operations.FetchBrandVettingRequest, config?: AxiosRequestConfig): Promise<operations.FetchBrandVettingResponse>;
    FetchDeactivation(req: operations.FetchDeactivationRequest, config?: AxiosRequestConfig): Promise<operations.FetchDeactivationResponse>;
    FetchPhoneNumber(req: operations.FetchPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.FetchPhoneNumberResponse>;
    FetchService(req: operations.FetchServiceRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceResponse>;
    FetchShortCode(req: operations.FetchShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.FetchShortCodeResponse>;
    FetchTollfreeVerification(req: operations.FetchTollfreeVerificationRequest, config?: AxiosRequestConfig): Promise<operations.FetchTollfreeVerificationResponse>;
    FetchUsAppToPerson(req: operations.FetchUsAppToPersonRequest, config?: AxiosRequestConfig): Promise<operations.FetchUsAppToPersonResponse>;
    FetchUsAppToPersonUsecase(req: operations.FetchUsAppToPersonUsecaseRequest, config?: AxiosRequestConfig): Promise<operations.FetchUsAppToPersonUsecaseResponse>;
    FetchUsecase(req: operations.FetchUsecaseRequest, config?: AxiosRequestConfig): Promise<operations.FetchUsecaseResponse>;
    ListAlphaSender(req: operations.ListAlphaSenderRequest, config?: AxiosRequestConfig): Promise<operations.ListAlphaSenderResponse>;
    ListBrandRegistrations(req: operations.ListBrandRegistrationsRequest, config?: AxiosRequestConfig): Promise<operations.ListBrandRegistrationsResponse>;
    ListBrandVetting(req: operations.ListBrandVettingRequest, config?: AxiosRequestConfig): Promise<operations.ListBrandVettingResponse>;
    ListPhoneNumber(req: operations.ListPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.ListPhoneNumberResponse>;
    ListService(req: operations.ListServiceRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceResponse>;
    ListShortCode(req: operations.ListShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.ListShortCodeResponse>;
    ListTollfreeVerification(req: operations.ListTollfreeVerificationRequest, config?: AxiosRequestConfig): Promise<operations.ListTollfreeVerificationResponse>;
    ListUsAppToPerson(req: operations.ListUsAppToPersonRequest, config?: AxiosRequestConfig): Promise<operations.ListUsAppToPersonResponse>;
    UpdateBrandRegistrations(req: operations.UpdateBrandRegistrationsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateBrandRegistrationsResponse>;
    UpdateService(req: operations.UpdateServiceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceResponse>;
}
export {};

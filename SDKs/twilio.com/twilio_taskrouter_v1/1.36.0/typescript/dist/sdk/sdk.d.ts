import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateActivity(req: operations.CreateActivityRequest, config?: AxiosRequestConfig): Promise<operations.CreateActivityResponse>;
    CreateTask(req: operations.CreateTaskRequest, config?: AxiosRequestConfig): Promise<operations.CreateTaskResponse>;
    CreateTaskChannel(req: operations.CreateTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.CreateTaskChannelResponse>;
    CreateTaskQueue(req: operations.CreateTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.CreateTaskQueueResponse>;
    CreateWorker(req: operations.CreateWorkerRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkerResponse>;
    CreateWorkflow(req: operations.CreateWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkflowResponse>;
    CreateWorkspace(req: operations.CreateWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkspaceResponse>;
    DeleteActivity(req: operations.DeleteActivityRequest, config?: AxiosRequestConfig): Promise<operations.DeleteActivityResponse>;
    DeleteTask(req: operations.DeleteTaskRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTaskResponse>;
    DeleteTaskChannel(req: operations.DeleteTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTaskChannelResponse>;
    DeleteTaskQueue(req: operations.DeleteTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTaskQueueResponse>;
    DeleteWorker(req: operations.DeleteWorkerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkerResponse>;
    DeleteWorkflow(req: operations.DeleteWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkflowResponse>;
    DeleteWorkspace(req: operations.DeleteWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkspaceResponse>;
    FetchActivity(req: operations.FetchActivityRequest, config?: AxiosRequestConfig): Promise<operations.FetchActivityResponse>;
    FetchEvent(req: operations.FetchEventRequest, config?: AxiosRequestConfig): Promise<operations.FetchEventResponse>;
    FetchTask(req: operations.FetchTaskRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskResponse>;
    FetchTaskChannel(req: operations.FetchTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskChannelResponse>;
    FetchTaskQueue(req: operations.FetchTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueResponse>;
    FetchTaskQueueCumulativeStatistics(req: operations.FetchTaskQueueCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueCumulativeStatisticsResponse>;
    FetchTaskQueueRealTimeStatistics(req: operations.FetchTaskQueueRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueRealTimeStatisticsResponse>;
    FetchTaskQueueStatistics(req: operations.FetchTaskQueueStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueStatisticsResponse>;
    FetchTaskReservation(req: operations.FetchTaskReservationRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskReservationResponse>;
    FetchWorker(req: operations.FetchWorkerRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerResponse>;
    FetchWorkerChannel(req: operations.FetchWorkerChannelRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerChannelResponse>;
    FetchWorkerInstanceStatistics(req: operations.FetchWorkerInstanceStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerInstanceStatisticsResponse>;
    FetchWorkerReservation(req: operations.FetchWorkerReservationRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerReservationResponse>;
    FetchWorkerStatistics(req: operations.FetchWorkerStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerStatisticsResponse>;
    FetchWorkersCumulativeStatistics(req: operations.FetchWorkersCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkersCumulativeStatisticsResponse>;
    FetchWorkersRealTimeStatistics(req: operations.FetchWorkersRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkersRealTimeStatisticsResponse>;
    FetchWorkflow(req: operations.FetchWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowResponse>;
    FetchWorkflowCumulativeStatistics(req: operations.FetchWorkflowCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowCumulativeStatisticsResponse>;
    FetchWorkflowRealTimeStatistics(req: operations.FetchWorkflowRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowRealTimeStatisticsResponse>;
    FetchWorkflowStatistics(req: operations.FetchWorkflowStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowStatisticsResponse>;
    FetchWorkspace(req: operations.FetchWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceResponse>;
    FetchWorkspaceCumulativeStatistics(req: operations.FetchWorkspaceCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceCumulativeStatisticsResponse>;
    FetchWorkspaceRealTimeStatistics(req: operations.FetchWorkspaceRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceRealTimeStatisticsResponse>;
    FetchWorkspaceStatistics(req: operations.FetchWorkspaceStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceStatisticsResponse>;
    ListActivity(req: operations.ListActivityRequest, config?: AxiosRequestConfig): Promise<operations.ListActivityResponse>;
    ListEvent(req: operations.ListEventRequest, config?: AxiosRequestConfig): Promise<operations.ListEventResponse>;
    ListTask(req: operations.ListTaskRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskResponse>;
    ListTaskChannel(req: operations.ListTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskChannelResponse>;
    ListTaskQueue(req: operations.ListTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskQueueResponse>;
    ListTaskQueuesStatistics(req: operations.ListTaskQueuesStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskQueuesStatisticsResponse>;
    ListTaskReservation(req: operations.ListTaskReservationRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskReservationResponse>;
    ListWorker(req: operations.ListWorkerRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkerResponse>;
    ListWorkerChannel(req: operations.ListWorkerChannelRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkerChannelResponse>;
    ListWorkerReservation(req: operations.ListWorkerReservationRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkerReservationResponse>;
    ListWorkflow(req: operations.ListWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkflowResponse>;
    ListWorkspace(req: operations.ListWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkspaceResponse>;
    UpdateActivity(req: operations.UpdateActivityRequest, config?: AxiosRequestConfig): Promise<operations.UpdateActivityResponse>;
    UpdateTask(req: operations.UpdateTaskRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskResponse>;
    UpdateTaskChannel(req: operations.UpdateTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskChannelResponse>;
    UpdateTaskQueue(req: operations.UpdateTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskQueueResponse>;
    UpdateTaskReservation(req: operations.UpdateTaskReservationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskReservationResponse>;
    UpdateWorker(req: operations.UpdateWorkerRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkerResponse>;
    UpdateWorkerChannel(req: operations.UpdateWorkerChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkerChannelResponse>;
    UpdateWorkerReservation(req: operations.UpdateWorkerReservationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkerReservationResponse>;
    UpdateWorkflow(req: operations.UpdateWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkflowResponse>;
    UpdateWorkspace(req: operations.UpdateWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkspaceResponse>;
}
export {};

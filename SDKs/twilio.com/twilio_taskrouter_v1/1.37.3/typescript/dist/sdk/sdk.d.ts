import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
type OptsFunc = (sdk: SDK) => void;
export declare const ServerList: readonly ["https://taskrouter.twilio.com"];
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(...opts: OptsFunc[]);
    createActivity(req: operations.CreateActivityRequest, config?: AxiosRequestConfig): Promise<operations.CreateActivityResponse>;
    createTask(req: operations.CreateTaskRequest, config?: AxiosRequestConfig): Promise<operations.CreateTaskResponse>;
    createTaskChannel(req: operations.CreateTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.CreateTaskChannelResponse>;
    createTaskQueue(req: operations.CreateTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.CreateTaskQueueResponse>;
    createWorker(req: operations.CreateWorkerRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkerResponse>;
    createWorkflow(req: operations.CreateWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkflowResponse>;
    createWorkspace(req: operations.CreateWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkspaceResponse>;
    deleteActivity(req: operations.DeleteActivityRequest, config?: AxiosRequestConfig): Promise<operations.DeleteActivityResponse>;
    deleteTask(req: operations.DeleteTaskRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTaskResponse>;
    deleteTaskChannel(req: operations.DeleteTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTaskChannelResponse>;
    deleteTaskQueue(req: operations.DeleteTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTaskQueueResponse>;
    deleteWorker(req: operations.DeleteWorkerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkerResponse>;
    deleteWorkflow(req: operations.DeleteWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkflowResponse>;
    deleteWorkspace(req: operations.DeleteWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkspaceResponse>;
    fetchActivity(req: operations.FetchActivityRequest, config?: AxiosRequestConfig): Promise<operations.FetchActivityResponse>;
    fetchEvent(req: operations.FetchEventRequest, config?: AxiosRequestConfig): Promise<operations.FetchEventResponse>;
    fetchTask(req: operations.FetchTaskRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskResponse>;
    fetchTaskChannel(req: operations.FetchTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskChannelResponse>;
    fetchTaskQueue(req: operations.FetchTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueResponse>;
    fetchTaskQueueCumulativeStatistics(req: operations.FetchTaskQueueCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueCumulativeStatisticsResponse>;
    fetchTaskQueueRealTimeStatistics(req: operations.FetchTaskQueueRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueRealTimeStatisticsResponse>;
    fetchTaskQueueStatistics(req: operations.FetchTaskQueueStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskQueueStatisticsResponse>;
    fetchTaskReservation(req: operations.FetchTaskReservationRequest, config?: AxiosRequestConfig): Promise<operations.FetchTaskReservationResponse>;
    fetchWorker(req: operations.FetchWorkerRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerResponse>;
    fetchWorkerChannel(req: operations.FetchWorkerChannelRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerChannelResponse>;
    fetchWorkerInstanceStatistics(req: operations.FetchWorkerInstanceStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerInstanceStatisticsResponse>;
    fetchWorkerReservation(req: operations.FetchWorkerReservationRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerReservationResponse>;
    fetchWorkerStatistics(req: operations.FetchWorkerStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkerStatisticsResponse>;
    fetchWorkersCumulativeStatistics(req: operations.FetchWorkersCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkersCumulativeStatisticsResponse>;
    fetchWorkersRealTimeStatistics(req: operations.FetchWorkersRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkersRealTimeStatisticsResponse>;
    fetchWorkflow(req: operations.FetchWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowResponse>;
    fetchWorkflowCumulativeStatistics(req: operations.FetchWorkflowCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowCumulativeStatisticsResponse>;
    fetchWorkflowRealTimeStatistics(req: operations.FetchWorkflowRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowRealTimeStatisticsResponse>;
    fetchWorkflowStatistics(req: operations.FetchWorkflowStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkflowStatisticsResponse>;
    fetchWorkspace(req: operations.FetchWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceResponse>;
    fetchWorkspaceCumulativeStatistics(req: operations.FetchWorkspaceCumulativeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceCumulativeStatisticsResponse>;
    fetchWorkspaceRealTimeStatistics(req: operations.FetchWorkspaceRealTimeStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceRealTimeStatisticsResponse>;
    fetchWorkspaceStatistics(req: operations.FetchWorkspaceStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.FetchWorkspaceStatisticsResponse>;
    listActivity(req: operations.ListActivityRequest, config?: AxiosRequestConfig): Promise<operations.ListActivityResponse>;
    listEvent(req: operations.ListEventRequest, config?: AxiosRequestConfig): Promise<operations.ListEventResponse>;
    listTask(req: operations.ListTaskRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskResponse>;
    listTaskChannel(req: operations.ListTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskChannelResponse>;
    listTaskQueue(req: operations.ListTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskQueueResponse>;
    listTaskQueuesStatistics(req: operations.ListTaskQueuesStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskQueuesStatisticsResponse>;
    listTaskReservation(req: operations.ListTaskReservationRequest, config?: AxiosRequestConfig): Promise<operations.ListTaskReservationResponse>;
    listWorker(req: operations.ListWorkerRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkerResponse>;
    listWorkerChannel(req: operations.ListWorkerChannelRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkerChannelResponse>;
    listWorkerReservation(req: operations.ListWorkerReservationRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkerReservationResponse>;
    listWorkflow(req: operations.ListWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkflowResponse>;
    listWorkspace(req: operations.ListWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkspaceResponse>;
    updateActivity(req: operations.UpdateActivityRequest, config?: AxiosRequestConfig): Promise<operations.UpdateActivityResponse>;
    updateTask(req: operations.UpdateTaskRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskResponse>;
    updateTaskChannel(req: operations.UpdateTaskChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskChannelResponse>;
    updateTaskQueue(req: operations.UpdateTaskQueueRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskQueueResponse>;
    updateTaskReservation(req: operations.UpdateTaskReservationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTaskReservationResponse>;
    updateWorker(req: operations.UpdateWorkerRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkerResponse>;
    updateWorkerChannel(req: operations.UpdateWorkerChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkerChannelResponse>;
    updateWorkerReservation(req: operations.UpdateWorkerReservationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkerReservationResponse>;
    updateWorkflow(req: operations.UpdateWorkflowRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkflowResponse>;
    updateWorkspace(req: operations.UpdateWorkspaceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkspaceResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateByocTrunk(req: operations.CreateByocTrunkRequest, config?: AxiosRequestConfig): Promise<operations.CreateByocTrunkResponse>;
    CreateConnectionPolicy(req: operations.CreateConnectionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.CreateConnectionPolicyResponse>;
    CreateConnectionPolicyTarget(req: operations.CreateConnectionPolicyTargetRequest, config?: AxiosRequestConfig): Promise<operations.CreateConnectionPolicyTargetResponse>;
    CreateDialingPermissionsCountryBulkUpdate(req: operations.CreateDialingPermissionsCountryBulkUpdateRequest, config?: AxiosRequestConfig): Promise<operations.CreateDialingPermissionsCountryBulkUpdateResponse>;
    CreateIpRecord(req: operations.CreateIpRecordRequest, config?: AxiosRequestConfig): Promise<operations.CreateIpRecordResponse>;
    CreateSourceIpMapping(req: operations.CreateSourceIpMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateSourceIpMappingResponse>;
    DeleteArchivedCall(req: operations.DeleteArchivedCallRequest, config?: AxiosRequestConfig): Promise<operations.DeleteArchivedCallResponse>;
    DeleteByocTrunk(req: operations.DeleteByocTrunkRequest, config?: AxiosRequestConfig): Promise<operations.DeleteByocTrunkResponse>;
    DeleteConnectionPolicy(req: operations.DeleteConnectionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConnectionPolicyResponse>;
    DeleteConnectionPolicyTarget(req: operations.DeleteConnectionPolicyTargetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConnectionPolicyTargetResponse>;
    DeleteIpRecord(req: operations.DeleteIpRecordRequest, config?: AxiosRequestConfig): Promise<operations.DeleteIpRecordResponse>;
    DeleteSourceIpMapping(req: operations.DeleteSourceIpMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSourceIpMappingResponse>;
    FetchByocTrunk(req: operations.FetchByocTrunkRequest, config?: AxiosRequestConfig): Promise<operations.FetchByocTrunkResponse>;
    FetchConnectionPolicy(req: operations.FetchConnectionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.FetchConnectionPolicyResponse>;
    FetchConnectionPolicyTarget(req: operations.FetchConnectionPolicyTargetRequest, config?: AxiosRequestConfig): Promise<operations.FetchConnectionPolicyTargetResponse>;
    FetchDialingPermissionsCountry(req: operations.FetchDialingPermissionsCountryRequest, config?: AxiosRequestConfig): Promise<operations.FetchDialingPermissionsCountryResponse>;
    FetchDialingPermissionsSettings(req: operations.FetchDialingPermissionsSettingsRequest, config?: AxiosRequestConfig): Promise<operations.FetchDialingPermissionsSettingsResponse>;
    FetchIpRecord(req: operations.FetchIpRecordRequest, config?: AxiosRequestConfig): Promise<operations.FetchIpRecordResponse>;
    FetchSourceIpMapping(req: operations.FetchSourceIpMappingRequest, config?: AxiosRequestConfig): Promise<operations.FetchSourceIpMappingResponse>;
    ListByocTrunk(req: operations.ListByocTrunkRequest, config?: AxiosRequestConfig): Promise<operations.ListByocTrunkResponse>;
    ListConnectionPolicy(req: operations.ListConnectionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.ListConnectionPolicyResponse>;
    ListConnectionPolicyTarget(req: operations.ListConnectionPolicyTargetRequest, config?: AxiosRequestConfig): Promise<operations.ListConnectionPolicyTargetResponse>;
    ListDialingPermissionsCountry(req: operations.ListDialingPermissionsCountryRequest, config?: AxiosRequestConfig): Promise<operations.ListDialingPermissionsCountryResponse>;
    ListDialingPermissionsHrsPrefixes(req: operations.ListDialingPermissionsHrsPrefixesRequest, config?: AxiosRequestConfig): Promise<operations.ListDialingPermissionsHrsPrefixesResponse>;
    ListIpRecord(req: operations.ListIpRecordRequest, config?: AxiosRequestConfig): Promise<operations.ListIpRecordResponse>;
    ListSourceIpMapping(req: operations.ListSourceIpMappingRequest, config?: AxiosRequestConfig): Promise<operations.ListSourceIpMappingResponse>;
    UpdateByocTrunk(req: operations.UpdateByocTrunkRequest, config?: AxiosRequestConfig): Promise<operations.UpdateByocTrunkResponse>;
    UpdateConnectionPolicy(req: operations.UpdateConnectionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConnectionPolicyResponse>;
    UpdateConnectionPolicyTarget(req: operations.UpdateConnectionPolicyTargetRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConnectionPolicyTargetResponse>;
    UpdateDialingPermissionsSettings(req: operations.UpdateDialingPermissionsSettingsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDialingPermissionsSettingsResponse>;
    UpdateIpRecord(req: operations.UpdateIpRecordRequest, config?: AxiosRequestConfig): Promise<operations.UpdateIpRecordResponse>;
    UpdateSourceIpMapping(req: operations.UpdateSourceIpMappingRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSourceIpMappingResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateBundle(req: operations.CreateBundleRequest, config?: AxiosRequestConfig): Promise<operations.CreateBundleResponse>;
    CreateBundleCopy(req: operations.CreateBundleCopyRequest, config?: AxiosRequestConfig): Promise<operations.CreateBundleCopyResponse>;
    CreateEndUser(req: operations.CreateEndUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateEndUserResponse>;
    CreateEvaluation(req: operations.CreateEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.CreateEvaluationResponse>;
    CreateItemAssignment(req: operations.CreateItemAssignmentRequest, config?: AxiosRequestConfig): Promise<operations.CreateItemAssignmentResponse>;
    CreateReplaceItems(req: operations.CreateReplaceItemsRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplaceItemsResponse>;
    CreateSupportingDocument(req: operations.CreateSupportingDocumentRequest, config?: AxiosRequestConfig): Promise<operations.CreateSupportingDocumentResponse>;
    DeleteBundle(req: operations.DeleteBundleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteBundleResponse>;
    DeleteEndUser(req: operations.DeleteEndUserRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEndUserResponse>;
    DeleteItemAssignment(req: operations.DeleteItemAssignmentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteItemAssignmentResponse>;
    DeleteSupportingDocument(req: operations.DeleteSupportingDocumentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSupportingDocumentResponse>;
    FetchBundle(req: operations.FetchBundleRequest, config?: AxiosRequestConfig): Promise<operations.FetchBundleResponse>;
    FetchEndUser(req: operations.FetchEndUserRequest, config?: AxiosRequestConfig): Promise<operations.FetchEndUserResponse>;
    FetchEndUserType(req: operations.FetchEndUserTypeRequest, config?: AxiosRequestConfig): Promise<operations.FetchEndUserTypeResponse>;
    FetchEvaluation(req: operations.FetchEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.FetchEvaluationResponse>;
    FetchItemAssignment(req: operations.FetchItemAssignmentRequest, config?: AxiosRequestConfig): Promise<operations.FetchItemAssignmentResponse>;
    FetchRegulation(req: operations.FetchRegulationRequest, config?: AxiosRequestConfig): Promise<operations.FetchRegulationResponse>;
    FetchSupportingDocument(req: operations.FetchSupportingDocumentRequest, config?: AxiosRequestConfig): Promise<operations.FetchSupportingDocumentResponse>;
    FetchSupportingDocumentType(req: operations.FetchSupportingDocumentTypeRequest, config?: AxiosRequestConfig): Promise<operations.FetchSupportingDocumentTypeResponse>;
    ListBundle(req: operations.ListBundleRequest, config?: AxiosRequestConfig): Promise<operations.ListBundleResponse>;
    ListBundleCopy(req: operations.ListBundleCopyRequest, config?: AxiosRequestConfig): Promise<operations.ListBundleCopyResponse>;
    ListEndUser(req: operations.ListEndUserRequest, config?: AxiosRequestConfig): Promise<operations.ListEndUserResponse>;
    ListEndUserType(req: operations.ListEndUserTypeRequest, config?: AxiosRequestConfig): Promise<operations.ListEndUserTypeResponse>;
    ListEvaluation(req: operations.ListEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.ListEvaluationResponse>;
    ListItemAssignment(req: operations.ListItemAssignmentRequest, config?: AxiosRequestConfig): Promise<operations.ListItemAssignmentResponse>;
    ListRegulation(req: operations.ListRegulationRequest, config?: AxiosRequestConfig): Promise<operations.ListRegulationResponse>;
    ListSupportingDocument(req: operations.ListSupportingDocumentRequest, config?: AxiosRequestConfig): Promise<operations.ListSupportingDocumentResponse>;
    ListSupportingDocumentType(req: operations.ListSupportingDocumentTypeRequest, config?: AxiosRequestConfig): Promise<operations.ListSupportingDocumentTypeResponse>;
    UpdateBundle(req: operations.UpdateBundleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateBundleResponse>;
    UpdateEndUser(req: operations.UpdateEndUserRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEndUserResponse>;
    UpdateSupportingDocument(req: operations.UpdateSupportingDocumentRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSupportingDocumentResponse>;
}
export {};

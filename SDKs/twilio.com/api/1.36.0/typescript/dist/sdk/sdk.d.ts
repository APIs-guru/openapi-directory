import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateAccount(req: operations.CreateAccountRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountResponse>;
    CreateAddress(req: operations.CreateAddressRequest, config?: AxiosRequestConfig): Promise<operations.CreateAddressResponse>;
    CreateApplication(req: operations.CreateApplicationRequest, config?: AxiosRequestConfig): Promise<operations.CreateApplicationResponse>;
    CreateCall(req: operations.CreateCallRequest, config?: AxiosRequestConfig): Promise<operations.CreateCallResponse>;
    CreateCallFeedbackSummary(req: operations.CreateCallFeedbackSummaryRequest, config?: AxiosRequestConfig): Promise<operations.CreateCallFeedbackSummaryResponse>;
    CreateCallRecording(req: operations.CreateCallRecordingRequest, config?: AxiosRequestConfig): Promise<operations.CreateCallRecordingResponse>;
    CreateIncomingPhoneNumber(req: operations.CreateIncomingPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.CreateIncomingPhoneNumberResponse>;
    CreateIncomingPhoneNumberAssignedAddOn(req: operations.CreateIncomingPhoneNumberAssignedAddOnRequest, config?: AxiosRequestConfig): Promise<operations.CreateIncomingPhoneNumberAssignedAddOnResponse>;
    CreateIncomingPhoneNumberLocal(req: operations.CreateIncomingPhoneNumberLocalRequest, config?: AxiosRequestConfig): Promise<operations.CreateIncomingPhoneNumberLocalResponse>;
    CreateIncomingPhoneNumberMobile(req: operations.CreateIncomingPhoneNumberMobileRequest, config?: AxiosRequestConfig): Promise<operations.CreateIncomingPhoneNumberMobileResponse>;
    CreateIncomingPhoneNumberTollFree(req: operations.CreateIncomingPhoneNumberTollFreeRequest, config?: AxiosRequestConfig): Promise<operations.CreateIncomingPhoneNumberTollFreeResponse>;
    CreateMessage(req: operations.CreateMessageRequest, config?: AxiosRequestConfig): Promise<operations.CreateMessageResponse>;
    CreateMessageFeedback(req: operations.CreateMessageFeedbackRequest, config?: AxiosRequestConfig): Promise<operations.CreateMessageFeedbackResponse>;
    CreateNewKey(req: operations.CreateNewKeyRequest, config?: AxiosRequestConfig): Promise<operations.CreateNewKeyResponse>;
    CreateNewSigningKey(req: operations.CreateNewSigningKeyRequest, config?: AxiosRequestConfig): Promise<operations.CreateNewSigningKeyResponse>;
    CreateParticipant(req: operations.CreateParticipantRequest, config?: AxiosRequestConfig): Promise<operations.CreateParticipantResponse>;
    CreatePayments(req: operations.CreatePaymentsRequest, config?: AxiosRequestConfig): Promise<operations.CreatePaymentsResponse>;
    CreateQueue(req: operations.CreateQueueRequest, config?: AxiosRequestConfig): Promise<operations.CreateQueueResponse>;
    CreateSipAuthCallsCredentialListMapping(req: operations.CreateSipAuthCallsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipAuthCallsCredentialListMappingResponse>;
    CreateSipAuthCallsIpAccessControlListMapping(req: operations.CreateSipAuthCallsIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipAuthCallsIpAccessControlListMappingResponse>;
    CreateSipAuthRegistrationsCredentialListMapping(req: operations.CreateSipAuthRegistrationsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipAuthRegistrationsCredentialListMappingResponse>;
    CreateSipCredential(req: operations.CreateSipCredentialRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipCredentialResponse>;
    CreateSipCredentialList(req: operations.CreateSipCredentialListRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipCredentialListResponse>;
    CreateSipCredentialListMapping(req: operations.CreateSipCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipCredentialListMappingResponse>;
    CreateSipDomain(req: operations.CreateSipDomainRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipDomainResponse>;
    CreateSipIpAccessControlList(req: operations.CreateSipIpAccessControlListRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipIpAccessControlListResponse>;
    CreateSipIpAccessControlListMapping(req: operations.CreateSipIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipIpAccessControlListMappingResponse>;
    CreateSipIpAddress(req: operations.CreateSipIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.CreateSipIpAddressResponse>;
    CreateSiprec(req: operations.CreateSiprecRequest, config?: AxiosRequestConfig): Promise<operations.CreateSiprecResponse>;
    CreateStream(req: operations.CreateStreamRequest, config?: AxiosRequestConfig): Promise<operations.CreateStreamResponse>;
    CreateToken(req: operations.CreateTokenRequest, config?: AxiosRequestConfig): Promise<operations.CreateTokenResponse>;
    CreateUsageTrigger(req: operations.CreateUsageTriggerRequest, config?: AxiosRequestConfig): Promise<operations.CreateUsageTriggerResponse>;
    CreateValidationRequest(req: operations.CreateValidationRequestRequest, config?: AxiosRequestConfig): Promise<operations.CreateValidationRequestResponse>;
    DeleteAddress(req: operations.DeleteAddressRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAddressResponse>;
    DeleteApplication(req: operations.DeleteApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApplicationResponse>;
    DeleteCall(req: operations.DeleteCallRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCallResponse>;
    DeleteCallFeedbackSummary(req: operations.DeleteCallFeedbackSummaryRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCallFeedbackSummaryResponse>;
    DeleteCallRecording(req: operations.DeleteCallRecordingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCallRecordingResponse>;
    DeleteConferenceRecording(req: operations.DeleteConferenceRecordingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConferenceRecordingResponse>;
    DeleteConnectApp(req: operations.DeleteConnectAppRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConnectAppResponse>;
    DeleteIncomingPhoneNumber(req: operations.DeleteIncomingPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.DeleteIncomingPhoneNumberResponse>;
    DeleteIncomingPhoneNumberAssignedAddOn(req: operations.DeleteIncomingPhoneNumberAssignedAddOnRequest, config?: AxiosRequestConfig): Promise<operations.DeleteIncomingPhoneNumberAssignedAddOnResponse>;
    DeleteKey(req: operations.DeleteKeyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteKeyResponse>;
    DeleteMedia(req: operations.DeleteMediaRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMediaResponse>;
    DeleteMessage(req: operations.DeleteMessageRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMessageResponse>;
    DeleteOutgoingCallerId(req: operations.DeleteOutgoingCallerIdRequest, config?: AxiosRequestConfig): Promise<operations.DeleteOutgoingCallerIdResponse>;
    DeleteParticipant(req: operations.DeleteParticipantRequest, config?: AxiosRequestConfig): Promise<operations.DeleteParticipantResponse>;
    DeleteQueue(req: operations.DeleteQueueRequest, config?: AxiosRequestConfig): Promise<operations.DeleteQueueResponse>;
    DeleteRecording(req: operations.DeleteRecordingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRecordingResponse>;
    DeleteRecordingAddOnResult(req: operations.DeleteRecordingAddOnResultRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRecordingAddOnResultResponse>;
    DeleteRecordingAddOnResultPayload(req: operations.DeleteRecordingAddOnResultPayloadRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRecordingAddOnResultPayloadResponse>;
    DeleteRecordingTranscription(req: operations.DeleteRecordingTranscriptionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRecordingTranscriptionResponse>;
    DeleteSigningKey(req: operations.DeleteSigningKeyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSigningKeyResponse>;
    DeleteSipAuthCallsCredentialListMapping(req: operations.DeleteSipAuthCallsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipAuthCallsCredentialListMappingResponse>;
    DeleteSipAuthCallsIpAccessControlListMapping(req: operations.DeleteSipAuthCallsIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipAuthCallsIpAccessControlListMappingResponse>;
    DeleteSipAuthRegistrationsCredentialListMapping(req: operations.DeleteSipAuthRegistrationsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipAuthRegistrationsCredentialListMappingResponse>;
    DeleteSipCredential(req: operations.DeleteSipCredentialRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipCredentialResponse>;
    DeleteSipCredentialList(req: operations.DeleteSipCredentialListRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipCredentialListResponse>;
    DeleteSipCredentialListMapping(req: operations.DeleteSipCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipCredentialListMappingResponse>;
    DeleteSipDomain(req: operations.DeleteSipDomainRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipDomainResponse>;
    DeleteSipIpAccessControlList(req: operations.DeleteSipIpAccessControlListRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipIpAccessControlListResponse>;
    DeleteSipIpAccessControlListMapping(req: operations.DeleteSipIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipIpAccessControlListMappingResponse>;
    DeleteSipIpAddress(req: operations.DeleteSipIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSipIpAddressResponse>;
    DeleteTranscription(req: operations.DeleteTranscriptionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTranscriptionResponse>;
    DeleteUsageTrigger(req: operations.DeleteUsageTriggerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUsageTriggerResponse>;
    FetchAccount(req: operations.FetchAccountRequest, config?: AxiosRequestConfig): Promise<operations.FetchAccountResponse>;
    FetchAddress(req: operations.FetchAddressRequest, config?: AxiosRequestConfig): Promise<operations.FetchAddressResponse>;
    FetchApplication(req: operations.FetchApplicationRequest, config?: AxiosRequestConfig): Promise<operations.FetchApplicationResponse>;
    FetchAuthorizedConnectApp(req: operations.FetchAuthorizedConnectAppRequest, config?: AxiosRequestConfig): Promise<operations.FetchAuthorizedConnectAppResponse>;
    FetchAvailablePhoneNumberCountry(req: operations.FetchAvailablePhoneNumberCountryRequest, config?: AxiosRequestConfig): Promise<operations.FetchAvailablePhoneNumberCountryResponse>;
    FetchBalance(req: operations.FetchBalanceRequest, config?: AxiosRequestConfig): Promise<operations.FetchBalanceResponse>;
    FetchCall(req: operations.FetchCallRequest, config?: AxiosRequestConfig): Promise<operations.FetchCallResponse>;
    FetchCallFeedback(req: operations.FetchCallFeedbackRequest, config?: AxiosRequestConfig): Promise<operations.FetchCallFeedbackResponse>;
    FetchCallFeedbackSummary(req: operations.FetchCallFeedbackSummaryRequest, config?: AxiosRequestConfig): Promise<operations.FetchCallFeedbackSummaryResponse>;
    FetchCallNotification(req: operations.FetchCallNotificationRequest, config?: AxiosRequestConfig): Promise<operations.FetchCallNotificationResponse>;
    FetchCallRecording(req: operations.FetchCallRecordingRequest, config?: AxiosRequestConfig): Promise<operations.FetchCallRecordingResponse>;
    FetchConference(req: operations.FetchConferenceRequest, config?: AxiosRequestConfig): Promise<operations.FetchConferenceResponse>;
    FetchConferenceRecording(req: operations.FetchConferenceRecordingRequest, config?: AxiosRequestConfig): Promise<operations.FetchConferenceRecordingResponse>;
    FetchConnectApp(req: operations.FetchConnectAppRequest, config?: AxiosRequestConfig): Promise<operations.FetchConnectAppResponse>;
    FetchIncomingPhoneNumber(req: operations.FetchIncomingPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.FetchIncomingPhoneNumberResponse>;
    FetchIncomingPhoneNumberAssignedAddOn(req: operations.FetchIncomingPhoneNumberAssignedAddOnRequest, config?: AxiosRequestConfig): Promise<operations.FetchIncomingPhoneNumberAssignedAddOnResponse>;
    FetchIncomingPhoneNumberAssignedAddOnExtension(req: operations.FetchIncomingPhoneNumberAssignedAddOnExtensionRequest, config?: AxiosRequestConfig): Promise<operations.FetchIncomingPhoneNumberAssignedAddOnExtensionResponse>;
    FetchKey(req: operations.FetchKeyRequest, config?: AxiosRequestConfig): Promise<operations.FetchKeyResponse>;
    FetchMedia(req: operations.FetchMediaRequest, config?: AxiosRequestConfig): Promise<operations.FetchMediaResponse>;
    FetchMember(req: operations.FetchMemberRequest, config?: AxiosRequestConfig): Promise<operations.FetchMemberResponse>;
    FetchMessage(req: operations.FetchMessageRequest, config?: AxiosRequestConfig): Promise<operations.FetchMessageResponse>;
    FetchNotification(req: operations.FetchNotificationRequest, config?: AxiosRequestConfig): Promise<operations.FetchNotificationResponse>;
    FetchOutgoingCallerId(req: operations.FetchOutgoingCallerIdRequest, config?: AxiosRequestConfig): Promise<operations.FetchOutgoingCallerIdResponse>;
    FetchParticipant(req: operations.FetchParticipantRequest, config?: AxiosRequestConfig): Promise<operations.FetchParticipantResponse>;
    FetchQueue(req: operations.FetchQueueRequest, config?: AxiosRequestConfig): Promise<operations.FetchQueueResponse>;
    FetchRecording(req: operations.FetchRecordingRequest, config?: AxiosRequestConfig): Promise<operations.FetchRecordingResponse>;
    FetchRecordingAddOnResult(req: operations.FetchRecordingAddOnResultRequest, config?: AxiosRequestConfig): Promise<operations.FetchRecordingAddOnResultResponse>;
    FetchRecordingAddOnResultPayload(req: operations.FetchRecordingAddOnResultPayloadRequest, config?: AxiosRequestConfig): Promise<operations.FetchRecordingAddOnResultPayloadResponse>;
    FetchRecordingTranscription(req: operations.FetchRecordingTranscriptionRequest, config?: AxiosRequestConfig): Promise<operations.FetchRecordingTranscriptionResponse>;
    FetchShortCode(req: operations.FetchShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.FetchShortCodeResponse>;
    FetchSigningKey(req: operations.FetchSigningKeyRequest, config?: AxiosRequestConfig): Promise<operations.FetchSigningKeyResponse>;
    FetchSipAuthCallsCredentialListMapping(req: operations.FetchSipAuthCallsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipAuthCallsCredentialListMappingResponse>;
    FetchSipAuthCallsIpAccessControlListMapping(req: operations.FetchSipAuthCallsIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipAuthCallsIpAccessControlListMappingResponse>;
    FetchSipAuthRegistrationsCredentialListMapping(req: operations.FetchSipAuthRegistrationsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipAuthRegistrationsCredentialListMappingResponse>;
    FetchSipCredential(req: operations.FetchSipCredentialRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipCredentialResponse>;
    FetchSipCredentialList(req: operations.FetchSipCredentialListRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipCredentialListResponse>;
    FetchSipCredentialListMapping(req: operations.FetchSipCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipCredentialListMappingResponse>;
    FetchSipDomain(req: operations.FetchSipDomainRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipDomainResponse>;
    FetchSipIpAccessControlList(req: operations.FetchSipIpAccessControlListRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipIpAccessControlListResponse>;
    FetchSipIpAccessControlListMapping(req: operations.FetchSipIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipIpAccessControlListMappingResponse>;
    FetchSipIpAddress(req: operations.FetchSipIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.FetchSipIpAddressResponse>;
    FetchTranscription(req: operations.FetchTranscriptionRequest, config?: AxiosRequestConfig): Promise<operations.FetchTranscriptionResponse>;
    FetchUsageTrigger(req: operations.FetchUsageTriggerRequest, config?: AxiosRequestConfig): Promise<operations.FetchUsageTriggerResponse>;
    ListAccount(req: operations.ListAccountRequest, config?: AxiosRequestConfig): Promise<operations.ListAccountResponse>;
    ListAddress(req: operations.ListAddressRequest, config?: AxiosRequestConfig): Promise<operations.ListAddressResponse>;
    ListApplication(req: operations.ListApplicationRequest, config?: AxiosRequestConfig): Promise<operations.ListApplicationResponse>;
    ListAuthorizedConnectApp(req: operations.ListAuthorizedConnectAppRequest, config?: AxiosRequestConfig): Promise<operations.ListAuthorizedConnectAppResponse>;
    ListAvailablePhoneNumberCountry(req: operations.ListAvailablePhoneNumberCountryRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberCountryResponse>;
    ListAvailablePhoneNumberLocal(req: operations.ListAvailablePhoneNumberLocalRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberLocalResponse>;
    ListAvailablePhoneNumberMachineToMachine(req: operations.ListAvailablePhoneNumberMachineToMachineRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberMachineToMachineResponse>;
    ListAvailablePhoneNumberMobile(req: operations.ListAvailablePhoneNumberMobileRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberMobileResponse>;
    ListAvailablePhoneNumberNational(req: operations.ListAvailablePhoneNumberNationalRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberNationalResponse>;
    ListAvailablePhoneNumberSharedCost(req: operations.ListAvailablePhoneNumberSharedCostRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberSharedCostResponse>;
    ListAvailablePhoneNumberTollFree(req: operations.ListAvailablePhoneNumberTollFreeRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberTollFreeResponse>;
    ListAvailablePhoneNumberVoip(req: operations.ListAvailablePhoneNumberVoipRequest, config?: AxiosRequestConfig): Promise<operations.ListAvailablePhoneNumberVoipResponse>;
    ListCall(req: operations.ListCallRequest, config?: AxiosRequestConfig): Promise<operations.ListCallResponse>;
    ListCallEvent(req: operations.ListCallEventRequest, config?: AxiosRequestConfig): Promise<operations.ListCallEventResponse>;
    ListCallNotification(req: operations.ListCallNotificationRequest, config?: AxiosRequestConfig): Promise<operations.ListCallNotificationResponse>;
    ListCallRecording(req: operations.ListCallRecordingRequest, config?: AxiosRequestConfig): Promise<operations.ListCallRecordingResponse>;
    ListConference(req: operations.ListConferenceRequest, config?: AxiosRequestConfig): Promise<operations.ListConferenceResponse>;
    ListConferenceRecording(req: operations.ListConferenceRecordingRequest, config?: AxiosRequestConfig): Promise<operations.ListConferenceRecordingResponse>;
    ListConnectApp(req: operations.ListConnectAppRequest, config?: AxiosRequestConfig): Promise<operations.ListConnectAppResponse>;
    ListDependentPhoneNumber(req: operations.ListDependentPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.ListDependentPhoneNumberResponse>;
    ListIncomingPhoneNumber(req: operations.ListIncomingPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.ListIncomingPhoneNumberResponse>;
    ListIncomingPhoneNumberAssignedAddOn(req: operations.ListIncomingPhoneNumberAssignedAddOnRequest, config?: AxiosRequestConfig): Promise<operations.ListIncomingPhoneNumberAssignedAddOnResponse>;
    ListIncomingPhoneNumberAssignedAddOnExtension(req: operations.ListIncomingPhoneNumberAssignedAddOnExtensionRequest, config?: AxiosRequestConfig): Promise<operations.ListIncomingPhoneNumberAssignedAddOnExtensionResponse>;
    ListIncomingPhoneNumberLocal(req: operations.ListIncomingPhoneNumberLocalRequest, config?: AxiosRequestConfig): Promise<operations.ListIncomingPhoneNumberLocalResponse>;
    ListIncomingPhoneNumberMobile(req: operations.ListIncomingPhoneNumberMobileRequest, config?: AxiosRequestConfig): Promise<operations.ListIncomingPhoneNumberMobileResponse>;
    ListIncomingPhoneNumberTollFree(req: operations.ListIncomingPhoneNumberTollFreeRequest, config?: AxiosRequestConfig): Promise<operations.ListIncomingPhoneNumberTollFreeResponse>;
    ListKey(req: operations.ListKeyRequest, config?: AxiosRequestConfig): Promise<operations.ListKeyResponse>;
    ListMedia(req: operations.ListMediaRequest, config?: AxiosRequestConfig): Promise<operations.ListMediaResponse>;
    ListMember(req: operations.ListMemberRequest, config?: AxiosRequestConfig): Promise<operations.ListMemberResponse>;
    ListMessage(req: operations.ListMessageRequest, config?: AxiosRequestConfig): Promise<operations.ListMessageResponse>;
    ListNotification(req: operations.ListNotificationRequest, config?: AxiosRequestConfig): Promise<operations.ListNotificationResponse>;
    ListOutgoingCallerId(req: operations.ListOutgoingCallerIdRequest, config?: AxiosRequestConfig): Promise<operations.ListOutgoingCallerIdResponse>;
    ListParticipant(req: operations.ListParticipantRequest, config?: AxiosRequestConfig): Promise<operations.ListParticipantResponse>;
    ListQueue(req: operations.ListQueueRequest, config?: AxiosRequestConfig): Promise<operations.ListQueueResponse>;
    ListRecording(req: operations.ListRecordingRequest, config?: AxiosRequestConfig): Promise<operations.ListRecordingResponse>;
    ListRecordingAddOnResult(req: operations.ListRecordingAddOnResultRequest, config?: AxiosRequestConfig): Promise<operations.ListRecordingAddOnResultResponse>;
    ListRecordingAddOnResultPayload(req: operations.ListRecordingAddOnResultPayloadRequest, config?: AxiosRequestConfig): Promise<operations.ListRecordingAddOnResultPayloadResponse>;
    ListRecordingTranscription(req: operations.ListRecordingTranscriptionRequest, config?: AxiosRequestConfig): Promise<operations.ListRecordingTranscriptionResponse>;
    ListShortCode(req: operations.ListShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.ListShortCodeResponse>;
    ListSigningKey(req: operations.ListSigningKeyRequest, config?: AxiosRequestConfig): Promise<operations.ListSigningKeyResponse>;
    ListSipAuthCallsCredentialListMapping(req: operations.ListSipAuthCallsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.ListSipAuthCallsCredentialListMappingResponse>;
    ListSipAuthCallsIpAccessControlListMapping(req: operations.ListSipAuthCallsIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.ListSipAuthCallsIpAccessControlListMappingResponse>;
    ListSipAuthRegistrationsCredentialListMapping(req: operations.ListSipAuthRegistrationsCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.ListSipAuthRegistrationsCredentialListMappingResponse>;
    ListSipCredential(req: operations.ListSipCredentialRequest, config?: AxiosRequestConfig): Promise<operations.ListSipCredentialResponse>;
    ListSipCredentialList(req: operations.ListSipCredentialListRequest, config?: AxiosRequestConfig): Promise<operations.ListSipCredentialListResponse>;
    ListSipCredentialListMapping(req: operations.ListSipCredentialListMappingRequest, config?: AxiosRequestConfig): Promise<operations.ListSipCredentialListMappingResponse>;
    ListSipDomain(req: operations.ListSipDomainRequest, config?: AxiosRequestConfig): Promise<operations.ListSipDomainResponse>;
    ListSipIpAccessControlList(req: operations.ListSipIpAccessControlListRequest, config?: AxiosRequestConfig): Promise<operations.ListSipIpAccessControlListResponse>;
    ListSipIpAccessControlListMapping(req: operations.ListSipIpAccessControlListMappingRequest, config?: AxiosRequestConfig): Promise<operations.ListSipIpAccessControlListMappingResponse>;
    ListSipIpAddress(req: operations.ListSipIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.ListSipIpAddressResponse>;
    ListTranscription(req: operations.ListTranscriptionRequest, config?: AxiosRequestConfig): Promise<operations.ListTranscriptionResponse>;
    ListUsageRecord(req: operations.ListUsageRecordRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordResponse>;
    ListUsageRecordAllTime(req: operations.ListUsageRecordAllTimeRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordAllTimeResponse>;
    ListUsageRecordDaily(req: operations.ListUsageRecordDailyRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordDailyResponse>;
    ListUsageRecordLastMonth(req: operations.ListUsageRecordLastMonthRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordLastMonthResponse>;
    ListUsageRecordMonthly(req: operations.ListUsageRecordMonthlyRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordMonthlyResponse>;
    ListUsageRecordThisMonth(req: operations.ListUsageRecordThisMonthRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordThisMonthResponse>;
    ListUsageRecordToday(req: operations.ListUsageRecordTodayRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordTodayResponse>;
    ListUsageRecordYearly(req: operations.ListUsageRecordYearlyRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordYearlyResponse>;
    ListUsageRecordYesterday(req: operations.ListUsageRecordYesterdayRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageRecordYesterdayResponse>;
    ListUsageTrigger(req: operations.ListUsageTriggerRequest, config?: AxiosRequestConfig): Promise<operations.ListUsageTriggerResponse>;
    UpdateAccount(req: operations.UpdateAccountRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAccountResponse>;
    UpdateAddress(req: operations.UpdateAddressRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAddressResponse>;
    UpdateApplication(req: operations.UpdateApplicationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApplicationResponse>;
    UpdateCall(req: operations.UpdateCallRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCallResponse>;
    UpdateCallFeedback(req: operations.UpdateCallFeedbackRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCallFeedbackResponse>;
    UpdateCallRecording(req: operations.UpdateCallRecordingRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCallRecordingResponse>;
    UpdateConference(req: operations.UpdateConferenceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConferenceResponse>;
    UpdateConferenceRecording(req: operations.UpdateConferenceRecordingRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConferenceRecordingResponse>;
    UpdateConnectApp(req: operations.UpdateConnectAppRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConnectAppResponse>;
    UpdateIncomingPhoneNumber(req: operations.UpdateIncomingPhoneNumberRequest, config?: AxiosRequestConfig): Promise<operations.UpdateIncomingPhoneNumberResponse>;
    UpdateKey(req: operations.UpdateKeyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateKeyResponse>;
    UpdateMember(req: operations.UpdateMemberRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMemberResponse>;
    UpdateMessage(req: operations.UpdateMessageRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMessageResponse>;
    UpdateOutgoingCallerId(req: operations.UpdateOutgoingCallerIdRequest, config?: AxiosRequestConfig): Promise<operations.UpdateOutgoingCallerIdResponse>;
    UpdateParticipant(req: operations.UpdateParticipantRequest, config?: AxiosRequestConfig): Promise<operations.UpdateParticipantResponse>;
    UpdatePayments(req: operations.UpdatePaymentsRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePaymentsResponse>;
    UpdateQueue(req: operations.UpdateQueueRequest, config?: AxiosRequestConfig): Promise<operations.UpdateQueueResponse>;
    UpdateShortCode(req: operations.UpdateShortCodeRequest, config?: AxiosRequestConfig): Promise<operations.UpdateShortCodeResponse>;
    UpdateSigningKey(req: operations.UpdateSigningKeyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSigningKeyResponse>;
    UpdateSipCredential(req: operations.UpdateSipCredentialRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSipCredentialResponse>;
    UpdateSipCredentialList(req: operations.UpdateSipCredentialListRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSipCredentialListResponse>;
    UpdateSipDomain(req: operations.UpdateSipDomainRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSipDomainResponse>;
    UpdateSipIpAccessControlList(req: operations.UpdateSipIpAccessControlListRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSipIpAccessControlListResponse>;
    UpdateSipIpAddress(req: operations.UpdateSipIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSipIpAddressResponse>;
    UpdateSiprec(req: operations.UpdateSiprecRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSiprecResponse>;
    UpdateStream(req: operations.UpdateStreamRequest, config?: AxiosRequestConfig): Promise<operations.UpdateStreamResponse>;
    UpdateUsageTrigger(req: operations.UpdateUsageTriggerRequest, config?: AxiosRequestConfig): Promise<operations.UpdateUsageTriggerResponse>;
}
export {};

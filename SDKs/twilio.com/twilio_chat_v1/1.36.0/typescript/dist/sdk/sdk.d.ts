import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateChannel(req: operations.CreateChannelRequest, config?: AxiosRequestConfig): Promise<operations.CreateChannelResponse>;
    CreateCredential(req: operations.CreateCredentialRequest, config?: AxiosRequestConfig): Promise<operations.CreateCredentialResponse>;
    CreateInvite(req: operations.CreateInviteRequest, config?: AxiosRequestConfig): Promise<operations.CreateInviteResponse>;
    CreateMember(req: operations.CreateMemberRequest, config?: AxiosRequestConfig): Promise<operations.CreateMemberResponse>;
    CreateMessage(req: operations.CreateMessageRequest, config?: AxiosRequestConfig): Promise<operations.CreateMessageResponse>;
    CreateRole(req: operations.CreateRoleRequest, config?: AxiosRequestConfig): Promise<operations.CreateRoleResponse>;
    CreateService(req: operations.CreateServiceRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceResponse>;
    CreateUser(req: operations.CreateUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateUserResponse>;
    DeleteChannel(req: operations.DeleteChannelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteChannelResponse>;
    DeleteCredential(req: operations.DeleteCredentialRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCredentialResponse>;
    DeleteInvite(req: operations.DeleteInviteRequest, config?: AxiosRequestConfig): Promise<operations.DeleteInviteResponse>;
    DeleteMember(req: operations.DeleteMemberRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMemberResponse>;
    DeleteMessage(req: operations.DeleteMessageRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMessageResponse>;
    DeleteRole(req: operations.DeleteRoleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRoleResponse>;
    DeleteService(req: operations.DeleteServiceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceResponse>;
    DeleteUser(req: operations.DeleteUserRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUserResponse>;
    FetchChannel(req: operations.FetchChannelRequest, config?: AxiosRequestConfig): Promise<operations.FetchChannelResponse>;
    FetchCredential(req: operations.FetchCredentialRequest, config?: AxiosRequestConfig): Promise<operations.FetchCredentialResponse>;
    FetchInvite(req: operations.FetchInviteRequest, config?: AxiosRequestConfig): Promise<operations.FetchInviteResponse>;
    FetchMember(req: operations.FetchMemberRequest, config?: AxiosRequestConfig): Promise<operations.FetchMemberResponse>;
    FetchMessage(req: operations.FetchMessageRequest, config?: AxiosRequestConfig): Promise<operations.FetchMessageResponse>;
    FetchRole(req: operations.FetchRoleRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoleResponse>;
    FetchService(req: operations.FetchServiceRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceResponse>;
    FetchUser(req: operations.FetchUserRequest, config?: AxiosRequestConfig): Promise<operations.FetchUserResponse>;
    ListChannel(req: operations.ListChannelRequest, config?: AxiosRequestConfig): Promise<operations.ListChannelResponse>;
    ListCredential(req: operations.ListCredentialRequest, config?: AxiosRequestConfig): Promise<operations.ListCredentialResponse>;
    ListInvite(req: operations.ListInviteRequest, config?: AxiosRequestConfig): Promise<operations.ListInviteResponse>;
    ListMember(req: operations.ListMemberRequest, config?: AxiosRequestConfig): Promise<operations.ListMemberResponse>;
    ListMessage(req: operations.ListMessageRequest, config?: AxiosRequestConfig): Promise<operations.ListMessageResponse>;
    ListRole(req: operations.ListRoleRequest, config?: AxiosRequestConfig): Promise<operations.ListRoleResponse>;
    ListService(req: operations.ListServiceRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceResponse>;
    ListUser(req: operations.ListUserRequest, config?: AxiosRequestConfig): Promise<operations.ListUserResponse>;
    ListUserChannel(req: operations.ListUserChannelRequest, config?: AxiosRequestConfig): Promise<operations.ListUserChannelResponse>;
    UpdateChannel(req: operations.UpdateChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateChannelResponse>;
    UpdateCredential(req: operations.UpdateCredentialRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCredentialResponse>;
    UpdateMember(req: operations.UpdateMemberRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMemberResponse>;
    UpdateMessage(req: operations.UpdateMessageRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMessageResponse>;
    UpdateRole(req: operations.UpdateRoleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoleResponse>;
    UpdateService(req: operations.UpdateServiceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceResponse>;
    UpdateUser(req: operations.UpdateUserRequest, config?: AxiosRequestConfig): Promise<operations.UpdateUserResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateConfigurationAddress(req: operations.CreateConfigurationAddressRequest, config?: AxiosRequestConfig): Promise<operations.CreateConfigurationAddressResponse>;
    CreateConversation(req: operations.CreateConversationRequest, config?: AxiosRequestConfig): Promise<operations.CreateConversationResponse>;
    CreateConversationMessage(req: operations.CreateConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.CreateConversationMessageResponse>;
    CreateConversationParticipant(req: operations.CreateConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.CreateConversationParticipantResponse>;
    CreateConversationScopedWebhook(req: operations.CreateConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.CreateConversationScopedWebhookResponse>;
    CreateCredential(req: operations.CreateCredentialRequest, config?: AxiosRequestConfig): Promise<operations.CreateCredentialResponse>;
    CreateRole(req: operations.CreateRoleRequest, config?: AxiosRequestConfig): Promise<operations.CreateRoleResponse>;
    CreateService(req: operations.CreateServiceRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceResponse>;
    CreateServiceConversation(req: operations.CreateServiceConversationRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceConversationResponse>;
    CreateServiceConversationMessage(req: operations.CreateServiceConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceConversationMessageResponse>;
    CreateServiceConversationParticipant(req: operations.CreateServiceConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceConversationParticipantResponse>;
    CreateServiceConversationScopedWebhook(req: operations.CreateServiceConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceConversationScopedWebhookResponse>;
    CreateServiceRole(req: operations.CreateServiceRoleRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceRoleResponse>;
    CreateServiceUser(req: operations.CreateServiceUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceUserResponse>;
    CreateUser(req: operations.CreateUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateUserResponse>;
    DeleteConfigurationAddress(req: operations.DeleteConfigurationAddressRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConfigurationAddressResponse>;
    DeleteConversation(req: operations.DeleteConversationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConversationResponse>;
    DeleteConversationMessage(req: operations.DeleteConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConversationMessageResponse>;
    DeleteConversationParticipant(req: operations.DeleteConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConversationParticipantResponse>;
    DeleteConversationScopedWebhook(req: operations.DeleteConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConversationScopedWebhookResponse>;
    DeleteCredential(req: operations.DeleteCredentialRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCredentialResponse>;
    DeleteRole(req: operations.DeleteRoleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRoleResponse>;
    DeleteService(req: operations.DeleteServiceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceResponse>;
    DeleteServiceBinding(req: operations.DeleteServiceBindingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceBindingResponse>;
    DeleteServiceConversation(req: operations.DeleteServiceConversationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceConversationResponse>;
    DeleteServiceConversationMessage(req: operations.DeleteServiceConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceConversationMessageResponse>;
    DeleteServiceConversationParticipant(req: operations.DeleteServiceConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceConversationParticipantResponse>;
    DeleteServiceConversationScopedWebhook(req: operations.DeleteServiceConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceConversationScopedWebhookResponse>;
    DeleteServiceRole(req: operations.DeleteServiceRoleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceRoleResponse>;
    DeleteServiceUser(req: operations.DeleteServiceUserRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceUserResponse>;
    DeleteServiceUserConversation(req: operations.DeleteServiceUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceUserConversationResponse>;
    DeleteUser(req: operations.DeleteUserRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUserResponse>;
    DeleteUserConversation(req: operations.DeleteUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUserConversationResponse>;
    FetchConfiguration(req: operations.FetchConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.FetchConfigurationResponse>;
    FetchConfigurationAddress(req: operations.FetchConfigurationAddressRequest, config?: AxiosRequestConfig): Promise<operations.FetchConfigurationAddressResponse>;
    FetchConfigurationWebhook(req: operations.FetchConfigurationWebhookRequest, config?: AxiosRequestConfig): Promise<operations.FetchConfigurationWebhookResponse>;
    FetchConversation(req: operations.FetchConversationRequest, config?: AxiosRequestConfig): Promise<operations.FetchConversationResponse>;
    FetchConversationMessage(req: operations.FetchConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.FetchConversationMessageResponse>;
    FetchConversationMessageReceipt(req: operations.FetchConversationMessageReceiptRequest, config?: AxiosRequestConfig): Promise<operations.FetchConversationMessageReceiptResponse>;
    FetchConversationParticipant(req: operations.FetchConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.FetchConversationParticipantResponse>;
    FetchConversationScopedWebhook(req: operations.FetchConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.FetchConversationScopedWebhookResponse>;
    FetchCredential(req: operations.FetchCredentialRequest, config?: AxiosRequestConfig): Promise<operations.FetchCredentialResponse>;
    FetchRole(req: operations.FetchRoleRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoleResponse>;
    FetchService(req: operations.FetchServiceRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceResponse>;
    FetchServiceBinding(req: operations.FetchServiceBindingRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceBindingResponse>;
    FetchServiceConfiguration(req: operations.FetchServiceConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceConfigurationResponse>;
    FetchServiceConversation(req: operations.FetchServiceConversationRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceConversationResponse>;
    FetchServiceConversationMessage(req: operations.FetchServiceConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceConversationMessageResponse>;
    FetchServiceConversationMessageReceipt(req: operations.FetchServiceConversationMessageReceiptRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceConversationMessageReceiptResponse>;
    FetchServiceConversationParticipant(req: operations.FetchServiceConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceConversationParticipantResponse>;
    FetchServiceConversationScopedWebhook(req: operations.FetchServiceConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceConversationScopedWebhookResponse>;
    FetchServiceNotification(req: operations.FetchServiceNotificationRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceNotificationResponse>;
    FetchServiceRole(req: operations.FetchServiceRoleRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceRoleResponse>;
    FetchServiceUser(req: operations.FetchServiceUserRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceUserResponse>;
    FetchServiceUserConversation(req: operations.FetchServiceUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceUserConversationResponse>;
    FetchServiceWebhookConfiguration(req: operations.FetchServiceWebhookConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceWebhookConfigurationResponse>;
    FetchUser(req: operations.FetchUserRequest, config?: AxiosRequestConfig): Promise<operations.FetchUserResponse>;
    FetchUserConversation(req: operations.FetchUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.FetchUserConversationResponse>;
    ListConfigurationAddress(req: operations.ListConfigurationAddressRequest, config?: AxiosRequestConfig): Promise<operations.ListConfigurationAddressResponse>;
    ListConversation(req: operations.ListConversationRequest, config?: AxiosRequestConfig): Promise<operations.ListConversationResponse>;
    ListConversationMessage(req: operations.ListConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.ListConversationMessageResponse>;
    ListConversationMessageReceipt(req: operations.ListConversationMessageReceiptRequest, config?: AxiosRequestConfig): Promise<operations.ListConversationMessageReceiptResponse>;
    ListConversationParticipant(req: operations.ListConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.ListConversationParticipantResponse>;
    ListConversationScopedWebhook(req: operations.ListConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.ListConversationScopedWebhookResponse>;
    ListCredential(req: operations.ListCredentialRequest, config?: AxiosRequestConfig): Promise<operations.ListCredentialResponse>;
    ListParticipantConversation(req: operations.ListParticipantConversationRequest, config?: AxiosRequestConfig): Promise<operations.ListParticipantConversationResponse>;
    ListRole(req: operations.ListRoleRequest, config?: AxiosRequestConfig): Promise<operations.ListRoleResponse>;
    ListService(req: operations.ListServiceRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceResponse>;
    ListServiceBinding(req: operations.ListServiceBindingRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceBindingResponse>;
    ListServiceConversation(req: operations.ListServiceConversationRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceConversationResponse>;
    ListServiceConversationMessage(req: operations.ListServiceConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceConversationMessageResponse>;
    ListServiceConversationMessageReceipt(req: operations.ListServiceConversationMessageReceiptRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceConversationMessageReceiptResponse>;
    ListServiceConversationParticipant(req: operations.ListServiceConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceConversationParticipantResponse>;
    ListServiceConversationScopedWebhook(req: operations.ListServiceConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceConversationScopedWebhookResponse>;
    ListServiceParticipantConversation(req: operations.ListServiceParticipantConversationRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceParticipantConversationResponse>;
    ListServiceRole(req: operations.ListServiceRoleRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceRoleResponse>;
    ListServiceUser(req: operations.ListServiceUserRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceUserResponse>;
    ListServiceUserConversation(req: operations.ListServiceUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceUserConversationResponse>;
    ListUser(req: operations.ListUserRequest, config?: AxiosRequestConfig): Promise<operations.ListUserResponse>;
    ListUserConversation(req: operations.ListUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.ListUserConversationResponse>;
    UpdateConfiguration(req: operations.UpdateConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConfigurationResponse>;
    UpdateConfigurationAddress(req: operations.UpdateConfigurationAddressRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConfigurationAddressResponse>;
    UpdateConfigurationWebhook(req: operations.UpdateConfigurationWebhookRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConfigurationWebhookResponse>;
    UpdateConversation(req: operations.UpdateConversationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConversationResponse>;
    UpdateConversationMessage(req: operations.UpdateConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConversationMessageResponse>;
    UpdateConversationParticipant(req: operations.UpdateConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConversationParticipantResponse>;
    UpdateConversationScopedWebhook(req: operations.UpdateConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConversationScopedWebhookResponse>;
    UpdateCredential(req: operations.UpdateCredentialRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCredentialResponse>;
    UpdateRole(req: operations.UpdateRoleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoleResponse>;
    UpdateServiceConfiguration(req: operations.UpdateServiceConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceConfigurationResponse>;
    UpdateServiceConversation(req: operations.UpdateServiceConversationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceConversationResponse>;
    UpdateServiceConversationMessage(req: operations.UpdateServiceConversationMessageRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceConversationMessageResponse>;
    UpdateServiceConversationParticipant(req: operations.UpdateServiceConversationParticipantRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceConversationParticipantResponse>;
    UpdateServiceConversationScopedWebhook(req: operations.UpdateServiceConversationScopedWebhookRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceConversationScopedWebhookResponse>;
    UpdateServiceNotification(req: operations.UpdateServiceNotificationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceNotificationResponse>;
    UpdateServiceRole(req: operations.UpdateServiceRoleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceRoleResponse>;
    UpdateServiceUser(req: operations.UpdateServiceUserRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceUserResponse>;
    UpdateServiceUserConversation(req: operations.UpdateServiceUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceUserConversationResponse>;
    UpdateServiceWebhookConfiguration(req: operations.UpdateServiceWebhookConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceWebhookConfigurationResponse>;
    UpdateUser(req: operations.UpdateUserRequest, config?: AxiosRequestConfig): Promise<operations.UpdateUserResponse>;
    UpdateUserConversation(req: operations.UpdateUserConversationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateUserConversationResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateAccessToken(req: operations.CreateAccessTokenRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccessTokenResponse>;
    CreateBucket(req: operations.CreateBucketRequest, config?: AxiosRequestConfig): Promise<operations.CreateBucketResponse>;
    CreateChallenge(req: operations.CreateChallengeRequest, config?: AxiosRequestConfig): Promise<operations.CreateChallengeResponse>;
    CreateEntity(req: operations.CreateEntityRequest, config?: AxiosRequestConfig): Promise<operations.CreateEntityResponse>;
    CreateMessagingConfiguration(req: operations.CreateMessagingConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.CreateMessagingConfigurationResponse>;
    CreateNewFactor(req: operations.CreateNewFactorRequest, config?: AxiosRequestConfig): Promise<operations.CreateNewFactorResponse>;
    CreateNotification(req: operations.CreateNotificationRequest, config?: AxiosRequestConfig): Promise<operations.CreateNotificationResponse>;
    CreateRateLimit(req: operations.CreateRateLimitRequest, config?: AxiosRequestConfig): Promise<operations.CreateRateLimitResponse>;
    CreateSafelist(req: operations.CreateSafelistRequest, config?: AxiosRequestConfig): Promise<operations.CreateSafelistResponse>;
    CreateService(req: operations.CreateServiceRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceResponse>;
    CreateVerification(req: operations.CreateVerificationRequest, config?: AxiosRequestConfig): Promise<operations.CreateVerificationResponse>;
    CreateVerificationCheck(req: operations.CreateVerificationCheckRequest, config?: AxiosRequestConfig): Promise<operations.CreateVerificationCheckResponse>;
    CreateWebhook(req: operations.CreateWebhookRequest, config?: AxiosRequestConfig): Promise<operations.CreateWebhookResponse>;
    DeleteBucket(req: operations.DeleteBucketRequest, config?: AxiosRequestConfig): Promise<operations.DeleteBucketResponse>;
    DeleteEntity(req: operations.DeleteEntityRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEntityResponse>;
    DeleteFactor(req: operations.DeleteFactorRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFactorResponse>;
    DeleteMessagingConfiguration(req: operations.DeleteMessagingConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMessagingConfigurationResponse>;
    DeleteRateLimit(req: operations.DeleteRateLimitRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRateLimitResponse>;
    DeleteSafelist(req: operations.DeleteSafelistRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSafelistResponse>;
    DeleteService(req: operations.DeleteServiceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceResponse>;
    DeleteWebhook(req: operations.DeleteWebhookRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWebhookResponse>;
    FetchAccessToken(req: operations.FetchAccessTokenRequest, config?: AxiosRequestConfig): Promise<operations.FetchAccessTokenResponse>;
    FetchBucket(req: operations.FetchBucketRequest, config?: AxiosRequestConfig): Promise<operations.FetchBucketResponse>;
    FetchChallenge(req: operations.FetchChallengeRequest, config?: AxiosRequestConfig): Promise<operations.FetchChallengeResponse>;
    FetchEntity(req: operations.FetchEntityRequest, config?: AxiosRequestConfig): Promise<operations.FetchEntityResponse>;
    FetchFactor(req: operations.FetchFactorRequest, config?: AxiosRequestConfig): Promise<operations.FetchFactorResponse>;
    FetchForm(req: operations.FetchFormRequest, config?: AxiosRequestConfig): Promise<operations.FetchFormResponse>;
    FetchMessagingConfiguration(req: operations.FetchMessagingConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.FetchMessagingConfigurationResponse>;
    FetchRateLimit(req: operations.FetchRateLimitRequest, config?: AxiosRequestConfig): Promise<operations.FetchRateLimitResponse>;
    FetchSafelist(req: operations.FetchSafelistRequest, config?: AxiosRequestConfig): Promise<operations.FetchSafelistResponse>;
    FetchService(req: operations.FetchServiceRequest, config?: AxiosRequestConfig): Promise<operations.FetchServiceResponse>;
    FetchVerification(req: operations.FetchVerificationRequest, config?: AxiosRequestConfig): Promise<operations.FetchVerificationResponse>;
    FetchVerificationAttempt(req: operations.FetchVerificationAttemptRequest, config?: AxiosRequestConfig): Promise<operations.FetchVerificationAttemptResponse>;
    FetchVerificationAttemptsSummary(req: operations.FetchVerificationAttemptsSummaryRequest, config?: AxiosRequestConfig): Promise<operations.FetchVerificationAttemptsSummaryResponse>;
    FetchWebhook(req: operations.FetchWebhookRequest, config?: AxiosRequestConfig): Promise<operations.FetchWebhookResponse>;
    ListBucket(req: operations.ListBucketRequest, config?: AxiosRequestConfig): Promise<operations.ListBucketResponse>;
    ListChallenge(req: operations.ListChallengeRequest, config?: AxiosRequestConfig): Promise<operations.ListChallengeResponse>;
    ListEntity(req: operations.ListEntityRequest, config?: AxiosRequestConfig): Promise<operations.ListEntityResponse>;
    ListFactor(req: operations.ListFactorRequest, config?: AxiosRequestConfig): Promise<operations.ListFactorResponse>;
    ListMessagingConfiguration(req: operations.ListMessagingConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.ListMessagingConfigurationResponse>;
    ListRateLimit(req: operations.ListRateLimitRequest, config?: AxiosRequestConfig): Promise<operations.ListRateLimitResponse>;
    ListService(req: operations.ListServiceRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceResponse>;
    ListVerificationAttempt(req: operations.ListVerificationAttemptRequest, config?: AxiosRequestConfig): Promise<operations.ListVerificationAttemptResponse>;
    ListVerificationTemplate(req: operations.ListVerificationTemplateRequest, config?: AxiosRequestConfig): Promise<operations.ListVerificationTemplateResponse>;
    ListWebhook(req: operations.ListWebhookRequest, config?: AxiosRequestConfig): Promise<operations.ListWebhookResponse>;
    UpdateBucket(req: operations.UpdateBucketRequest, config?: AxiosRequestConfig): Promise<operations.UpdateBucketResponse>;
    UpdateChallenge(req: operations.UpdateChallengeRequest, config?: AxiosRequestConfig): Promise<operations.UpdateChallengeResponse>;
    UpdateFactor(req: operations.UpdateFactorRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFactorResponse>;
    UpdateMessagingConfiguration(req: operations.UpdateMessagingConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMessagingConfigurationResponse>;
    UpdateRateLimit(req: operations.UpdateRateLimitRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRateLimitResponse>;
    UpdateService(req: operations.UpdateServiceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceResponse>;
    UpdateVerification(req: operations.UpdateVerificationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateVerificationResponse>;
    UpdateWebhook(req: operations.UpdateWebhookRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWebhookResponse>;
}
export {};

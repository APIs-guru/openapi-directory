import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateComposition(req: operations.CreateCompositionRequest, config?: AxiosRequestConfig): Promise<operations.CreateCompositionResponse>;
    CreateCompositionHook(req: operations.CreateCompositionHookRequest, config?: AxiosRequestConfig): Promise<operations.CreateCompositionHookResponse>;
    CreateCompositionSettings(req: operations.CreateCompositionSettingsRequest, config?: AxiosRequestConfig): Promise<operations.CreateCompositionSettingsResponse>;
    CreateRecordingSettings(req: operations.CreateRecordingSettingsRequest, config?: AxiosRequestConfig): Promise<operations.CreateRecordingSettingsResponse>;
    CreateRoom(req: operations.CreateRoomRequest, config?: AxiosRequestConfig): Promise<operations.CreateRoomResponse>;
    DeleteComposition(req: operations.DeleteCompositionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCompositionResponse>;
    DeleteCompositionHook(req: operations.DeleteCompositionHookRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCompositionHookResponse>;
    DeleteRecording(req: operations.DeleteRecordingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRecordingResponse>;
    DeleteRoomRecording(req: operations.DeleteRoomRecordingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRoomRecordingResponse>;
    FetchComposition(req: operations.FetchCompositionRequest, config?: AxiosRequestConfig): Promise<operations.FetchCompositionResponse>;
    FetchCompositionHook(req: operations.FetchCompositionHookRequest, config?: AxiosRequestConfig): Promise<operations.FetchCompositionHookResponse>;
    FetchCompositionSettings(req: operations.FetchCompositionSettingsRequest, config?: AxiosRequestConfig): Promise<operations.FetchCompositionSettingsResponse>;
    FetchRecording(req: operations.FetchRecordingRequest, config?: AxiosRequestConfig): Promise<operations.FetchRecordingResponse>;
    FetchRecordingSettings(req: operations.FetchRecordingSettingsRequest, config?: AxiosRequestConfig): Promise<operations.FetchRecordingSettingsResponse>;
    FetchRoom(req: operations.FetchRoomRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomResponse>;
    FetchRoomParticipant(req: operations.FetchRoomParticipantRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomParticipantResponse>;
    FetchRoomParticipantPublishedTrack(req: operations.FetchRoomParticipantPublishedTrackRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomParticipantPublishedTrackResponse>;
    FetchRoomParticipantSubscribeRule(req: operations.FetchRoomParticipantSubscribeRuleRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomParticipantSubscribeRuleResponse>;
    FetchRoomParticipantSubscribedTrack(req: operations.FetchRoomParticipantSubscribedTrackRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomParticipantSubscribedTrackResponse>;
    FetchRoomRecording(req: operations.FetchRoomRecordingRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomRecordingResponse>;
    FetchRoomRecordingRule(req: operations.FetchRoomRecordingRuleRequest, config?: AxiosRequestConfig): Promise<operations.FetchRoomRecordingRuleResponse>;
    ListComposition(req: operations.ListCompositionRequest, config?: AxiosRequestConfig): Promise<operations.ListCompositionResponse>;
    ListCompositionHook(req: operations.ListCompositionHookRequest, config?: AxiosRequestConfig): Promise<operations.ListCompositionHookResponse>;
    ListRecording(req: operations.ListRecordingRequest, config?: AxiosRequestConfig): Promise<operations.ListRecordingResponse>;
    ListRoom(req: operations.ListRoomRequest, config?: AxiosRequestConfig): Promise<operations.ListRoomResponse>;
    ListRoomParticipant(req: operations.ListRoomParticipantRequest, config?: AxiosRequestConfig): Promise<operations.ListRoomParticipantResponse>;
    ListRoomParticipantPublishedTrack(req: operations.ListRoomParticipantPublishedTrackRequest, config?: AxiosRequestConfig): Promise<operations.ListRoomParticipantPublishedTrackResponse>;
    ListRoomParticipantSubscribedTrack(req: operations.ListRoomParticipantSubscribedTrackRequest, config?: AxiosRequestConfig): Promise<operations.ListRoomParticipantSubscribedTrackResponse>;
    ListRoomRecording(req: operations.ListRoomRecordingRequest, config?: AxiosRequestConfig): Promise<operations.ListRoomRecordingResponse>;
    UpdateCompositionHook(req: operations.UpdateCompositionHookRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCompositionHookResponse>;
    UpdateRoom(req: operations.UpdateRoomRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoomResponse>;
    UpdateRoomParticipant(req: operations.UpdateRoomParticipantRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoomParticipantResponse>;
    UpdateRoomParticipantAnonymize(req: operations.UpdateRoomParticipantAnonymizeRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoomParticipantAnonymizeResponse>;
    UpdateRoomParticipantSubscribeRule(req: operations.UpdateRoomParticipantSubscribeRuleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoomParticipantSubscribeRuleResponse>;
    UpdateRoomRecordingRule(req: operations.UpdateRoomRecordingRuleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRoomRecordingRuleResponse>;
}
export {};

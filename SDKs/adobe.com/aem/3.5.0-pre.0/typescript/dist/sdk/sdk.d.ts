import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
type OptsFunc = (sdk: SDK) => void;
export declare const ServerList: readonly ["https://adobe.com/", "http://adobe.local"];
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _security?: Security;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(...opts: OptsFunc[]);
    deleteAgent(req: operations.DeleteAgentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAgentResponse>;
    deleteNode(req: operations.DeleteNodeRequest, config?: AxiosRequestConfig): Promise<operations.DeleteNodeResponse>;
    getAemHealthCheck(req: operations.GetAemHealthCheckRequest, config?: AxiosRequestConfig): Promise<operations.GetAemHealthCheckResponse>;
    getAemProductInfo(config?: AxiosRequestConfig): Promise<operations.GetAemProductInfoResponse>;
    getAgent(req: operations.GetAgentRequest, config?: AxiosRequestConfig): Promise<operations.GetAgentResponse>;
    getAgents(req: operations.GetAgentsRequest, config?: AxiosRequestConfig): Promise<operations.GetAgentsResponse>;
    getAuthorizableKeystore(req: operations.GetAuthorizableKeystoreRequest, config?: AxiosRequestConfig): Promise<operations.GetAuthorizableKeystoreResponse>;
    getConfigMgr(config?: AxiosRequestConfig): Promise<operations.GetConfigMgrResponse>;
    getCrxdeStatus(config?: AxiosRequestConfig): Promise<operations.GetCrxdeStatusResponse>;
    getInstallStatus(config?: AxiosRequestConfig): Promise<operations.GetInstallStatusResponse>;
    getKeystore(req: operations.GetKeystoreRequest, config?: AxiosRequestConfig): Promise<operations.GetKeystoreResponse>;
    getLoginPage(config?: AxiosRequestConfig): Promise<operations.GetLoginPageResponse>;
    getNode(req: operations.GetNodeRequest, config?: AxiosRequestConfig): Promise<operations.GetNodeResponse>;
    getPackage(req: operations.GetPackageRequest, config?: AxiosRequestConfig): Promise<operations.GetPackageResponse>;
    getPackageFilter(req: operations.GetPackageFilterRequest, config?: AxiosRequestConfig): Promise<operations.GetPackageFilterResponse>;
    getPackageManagerServlet(config?: AxiosRequestConfig): Promise<operations.GetPackageManagerServletResponse>;
    getQuery(req: operations.GetQueryRequest, config?: AxiosRequestConfig): Promise<operations.GetQueryResponse>;
    getTruststore(config?: AxiosRequestConfig): Promise<operations.GetTruststoreResponse>;
    getTruststoreInfo(config?: AxiosRequestConfig): Promise<operations.GetTruststoreInfoResponse>;
    postAgent(req: operations.PostAgentRequest, config?: AxiosRequestConfig): Promise<operations.PostAgentResponse>;
    postAuthorizableKeystore(req: operations.PostAuthorizableKeystoreRequest, config?: AxiosRequestConfig): Promise<operations.PostAuthorizableKeystoreResponse>;
    postAuthorizables(req: operations.PostAuthorizablesRequest, config?: AxiosRequestConfig): Promise<operations.PostAuthorizablesResponse>;
    postBundle(req: operations.PostBundleRequest, config?: AxiosRequestConfig): Promise<operations.PostBundleResponse>;
    postConfigAdobeGraniteSamlAuthenticationHandler(req: operations.PostConfigAdobeGraniteSamlAuthenticationHandlerRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigAdobeGraniteSamlAuthenticationHandlerResponse>;
    postConfigAemHealthCheckServlet(req: operations.PostConfigAemHealthCheckServletRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigAemHealthCheckServletResponse>;
    postConfigAemPasswordReset(req: operations.PostConfigAemPasswordResetRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigAemPasswordResetResponse>;
    postConfigApacheFelixJettyBasedHttpService(req: operations.PostConfigApacheFelixJettyBasedHttpServiceRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheFelixJettyBasedHttpServiceResponse>;
    postConfigApacheHttpComponentsProxyConfiguration(req: operations.PostConfigApacheHttpComponentsProxyConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheHttpComponentsProxyConfigurationResponse>;
    postConfigApacheSlingDavExServlet(req: operations.PostConfigApacheSlingDavExServletRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheSlingDavExServletResponse>;
    postConfigApacheSlingGetServlet(req: operations.PostConfigApacheSlingGetServletRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheSlingGetServletResponse>;
    postConfigApacheSlingReferrerFilter(req: operations.PostConfigApacheSlingReferrerFilterRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheSlingReferrerFilterResponse>;
    postConfigProperty(req: operations.PostConfigPropertyRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigPropertyResponse>;
    postCqActions(req: operations.PostCqActionsRequest, config?: AxiosRequestConfig): Promise<operations.PostCqActionsResponse>;
    postJmxRepository(req: operations.PostJmxRepositoryRequest, config?: AxiosRequestConfig): Promise<operations.PostJmxRepositoryResponse>;
    postNode(req: operations.PostNodeRequest, config?: AxiosRequestConfig): Promise<operations.PostNodeResponse>;
    postNodeRw(req: operations.PostNodeRwRequest, config?: AxiosRequestConfig): Promise<operations.PostNodeRwResponse>;
    postPackageService(req: operations.PostPackageServiceRequest, config?: AxiosRequestConfig): Promise<operations.PostPackageServiceResponse>;
    postPackageServiceJson(req: operations.PostPackageServiceJsonRequest, config?: AxiosRequestConfig): Promise<operations.PostPackageServiceJsonResponse>;
    postPackageUpdate(req: operations.PostPackageUpdateRequest, config?: AxiosRequestConfig): Promise<operations.PostPackageUpdateResponse>;
    postPath(req: operations.PostPathRequest, config?: AxiosRequestConfig): Promise<operations.PostPathResponse>;
    postQuery(req: operations.PostQueryRequest, config?: AxiosRequestConfig): Promise<operations.PostQueryResponse>;
    postSamlConfiguration(req: operations.PostSamlConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PostSamlConfigurationResponse>;
    postSetPassword(req: operations.PostSetPasswordRequest, config?: AxiosRequestConfig): Promise<operations.PostSetPasswordResponse>;
    postTreeActivation(req: operations.PostTreeActivationRequest, config?: AxiosRequestConfig): Promise<operations.PostTreeActivationResponse>;
    postTruststore(req: operations.PostTruststoreRequest, config?: AxiosRequestConfig): Promise<operations.PostTruststoreResponse>;
    postTruststorePkcs12(req: operations.PostTruststorePkcs12Request, config?: AxiosRequestConfig): Promise<operations.PostTruststorePkcs12Response>;
    sslSetup(req: operations.SslSetupRequest, config?: AxiosRequestConfig): Promise<operations.SslSetupResponse>;
}
export {};

import { AxiosInstance } from "axios";
import { Security } from "./models/shared";
import { ApiInfo } from "./apiinfo";
import { Compliance } from "./compliance";
import { Directives } from "./directives";
import { Groups } from "./groups";
import { Inventories } from "./inventories";
import { Nodes } from "./nodes";
import { Parameters } from "./parameters";
import { Rules } from "./rules";
import { Settings } from "./settings";
import { System } from "./system";
import { Techniques } from "./techniques";
import { Branding } from "./branding";
import { Cve } from "./cve";
import { ChangeRequests } from "./changerequests";
import { CreateNode } from "./createnode";
import { DataSources } from "./datasources";
import { ScaleOutRelay } from "./scaleoutrelay";
import { UserManagement } from "./usermanagement";
type OptsFunc = (sdk: SDK) => void;
export declare const ServerList: readonly ["https://rudder.example.local/rudder/api/latest/"];
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    apiInfo: ApiInfo;
    compliance: Compliance;
    directives: Directives;
    groups: Groups;
    inventories: Inventories;
    nodes: Nodes;
    parameters: Parameters;
    rules: Rules;
    settings: Settings;
    system: System;
    techniques: Techniques;
    branding: Branding;
    cve: Cve;
    changeRequests: ChangeRequests;
    createNode: CreateNode;
    dataSources: DataSources;
    scaleOutRelay: ScaleOutRelay;
    userManagement: UserManagement;
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _security?: Security;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(...opts: OptsFunc[]);
}
export {};

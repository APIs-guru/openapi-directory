import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
type OptsFunc = (sdk: SDK) => void;
export declare const ServerList: readonly ["https://keyserv.solutions"];
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(...opts: OptsFunc[]);
    keysApiCurrent(req: operations.KeysApiCurrentRequest, config?: AxiosRequestConfig): Promise<operations.KeysApiCurrentResponse>;
    keysApiCustom(req: operations.KeysApiCustomRequest, config?: AxiosRequestConfig): Promise<operations.KeysApiCustomResponse>;
    keysApiExpiry(req: operations.KeysApiExpiryRequest, config?: AxiosRequestConfig): Promise<operations.KeysApiExpiryResponse>;
    keysApiFind(req: operations.KeysApiFindRequest, config?: AxiosRequestConfig): Promise<operations.KeysApiFindResponse>;
    productsApiCount(req: operations.ProductsApiCountRequest, config?: AxiosRequestConfig): Promise<operations.ProductsApiCountResponse>;
    productsApiDeleteProduct(req: operations.ProductsApiDeleteProductRequest, config?: AxiosRequestConfig): Promise<operations.ProductsApiDeleteProductResponse>;
    productsApiDeleteProduct2(req: operations.ProductsApiDeleteProduct2Request, config?: AxiosRequestConfig): Promise<operations.ProductsApiDeleteProduct2Response>;
    productsApiFind(req: operations.ProductsApiFindRequest, config?: AxiosRequestConfig): Promise<operations.ProductsApiFindResponse>;
    productsApiList(req: operations.ProductsApiListRequest, config?: AxiosRequestConfig): Promise<operations.ProductsApiListResponse>;
    productsApiPatchProduct(req: operations.ProductsApiPatchProductRequest, config?: AxiosRequestConfig): Promise<operations.ProductsApiPatchProductResponse>;
    productsApiPatchProduct2(req: operations.ProductsApiPatchProduct2Request, config?: AxiosRequestConfig): Promise<operations.ProductsApiPatchProduct2Response>;
    productsApiSave(req: operations.ProductsApiSaveRequest, config?: AxiosRequestConfig): Promise<operations.ProductsApiSaveResponse>;
    subscriptionsApiCount(req: operations.SubscriptionsApiCountRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiCountResponse>;
    subscriptionsApiDeleteSubscription(req: operations.SubscriptionsApiDeleteSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiDeleteSubscriptionResponse>;
    subscriptionsApiDeleteSubscription2(req: operations.SubscriptionsApiDeleteSubscription2Request, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiDeleteSubscription2Response>;
    subscriptionsApiDisable(req: operations.SubscriptionsApiDisableRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiDisableResponse>;
    subscriptionsApiDisable2(req: operations.SubscriptionsApiDisable2Request, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiDisable2Response>;
    subscriptionsApiEnable(req: operations.SubscriptionsApiEnableRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiEnableResponse>;
    subscriptionsApiEnable2(req: operations.SubscriptionsApiEnable2Request, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiEnable2Response>;
    subscriptionsApiFind(req: operations.SubscriptionsApiFindRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiFindResponse>;
    subscriptionsApiList(req: operations.SubscriptionsApiListRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiListResponse>;
    subscriptionsApiPutSubscription(req: operations.SubscriptionsApiPutSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiPutSubscriptionResponse>;
    subscriptionsApiPutSubscription2(req: operations.SubscriptionsApiPutSubscription2Request, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiPutSubscription2Response>;
    subscriptionsApiSave(req: operations.SubscriptionsApiSaveRequest, config?: AxiosRequestConfig): Promise<operations.SubscriptionsApiSaveResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    DotGetAvailableLocales(config?: AxiosRequestConfig): Promise<operations.DotGetAvailableLocalesResponse>;
    DotGetCommonSettings(config?: AxiosRequestConfig): Promise<operations.DotGetCommonSettingsResponse>;
    DotGetGlobalAlerts(req: operations.DotGetGlobalAlertsRequest, config?: AxiosRequestConfig): Promise<operations.DotGetGlobalAlertsResponse>;
    DotGetUserSystemOverrides(config?: AxiosRequestConfig): Promise<operations.DotGetUserSystemOverridesResponse>;
    AppGetApplicationApiUsage(req: operations.AppGetApplicationApiUsageRequest, config?: AxiosRequestConfig): Promise<operations.AppGetApplicationApiUsageResponse>;
    AppGetBungieApplications(config?: AxiosRequestConfig): Promise<operations.AppGetBungieApplicationsResponse>;
    CommunityContentGetCommunityContent(req: operations.CommunityContentGetCommunityContentRequest, config?: AxiosRequestConfig): Promise<operations.CommunityContentGetCommunityContentResponse>;
    ContentGetContentById(req: operations.ContentGetContentByIdRequest, config?: AxiosRequestConfig): Promise<operations.ContentGetContentByIdResponse>;
    ContentGetContentByTagAndType(req: operations.ContentGetContentByTagAndTypeRequest, config?: AxiosRequestConfig): Promise<operations.ContentGetContentByTagAndTypeResponse>;
    ContentGetContentType(req: operations.ContentGetContentTypeRequest, config?: AxiosRequestConfig): Promise<operations.ContentGetContentTypeResponse>;
    ContentSearchContentByTagAndType(req: operations.ContentSearchContentByTagAndTypeRequest, config?: AxiosRequestConfig): Promise<operations.ContentSearchContentByTagAndTypeResponse>;
    ContentSearchContentWithText(req: operations.ContentSearchContentWithTextRequest, config?: AxiosRequestConfig): Promise<operations.ContentSearchContentWithTextResponse>;
    ContentSearchHelpArticles(req: operations.ContentSearchHelpArticlesRequest, config?: AxiosRequestConfig): Promise<operations.ContentSearchHelpArticlesResponse>;
    Destiny2AwaGetActionToken(req: operations.Destiny2AwaGetActionTokenRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2AwaGetActionTokenResponse>;
    Destiny2AwaInitializeRequest(req: operations.Destiny2AwaInitializeRequestRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2AwaInitializeRequestResponse>;
    Destiny2AwaProvideAuthorizationResult(config?: AxiosRequestConfig): Promise<operations.Destiny2AwaProvideAuthorizationResultResponse>;
    Destiny2EquipItem(req: operations.Destiny2EquipItemRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2EquipItemResponse>;
    Destiny2EquipItems(req: operations.Destiny2EquipItemsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2EquipItemsResponse>;
    Destiny2GetActivityHistory(req: operations.Destiny2GetActivityHistoryRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetActivityHistoryResponse>;
    Destiny2GetCharacter(req: operations.Destiny2GetCharacterRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetCharacterResponse>;
    Destiny2GetClanAggregateStats(req: operations.Destiny2GetClanAggregateStatsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetClanAggregateStatsResponse>;
    Destiny2GetClanLeaderboards(req: operations.Destiny2GetClanLeaderboardsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetClanLeaderboardsResponse>;
    Destiny2GetClanWeeklyRewardState(req: operations.Destiny2GetClanWeeklyRewardStateRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetClanWeeklyRewardStateResponse>;
    Destiny2GetCollectibleNodeDetails(req: operations.Destiny2GetCollectibleNodeDetailsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetCollectibleNodeDetailsResponse>;
    Destiny2GetDestinyAggregateActivityStats(req: operations.Destiny2GetDestinyAggregateActivityStatsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetDestinyAggregateActivityStatsResponse>;
    Destiny2GetDestinyEntityDefinition(req: operations.Destiny2GetDestinyEntityDefinitionRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetDestinyEntityDefinitionResponse>;
    Destiny2GetDestinyManifest(config?: AxiosRequestConfig): Promise<operations.Destiny2GetDestinyManifestResponse>;
    Destiny2GetHistoricalStats(req: operations.Destiny2GetHistoricalStatsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetHistoricalStatsResponse>;
    Destiny2GetHistoricalStatsDefinition(config?: AxiosRequestConfig): Promise<operations.Destiny2GetHistoricalStatsDefinitionResponse>;
    Destiny2GetHistoricalStatsForAccount(req: operations.Destiny2GetHistoricalStatsForAccountRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetHistoricalStatsForAccountResponse>;
    Destiny2GetItem(req: operations.Destiny2GetItemRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetItemResponse>;
    Destiny2GetLeaderboards(req: operations.Destiny2GetLeaderboardsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetLeaderboardsResponse>;
    Destiny2GetLeaderboardsForCharacter(req: operations.Destiny2GetLeaderboardsForCharacterRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetLeaderboardsForCharacterResponse>;
    Destiny2GetLinkedProfiles(req: operations.Destiny2GetLinkedProfilesRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetLinkedProfilesResponse>;
    Destiny2GetPostGameCarnageReport(req: operations.Destiny2GetPostGameCarnageReportRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetPostGameCarnageReportResponse>;
    Destiny2GetProfile(req: operations.Destiny2GetProfileRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetProfileResponse>;
    Destiny2GetPublicMilestoneContent(req: operations.Destiny2GetPublicMilestoneContentRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetPublicMilestoneContentResponse>;
    Destiny2GetPublicMilestones(config?: AxiosRequestConfig): Promise<operations.Destiny2GetPublicMilestonesResponse>;
    Destiny2GetPublicVendors(req: operations.Destiny2GetPublicVendorsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetPublicVendorsResponse>;
    Destiny2GetUniqueWeaponHistory(req: operations.Destiny2GetUniqueWeaponHistoryRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetUniqueWeaponHistoryResponse>;
    Destiny2GetVendor(req: operations.Destiny2GetVendorRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetVendorResponse>;
    Destiny2GetVendors(req: operations.Destiny2GetVendorsRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2GetVendorsResponse>;
    Destiny2InsertSocketPlug(req: operations.Destiny2InsertSocketPlugRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2InsertSocketPlugResponse>;
    Destiny2PullFromPostmaster(req: operations.Destiny2PullFromPostmasterRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2PullFromPostmasterResponse>;
    Destiny2ReportOffensivePostGameCarnageReportPlayer(req: operations.Destiny2ReportOffensivePostGameCarnageReportPlayerRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2ReportOffensivePostGameCarnageReportPlayerResponse>;
    Destiny2SearchDestinyEntities(req: operations.Destiny2SearchDestinyEntitiesRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2SearchDestinyEntitiesResponse>;
    Destiny2SearchDestinyPlayer(req: operations.Destiny2SearchDestinyPlayerRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2SearchDestinyPlayerResponse>;
    Destiny2SetItemLockState(req: operations.Destiny2SetItemLockStateRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2SetItemLockStateResponse>;
    Destiny2SetQuestTrackedState(req: operations.Destiny2SetQuestTrackedStateRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2SetQuestTrackedStateResponse>;
    Destiny2TransferItem(req: operations.Destiny2TransferItemRequest, config?: AxiosRequestConfig): Promise<operations.Destiny2TransferItemResponse>;
    FireteamGetActivePrivateClanFireteamCount(req: operations.FireteamGetActivePrivateClanFireteamCountRequest, config?: AxiosRequestConfig): Promise<operations.FireteamGetActivePrivateClanFireteamCountResponse>;
    FireteamGetAvailableClanFireteams(req: operations.FireteamGetAvailableClanFireteamsRequest, config?: AxiosRequestConfig): Promise<operations.FireteamGetAvailableClanFireteamsResponse>;
    FireteamGetClanFireteam(req: operations.FireteamGetClanFireteamRequest, config?: AxiosRequestConfig): Promise<operations.FireteamGetClanFireteamResponse>;
    FireteamGetMyClanFireteams(req: operations.FireteamGetMyClanFireteamsRequest, config?: AxiosRequestConfig): Promise<operations.FireteamGetMyClanFireteamsResponse>;
    FireteamSearchPublicAvailableClanFireteams(req: operations.FireteamSearchPublicAvailableClanFireteamsRequest, config?: AxiosRequestConfig): Promise<operations.FireteamSearchPublicAvailableClanFireteamsResponse>;
    ForumGetCoreTopicsPaged(req: operations.ForumGetCoreTopicsPagedRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetCoreTopicsPagedResponse>;
    ForumGetForumTagSuggestions(req: operations.ForumGetForumTagSuggestionsRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetForumTagSuggestionsResponse>;
    ForumGetPoll(req: operations.ForumGetPollRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetPollResponse>;
    ForumGetPostAndParent(req: operations.ForumGetPostAndParentRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetPostAndParentResponse>;
    ForumGetPostAndParentAwaitingApproval(req: operations.ForumGetPostAndParentAwaitingApprovalRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetPostAndParentAwaitingApprovalResponse>;
    ForumGetPostsThreadedPaged(req: operations.ForumGetPostsThreadedPagedRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetPostsThreadedPagedResponse>;
    ForumGetPostsThreadedPagedFromChild(req: operations.ForumGetPostsThreadedPagedFromChildRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetPostsThreadedPagedFromChildResponse>;
    ForumGetRecruitmentThreadSummaries(config?: AxiosRequestConfig): Promise<operations.ForumGetRecruitmentThreadSummariesResponse>;
    ForumGetTopicForContent(req: operations.ForumGetTopicForContentRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetTopicForContentResponse>;
    ForumGetTopicsPaged(req: operations.ForumGetTopicsPagedRequest, config?: AxiosRequestConfig): Promise<operations.ForumGetTopicsPagedResponse>;
    GroupV2AbdicateFoundership(req: operations.GroupV2AbdicateFoundershipRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2AbdicateFoundershipResponse>;
    GroupV2AddOptionalConversation(req: operations.GroupV2AddOptionalConversationRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2AddOptionalConversationResponse>;
    GroupV2ApproveAllPending(req: operations.GroupV2ApproveAllPendingRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2ApproveAllPendingResponse>;
    GroupV2ApprovePending(req: operations.GroupV2ApprovePendingRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2ApprovePendingResponse>;
    GroupV2ApprovePendingForList(req: operations.GroupV2ApprovePendingForListRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2ApprovePendingForListResponse>;
    GroupV2BanMember(req: operations.GroupV2BanMemberRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2BanMemberResponse>;
    GroupV2DenyAllPending(req: operations.GroupV2DenyAllPendingRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2DenyAllPendingResponse>;
    GroupV2DenyPendingForList(req: operations.GroupV2DenyPendingForListRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2DenyPendingForListResponse>;
    GroupV2EditClanBanner(req: operations.GroupV2EditClanBannerRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2EditClanBannerResponse>;
    GroupV2EditFounderOptions(req: operations.GroupV2EditFounderOptionsRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2EditFounderOptionsResponse>;
    GroupV2EditGroup(req: operations.GroupV2EditGroupRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2EditGroupResponse>;
    GroupV2EditGroupMembership(req: operations.GroupV2EditGroupMembershipRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2EditGroupMembershipResponse>;
    GroupV2EditOptionalConversation(req: operations.GroupV2EditOptionalConversationRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2EditOptionalConversationResponse>;
    GroupV2GetAdminsAndFounderOfGroup(req: operations.GroupV2GetAdminsAndFounderOfGroupRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetAdminsAndFounderOfGroupResponse>;
    GroupV2GetAvailableAvatars(config?: AxiosRequestConfig): Promise<operations.GroupV2GetAvailableAvatarsResponse>;
    GroupV2GetAvailableThemes(config?: AxiosRequestConfig): Promise<operations.GroupV2GetAvailableThemesResponse>;
    GroupV2GetBannedMembersOfGroup(req: operations.GroupV2GetBannedMembersOfGroupRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetBannedMembersOfGroupResponse>;
    GroupV2GetGroup(req: operations.GroupV2GetGroupRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetGroupResponse>;
    GroupV2GetGroupByName(req: operations.GroupV2GetGroupByNameRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetGroupByNameResponse>;
    GroupV2GetGroupByNameV2(config?: AxiosRequestConfig): Promise<operations.GroupV2GetGroupByNameV2Response>;
    GroupV2GetGroupOptionalConversations(req: operations.GroupV2GetGroupOptionalConversationsRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetGroupOptionalConversationsResponse>;
    GroupV2GetGroupsForMember(req: operations.GroupV2GetGroupsForMemberRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetGroupsForMemberResponse>;
    GroupV2GetInvitedIndividuals(req: operations.GroupV2GetInvitedIndividualsRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetInvitedIndividualsResponse>;
    GroupV2GetMembersOfGroup(req: operations.GroupV2GetMembersOfGroupRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetMembersOfGroupResponse>;
    GroupV2GetPendingMemberships(req: operations.GroupV2GetPendingMembershipsRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetPendingMembershipsResponse>;
    GroupV2GetPotentialGroupsForMember(req: operations.GroupV2GetPotentialGroupsForMemberRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetPotentialGroupsForMemberResponse>;
    GroupV2GetRecommendedGroups(req: operations.GroupV2GetRecommendedGroupsRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetRecommendedGroupsResponse>;
    GroupV2GetUserClanInviteSetting(req: operations.GroupV2GetUserClanInviteSettingRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2GetUserClanInviteSettingResponse>;
    GroupV2GroupSearch(config?: AxiosRequestConfig): Promise<operations.GroupV2GroupSearchResponse>;
    GroupV2IndividualGroupInvite(req: operations.GroupV2IndividualGroupInviteRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2IndividualGroupInviteResponse>;
    GroupV2IndividualGroupInviteCancel(req: operations.GroupV2IndividualGroupInviteCancelRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2IndividualGroupInviteCancelResponse>;
    GroupV2KickMember(req: operations.GroupV2KickMemberRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2KickMemberResponse>;
    GroupV2RecoverGroupForFounder(req: operations.GroupV2RecoverGroupForFounderRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2RecoverGroupForFounderResponse>;
    GroupV2UnbanMember(req: operations.GroupV2UnbanMemberRequest, config?: AxiosRequestConfig): Promise<operations.GroupV2UnbanMemberResponse>;
    TokensApplyMissingPartnerOffersWithoutClaim(req: operations.TokensApplyMissingPartnerOffersWithoutClaimRequest, config?: AxiosRequestConfig): Promise<operations.TokensApplyMissingPartnerOffersWithoutClaimResponse>;
    TokensClaimPartnerOffer(req: operations.TokensClaimPartnerOfferRequest, config?: AxiosRequestConfig): Promise<operations.TokensClaimPartnerOfferResponse>;
    TokensGetPartnerOfferSkuHistory(req: operations.TokensGetPartnerOfferSkuHistoryRequest, config?: AxiosRequestConfig): Promise<operations.TokensGetPartnerOfferSkuHistoryResponse>;
    TrendingGetTrendingCategories(config?: AxiosRequestConfig): Promise<operations.TrendingGetTrendingCategoriesResponse>;
    TrendingGetTrendingCategory(req: operations.TrendingGetTrendingCategoryRequest, config?: AxiosRequestConfig): Promise<operations.TrendingGetTrendingCategoryResponse>;
    TrendingGetTrendingEntryDetail(req: operations.TrendingGetTrendingEntryDetailRequest, config?: AxiosRequestConfig): Promise<operations.TrendingGetTrendingEntryDetailResponse>;
    UserGetAvailableThemes(config?: AxiosRequestConfig): Promise<operations.UserGetAvailableThemesResponse>;
    UserGetBungieNetUserById(req: operations.UserGetBungieNetUserByIdRequest, config?: AxiosRequestConfig): Promise<operations.UserGetBungieNetUserByIdResponse>;
    UserGetCredentialTypesForTargetAccount(req: operations.UserGetCredentialTypesForTargetAccountRequest, config?: AxiosRequestConfig): Promise<operations.UserGetCredentialTypesForTargetAccountResponse>;
    UserGetMembershipDataById(req: operations.UserGetMembershipDataByIdRequest, config?: AxiosRequestConfig): Promise<operations.UserGetMembershipDataByIdResponse>;
    UserGetMembershipDataForCurrentUser(req: operations.UserGetMembershipDataForCurrentUserRequest, config?: AxiosRequestConfig): Promise<operations.UserGetMembershipDataForCurrentUserResponse>;
    UserGetMembershipFromHardLinkedCredential(req: operations.UserGetMembershipFromHardLinkedCredentialRequest, config?: AxiosRequestConfig): Promise<operations.UserGetMembershipFromHardLinkedCredentialResponse>;
    UserSearchUsers(req: operations.UserSearchUsersRequest, config?: AxiosRequestConfig): Promise<operations.UserSearchUsersResponse>;
}
export {};

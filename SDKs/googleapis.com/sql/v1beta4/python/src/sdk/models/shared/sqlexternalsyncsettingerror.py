from dataclasses import dataclass, field
from typing import Optional
from enum import Enum
from dataclasses_json import dataclass_json
from sdk import utils

class SQLExternalSyncSettingErrorTypeEnum(str, Enum):
    SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED = "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED"
    CONNECTION_FAILURE = "CONNECTION_FAILURE"
    BINLOG_NOT_ENABLED = "BINLOG_NOT_ENABLED"
    INCOMPATIBLE_DATABASE_VERSION = "INCOMPATIBLE_DATABASE_VERSION"
    REPLICA_ALREADY_SETUP = "REPLICA_ALREADY_SETUP"
    INSUFFICIENT_PRIVILEGE = "INSUFFICIENT_PRIVILEGE"
    UNSUPPORTED_MIGRATION_TYPE = "UNSUPPORTED_MIGRATION_TYPE"
    NO_PGLOGICAL_INSTALLED = "NO_PGLOGICAL_INSTALLED"
    PGLOGICAL_NODE_ALREADY_EXISTS = "PGLOGICAL_NODE_ALREADY_EXISTS"
    INVALID_WAL_LEVEL = "INVALID_WAL_LEVEL"
    INVALID_SHARED_PRELOAD_LIBRARY = "INVALID_SHARED_PRELOAD_LIBRARY"
    INSUFFICIENT_MAX_REPLICATION_SLOTS = "INSUFFICIENT_MAX_REPLICATION_SLOTS"
    INSUFFICIENT_MAX_WAL_SENDERS = "INSUFFICIENT_MAX_WAL_SENDERS"
    INSUFFICIENT_MAX_WORKER_PROCESSES = "INSUFFICIENT_MAX_WORKER_PROCESSES"
    UNSUPPORTED_EXTENSIONS = "UNSUPPORTED_EXTENSIONS"
    INVALID_RDS_LOGICAL_REPLICATION = "INVALID_RDS_LOGICAL_REPLICATION"
    INVALID_LOGGING_SETUP = "INVALID_LOGGING_SETUP"
    INVALID_DB_PARAM = "INVALID_DB_PARAM"
    UNSUPPORTED_GTID_MODE = "UNSUPPORTED_GTID_MODE"
    SQLSERVER_AGENT_NOT_RUNNING = "SQLSERVER_AGENT_NOT_RUNNING"
    UNSUPPORTED_TABLE_DEFINITION = "UNSUPPORTED_TABLE_DEFINITION"
    UNSUPPORTED_DEFINER = "UNSUPPORTED_DEFINER"
    SQLSERVER_SERVERNAME_MISMATCH = "SQLSERVER_SERVERNAME_MISMATCH"
    PRIMARY_ALREADY_SETUP = "PRIMARY_ALREADY_SETUP"
    UNSUPPORTED_BINLOG_FORMAT = "UNSUPPORTED_BINLOG_FORMAT"
    BINLOG_RETENTION_SETTING = "BINLOG_RETENTION_SETTING"
    UNSUPPORTED_STORAGE_ENGINE = "UNSUPPORTED_STORAGE_ENGINE"
    LIMITED_SUPPORT_TABLES = "LIMITED_SUPPORT_TABLES"


@dataclass_json
@dataclass
class SQLExternalSyncSettingError:
    r"""SQLExternalSyncSettingError
    External primary instance migration setting error/warning.
    """
    
    detail: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('detail') }})
    kind: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('kind') }})
    type: Optional[SQLExternalSyncSettingErrorTypeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('type') }})
    

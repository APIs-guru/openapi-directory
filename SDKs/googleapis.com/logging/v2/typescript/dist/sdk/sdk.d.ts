import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    LoggingEntriesCopy(req: operations.LoggingEntriesCopyRequest, config?: AxiosRequestConfig): Promise<operations.LoggingEntriesCopyResponse>;
    LoggingEntriesList(req: operations.LoggingEntriesListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingEntriesListResponse>;
    LoggingEntriesTail(req: operations.LoggingEntriesTailRequest, config?: AxiosRequestConfig): Promise<operations.LoggingEntriesTailResponse>;
    LoggingEntriesWrite(req: operations.LoggingEntriesWriteRequest, config?: AxiosRequestConfig): Promise<operations.LoggingEntriesWriteResponse>;
    LoggingGetCmekSettings(req: operations.LoggingGetCmekSettingsRequest, config?: AxiosRequestConfig): Promise<operations.LoggingGetCmekSettingsResponse>;
    LoggingGetSettings(req: operations.LoggingGetSettingsRequest, config?: AxiosRequestConfig): Promise<operations.LoggingGetSettingsResponse>;
    LoggingMonitoredResourceDescriptorsList(req: operations.LoggingMonitoredResourceDescriptorsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingMonitoredResourceDescriptorsListResponse>;
    LoggingProjectsExclusionsCreate(req: operations.LoggingProjectsExclusionsCreateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsExclusionsCreateResponse>;
    LoggingProjectsExclusionsList(req: operations.LoggingProjectsExclusionsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsExclusionsListResponse>;
    LoggingProjectsLocationsBucketsCreate(req: operations.LoggingProjectsLocationsBucketsCreateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsCreateResponse>;
    LoggingProjectsLocationsBucketsList(req: operations.LoggingProjectsLocationsBucketsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsListResponse>;
    LoggingProjectsLocationsBucketsUndelete(req: operations.LoggingProjectsLocationsBucketsUndeleteRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsUndeleteResponse>;
    LoggingProjectsLocationsBucketsViewsCreate(req: operations.LoggingProjectsLocationsBucketsViewsCreateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsViewsCreateResponse>;
    LoggingProjectsLocationsBucketsViewsDelete(req: operations.LoggingProjectsLocationsBucketsViewsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsViewsDeleteResponse>;
    LoggingProjectsLocationsBucketsViewsList(req: operations.LoggingProjectsLocationsBucketsViewsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsViewsListResponse>;
    LoggingProjectsLocationsBucketsViewsPatch(req: operations.LoggingProjectsLocationsBucketsViewsPatchRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsBucketsViewsPatchResponse>;
    LoggingProjectsLocationsList(req: operations.LoggingProjectsLocationsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsListResponse>;
    LoggingProjectsLocationsOperationsCancel(req: operations.LoggingProjectsLocationsOperationsCancelRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsOperationsCancelResponse>;
    LoggingProjectsLocationsOperationsGet(req: operations.LoggingProjectsLocationsOperationsGetRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsOperationsGetResponse>;
    LoggingProjectsLocationsOperationsList(req: operations.LoggingProjectsLocationsOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLocationsOperationsListResponse>;
    LoggingProjectsLogsDelete(req: operations.LoggingProjectsLogsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLogsDeleteResponse>;
    LoggingProjectsLogsList(req: operations.LoggingProjectsLogsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsLogsListResponse>;
    LoggingProjectsMetricsCreate(req: operations.LoggingProjectsMetricsCreateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsMetricsCreateResponse>;
    LoggingProjectsMetricsDelete(req: operations.LoggingProjectsMetricsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsMetricsDeleteResponse>;
    LoggingProjectsMetricsGet(req: operations.LoggingProjectsMetricsGetRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsMetricsGetResponse>;
    LoggingProjectsMetricsList(req: operations.LoggingProjectsMetricsListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsMetricsListResponse>;
    LoggingProjectsMetricsUpdate(req: operations.LoggingProjectsMetricsUpdateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsMetricsUpdateResponse>;
    LoggingProjectsSinksPatch(req: operations.LoggingProjectsSinksPatchRequest, config?: AxiosRequestConfig): Promise<operations.LoggingProjectsSinksPatchResponse>;
    LoggingSinksCreate(req: operations.LoggingSinksCreateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingSinksCreateResponse>;
    LoggingSinksDelete(req: operations.LoggingSinksDeleteRequest, config?: AxiosRequestConfig): Promise<operations.LoggingSinksDeleteResponse>;
    LoggingSinksGet(req: operations.LoggingSinksGetRequest, config?: AxiosRequestConfig): Promise<operations.LoggingSinksGetResponse>;
    LoggingSinksList(req: operations.LoggingSinksListRequest, config?: AxiosRequestConfig): Promise<operations.LoggingSinksListResponse>;
    LoggingSinksUpdate(req: operations.LoggingSinksUpdateRequest, config?: AxiosRequestConfig): Promise<operations.LoggingSinksUpdateResponse>;
    LoggingUpdateCmekSettings(req: operations.LoggingUpdateCmekSettingsRequest, config?: AxiosRequestConfig): Promise<operations.LoggingUpdateCmekSettingsResponse>;
    LoggingUpdateSettings(req: operations.LoggingUpdateSettingsRequest, config?: AxiosRequestConfig): Promise<operations.LoggingUpdateSettingsResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AppengineAppsAuthorizedCertificatesCreate(req: operations.AppengineAppsAuthorizedCertificatesCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesCreateResponse>;
    AppengineAppsAuthorizedCertificatesDelete(req: operations.AppengineAppsAuthorizedCertificatesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesDeleteResponse>;
    AppengineAppsAuthorizedCertificatesGet(req: operations.AppengineAppsAuthorizedCertificatesGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesGetResponse>;
    AppengineAppsAuthorizedCertificatesList(req: operations.AppengineAppsAuthorizedCertificatesListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesListResponse>;
    AppengineAppsAuthorizedCertificatesPatch(req: operations.AppengineAppsAuthorizedCertificatesPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesPatchResponse>;
    AppengineAppsAuthorizedDomainsList(req: operations.AppengineAppsAuthorizedDomainsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedDomainsListResponse>;
    AppengineAppsCreate(req: operations.AppengineAppsCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsCreateResponse>;
    AppengineAppsDomainMappingsCreate(req: operations.AppengineAppsDomainMappingsCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsCreateResponse>;
    AppengineAppsDomainMappingsDelete(req: operations.AppengineAppsDomainMappingsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsDeleteResponse>;
    AppengineAppsDomainMappingsGet(req: operations.AppengineAppsDomainMappingsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsGetResponse>;
    AppengineAppsDomainMappingsList(req: operations.AppengineAppsDomainMappingsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsListResponse>;
    AppengineAppsDomainMappingsPatch(req: operations.AppengineAppsDomainMappingsPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsPatchResponse>;
    AppengineAppsFirewallIngressRulesBatchUpdate(req: operations.AppengineAppsFirewallIngressRulesBatchUpdateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsFirewallIngressRulesBatchUpdateResponse>;
    AppengineAppsFirewallIngressRulesCreate(req: operations.AppengineAppsFirewallIngressRulesCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsFirewallIngressRulesCreateResponse>;
    AppengineAppsFirewallIngressRulesDelete(req: operations.AppengineAppsFirewallIngressRulesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsFirewallIngressRulesDeleteResponse>;
    AppengineAppsFirewallIngressRulesGet(req: operations.AppengineAppsFirewallIngressRulesGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsFirewallIngressRulesGetResponse>;
    AppengineAppsFirewallIngressRulesList(req: operations.AppengineAppsFirewallIngressRulesListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsFirewallIngressRulesListResponse>;
    AppengineAppsFirewallIngressRulesPatch(req: operations.AppengineAppsFirewallIngressRulesPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsFirewallIngressRulesPatchResponse>;
    AppengineAppsGet(req: operations.AppengineAppsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsGetResponse>;
    AppengineAppsLocationsGet(req: operations.AppengineAppsLocationsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsLocationsGetResponse>;
    AppengineAppsLocationsList(req: operations.AppengineAppsLocationsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsLocationsListResponse>;
    AppengineAppsOperationsGet(req: operations.AppengineAppsOperationsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsOperationsGetResponse>;
    AppengineAppsOperationsList(req: operations.AppengineAppsOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsOperationsListResponse>;
    AppengineAppsPatch(req: operations.AppengineAppsPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsPatchResponse>;
    AppengineAppsRepair(req: operations.AppengineAppsRepairRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsRepairResponse>;
    AppengineAppsServicesDelete(req: operations.AppengineAppsServicesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesDeleteResponse>;
    AppengineAppsServicesGet(req: operations.AppengineAppsServicesGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesGetResponse>;
    AppengineAppsServicesList(req: operations.AppengineAppsServicesListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesListResponse>;
    AppengineAppsServicesPatch(req: operations.AppengineAppsServicesPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesPatchResponse>;
    AppengineAppsServicesVersionsCreate(req: operations.AppengineAppsServicesVersionsCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsCreateResponse>;
    AppengineAppsServicesVersionsDelete(req: operations.AppengineAppsServicesVersionsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsDeleteResponse>;
    AppengineAppsServicesVersionsGet(req: operations.AppengineAppsServicesVersionsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsGetResponse>;
    AppengineAppsServicesVersionsInstancesDebug(req: operations.AppengineAppsServicesVersionsInstancesDebugRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsInstancesDebugResponse>;
    AppengineAppsServicesVersionsInstancesDelete(req: operations.AppengineAppsServicesVersionsInstancesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsInstancesDeleteResponse>;
    AppengineAppsServicesVersionsInstancesGet(req: operations.AppengineAppsServicesVersionsInstancesGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsInstancesGetResponse>;
    AppengineAppsServicesVersionsInstancesList(req: operations.AppengineAppsServicesVersionsInstancesListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsInstancesListResponse>;
    AppengineAppsServicesVersionsList(req: operations.AppengineAppsServicesVersionsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsListResponse>;
    AppengineAppsServicesVersionsPatch(req: operations.AppengineAppsServicesVersionsPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsServicesVersionsPatchResponse>;
}
export {};

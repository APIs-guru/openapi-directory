import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AppengineAppsAuthorizedCertificatesCreate(req: operations.AppengineAppsAuthorizedCertificatesCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesCreateResponse>;
    AppengineAppsAuthorizedCertificatesDelete(req: operations.AppengineAppsAuthorizedCertificatesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesDeleteResponse>;
    AppengineAppsAuthorizedCertificatesGet(req: operations.AppengineAppsAuthorizedCertificatesGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesGetResponse>;
    AppengineAppsAuthorizedCertificatesList(req: operations.AppengineAppsAuthorizedCertificatesListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesListResponse>;
    AppengineAppsAuthorizedCertificatesPatch(req: operations.AppengineAppsAuthorizedCertificatesPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedCertificatesPatchResponse>;
    AppengineAppsAuthorizedDomainsList(req: operations.AppengineAppsAuthorizedDomainsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsAuthorizedDomainsListResponse>;
    AppengineAppsDomainMappingsCreate(req: operations.AppengineAppsDomainMappingsCreateRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsCreateResponse>;
    AppengineAppsDomainMappingsDelete(req: operations.AppengineAppsDomainMappingsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsDeleteResponse>;
    AppengineAppsDomainMappingsGet(req: operations.AppengineAppsDomainMappingsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsGetResponse>;
    AppengineAppsDomainMappingsList(req: operations.AppengineAppsDomainMappingsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsListResponse>;
    AppengineAppsDomainMappingsPatch(req: operations.AppengineAppsDomainMappingsPatchRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsDomainMappingsPatchResponse>;
    AppengineAppsLocationsGet(req: operations.AppengineAppsLocationsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsLocationsGetResponse>;
    AppengineAppsLocationsList(req: operations.AppengineAppsLocationsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsLocationsListResponse>;
    AppengineAppsOperationsGet(req: operations.AppengineAppsOperationsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsOperationsGetResponse>;
    AppengineAppsOperationsList(req: operations.AppengineAppsOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineAppsOperationsListResponse>;
    AppengineProjectsLocationsGet(req: operations.AppengineProjectsLocationsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineProjectsLocationsGetResponse>;
    AppengineProjectsLocationsList(req: operations.AppengineProjectsLocationsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineProjectsLocationsListResponse>;
    AppengineProjectsLocationsOperationsGet(req: operations.AppengineProjectsLocationsOperationsGetRequest, config?: AxiosRequestConfig): Promise<operations.AppengineProjectsLocationsOperationsGetResponse>;
    AppengineProjectsLocationsOperationsList(req: operations.AppengineProjectsLocationsOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.AppengineProjectsLocationsOperationsListResponse>;
}
export {};

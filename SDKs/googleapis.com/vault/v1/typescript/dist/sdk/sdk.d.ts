import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    VaultMattersAddPermissions(req: operations.VaultMattersAddPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersAddPermissionsResponse>;
    VaultMattersClose(req: operations.VaultMattersCloseRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersCloseResponse>;
    VaultMattersCount(req: operations.VaultMattersCountRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersCountResponse>;
    VaultMattersCreate(req: operations.VaultMattersCreateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersCreateResponse>;
    VaultMattersDelete(req: operations.VaultMattersDeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersDeleteResponse>;
    VaultMattersExportsCreate(req: operations.VaultMattersExportsCreateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersExportsCreateResponse>;
    VaultMattersExportsDelete(req: operations.VaultMattersExportsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersExportsDeleteResponse>;
    VaultMattersExportsGet(req: operations.VaultMattersExportsGetRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersExportsGetResponse>;
    VaultMattersExportsList(req: operations.VaultMattersExportsListRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersExportsListResponse>;
    VaultMattersGet(req: operations.VaultMattersGetRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersGetResponse>;
    VaultMattersHoldsAccountsCreate(req: operations.VaultMattersHoldsAccountsCreateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsAccountsCreateResponse>;
    VaultMattersHoldsAccountsDelete(req: operations.VaultMattersHoldsAccountsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsAccountsDeleteResponse>;
    VaultMattersHoldsAccountsList(req: operations.VaultMattersHoldsAccountsListRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsAccountsListResponse>;
    VaultMattersHoldsAddHeldAccounts(req: operations.VaultMattersHoldsAddHeldAccountsRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsAddHeldAccountsResponse>;
    VaultMattersHoldsCreate(req: operations.VaultMattersHoldsCreateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsCreateResponse>;
    VaultMattersHoldsDelete(req: operations.VaultMattersHoldsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsDeleteResponse>;
    VaultMattersHoldsGet(req: operations.VaultMattersHoldsGetRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsGetResponse>;
    VaultMattersHoldsList(req: operations.VaultMattersHoldsListRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsListResponse>;
    VaultMattersHoldsRemoveHeldAccounts(req: operations.VaultMattersHoldsRemoveHeldAccountsRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsRemoveHeldAccountsResponse>;
    VaultMattersHoldsUpdate(req: operations.VaultMattersHoldsUpdateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersHoldsUpdateResponse>;
    VaultMattersList(req: operations.VaultMattersListRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersListResponse>;
    VaultMattersRemovePermissions(req: operations.VaultMattersRemovePermissionsRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersRemovePermissionsResponse>;
    VaultMattersReopen(req: operations.VaultMattersReopenRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersReopenResponse>;
    VaultMattersSavedQueriesCreate(req: operations.VaultMattersSavedQueriesCreateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersSavedQueriesCreateResponse>;
    VaultMattersSavedQueriesDelete(req: operations.VaultMattersSavedQueriesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersSavedQueriesDeleteResponse>;
    VaultMattersSavedQueriesGet(req: operations.VaultMattersSavedQueriesGetRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersSavedQueriesGetResponse>;
    VaultMattersSavedQueriesList(req: operations.VaultMattersSavedQueriesListRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersSavedQueriesListResponse>;
    VaultMattersUndelete(req: operations.VaultMattersUndeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersUndeleteResponse>;
    VaultMattersUpdate(req: operations.VaultMattersUpdateRequest, config?: AxiosRequestConfig): Promise<operations.VaultMattersUpdateResponse>;
    VaultOperationsCancel(req: operations.VaultOperationsCancelRequest, config?: AxiosRequestConfig): Promise<operations.VaultOperationsCancelResponse>;
    VaultOperationsDelete(req: operations.VaultOperationsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.VaultOperationsDeleteResponse>;
    VaultOperationsList(req: operations.VaultOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.VaultOperationsListResponse>;
}
export {};

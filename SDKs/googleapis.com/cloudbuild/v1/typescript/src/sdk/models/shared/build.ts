import { Metadata, SpeakeasyBase } from "../../../internal/utils/utils";
import * as shared from "../shared";
import { BuildApproval } from "./buildapproval";
import { Artifacts } from "./artifacts";
import { Secrets } from "./secrets";
import { FailureInfo } from "./failureinfo";
import { BuildOptions } from "./buildoptions";
import { Results } from "./results";
import { Secret } from "./secret";
import { Source } from "./source";
import { SourceProvenance } from "./sourceprovenance";
import { BuildStep } from "./buildstep";
import { TimeSpan } from "./timespan";
import { Warning } from "./warning";

export enum BuildStatusEnum {
    StatusUnknown = "STATUS_UNKNOWN"
,    Pending = "PENDING"
,    Queued = "QUEUED"
,    Working = "WORKING"
,    Success = "SUCCESS"
,    Failure = "FAILURE"
,    InternalError = "INTERNAL_ERROR"
,    Timeout = "TIMEOUT"
,    Cancelled = "CANCELLED"
,    Expired = "EXPIRED"
}


// Build
/** 
 * A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
**/
export class Build extends SpeakeasyBase {
  @Metadata({ data: "json, name=approval" })
  approval?: BuildApproval;

  @Metadata({ data: "json, name=artifacts" })
  artifacts?: Artifacts;

  @Metadata({ data: "json, name=availableSecrets" })
  availableSecrets?: Secrets;

  @Metadata({ data: "json, name=buildTriggerId" })
  buildTriggerId?: string;

  @Metadata({ data: "json, name=createTime" })
  createTime?: string;

  @Metadata({ data: "json, name=failureInfo" })
  failureInfo?: FailureInfo;

  @Metadata({ data: "json, name=finishTime" })
  finishTime?: string;

  @Metadata({ data: "json, name=id" })
  id?: string;

  @Metadata({ data: "json, name=images" })
  images?: string[];

  @Metadata({ data: "json, name=logUrl" })
  logUrl?: string;

  @Metadata({ data: "json, name=logsBucket" })
  logsBucket?: string;

  @Metadata({ data: "json, name=name" })
  name?: string;

  @Metadata({ data: "json, name=options" })
  options?: BuildOptions;

  @Metadata({ data: "json, name=projectId" })
  projectId?: string;

  @Metadata({ data: "json, name=queueTtl" })
  queueTtl?: string;

  @Metadata({ data: "json, name=results" })
  results?: Results;

  @Metadata({ data: "json, name=secrets", elemType: shared.Secret })
  secrets?: Secret[];

  @Metadata({ data: "json, name=serviceAccount" })
  serviceAccount?: string;

  @Metadata({ data: "json, name=source" })
  source?: Source;

  @Metadata({ data: "json, name=sourceProvenance" })
  sourceProvenance?: SourceProvenance;

  @Metadata({ data: "json, name=startTime" })
  startTime?: string;

  @Metadata({ data: "json, name=status" })
  status?: BuildStatusEnum;

  @Metadata({ data: "json, name=statusDetail" })
  statusDetail?: string;

  @Metadata({ data: "json, name=steps", elemType: shared.BuildStep })
  steps?: BuildStep[];

  @Metadata({ data: "json, name=substitutions" })
  substitutions?: Map<string, string>;

  @Metadata({ data: "json, name=tags" })
  tags?: string[];

  @Metadata({ data: "json, name=timeout" })
  timeout?: string;

  @Metadata({ data: "json, name=timing", elemType: shared.TimeSpan })
  timing?: Map<string, TimeSpan>;

  @Metadata({ data: "json, name=warnings", elemType: shared.Warning })
  warnings?: Warning[];
}

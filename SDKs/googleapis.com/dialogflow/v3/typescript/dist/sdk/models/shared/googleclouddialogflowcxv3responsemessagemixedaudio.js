var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { SpeakeasyMetadata, SpeakeasyBase } from "../../../internal/utils";
import { GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment } from "./googleclouddialogflowcxv3responsemessagemixedaudiosegment";
import { GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegmentInput } from "./googleclouddialogflowcxv3responsemessagemixedaudiosegment";
// GoogleCloudDialogflowCxV3ResponseMessageMixedAudio
/**
 * Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.
**/
var GoogleCloudDialogflowCxV3ResponseMessageMixedAudio = /** @class */ (function (_super) {
    __extends(GoogleCloudDialogflowCxV3ResponseMessageMixedAudio, _super);
    function GoogleCloudDialogflowCxV3ResponseMessageMixedAudio() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        SpeakeasyMetadata({ data: "json, name=segments", elemType: GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment }),
        __metadata("design:type", Array)
    ], GoogleCloudDialogflowCxV3ResponseMessageMixedAudio.prototype, "segments", void 0);
    return GoogleCloudDialogflowCxV3ResponseMessageMixedAudio;
}(SpeakeasyBase));
export { GoogleCloudDialogflowCxV3ResponseMessageMixedAudio };
// GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput
/**
 * Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.
**/
var GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput = /** @class */ (function (_super) {
    __extends(GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput, _super);
    function GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        SpeakeasyMetadata({ data: "json, name=segments", elemType: GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegmentInput }),
        __metadata("design:type", Array)
    ], GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput.prototype, "segments", void 0);
    return GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput;
}(SpeakeasyBase));
export { GoogleCloudDialogflowCxV3ResponseMessageMixedAudioInput };

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    NotebooksProjectsLocationsEnvironmentsCreate(req: operations.NotebooksProjectsLocationsEnvironmentsCreateRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsEnvironmentsCreateResponse>;
    NotebooksProjectsLocationsEnvironmentsList(req: operations.NotebooksProjectsLocationsEnvironmentsListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsEnvironmentsListResponse>;
    NotebooksProjectsLocationsExecutionsCreate(req: operations.NotebooksProjectsLocationsExecutionsCreateRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsExecutionsCreateResponse>;
    NotebooksProjectsLocationsExecutionsList(req: operations.NotebooksProjectsLocationsExecutionsListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsExecutionsListResponse>;
    NotebooksProjectsLocationsInstancesCreate(req: operations.NotebooksProjectsLocationsInstancesCreateRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesCreateResponse>;
    NotebooksProjectsLocationsInstancesGetInstanceHealth(req: operations.NotebooksProjectsLocationsInstancesGetInstanceHealthRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesGetInstanceHealthResponse>;
    NotebooksProjectsLocationsInstancesIsUpgradeable(req: operations.NotebooksProjectsLocationsInstancesIsUpgradeableRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesIsUpgradeableResponse>;
    NotebooksProjectsLocationsInstancesList(req: operations.NotebooksProjectsLocationsInstancesListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesListResponse>;
    NotebooksProjectsLocationsInstancesRegister(req: operations.NotebooksProjectsLocationsInstancesRegisterRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesRegisterResponse>;
    NotebooksProjectsLocationsInstancesReport(req: operations.NotebooksProjectsLocationsInstancesReportRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesReportResponse>;
    NotebooksProjectsLocationsInstancesRollback(req: operations.NotebooksProjectsLocationsInstancesRollbackRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesRollbackResponse>;
    NotebooksProjectsLocationsInstancesSetAccelerator(req: operations.NotebooksProjectsLocationsInstancesSetAcceleratorRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesSetAcceleratorResponse>;
    NotebooksProjectsLocationsInstancesSetLabels(req: operations.NotebooksProjectsLocationsInstancesSetLabelsRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesSetLabelsResponse>;
    NotebooksProjectsLocationsInstancesSetMachineType(req: operations.NotebooksProjectsLocationsInstancesSetMachineTypeRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesSetMachineTypeResponse>;
    NotebooksProjectsLocationsInstancesUpdateConfig(req: operations.NotebooksProjectsLocationsInstancesUpdateConfigRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesUpdateConfigResponse>;
    NotebooksProjectsLocationsInstancesUpdateMetadataItems(req: operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse>;
    NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfig(req: operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse>;
    NotebooksProjectsLocationsInstancesUpgradeInternal(req: operations.NotebooksProjectsLocationsInstancesUpgradeInternalRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsInstancesUpgradeInternalResponse>;
    NotebooksProjectsLocationsList(req: operations.NotebooksProjectsLocationsListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsListResponse>;
    NotebooksProjectsLocationsOperationsCancel(req: operations.NotebooksProjectsLocationsOperationsCancelRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsOperationsCancelResponse>;
    NotebooksProjectsLocationsOperationsList(req: operations.NotebooksProjectsLocationsOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsOperationsListResponse>;
    NotebooksProjectsLocationsRuntimesCreate(req: operations.NotebooksProjectsLocationsRuntimesCreateRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesCreateResponse>;
    NotebooksProjectsLocationsRuntimesDiagnose(req: operations.NotebooksProjectsLocationsRuntimesDiagnoseRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesDiagnoseResponse>;
    NotebooksProjectsLocationsRuntimesGetIamPolicy(req: operations.NotebooksProjectsLocationsRuntimesGetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesGetIamPolicyResponse>;
    NotebooksProjectsLocationsRuntimesList(req: operations.NotebooksProjectsLocationsRuntimesListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesListResponse>;
    NotebooksProjectsLocationsRuntimesPatch(req: operations.NotebooksProjectsLocationsRuntimesPatchRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesPatchResponse>;
    NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternal(req: operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse>;
    NotebooksProjectsLocationsRuntimesReportEvent(req: operations.NotebooksProjectsLocationsRuntimesReportEventRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesReportEventResponse>;
    NotebooksProjectsLocationsRuntimesReset(req: operations.NotebooksProjectsLocationsRuntimesResetRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesResetResponse>;
    NotebooksProjectsLocationsRuntimesSetIamPolicy(req: operations.NotebooksProjectsLocationsRuntimesSetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesSetIamPolicyResponse>;
    NotebooksProjectsLocationsRuntimesStart(req: operations.NotebooksProjectsLocationsRuntimesStartRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesStartResponse>;
    NotebooksProjectsLocationsRuntimesStop(req: operations.NotebooksProjectsLocationsRuntimesStopRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesStopResponse>;
    NotebooksProjectsLocationsRuntimesSwitch(req: operations.NotebooksProjectsLocationsRuntimesSwitchRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesSwitchResponse>;
    NotebooksProjectsLocationsRuntimesTestIamPermissions(req: operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse>;
    NotebooksProjectsLocationsRuntimesUpgrade(req: operations.NotebooksProjectsLocationsRuntimesUpgradeRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsRuntimesUpgradeResponse>;
    NotebooksProjectsLocationsSchedulesCreate(req: operations.NotebooksProjectsLocationsSchedulesCreateRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsSchedulesCreateResponse>;
    NotebooksProjectsLocationsSchedulesDelete(req: operations.NotebooksProjectsLocationsSchedulesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsSchedulesDeleteResponse>;
    NotebooksProjectsLocationsSchedulesGet(req: operations.NotebooksProjectsLocationsSchedulesGetRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsSchedulesGetResponse>;
    NotebooksProjectsLocationsSchedulesList(req: operations.NotebooksProjectsLocationsSchedulesListRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsSchedulesListResponse>;
    NotebooksProjectsLocationsSchedulesTrigger(req: operations.NotebooksProjectsLocationsSchedulesTriggerRequest, config?: AxiosRequestConfig): Promise<operations.NotebooksProjectsLocationsSchedulesTriggerResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    MetastoreProjectsLocationsFederationsCreate(req: operations.MetastoreProjectsLocationsFederationsCreateRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsFederationsCreateResponse>;
    MetastoreProjectsLocationsFederationsList(req: operations.MetastoreProjectsLocationsFederationsListRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsFederationsListResponse>;
    MetastoreProjectsLocationsList(req: operations.MetastoreProjectsLocationsListRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsListResponse>;
    MetastoreProjectsLocationsOperationsList(req: operations.MetastoreProjectsLocationsOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsOperationsListResponse>;
    MetastoreProjectsLocationsServicesBackupsCreate(req: operations.MetastoreProjectsLocationsServicesBackupsCreateRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesBackupsCreateResponse>;
    MetastoreProjectsLocationsServicesBackupsDelete(req: operations.MetastoreProjectsLocationsServicesBackupsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesBackupsDeleteResponse>;
    MetastoreProjectsLocationsServicesBackupsList(req: operations.MetastoreProjectsLocationsServicesBackupsListRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesBackupsListResponse>;
    MetastoreProjectsLocationsServicesCreate(req: operations.MetastoreProjectsLocationsServicesCreateRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesCreateResponse>;
    MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicy(req: operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyResponse>;
    MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicy(req: operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyResponse>;
    MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissions(req: operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsResponse>;
    MetastoreProjectsLocationsServicesExportMetadata(req: operations.MetastoreProjectsLocationsServicesExportMetadataRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesExportMetadataResponse>;
    MetastoreProjectsLocationsServicesList(req: operations.MetastoreProjectsLocationsServicesListRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesListResponse>;
    MetastoreProjectsLocationsServicesMetadataImportsCreate(req: operations.MetastoreProjectsLocationsServicesMetadataImportsCreateRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesMetadataImportsCreateResponse>;
    MetastoreProjectsLocationsServicesMetadataImportsGet(req: operations.MetastoreProjectsLocationsServicesMetadataImportsGetRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesMetadataImportsGetResponse>;
    MetastoreProjectsLocationsServicesMetadataImportsList(req: operations.MetastoreProjectsLocationsServicesMetadataImportsListRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesMetadataImportsListResponse>;
    MetastoreProjectsLocationsServicesMetadataImportsPatch(req: operations.MetastoreProjectsLocationsServicesMetadataImportsPatchRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesMetadataImportsPatchResponse>;
    MetastoreProjectsLocationsServicesRemoveIamPolicy(req: operations.MetastoreProjectsLocationsServicesRemoveIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesRemoveIamPolicyResponse>;
    MetastoreProjectsLocationsServicesRestore(req: operations.MetastoreProjectsLocationsServicesRestoreRequest, config?: AxiosRequestConfig): Promise<operations.MetastoreProjectsLocationsServicesRestoreResponse>;
}
export {};

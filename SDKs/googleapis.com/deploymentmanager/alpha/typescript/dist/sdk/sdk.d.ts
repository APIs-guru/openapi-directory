import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    DeploymentmanagerCompositeTypesDelete(req: operations.DeploymentmanagerCompositeTypesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerCompositeTypesDeleteResponse>;
    DeploymentmanagerCompositeTypesGet(req: operations.DeploymentmanagerCompositeTypesGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerCompositeTypesGetResponse>;
    DeploymentmanagerCompositeTypesInsert(req: operations.DeploymentmanagerCompositeTypesInsertRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerCompositeTypesInsertResponse>;
    DeploymentmanagerCompositeTypesList(req: operations.DeploymentmanagerCompositeTypesListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerCompositeTypesListResponse>;
    DeploymentmanagerCompositeTypesPatch(req: operations.DeploymentmanagerCompositeTypesPatchRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerCompositeTypesPatchResponse>;
    DeploymentmanagerCompositeTypesUpdate(req: operations.DeploymentmanagerCompositeTypesUpdateRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerCompositeTypesUpdateResponse>;
    DeploymentmanagerDeploymentsCancelPreview(req: operations.DeploymentmanagerDeploymentsCancelPreviewRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsCancelPreviewResponse>;
    DeploymentmanagerDeploymentsDelete(req: operations.DeploymentmanagerDeploymentsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsDeleteResponse>;
    DeploymentmanagerDeploymentsGet(req: operations.DeploymentmanagerDeploymentsGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsGetResponse>;
    DeploymentmanagerDeploymentsGetIamPolicy(req: operations.DeploymentmanagerDeploymentsGetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsGetIamPolicyResponse>;
    DeploymentmanagerDeploymentsInsert(req: operations.DeploymentmanagerDeploymentsInsertRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsInsertResponse>;
    DeploymentmanagerDeploymentsList(req: operations.DeploymentmanagerDeploymentsListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsListResponse>;
    DeploymentmanagerDeploymentsPatch(req: operations.DeploymentmanagerDeploymentsPatchRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsPatchResponse>;
    DeploymentmanagerDeploymentsSetIamPolicy(req: operations.DeploymentmanagerDeploymentsSetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsSetIamPolicyResponse>;
    DeploymentmanagerDeploymentsStop(req: operations.DeploymentmanagerDeploymentsStopRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsStopResponse>;
    DeploymentmanagerDeploymentsTestIamPermissions(req: operations.DeploymentmanagerDeploymentsTestIamPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsTestIamPermissionsResponse>;
    DeploymentmanagerDeploymentsUpdate(req: operations.DeploymentmanagerDeploymentsUpdateRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerDeploymentsUpdateResponse>;
    DeploymentmanagerManifestsGet(req: operations.DeploymentmanagerManifestsGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerManifestsGetResponse>;
    DeploymentmanagerManifestsList(req: operations.DeploymentmanagerManifestsListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerManifestsListResponse>;
    DeploymentmanagerOperationsGet(req: operations.DeploymentmanagerOperationsGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerOperationsGetResponse>;
    DeploymentmanagerOperationsList(req: operations.DeploymentmanagerOperationsListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerOperationsListResponse>;
    DeploymentmanagerResourcesGet(req: operations.DeploymentmanagerResourcesGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerResourcesGetResponse>;
    DeploymentmanagerResourcesList(req: operations.DeploymentmanagerResourcesListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerResourcesListResponse>;
    DeploymentmanagerTypeProvidersDelete(req: operations.DeploymentmanagerTypeProvidersDeleteRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersDeleteResponse>;
    DeploymentmanagerTypeProvidersGet(req: operations.DeploymentmanagerTypeProvidersGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersGetResponse>;
    DeploymentmanagerTypeProvidersGetType(req: operations.DeploymentmanagerTypeProvidersGetTypeRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersGetTypeResponse>;
    DeploymentmanagerTypeProvidersInsert(req: operations.DeploymentmanagerTypeProvidersInsertRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersInsertResponse>;
    DeploymentmanagerTypeProvidersList(req: operations.DeploymentmanagerTypeProvidersListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersListResponse>;
    DeploymentmanagerTypeProvidersListTypes(req: operations.DeploymentmanagerTypeProvidersListTypesRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersListTypesResponse>;
    DeploymentmanagerTypeProvidersPatch(req: operations.DeploymentmanagerTypeProvidersPatchRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersPatchResponse>;
    DeploymentmanagerTypeProvidersUpdate(req: operations.DeploymentmanagerTypeProvidersUpdateRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypeProvidersUpdateResponse>;
    DeploymentmanagerTypesGet(req: operations.DeploymentmanagerTypesGetRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypesGetResponse>;
    DeploymentmanagerTypesList(req: operations.DeploymentmanagerTypesListRequest, config?: AxiosRequestConfig): Promise<operations.DeploymentmanagerTypesListResponse>;
}
export {};

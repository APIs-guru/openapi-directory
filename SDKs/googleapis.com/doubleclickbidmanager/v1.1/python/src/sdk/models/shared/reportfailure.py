from dataclasses import dataclass, field
from typing import Optional
from enum import Enum
from dataclasses_json import dataclass_json
from sdk import utils

class ReportFailureErrorCodeEnum(str, Enum):
    AUTHENTICATION_ERROR = "AUTHENTICATION_ERROR"
    UNAUTHORIZED_API_ACCESS = "UNAUTHORIZED_API_ACCESS"
    SERVER_ERROR = "SERVER_ERROR"
    VALIDATION_ERROR = "VALIDATION_ERROR"
    REPORTING_FATAL_ERROR = "REPORTING_FATAL_ERROR"
    REPORTING_TRANSIENT_ERROR = "REPORTING_TRANSIENT_ERROR"
    REPORTING_IMCOMPATIBLE_METRICS = "REPORTING_IMCOMPATIBLE_METRICS"
    REPORTING_ILLEGAL_FILENAME = "REPORTING_ILLEGAL_FILENAME"
    REPORTING_QUERY_NOT_FOUND = "REPORTING_QUERY_NOT_FOUND"
    REPORTING_BUCKET_NOT_FOUND = "REPORTING_BUCKET_NOT_FOUND"
    REPORTING_CREATE_BUCKET_FAILED = "REPORTING_CREATE_BUCKET_FAILED"
    REPORTING_DELETE_BUCKET_FAILED = "REPORTING_DELETE_BUCKET_FAILED"
    REPORTING_UPDATE_BUCKET_PERMISSION_FAILED = "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED"
    REPORTING_WRITE_BUCKET_OBJECT_FAILED = "REPORTING_WRITE_BUCKET_OBJECT_FAILED"
    DEPRECATED_REPORTING_INVALID_QUERY = "DEPRECATED_REPORTING_INVALID_QUERY"
    REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS = "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS"
    REPORTING_INVALID_QUERY_TITLE_MISSING = "REPORTING_INVALID_QUERY_TITLE_MISSING"
    REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS = "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS"


@dataclass_json
@dataclass
class ReportFailure:
    r"""ReportFailure
    An explanation of a report failure.
    """
    
    error_code: Optional[ReportFailureErrorCodeEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('errorCode') }})
    

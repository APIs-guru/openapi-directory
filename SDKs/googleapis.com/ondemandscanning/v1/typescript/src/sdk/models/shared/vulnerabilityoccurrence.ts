import { Metadata, SpeakeasyBase } from "../../../internal/utils/utils";
import * as shared from "../shared";
import { Cvss } from "./cvss";
import { PackageIssue } from "./packageissue";
import { RelatedUrl } from "./relatedurl";

export enum VulnerabilityOccurrenceCvssVersionEnum {
    CvssVersionUnspecified = "CVSS_VERSION_UNSPECIFIED"
,    CvssVersion2 = "CVSS_VERSION_2"
,    CvssVersion3 = "CVSS_VERSION_3"
}

export enum VulnerabilityOccurrenceEffectiveSeverityEnum {
    SeverityUnspecified = "SEVERITY_UNSPECIFIED"
,    Minimal = "MINIMAL"
,    Low = "LOW"
,    Medium = "MEDIUM"
,    High = "HIGH"
,    Critical = "CRITICAL"
}

export enum VulnerabilityOccurrenceSeverityEnum {
    SeverityUnspecified = "SEVERITY_UNSPECIFIED"
,    Minimal = "MINIMAL"
,    Low = "LOW"
,    Medium = "MEDIUM"
,    High = "HIGH"
,    Critical = "CRITICAL"
}


// VulnerabilityOccurrence
/** 
 * An occurrence of a severity vulnerability on a resource.
**/
export class VulnerabilityOccurrence extends SpeakeasyBase {
  @Metadata({ data: "json, name=cvssScore" })
  cvssScore?: number;

  @Metadata({ data: "json, name=cvssVersion" })
  cvssVersion?: VulnerabilityOccurrenceCvssVersionEnum;

  @Metadata({ data: "json, name=cvssv3" })
  cvssv3?: Cvss;

  @Metadata({ data: "json, name=effectiveSeverity" })
  effectiveSeverity?: VulnerabilityOccurrenceEffectiveSeverityEnum;

  @Metadata({ data: "json, name=fixAvailable" })
  fixAvailable?: boolean;

  @Metadata({ data: "json, name=longDescription" })
  longDescription?: string;

  @Metadata({ data: "json, name=packageIssue", elemType: shared.PackageIssue })
  packageIssue?: PackageIssue[];

  @Metadata({ data: "json, name=relatedUrls", elemType: shared.RelatedUrl })
  relatedUrls?: RelatedUrl[];

  @Metadata({ data: "json, name=severity" })
  severity?: VulnerabilityOccurrenceSeverityEnum;

  @Metadata({ data: "json, name=shortDescription" })
  shortDescription?: string;

  @Metadata({ data: "json, name=type" })
  type?: string;
}

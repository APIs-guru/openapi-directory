from dataclasses import dataclass, field
from typing import List,Optional
from enum import Enum
from dataclasses_json import dataclass_json
from sdk import utils
from . import *

class ExecutionStageSummaryKindEnum(str, Enum):
    UNKNOWN_KIND = "UNKNOWN_KIND"
    PAR_DO_KIND = "PAR_DO_KIND"
    GROUP_BY_KEY_KIND = "GROUP_BY_KEY_KIND"
    FLATTEN_KIND = "FLATTEN_KIND"
    READ_KIND = "READ_KIND"
    WRITE_KIND = "WRITE_KIND"
    CONSTANT_KIND = "CONSTANT_KIND"
    SINGLETON_KIND = "SINGLETON_KIND"
    SHUFFLE_KIND = "SHUFFLE_KIND"


@dataclass_json
@dataclass
class ExecutionStageSummary:
    r"""ExecutionStageSummary
    Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
    """
    
    component_source: Optional[List[ComponentSource]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('componentSource') }})
    component_transform: Optional[List[ComponentTransform]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('componentTransform') }})
    id: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('id') }})
    input_source: Optional[List[StageSource]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('inputSource') }})
    kind: Optional[ExecutionStageSummaryKindEnum] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('kind') }})
    name: Optional[str] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('name') }})
    output_source: Optional[List[StageSource]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('outputSource') }})
    prerequisite_stage: Optional[List[str]] = field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.field_name('prerequisiteStage') }})
    

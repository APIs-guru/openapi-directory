import { SpeakeasyMetadata, SpeakeasyBase } from "../../../internal/utils";
import { ComponentSource } from "./componentsource";
import { ComponentTransform } from "./componenttransform";
import { StageSource } from "./stagesource";


export enum ExecutionStageSummaryKindEnum {
    UnknownKind = "UNKNOWN_KIND",
    ParDoKind = "PAR_DO_KIND",
    GroupByKeyKind = "GROUP_BY_KEY_KIND",
    FlattenKind = "FLATTEN_KIND",
    ReadKind = "READ_KIND",
    WriteKind = "WRITE_KIND",
    ConstantKind = "CONSTANT_KIND",
    SingletonKind = "SINGLETON_KIND",
    ShuffleKind = "SHUFFLE_KIND"
}


// ExecutionStageSummary
/** 
 * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
**/
export class ExecutionStageSummary extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "json, name=componentSource", elemType: ComponentSource })
  componentSource?: ComponentSource[];

  @SpeakeasyMetadata({ data: "json, name=componentTransform", elemType: ComponentTransform })
  componentTransform?: ComponentTransform[];

  @SpeakeasyMetadata({ data: "json, name=id" })
  id?: string;

  @SpeakeasyMetadata({ data: "json, name=inputSource", elemType: StageSource })
  inputSource?: StageSource[];

  @SpeakeasyMetadata({ data: "json, name=kind" })
  kind?: ExecutionStageSummaryKindEnum;

  @SpeakeasyMetadata({ data: "json, name=name" })
  name?: string;

  @SpeakeasyMetadata({ data: "json, name=outputSource", elemType: StageSource })
  outputSource?: StageSource[];

  @SpeakeasyMetadata({ data: "json, name=prerequisiteStage" })
  prerequisiteStage?: string[];
}

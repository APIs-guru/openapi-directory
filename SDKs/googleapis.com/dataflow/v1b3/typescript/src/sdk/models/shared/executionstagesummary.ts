import { Metadata, SpeakeasyBase } from "../../../internal/utils/utils";
import * as shared from "../shared";
import { ComponentSource } from "./componentsource";
import { ComponentTransform } from "./componenttransform";
import { StageSource } from "./stagesource";
import { StageSource } from "./stagesource";

export enum ExecutionStageSummaryKindEnum {
    UnknownKind = "UNKNOWN_KIND"
,    ParDoKind = "PAR_DO_KIND"
,    GroupByKeyKind = "GROUP_BY_KEY_KIND"
,    FlattenKind = "FLATTEN_KIND"
,    ReadKind = "READ_KIND"
,    WriteKind = "WRITE_KIND"
,    ConstantKind = "CONSTANT_KIND"
,    SingletonKind = "SINGLETON_KIND"
,    ShuffleKind = "SHUFFLE_KIND"
}


// ExecutionStageSummary
/** 
 * Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
**/
export class ExecutionStageSummary extends SpeakeasyBase {
  @Metadata({ data: "json, name=componentSource", elemType: shared.ComponentSource })
  componentSource?: ComponentSource[];

  @Metadata({ data: "json, name=componentTransform", elemType: shared.ComponentTransform })
  componentTransform?: ComponentTransform[];

  @Metadata({ data: "json, name=id" })
  id?: string;

  @Metadata({ data: "json, name=inputSource", elemType: shared.StageSource })
  inputSource?: StageSource[];

  @Metadata({ data: "json, name=kind" })
  kind?: ExecutionStageSummaryKindEnum;

  @Metadata({ data: "json, name=name" })
  name?: string;

  @Metadata({ data: "json, name=outputSource", elemType: shared.StageSource })
  outputSource?: StageSource[];

  @Metadata({ data: "json, name=prerequisiteStage" })
  prerequisiteStage?: string[];
}

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    IamIamPoliciesLintPolicy(req: operations.IamIamPoliciesLintPolicyRequest, config?: AxiosRequestConfig): Promise<operations.IamIamPoliciesLintPolicyResponse>;
    IamIamPoliciesQueryAuditableServices(req: operations.IamIamPoliciesQueryAuditableServicesRequest, config?: AxiosRequestConfig): Promise<operations.IamIamPoliciesQueryAuditableServicesResponse>;
    IamPermissionsQueryTestablePermissions(req: operations.IamPermissionsQueryTestablePermissionsRequest, config?: AxiosRequestConfig): Promise<operations.IamPermissionsQueryTestablePermissionsResponse>;
    IamProjectsLocationsWorkloadIdentityPoolsCreate(req: operations.IamProjectsLocationsWorkloadIdentityPoolsCreateRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsLocationsWorkloadIdentityPoolsCreateResponse>;
    IamProjectsLocationsWorkloadIdentityPoolsList(req: operations.IamProjectsLocationsWorkloadIdentityPoolsListRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsLocationsWorkloadIdentityPoolsListResponse>;
    IamProjectsLocationsWorkloadIdentityPoolsProvidersCreate(req: operations.IamProjectsLocationsWorkloadIdentityPoolsProvidersCreateRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsLocationsWorkloadIdentityPoolsProvidersCreateResponse>;
    IamProjectsLocationsWorkloadIdentityPoolsProvidersList(req: operations.IamProjectsLocationsWorkloadIdentityPoolsProvidersListRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsLocationsWorkloadIdentityPoolsProvidersListResponse>;
    IamProjectsRolesCreate(req: operations.IamProjectsRolesCreateRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsRolesCreateResponse>;
    IamProjectsRolesList(req: operations.IamProjectsRolesListRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsRolesListResponse>;
    IamProjectsServiceAccountsCreate(req: operations.IamProjectsServiceAccountsCreateRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsCreateResponse>;
    IamProjectsServiceAccountsGetIamPolicy(req: operations.IamProjectsServiceAccountsGetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsGetIamPolicyResponse>;
    IamProjectsServiceAccountsKeysCreate(req: operations.IamProjectsServiceAccountsKeysCreateRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsKeysCreateResponse>;
    IamProjectsServiceAccountsKeysDelete(req: operations.IamProjectsServiceAccountsKeysDeleteRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsKeysDeleteResponse>;
    IamProjectsServiceAccountsKeysDisable(req: operations.IamProjectsServiceAccountsKeysDisableRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsKeysDisableResponse>;
    IamProjectsServiceAccountsKeysEnable(req: operations.IamProjectsServiceAccountsKeysEnableRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsKeysEnableResponse>;
    IamProjectsServiceAccountsKeysList(req: operations.IamProjectsServiceAccountsKeysListRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsKeysListResponse>;
    IamProjectsServiceAccountsKeysUpload(req: operations.IamProjectsServiceAccountsKeysUploadRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsKeysUploadResponse>;
    IamProjectsServiceAccountsList(req: operations.IamProjectsServiceAccountsListRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsListResponse>;
    IamProjectsServiceAccountsPatch(req: operations.IamProjectsServiceAccountsPatchRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsPatchResponse>;
    IamProjectsServiceAccountsSetIamPolicy(req: operations.IamProjectsServiceAccountsSetIamPolicyRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsSetIamPolicyResponse>;
    IamProjectsServiceAccountsSignBlob(req: operations.IamProjectsServiceAccountsSignBlobRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsSignBlobResponse>;
    IamProjectsServiceAccountsSignJwt(req: operations.IamProjectsServiceAccountsSignJwtRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsSignJwtResponse>;
    IamProjectsServiceAccountsTestIamPermissions(req: operations.IamProjectsServiceAccountsTestIamPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsTestIamPermissionsResponse>;
    IamProjectsServiceAccountsUndelete(req: operations.IamProjectsServiceAccountsUndeleteRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsUndeleteResponse>;
    IamProjectsServiceAccountsUpdate(req: operations.IamProjectsServiceAccountsUpdateRequest, config?: AxiosRequestConfig): Promise<operations.IamProjectsServiceAccountsUpdateResponse>;
    IamRolesGet(req: operations.IamRolesGetRequest, config?: AxiosRequestConfig): Promise<operations.IamRolesGetResponse>;
    IamRolesList(req: operations.IamRolesListRequest, config?: AxiosRequestConfig): Promise<operations.IamRolesListResponse>;
    IamRolesQueryGrantableRoles(req: operations.IamRolesQueryGrantableRolesRequest, config?: AxiosRequestConfig): Promise<operations.IamRolesQueryGrantableRolesResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    BloggerBlogUserInfosGet(req: operations.BloggerBlogUserInfosGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerBlogUserInfosGetResponse>;
    BloggerBlogsGet(req: operations.BloggerBlogsGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerBlogsGetResponse>;
    BloggerBlogsGetByUrl(req: operations.BloggerBlogsGetByUrlRequest, config?: AxiosRequestConfig): Promise<operations.BloggerBlogsGetByUrlResponse>;
    BloggerBlogsListByUser(req: operations.BloggerBlogsListByUserRequest, config?: AxiosRequestConfig): Promise<operations.BloggerBlogsListByUserResponse>;
    BloggerCommentsApprove(req: operations.BloggerCommentsApproveRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsApproveResponse>;
    BloggerCommentsDelete(req: operations.BloggerCommentsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsDeleteResponse>;
    BloggerCommentsGet(req: operations.BloggerCommentsGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsGetResponse>;
    BloggerCommentsList(req: operations.BloggerCommentsListRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsListResponse>;
    BloggerCommentsListByBlog(req: operations.BloggerCommentsListByBlogRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsListByBlogResponse>;
    BloggerCommentsMarkAsSpam(req: operations.BloggerCommentsMarkAsSpamRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsMarkAsSpamResponse>;
    BloggerCommentsRemoveContent(req: operations.BloggerCommentsRemoveContentRequest, config?: AxiosRequestConfig): Promise<operations.BloggerCommentsRemoveContentResponse>;
    BloggerPageViewsGet(req: operations.BloggerPageViewsGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPageViewsGetResponse>;
    BloggerPagesDelete(req: operations.BloggerPagesDeleteRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesDeleteResponse>;
    BloggerPagesGet(req: operations.BloggerPagesGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesGetResponse>;
    BloggerPagesInsert(req: operations.BloggerPagesInsertRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesInsertResponse>;
    BloggerPagesList(req: operations.BloggerPagesListRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesListResponse>;
    BloggerPagesPatch(req: operations.BloggerPagesPatchRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesPatchResponse>;
    BloggerPagesPublish(req: operations.BloggerPagesPublishRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesPublishResponse>;
    BloggerPagesRevert(req: operations.BloggerPagesRevertRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesRevertResponse>;
    BloggerPagesUpdate(req: operations.BloggerPagesUpdateRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPagesUpdateResponse>;
    BloggerPostUserInfosGet(req: operations.BloggerPostUserInfosGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostUserInfosGetResponse>;
    BloggerPostUserInfosList(req: operations.BloggerPostUserInfosListRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostUserInfosListResponse>;
    BloggerPostsDelete(req: operations.BloggerPostsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsDeleteResponse>;
    BloggerPostsGet(req: operations.BloggerPostsGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsGetResponse>;
    BloggerPostsGetByPath(req: operations.BloggerPostsGetByPathRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsGetByPathResponse>;
    BloggerPostsInsert(req: operations.BloggerPostsInsertRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsInsertResponse>;
    BloggerPostsList(req: operations.BloggerPostsListRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsListResponse>;
    BloggerPostsPatch(req: operations.BloggerPostsPatchRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsPatchResponse>;
    BloggerPostsPublish(req: operations.BloggerPostsPublishRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsPublishResponse>;
    BloggerPostsRevert(req: operations.BloggerPostsRevertRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsRevertResponse>;
    BloggerPostsSearch(req: operations.BloggerPostsSearchRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsSearchResponse>;
    BloggerPostsUpdate(req: operations.BloggerPostsUpdateRequest, config?: AxiosRequestConfig): Promise<operations.BloggerPostsUpdateResponse>;
    BloggerUsersGet(req: operations.BloggerUsersGetRequest, config?: AxiosRequestConfig): Promise<operations.BloggerUsersGetResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CloudidentityCustomersUserinvitationsCancel(req: operations.CloudidentityCustomersUserinvitationsCancelRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityCustomersUserinvitationsCancelResponse>;
    CloudidentityCustomersUserinvitationsIsInvitableUser(req: operations.CloudidentityCustomersUserinvitationsIsInvitableUserRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityCustomersUserinvitationsIsInvitableUserResponse>;
    CloudidentityCustomersUserinvitationsList(req: operations.CloudidentityCustomersUserinvitationsListRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityCustomersUserinvitationsListResponse>;
    CloudidentityCustomersUserinvitationsSend(req: operations.CloudidentityCustomersUserinvitationsSendRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityCustomersUserinvitationsSendResponse>;
    CloudidentityDevicesCreate(req: operations.CloudidentityDevicesCreateRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesCreateResponse>;
    CloudidentityDevicesDeviceUsersApprove(req: operations.CloudidentityDevicesDeviceUsersApproveRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersApproveResponse>;
    CloudidentityDevicesDeviceUsersBlock(req: operations.CloudidentityDevicesDeviceUsersBlockRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersBlockResponse>;
    CloudidentityDevicesDeviceUsersCancelWipe(req: operations.CloudidentityDevicesDeviceUsersCancelWipeRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersCancelWipeResponse>;
    CloudidentityDevicesDeviceUsersClientStatesList(req: operations.CloudidentityDevicesDeviceUsersClientStatesListRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersClientStatesListResponse>;
    CloudidentityDevicesDeviceUsersList(req: operations.CloudidentityDevicesDeviceUsersListRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersListResponse>;
    CloudidentityDevicesDeviceUsersLookup(req: operations.CloudidentityDevicesDeviceUsersLookupRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersLookupResponse>;
    CloudidentityDevicesDeviceUsersWipe(req: operations.CloudidentityDevicesDeviceUsersWipeRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesDeviceUsersWipeResponse>;
    CloudidentityDevicesList(req: operations.CloudidentityDevicesListRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityDevicesListResponse>;
    CloudidentityGroupsCreate(req: operations.CloudidentityGroupsCreateRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsCreateResponse>;
    CloudidentityGroupsList(req: operations.CloudidentityGroupsListRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsListResponse>;
    CloudidentityGroupsLookup(req: operations.CloudidentityGroupsLookupRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsLookupResponse>;
    CloudidentityGroupsMembershipsCheckTransitiveMembership(req: operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse>;
    CloudidentityGroupsMembershipsCreate(req: operations.CloudidentityGroupsMembershipsCreateRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsCreateResponse>;
    CloudidentityGroupsMembershipsDelete(req: operations.CloudidentityGroupsMembershipsDeleteRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsDeleteResponse>;
    CloudidentityGroupsMembershipsGet(req: operations.CloudidentityGroupsMembershipsGetRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsGetResponse>;
    CloudidentityGroupsMembershipsGetMembershipGraph(req: operations.CloudidentityGroupsMembershipsGetMembershipGraphRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsGetMembershipGraphResponse>;
    CloudidentityGroupsMembershipsList(req: operations.CloudidentityGroupsMembershipsListRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsListResponse>;
    CloudidentityGroupsMembershipsLookup(req: operations.CloudidentityGroupsMembershipsLookupRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsLookupResponse>;
    CloudidentityGroupsMembershipsModifyMembershipRoles(req: operations.CloudidentityGroupsMembershipsModifyMembershipRolesRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsModifyMembershipRolesResponse>;
    CloudidentityGroupsMembershipsSearchTransitiveGroups(req: operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse>;
    CloudidentityGroupsMembershipsSearchTransitiveMemberships(req: operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse>;
    CloudidentityGroupsSearch(req: operations.CloudidentityGroupsSearchRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsSearchResponse>;
    CloudidentityGroupsUpdateSecuritySettings(req: operations.CloudidentityGroupsUpdateSecuritySettingsRequest, config?: AxiosRequestConfig): Promise<operations.CloudidentityGroupsUpdateSecuritySettingsResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    DeleteKeyKey(req: operations.DeleteKeyKeyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteKeyKeyResponse>;
    GetAccountId(req: operations.GetAccountIdRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountIdResponse>;
    GetBlock(req: operations.GetBlockRequest, config?: AxiosRequestConfig): Promise<operations.GetBlockResponse>;
    GetBlockId(req: operations.GetBlockIdRequest, config?: AxiosRequestConfig): Promise<operations.GetBlockIdResponse>;
    GetBlockIdTransaction(req: operations.GetBlockIdTransactionRequest, config?: AxiosRequestConfig): Promise<operations.GetBlockIdTransactionResponse>;
    GetBlockIdTransactionIndex(req: operations.GetBlockIdTransactionIndexRequest, config?: AxiosRequestConfig): Promise<operations.GetBlockIdTransactionIndexResponse>;
    GetBlockchain(req: operations.GetBlockchainRequest, config?: AxiosRequestConfig): Promise<operations.GetBlockchainResponse>;
    GetBlockchainId(req: operations.GetBlockchainIdRequest, config?: AxiosRequestConfig): Promise<operations.GetBlockchainIdResponse>;
    GetContractId(req: operations.GetContractIdRequest, config?: AxiosRequestConfig): Promise<operations.GetContractIdResponse>;
    GetErc20(config?: AxiosRequestConfig): Promise<operations.GetErc20Response>;
    GetErc20Address(req: operations.GetErc20AddressRequest, config?: AxiosRequestConfig): Promise<operations.GetErc20AddressResponse>;
    GetKey(req: operations.GetKeyRequest, config?: AxiosRequestConfig): Promise<operations.GetKeyResponse>;
    GetTransactionHash(req: operations.GetTransactionHashRequest, config?: AxiosRequestConfig): Promise<operations.GetTransactionHashResponse>;
    GetTransactionHashReceipt(req: operations.GetTransactionHashReceiptRequest, config?: AxiosRequestConfig): Promise<operations.GetTransactionHashReceiptResponse>;
    GetVersion(config?: AxiosRequestConfig): Promise<operations.GetVersionResponse>;
    GetWallet(config?: AxiosRequestConfig): Promise<operations.GetWalletResponse>;
    GetWalletAccount(config?: AxiosRequestConfig): Promise<operations.GetWalletAccountResponse>;
    GetWalletAccountId(req: operations.GetWalletAccountIdRequest, config?: AxiosRequestConfig): Promise<operations.GetWalletAccountIdResponse>;
    Options(config?: AxiosRequestConfig): Promise<operations.OptionsResponse>;
    OptionsAccount(config?: AxiosRequestConfig): Promise<operations.OptionsAccountResponse>;
    OptionsAccountId(req: operations.OptionsAccountIdRequest, config?: AxiosRequestConfig): Promise<operations.OptionsAccountIdResponse>;
    OptionsBlock(config?: AxiosRequestConfig): Promise<operations.OptionsBlockResponse>;
    OptionsBlockId(req: operations.OptionsBlockIdRequest, config?: AxiosRequestConfig): Promise<operations.OptionsBlockIdResponse>;
    OptionsBlockIdTransaction(req: operations.OptionsBlockIdTransactionRequest, config?: AxiosRequestConfig): Promise<operations.OptionsBlockIdTransactionResponse>;
    OptionsBlockIdTransactionIndex(req: operations.OptionsBlockIdTransactionIndexRequest, config?: AxiosRequestConfig): Promise<operations.OptionsBlockIdTransactionIndexResponse>;
    OptionsBlockchain(config?: AxiosRequestConfig): Promise<operations.OptionsBlockchainResponse>;
    OptionsBlockchainId(req: operations.OptionsBlockchainIdRequest, config?: AxiosRequestConfig): Promise<operations.OptionsBlockchainIdResponse>;
    OptionsContract(config?: AxiosRequestConfig): Promise<operations.OptionsContractResponse>;
    OptionsContractId(req: operations.OptionsContractIdRequest, config?: AxiosRequestConfig): Promise<operations.OptionsContractIdResponse>;
    OptionsEcho(config?: AxiosRequestConfig): Promise<operations.OptionsEchoResponse>;
    OptionsErc20(config?: AxiosRequestConfig): Promise<operations.OptionsErc20Response>;
    OptionsErc20Address(req: operations.OptionsErc20AddressRequest, config?: AxiosRequestConfig): Promise<operations.OptionsErc20AddressResponse>;
    OptionsKey(config?: AxiosRequestConfig): Promise<operations.OptionsKeyResponse>;
    OptionsKeyKey(req: operations.OptionsKeyKeyRequest, config?: AxiosRequestConfig): Promise<operations.OptionsKeyKeyResponse>;
    OptionsTransaction(config?: AxiosRequestConfig): Promise<operations.OptionsTransactionResponse>;
    OptionsTransactionHash(req: operations.OptionsTransactionHashRequest, config?: AxiosRequestConfig): Promise<operations.OptionsTransactionHashResponse>;
    OptionsTransactionHashReceipt(req: operations.OptionsTransactionHashReceiptRequest, config?: AxiosRequestConfig): Promise<operations.OptionsTransactionHashReceiptResponse>;
    OptionsVersion(config?: AxiosRequestConfig): Promise<operations.OptionsVersionResponse>;
    OptionsWallet(config?: AxiosRequestConfig): Promise<operations.OptionsWalletResponse>;
    OptionsWalletAccount(config?: AxiosRequestConfig): Promise<operations.OptionsWalletAccountResponse>;
    OptionsWalletAccountId(req: operations.OptionsWalletAccountIdRequest, config?: AxiosRequestConfig): Promise<operations.OptionsWalletAccountIdResponse>;
    OptionsWalletAccountIdPay(req: operations.OptionsWalletAccountIdPayRequest, config?: AxiosRequestConfig): Promise<operations.OptionsWalletAccountIdPayResponse>;
    PostAccount(req: operations.PostAccountRequest, config?: AxiosRequestConfig): Promise<operations.PostAccountResponse>;
    PostContract(config?: AxiosRequestConfig): Promise<operations.PostContractResponse>;
    PostContractId(req: operations.PostContractIdRequest, config?: AxiosRequestConfig): Promise<operations.PostContractIdResponse>;
    PostErc20(config?: AxiosRequestConfig): Promise<operations.PostErc20Response>;
    PostErc20Address(req: operations.PostErc20AddressRequest, config?: AxiosRequestConfig): Promise<operations.PostErc20AddressResponse>;
    PostKey(config?: AxiosRequestConfig): Promise<operations.PostKeyResponse>;
    PostTransaction(req: operations.PostTransactionRequest, config?: AxiosRequestConfig): Promise<operations.PostTransactionResponse>;
    PostWallet(config?: AxiosRequestConfig): Promise<operations.PostWalletResponse>;
    PostWalletAccount(config?: AxiosRequestConfig): Promise<operations.PostWalletAccountResponse>;
    PostWalletAccountIdContract(req: operations.PostWalletAccountIdContractRequest, config?: AxiosRequestConfig): Promise<operations.PostWalletAccountIdContractResponse>;
    PostWalletAccountIdErc20(req: operations.PostWalletAccountIdErc20Request, config?: AxiosRequestConfig): Promise<operations.PostWalletAccountIdErc20Response>;
    PostWalletAccountIdPay(req: operations.PostWalletAccountIdPayRequest, config?: AxiosRequestConfig): Promise<operations.PostWalletAccountIdPayResponse>;
}
export {};

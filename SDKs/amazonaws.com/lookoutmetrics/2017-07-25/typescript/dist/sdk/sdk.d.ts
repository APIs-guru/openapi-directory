import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    ActivateAnomalyDetector(req: operations.ActivateAnomalyDetectorRequest, config?: AxiosRequestConfig): Promise<operations.ActivateAnomalyDetectorResponse>;
    BackTestAnomalyDetector(req: operations.BackTestAnomalyDetectorRequest, config?: AxiosRequestConfig): Promise<operations.BackTestAnomalyDetectorResponse>;
    CreateAlert(req: operations.CreateAlertRequest, config?: AxiosRequestConfig): Promise<operations.CreateAlertResponse>;
    CreateAnomalyDetector(req: operations.CreateAnomalyDetectorRequest, config?: AxiosRequestConfig): Promise<operations.CreateAnomalyDetectorResponse>;
    CreateMetricSet(req: operations.CreateMetricSetRequest, config?: AxiosRequestConfig): Promise<operations.CreateMetricSetResponse>;
    DeleteAlert(req: operations.DeleteAlertRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAlertResponse>;
    DeleteAnomalyDetector(req: operations.DeleteAnomalyDetectorRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAnomalyDetectorResponse>;
    DescribeAlert(req: operations.DescribeAlertRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAlertResponse>;
    DescribeAnomalyDetectionExecutions(req: operations.DescribeAnomalyDetectionExecutionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAnomalyDetectionExecutionsResponse>;
    DescribeAnomalyDetector(req: operations.DescribeAnomalyDetectorRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAnomalyDetectorResponse>;
    DescribeMetricSet(req: operations.DescribeMetricSetRequest, config?: AxiosRequestConfig): Promise<operations.DescribeMetricSetResponse>;
    GetAnomalyGroup(req: operations.GetAnomalyGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetAnomalyGroupResponse>;
    GetFeedback(req: operations.GetFeedbackRequest, config?: AxiosRequestConfig): Promise<operations.GetFeedbackResponse>;
    GetSampleData(req: operations.GetSampleDataRequest, config?: AxiosRequestConfig): Promise<operations.GetSampleDataResponse>;
    ListAlerts(req: operations.ListAlertsRequest, config?: AxiosRequestConfig): Promise<operations.ListAlertsResponse>;
    ListAnomalyDetectors(req: operations.ListAnomalyDetectorsRequest, config?: AxiosRequestConfig): Promise<operations.ListAnomalyDetectorsResponse>;
    ListAnomalyGroupSummaries(req: operations.ListAnomalyGroupSummariesRequest, config?: AxiosRequestConfig): Promise<operations.ListAnomalyGroupSummariesResponse>;
    ListAnomalyGroupTimeSeries(req: operations.ListAnomalyGroupTimeSeriesRequest, config?: AxiosRequestConfig): Promise<operations.ListAnomalyGroupTimeSeriesResponse>;
    ListMetricSets(req: operations.ListMetricSetsRequest, config?: AxiosRequestConfig): Promise<operations.ListMetricSetsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    PutFeedback(req: operations.PutFeedbackRequest, config?: AxiosRequestConfig): Promise<operations.PutFeedbackResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAnomalyDetector(req: operations.UpdateAnomalyDetectorRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAnomalyDetectorResponse>;
    UpdateMetricSet(req: operations.UpdateMetricSetRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMetricSetResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateDataset(req: operations.CreateDatasetRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetResponse>;
    CreateDatasetGroup(req: operations.CreateDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetGroupResponse>;
    CreateDatasetImportJob(req: operations.CreateDatasetImportJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetImportJobResponse>;
    CreateForecast(req: operations.CreateForecastRequest, config?: AxiosRequestConfig): Promise<operations.CreateForecastResponse>;
    CreateForecastExportJob(req: operations.CreateForecastExportJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateForecastExportJobResponse>;
    CreatePredictor(req: operations.CreatePredictorRequest, config?: AxiosRequestConfig): Promise<operations.CreatePredictorResponse>;
    CreatePredictorBacktestExportJob(req: operations.CreatePredictorBacktestExportJobRequest, config?: AxiosRequestConfig): Promise<operations.CreatePredictorBacktestExportJobResponse>;
    DeleteDataset(req: operations.DeleteDatasetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetResponse>;
    DeleteDatasetGroup(req: operations.DeleteDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetGroupResponse>;
    DeleteDatasetImportJob(req: operations.DeleteDatasetImportJobRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetImportJobResponse>;
    DeleteForecast(req: operations.DeleteForecastRequest, config?: AxiosRequestConfig): Promise<operations.DeleteForecastResponse>;
    DeleteForecastExportJob(req: operations.DeleteForecastExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DeleteForecastExportJobResponse>;
    DeletePredictor(req: operations.DeletePredictorRequest, config?: AxiosRequestConfig): Promise<operations.DeletePredictorResponse>;
    DeletePredictorBacktestExportJob(req: operations.DeletePredictorBacktestExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DeletePredictorBacktestExportJobResponse>;
    DeleteResourceTree(req: operations.DeleteResourceTreeRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResourceTreeResponse>;
    DescribeDataset(req: operations.DescribeDatasetRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetResponse>;
    DescribeDatasetGroup(req: operations.DescribeDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetGroupResponse>;
    DescribeDatasetImportJob(req: operations.DescribeDatasetImportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetImportJobResponse>;
    DescribeForecast(req: operations.DescribeForecastRequest, config?: AxiosRequestConfig): Promise<operations.DescribeForecastResponse>;
    DescribeForecastExportJob(req: operations.DescribeForecastExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeForecastExportJobResponse>;
    DescribePredictor(req: operations.DescribePredictorRequest, config?: AxiosRequestConfig): Promise<operations.DescribePredictorResponse>;
    DescribePredictorBacktestExportJob(req: operations.DescribePredictorBacktestExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribePredictorBacktestExportJobResponse>;
    GetAccuracyMetrics(req: operations.GetAccuracyMetricsRequest, config?: AxiosRequestConfig): Promise<operations.GetAccuracyMetricsResponse>;
    ListDatasetGroups(req: operations.ListDatasetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetGroupsResponse>;
    ListDatasetImportJobs(req: operations.ListDatasetImportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetImportJobsResponse>;
    ListDatasets(req: operations.ListDatasetsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetsResponse>;
    ListForecastExportJobs(req: operations.ListForecastExportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListForecastExportJobsResponse>;
    ListForecasts(req: operations.ListForecastsRequest, config?: AxiosRequestConfig): Promise<operations.ListForecastsResponse>;
    ListPredictorBacktestExportJobs(req: operations.ListPredictorBacktestExportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListPredictorBacktestExportJobsResponse>;
    ListPredictors(req: operations.ListPredictorsRequest, config?: AxiosRequestConfig): Promise<operations.ListPredictorsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    StopResource(req: operations.StopResourceRequest, config?: AxiosRequestConfig): Promise<operations.StopResourceResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateDatasetGroup(req: operations.UpdateDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDatasetGroupResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateHttpNamespace(req: operations.CreateHttpNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.CreateHttpNamespaceResponse>;
    CreatePrivateDnsNamespace(req: operations.CreatePrivateDnsNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.CreatePrivateDnsNamespaceResponse>;
    CreatePublicDnsNamespace(req: operations.CreatePublicDnsNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.CreatePublicDnsNamespaceResponse>;
    CreateService(req: operations.CreateServiceRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceResponse>;
    DeleteNamespace(req: operations.DeleteNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteNamespaceResponse>;
    DeleteService(req: operations.DeleteServiceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceResponse>;
    DeregisterInstance(req: operations.DeregisterInstanceRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterInstanceResponse>;
    DiscoverInstances(req: operations.DiscoverInstancesRequest, config?: AxiosRequestConfig): Promise<operations.DiscoverInstancesResponse>;
    GetInstance(req: operations.GetInstanceRequest, config?: AxiosRequestConfig): Promise<operations.GetInstanceResponse>;
    GetInstancesHealthStatus(req: operations.GetInstancesHealthStatusRequest, config?: AxiosRequestConfig): Promise<operations.GetInstancesHealthStatusResponse>;
    GetNamespace(req: operations.GetNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.GetNamespaceResponse>;
    GetOperation(req: operations.GetOperationRequest, config?: AxiosRequestConfig): Promise<operations.GetOperationResponse>;
    GetService(req: operations.GetServiceRequest, config?: AxiosRequestConfig): Promise<operations.GetServiceResponse>;
    ListInstances(req: operations.ListInstancesRequest, config?: AxiosRequestConfig): Promise<operations.ListInstancesResponse>;
    ListNamespaces(req: operations.ListNamespacesRequest, config?: AxiosRequestConfig): Promise<operations.ListNamespacesResponse>;
    ListOperations(req: operations.ListOperationsRequest, config?: AxiosRequestConfig): Promise<operations.ListOperationsResponse>;
    ListServices(req: operations.ListServicesRequest, config?: AxiosRequestConfig): Promise<operations.ListServicesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    RegisterInstance(req: operations.RegisterInstanceRequest, config?: AxiosRequestConfig): Promise<operations.RegisterInstanceResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateHttpNamespace(req: operations.UpdateHttpNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateHttpNamespaceResponse>;
    UpdateInstanceCustomHealthStatus(req: operations.UpdateInstanceCustomHealthStatusRequest, config?: AxiosRequestConfig): Promise<operations.UpdateInstanceCustomHealthStatusResponse>;
    UpdatePrivateDnsNamespace(req: operations.UpdatePrivateDnsNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePrivateDnsNamespaceResponse>;
    UpdatePublicDnsNamespace(req: operations.UpdatePublicDnsNamespaceRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePublicDnsNamespaceResponse>;
    UpdateService(req: operations.UpdateServiceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceResponse>;
}
export {};

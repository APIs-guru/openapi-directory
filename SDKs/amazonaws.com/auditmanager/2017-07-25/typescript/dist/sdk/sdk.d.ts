import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateAssessmentReportEvidenceFolder(req: operations.AssociateAssessmentReportEvidenceFolderRequest, config?: AxiosRequestConfig): Promise<operations.AssociateAssessmentReportEvidenceFolderResponse>;
    BatchAssociateAssessmentReportEvidence(req: operations.BatchAssociateAssessmentReportEvidenceRequest, config?: AxiosRequestConfig): Promise<operations.BatchAssociateAssessmentReportEvidenceResponse>;
    BatchCreateDelegationByAssessment(req: operations.BatchCreateDelegationByAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.BatchCreateDelegationByAssessmentResponse>;
    BatchDeleteDelegationByAssessment(req: operations.BatchDeleteDelegationByAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.BatchDeleteDelegationByAssessmentResponse>;
    BatchDisassociateAssessmentReportEvidence(req: operations.BatchDisassociateAssessmentReportEvidenceRequest, config?: AxiosRequestConfig): Promise<operations.BatchDisassociateAssessmentReportEvidenceResponse>;
    BatchImportEvidenceToAssessmentControl(req: operations.BatchImportEvidenceToAssessmentControlRequest, config?: AxiosRequestConfig): Promise<operations.BatchImportEvidenceToAssessmentControlResponse>;
    CreateAssessment(req: operations.CreateAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.CreateAssessmentResponse>;
    CreateAssessmentFramework(req: operations.CreateAssessmentFrameworkRequest, config?: AxiosRequestConfig): Promise<operations.CreateAssessmentFrameworkResponse>;
    CreateAssessmentReport(req: operations.CreateAssessmentReportRequest, config?: AxiosRequestConfig): Promise<operations.CreateAssessmentReportResponse>;
    CreateControl(req: operations.CreateControlRequest, config?: AxiosRequestConfig): Promise<operations.CreateControlResponse>;
    DeleteAssessment(req: operations.DeleteAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAssessmentResponse>;
    DeleteAssessmentFramework(req: operations.DeleteAssessmentFrameworkRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAssessmentFrameworkResponse>;
    DeleteAssessmentReport(req: operations.DeleteAssessmentReportRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAssessmentReportResponse>;
    DeleteControl(req: operations.DeleteControlRequest, config?: AxiosRequestConfig): Promise<operations.DeleteControlResponse>;
    DeregisterAccount(req: operations.DeregisterAccountRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterAccountResponse>;
    DeregisterOrganizationAdminAccount(req: operations.DeregisterOrganizationAdminAccountRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterOrganizationAdminAccountResponse>;
    DisassociateAssessmentReportEvidenceFolder(req: operations.DisassociateAssessmentReportEvidenceFolderRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateAssessmentReportEvidenceFolderResponse>;
    GetAccountStatus(req: operations.GetAccountStatusRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountStatusResponse>;
    GetAssessment(req: operations.GetAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.GetAssessmentResponse>;
    GetAssessmentFramework(req: operations.GetAssessmentFrameworkRequest, config?: AxiosRequestConfig): Promise<operations.GetAssessmentFrameworkResponse>;
    GetAssessmentReportUrl(req: operations.GetAssessmentReportUrlRequest, config?: AxiosRequestConfig): Promise<operations.GetAssessmentReportUrlResponse>;
    GetChangeLogs(req: operations.GetChangeLogsRequest, config?: AxiosRequestConfig): Promise<operations.GetChangeLogsResponse>;
    GetControl(req: operations.GetControlRequest, config?: AxiosRequestConfig): Promise<operations.GetControlResponse>;
    GetDelegations(req: operations.GetDelegationsRequest, config?: AxiosRequestConfig): Promise<operations.GetDelegationsResponse>;
    GetEvidence(req: operations.GetEvidenceRequest, config?: AxiosRequestConfig): Promise<operations.GetEvidenceResponse>;
    GetEvidenceByEvidenceFolder(req: operations.GetEvidenceByEvidenceFolderRequest, config?: AxiosRequestConfig): Promise<operations.GetEvidenceByEvidenceFolderResponse>;
    GetEvidenceFolder(req: operations.GetEvidenceFolderRequest, config?: AxiosRequestConfig): Promise<operations.GetEvidenceFolderResponse>;
    GetEvidenceFoldersByAssessment(req: operations.GetEvidenceFoldersByAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.GetEvidenceFoldersByAssessmentResponse>;
    GetEvidenceFoldersByAssessmentControl(req: operations.GetEvidenceFoldersByAssessmentControlRequest, config?: AxiosRequestConfig): Promise<operations.GetEvidenceFoldersByAssessmentControlResponse>;
    GetOrganizationAdminAccount(req: operations.GetOrganizationAdminAccountRequest, config?: AxiosRequestConfig): Promise<operations.GetOrganizationAdminAccountResponse>;
    GetServicesInScope(req: operations.GetServicesInScopeRequest, config?: AxiosRequestConfig): Promise<operations.GetServicesInScopeResponse>;
    GetSettings(req: operations.GetSettingsRequest, config?: AxiosRequestConfig): Promise<operations.GetSettingsResponse>;
    ListAssessmentFrameworks(req: operations.ListAssessmentFrameworksRequest, config?: AxiosRequestConfig): Promise<operations.ListAssessmentFrameworksResponse>;
    ListAssessmentReports(req: operations.ListAssessmentReportsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssessmentReportsResponse>;
    ListAssessments(req: operations.ListAssessmentsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssessmentsResponse>;
    ListControls(req: operations.ListControlsRequest, config?: AxiosRequestConfig): Promise<operations.ListControlsResponse>;
    ListKeywordsForDataSource(req: operations.ListKeywordsForDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.ListKeywordsForDataSourceResponse>;
    ListNotifications(req: operations.ListNotificationsRequest, config?: AxiosRequestConfig): Promise<operations.ListNotificationsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    RegisterAccount(req: operations.RegisterAccountRequest, config?: AxiosRequestConfig): Promise<operations.RegisterAccountResponse>;
    RegisterOrganizationAdminAccount(req: operations.RegisterOrganizationAdminAccountRequest, config?: AxiosRequestConfig): Promise<operations.RegisterOrganizationAdminAccountResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAssessment(req: operations.UpdateAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssessmentResponse>;
    UpdateAssessmentControl(req: operations.UpdateAssessmentControlRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssessmentControlResponse>;
    UpdateAssessmentControlSetStatus(req: operations.UpdateAssessmentControlSetStatusRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssessmentControlSetStatusResponse>;
    UpdateAssessmentFramework(req: operations.UpdateAssessmentFrameworkRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssessmentFrameworkResponse>;
    UpdateAssessmentStatus(req: operations.UpdateAssessmentStatusRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssessmentStatusResponse>;
    UpdateControl(req: operations.UpdateControlRequest, config?: AxiosRequestConfig): Promise<operations.UpdateControlResponse>;
    UpdateSettings(req: operations.UpdateSettingsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSettingsResponse>;
    ValidateAssessmentReportIntegrity(req: operations.ValidateAssessmentReportIntegrityRequest, config?: AxiosRequestConfig): Promise<operations.ValidateAssessmentReportIntegrityResponse>;
}
export {};

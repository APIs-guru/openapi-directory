import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AcceptResourceShareInvitation(req: operations.AcceptResourceShareInvitationRequest, config?: AxiosRequestConfig): Promise<operations.AcceptResourceShareInvitationResponse>;
    AssociateResourceShare(req: operations.AssociateResourceShareRequest, config?: AxiosRequestConfig): Promise<operations.AssociateResourceShareResponse>;
    AssociateResourceSharePermission(req: operations.AssociateResourceSharePermissionRequest, config?: AxiosRequestConfig): Promise<operations.AssociateResourceSharePermissionResponse>;
    CreateResourceShare(req: operations.CreateResourceShareRequest, config?: AxiosRequestConfig): Promise<operations.CreateResourceShareResponse>;
    DeleteResourceShare(req: operations.DeleteResourceShareRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResourceShareResponse>;
    DisassociateResourceShare(req: operations.DisassociateResourceShareRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateResourceShareResponse>;
    DisassociateResourceSharePermission(req: operations.DisassociateResourceSharePermissionRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateResourceSharePermissionResponse>;
    EnableSharingWithAwsOrganization(req: operations.EnableSharingWithAwsOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.EnableSharingWithAwsOrganizationResponse>;
    GetPermission(req: operations.GetPermissionRequest, config?: AxiosRequestConfig): Promise<operations.GetPermissionResponse>;
    GetResourcePolicies(req: operations.GetResourcePoliciesRequest, config?: AxiosRequestConfig): Promise<operations.GetResourcePoliciesResponse>;
    GetResourceShareAssociations(req: operations.GetResourceShareAssociationsRequest, config?: AxiosRequestConfig): Promise<operations.GetResourceShareAssociationsResponse>;
    GetResourceShareInvitations(req: operations.GetResourceShareInvitationsRequest, config?: AxiosRequestConfig): Promise<operations.GetResourceShareInvitationsResponse>;
    GetResourceShares(req: operations.GetResourceSharesRequest, config?: AxiosRequestConfig): Promise<operations.GetResourceSharesResponse>;
    ListPendingInvitationResources(req: operations.ListPendingInvitationResourcesRequest, config?: AxiosRequestConfig): Promise<operations.ListPendingInvitationResourcesResponse>;
    ListPermissions(req: operations.ListPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.ListPermissionsResponse>;
    ListPrincipals(req: operations.ListPrincipalsRequest, config?: AxiosRequestConfig): Promise<operations.ListPrincipalsResponse>;
    ListResourceSharePermissions(req: operations.ListResourceSharePermissionsRequest, config?: AxiosRequestConfig): Promise<operations.ListResourceSharePermissionsResponse>;
    ListResourceTypes(req: operations.ListResourceTypesRequest, config?: AxiosRequestConfig): Promise<operations.ListResourceTypesResponse>;
    ListResources(req: operations.ListResourcesRequest, config?: AxiosRequestConfig): Promise<operations.ListResourcesResponse>;
    PromoteResourceShareCreatedFromPolicy(req: operations.PromoteResourceShareCreatedFromPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PromoteResourceShareCreatedFromPolicyResponse>;
    RejectResourceShareInvitation(req: operations.RejectResourceShareInvitationRequest, config?: AxiosRequestConfig): Promise<operations.RejectResourceShareInvitationResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateResourceShare(req: operations.UpdateResourceShareRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResourceShareResponse>;
}
export {};

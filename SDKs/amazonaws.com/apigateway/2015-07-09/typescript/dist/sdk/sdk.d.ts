import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateApiKey(req: operations.CreateApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.CreateApiKeyResponse>;
    CreateAuthorizer(req: operations.CreateAuthorizerRequest, config?: AxiosRequestConfig): Promise<operations.CreateAuthorizerResponse>;
    CreateBasePathMapping(req: operations.CreateBasePathMappingRequest, config?: AxiosRequestConfig): Promise<operations.CreateBasePathMappingResponse>;
    CreateDeployment(req: operations.CreateDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.CreateDeploymentResponse>;
    CreateDocumentationPart(req: operations.CreateDocumentationPartRequest, config?: AxiosRequestConfig): Promise<operations.CreateDocumentationPartResponse>;
    CreateDocumentationVersion(req: operations.CreateDocumentationVersionRequest, config?: AxiosRequestConfig): Promise<operations.CreateDocumentationVersionResponse>;
    CreateDomainName(req: operations.CreateDomainNameRequest, config?: AxiosRequestConfig): Promise<operations.CreateDomainNameResponse>;
    CreateModel(req: operations.CreateModelRequest, config?: AxiosRequestConfig): Promise<operations.CreateModelResponse>;
    CreateRequestValidator(req: operations.CreateRequestValidatorRequest, config?: AxiosRequestConfig): Promise<operations.CreateRequestValidatorResponse>;
    CreateResource(req: operations.CreateResourceRequest, config?: AxiosRequestConfig): Promise<operations.CreateResourceResponse>;
    CreateRestApi(req: operations.CreateRestApiRequest, config?: AxiosRequestConfig): Promise<operations.CreateRestApiResponse>;
    CreateStage(req: operations.CreateStageRequest, config?: AxiosRequestConfig): Promise<operations.CreateStageResponse>;
    CreateUsagePlan(req: operations.CreateUsagePlanRequest, config?: AxiosRequestConfig): Promise<operations.CreateUsagePlanResponse>;
    CreateUsagePlanKey(req: operations.CreateUsagePlanKeyRequest, config?: AxiosRequestConfig): Promise<operations.CreateUsagePlanKeyResponse>;
    CreateVpcLink(req: operations.CreateVpcLinkRequest, config?: AxiosRequestConfig): Promise<operations.CreateVpcLinkResponse>;
    DeleteApiKey(req: operations.DeleteApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApiKeyResponse>;
    DeleteAuthorizer(req: operations.DeleteAuthorizerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAuthorizerResponse>;
    DeleteBasePathMapping(req: operations.DeleteBasePathMappingRequest, config?: AxiosRequestConfig): Promise<operations.DeleteBasePathMappingResponse>;
    DeleteClientCertificate(req: operations.DeleteClientCertificateRequest, config?: AxiosRequestConfig): Promise<operations.DeleteClientCertificateResponse>;
    DeleteDeployment(req: operations.DeleteDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDeploymentResponse>;
    DeleteDocumentationPart(req: operations.DeleteDocumentationPartRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDocumentationPartResponse>;
    DeleteDocumentationVersion(req: operations.DeleteDocumentationVersionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDocumentationVersionResponse>;
    DeleteDomainName(req: operations.DeleteDomainNameRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDomainNameResponse>;
    DeleteGatewayResponse(req: operations.DeleteGatewayResponseRequest, config?: AxiosRequestConfig): Promise<operations.DeleteGatewayResponseResponse>;
    DeleteIntegration(req: operations.DeleteIntegrationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteIntegrationResponse>;
    DeleteIntegrationResponse(req: operations.DeleteIntegrationResponseRequest, config?: AxiosRequestConfig): Promise<operations.DeleteIntegrationResponseResponse>;
    DeleteMethod(req: operations.DeleteMethodRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMethodResponse>;
    DeleteMethodResponse(req: operations.DeleteMethodResponseRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMethodResponseResponse>;
    DeleteModel(req: operations.DeleteModelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteModelResponse>;
    DeleteRequestValidator(req: operations.DeleteRequestValidatorRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRequestValidatorResponse>;
    DeleteResource(req: operations.DeleteResourceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResourceResponse>;
    DeleteRestApi(req: operations.DeleteRestApiRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRestApiResponse>;
    DeleteStage(req: operations.DeleteStageRequest, config?: AxiosRequestConfig): Promise<operations.DeleteStageResponse>;
    DeleteUsagePlan(req: operations.DeleteUsagePlanRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUsagePlanResponse>;
    DeleteUsagePlanKey(req: operations.DeleteUsagePlanKeyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUsagePlanKeyResponse>;
    DeleteVpcLink(req: operations.DeleteVpcLinkRequest, config?: AxiosRequestConfig): Promise<operations.DeleteVpcLinkResponse>;
    FlushStageAuthorizersCache(req: operations.FlushStageAuthorizersCacheRequest, config?: AxiosRequestConfig): Promise<operations.FlushStageAuthorizersCacheResponse>;
    FlushStageCache(req: operations.FlushStageCacheRequest, config?: AxiosRequestConfig): Promise<operations.FlushStageCacheResponse>;
    GenerateClientCertificate(req: operations.GenerateClientCertificateRequest, config?: AxiosRequestConfig): Promise<operations.GenerateClientCertificateResponse>;
    GetAccount(req: operations.GetAccountRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountResponse>;
    GetApiKey(req: operations.GetApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.GetApiKeyResponse>;
    GetApiKeys(req: operations.GetApiKeysRequest, config?: AxiosRequestConfig): Promise<operations.GetApiKeysResponse>;
    GetAuthorizer(req: operations.GetAuthorizerRequest, config?: AxiosRequestConfig): Promise<operations.GetAuthorizerResponse>;
    GetAuthorizers(req: operations.GetAuthorizersRequest, config?: AxiosRequestConfig): Promise<operations.GetAuthorizersResponse>;
    GetBasePathMapping(req: operations.GetBasePathMappingRequest, config?: AxiosRequestConfig): Promise<operations.GetBasePathMappingResponse>;
    GetBasePathMappings(req: operations.GetBasePathMappingsRequest, config?: AxiosRequestConfig): Promise<operations.GetBasePathMappingsResponse>;
    GetClientCertificate(req: operations.GetClientCertificateRequest, config?: AxiosRequestConfig): Promise<operations.GetClientCertificateResponse>;
    GetClientCertificates(req: operations.GetClientCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.GetClientCertificatesResponse>;
    GetDeployment(req: operations.GetDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.GetDeploymentResponse>;
    GetDeployments(req: operations.GetDeploymentsRequest, config?: AxiosRequestConfig): Promise<operations.GetDeploymentsResponse>;
    GetDocumentationPart(req: operations.GetDocumentationPartRequest, config?: AxiosRequestConfig): Promise<operations.GetDocumentationPartResponse>;
    GetDocumentationParts(req: operations.GetDocumentationPartsRequest, config?: AxiosRequestConfig): Promise<operations.GetDocumentationPartsResponse>;
    GetDocumentationVersion(req: operations.GetDocumentationVersionRequest, config?: AxiosRequestConfig): Promise<operations.GetDocumentationVersionResponse>;
    GetDocumentationVersions(req: operations.GetDocumentationVersionsRequest, config?: AxiosRequestConfig): Promise<operations.GetDocumentationVersionsResponse>;
    GetDomainName(req: operations.GetDomainNameRequest, config?: AxiosRequestConfig): Promise<operations.GetDomainNameResponse>;
    GetDomainNames(req: operations.GetDomainNamesRequest, config?: AxiosRequestConfig): Promise<operations.GetDomainNamesResponse>;
    GetExport(req: operations.GetExportRequest, config?: AxiosRequestConfig): Promise<operations.GetExportResponse>;
    GetGatewayResponse(req: operations.GetGatewayResponseRequest, config?: AxiosRequestConfig): Promise<operations.GetGatewayResponseResponse>;
    GetGatewayResponses(req: operations.GetGatewayResponsesRequest, config?: AxiosRequestConfig): Promise<operations.GetGatewayResponsesResponse>;
    GetIntegration(req: operations.GetIntegrationRequest, config?: AxiosRequestConfig): Promise<operations.GetIntegrationResponse>;
    GetIntegrationResponse(req: operations.GetIntegrationResponseRequest, config?: AxiosRequestConfig): Promise<operations.GetIntegrationResponseResponse>;
    GetMethod(req: operations.GetMethodRequest, config?: AxiosRequestConfig): Promise<operations.GetMethodResponse>;
    GetMethodResponse(req: operations.GetMethodResponseRequest, config?: AxiosRequestConfig): Promise<operations.GetMethodResponseResponse>;
    GetModel(req: operations.GetModelRequest, config?: AxiosRequestConfig): Promise<operations.GetModelResponse>;
    GetModelTemplate(req: operations.GetModelTemplateRequest, config?: AxiosRequestConfig): Promise<operations.GetModelTemplateResponse>;
    GetModels(req: operations.GetModelsRequest, config?: AxiosRequestConfig): Promise<operations.GetModelsResponse>;
    GetRequestValidator(req: operations.GetRequestValidatorRequest, config?: AxiosRequestConfig): Promise<operations.GetRequestValidatorResponse>;
    GetRequestValidators(req: operations.GetRequestValidatorsRequest, config?: AxiosRequestConfig): Promise<operations.GetRequestValidatorsResponse>;
    GetResource(req: operations.GetResourceRequest, config?: AxiosRequestConfig): Promise<operations.GetResourceResponse>;
    GetResources(req: operations.GetResourcesRequest, config?: AxiosRequestConfig): Promise<operations.GetResourcesResponse>;
    GetRestApi(req: operations.GetRestApiRequest, config?: AxiosRequestConfig): Promise<operations.GetRestApiResponse>;
    GetRestApis(req: operations.GetRestApisRequest, config?: AxiosRequestConfig): Promise<operations.GetRestApisResponse>;
    GetSdk(req: operations.GetSdkRequest, config?: AxiosRequestConfig): Promise<operations.GetSdkResponse>;
    GetSdkType(req: operations.GetSdkTypeRequest, config?: AxiosRequestConfig): Promise<operations.GetSdkTypeResponse>;
    GetSdkTypes(req: operations.GetSdkTypesRequest, config?: AxiosRequestConfig): Promise<operations.GetSdkTypesResponse>;
    GetStage(req: operations.GetStageRequest, config?: AxiosRequestConfig): Promise<operations.GetStageResponse>;
    GetStages(req: operations.GetStagesRequest, config?: AxiosRequestConfig): Promise<operations.GetStagesResponse>;
    GetTags(req: operations.GetTagsRequest, config?: AxiosRequestConfig): Promise<operations.GetTagsResponse>;
    GetUsage(req: operations.GetUsageRequest, config?: AxiosRequestConfig): Promise<operations.GetUsageResponse>;
    GetUsagePlan(req: operations.GetUsagePlanRequest, config?: AxiosRequestConfig): Promise<operations.GetUsagePlanResponse>;
    GetUsagePlanKey(req: operations.GetUsagePlanKeyRequest, config?: AxiosRequestConfig): Promise<operations.GetUsagePlanKeyResponse>;
    GetUsagePlanKeys(req: operations.GetUsagePlanKeysRequest, config?: AxiosRequestConfig): Promise<operations.GetUsagePlanKeysResponse>;
    GetUsagePlans(req: operations.GetUsagePlansRequest, config?: AxiosRequestConfig): Promise<operations.GetUsagePlansResponse>;
    GetVpcLink(req: operations.GetVpcLinkRequest, config?: AxiosRequestConfig): Promise<operations.GetVpcLinkResponse>;
    GetVpcLinks(req: operations.GetVpcLinksRequest, config?: AxiosRequestConfig): Promise<operations.GetVpcLinksResponse>;
    ImportApiKeys(req: operations.ImportApiKeysRequest, config?: AxiosRequestConfig): Promise<operations.ImportApiKeysResponse>;
    ImportDocumentationParts(req: operations.ImportDocumentationPartsRequest, config?: AxiosRequestConfig): Promise<operations.ImportDocumentationPartsResponse>;
    ImportRestApi(req: operations.ImportRestApiRequest, config?: AxiosRequestConfig): Promise<operations.ImportRestApiResponse>;
    PutGatewayResponse(req: operations.PutGatewayResponseRequest, config?: AxiosRequestConfig): Promise<operations.PutGatewayResponseResponse>;
    PutIntegration(req: operations.PutIntegrationRequest, config?: AxiosRequestConfig): Promise<operations.PutIntegrationResponse>;
    PutIntegrationResponse(req: operations.PutIntegrationResponseRequest, config?: AxiosRequestConfig): Promise<operations.PutIntegrationResponseResponse>;
    PutMethod(req: operations.PutMethodRequest, config?: AxiosRequestConfig): Promise<operations.PutMethodResponse>;
    PutMethodResponse(req: operations.PutMethodResponseRequest, config?: AxiosRequestConfig): Promise<operations.PutMethodResponseResponse>;
    PutRestApi(req: operations.PutRestApiRequest, config?: AxiosRequestConfig): Promise<operations.PutRestApiResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    TestInvokeAuthorizer(req: operations.TestInvokeAuthorizerRequest, config?: AxiosRequestConfig): Promise<operations.TestInvokeAuthorizerResponse>;
    TestInvokeMethod(req: operations.TestInvokeMethodRequest, config?: AxiosRequestConfig): Promise<operations.TestInvokeMethodResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAccount(req: operations.UpdateAccountRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAccountResponse>;
    UpdateApiKey(req: operations.UpdateApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApiKeyResponse>;
    UpdateAuthorizer(req: operations.UpdateAuthorizerRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAuthorizerResponse>;
    UpdateBasePathMapping(req: operations.UpdateBasePathMappingRequest, config?: AxiosRequestConfig): Promise<operations.UpdateBasePathMappingResponse>;
    UpdateClientCertificate(req: operations.UpdateClientCertificateRequest, config?: AxiosRequestConfig): Promise<operations.UpdateClientCertificateResponse>;
    UpdateDeployment(req: operations.UpdateDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDeploymentResponse>;
    UpdateDocumentationPart(req: operations.UpdateDocumentationPartRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDocumentationPartResponse>;
    UpdateDocumentationVersion(req: operations.UpdateDocumentationVersionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDocumentationVersionResponse>;
    UpdateDomainName(req: operations.UpdateDomainNameRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDomainNameResponse>;
    UpdateGatewayResponse(req: operations.UpdateGatewayResponseRequest, config?: AxiosRequestConfig): Promise<operations.UpdateGatewayResponseResponse>;
    UpdateIntegration(req: operations.UpdateIntegrationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateIntegrationResponse>;
    UpdateIntegrationResponse(req: operations.UpdateIntegrationResponseRequest, config?: AxiosRequestConfig): Promise<operations.UpdateIntegrationResponseResponse>;
    UpdateMethod(req: operations.UpdateMethodRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMethodResponse>;
    UpdateMethodResponse(req: operations.UpdateMethodResponseRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMethodResponseResponse>;
    UpdateModel(req: operations.UpdateModelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateModelResponse>;
    UpdateRequestValidator(req: operations.UpdateRequestValidatorRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRequestValidatorResponse>;
    UpdateResource(req: operations.UpdateResourceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResourceResponse>;
    UpdateRestApi(req: operations.UpdateRestApiRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRestApiResponse>;
    UpdateStage(req: operations.UpdateStageRequest, config?: AxiosRequestConfig): Promise<operations.UpdateStageResponse>;
    UpdateUsage(req: operations.UpdateUsageRequest, config?: AxiosRequestConfig): Promise<operations.UpdateUsageResponse>;
    UpdateUsagePlan(req: operations.UpdateUsagePlanRequest, config?: AxiosRequestConfig): Promise<operations.UpdateUsagePlanResponse>;
    UpdateVpcLink(req: operations.UpdateVpcLinkRequest, config?: AxiosRequestConfig): Promise<operations.UpdateVpcLinkResponse>;
}
export {};

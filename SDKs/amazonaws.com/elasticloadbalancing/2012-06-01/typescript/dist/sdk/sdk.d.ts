import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    GetApplySecurityGroupsToLoadBalancer(req: operations.GetApplySecurityGroupsToLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.GetApplySecurityGroupsToLoadBalancerResponse>;
    GetAttachLoadBalancerToSubnets(req: operations.GetAttachLoadBalancerToSubnetsRequest, config?: AxiosRequestConfig): Promise<operations.GetAttachLoadBalancerToSubnetsResponse>;
    GetConfigureHealthCheck(req: operations.GetConfigureHealthCheckRequest, config?: AxiosRequestConfig): Promise<operations.GetConfigureHealthCheckResponse>;
    GetCreateAppCookieStickinessPolicy(req: operations.GetCreateAppCookieStickinessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetCreateAppCookieStickinessPolicyResponse>;
    GetCreateLbCookieStickinessPolicy(req: operations.GetCreateLbCookieStickinessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetCreateLbCookieStickinessPolicyResponse>;
    GetDeleteLoadBalancer(req: operations.GetDeleteLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteLoadBalancerResponse>;
    GetDeleteLoadBalancerListeners(req: operations.GetDeleteLoadBalancerListenersRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteLoadBalancerListenersResponse>;
    GetDeleteLoadBalancerPolicy(req: operations.GetDeleteLoadBalancerPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteLoadBalancerPolicyResponse>;
    GetDescribeAccountLimits(req: operations.GetDescribeAccountLimitsRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeAccountLimitsResponse>;
    GetDescribeLoadBalancerAttributes(req: operations.GetDescribeLoadBalancerAttributesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeLoadBalancerAttributesResponse>;
    GetDescribeLoadBalancerPolicies(req: operations.GetDescribeLoadBalancerPoliciesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeLoadBalancerPoliciesResponse>;
    GetDescribeLoadBalancerPolicyTypes(req: operations.GetDescribeLoadBalancerPolicyTypesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeLoadBalancerPolicyTypesResponse>;
    GetDescribeLoadBalancers(req: operations.GetDescribeLoadBalancersRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeLoadBalancersResponse>;
    GetDescribeTags(req: operations.GetDescribeTagsRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeTagsResponse>;
    GetDetachLoadBalancerFromSubnets(req: operations.GetDetachLoadBalancerFromSubnetsRequest, config?: AxiosRequestConfig): Promise<operations.GetDetachLoadBalancerFromSubnetsResponse>;
    GetDisableAvailabilityZonesForLoadBalancer(req: operations.GetDisableAvailabilityZonesForLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.GetDisableAvailabilityZonesForLoadBalancerResponse>;
    GetEnableAvailabilityZonesForLoadBalancer(req: operations.GetEnableAvailabilityZonesForLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.GetEnableAvailabilityZonesForLoadBalancerResponse>;
    GetSetLoadBalancerListenerSslCertificate(req: operations.GetSetLoadBalancerListenerSslCertificateRequest, config?: AxiosRequestConfig): Promise<operations.GetSetLoadBalancerListenerSslCertificateResponse>;
    GetSetLoadBalancerPoliciesForBackendServer(req: operations.GetSetLoadBalancerPoliciesForBackendServerRequest, config?: AxiosRequestConfig): Promise<operations.GetSetLoadBalancerPoliciesForBackendServerResponse>;
    GetSetLoadBalancerPoliciesOfListener(req: operations.GetSetLoadBalancerPoliciesOfListenerRequest, config?: AxiosRequestConfig): Promise<operations.GetSetLoadBalancerPoliciesOfListenerResponse>;
    PostAddTags(req: operations.PostAddTagsRequest, config?: AxiosRequestConfig): Promise<operations.PostAddTagsResponse>;
    PostApplySecurityGroupsToLoadBalancer(req: operations.PostApplySecurityGroupsToLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostApplySecurityGroupsToLoadBalancerResponse>;
    PostAttachLoadBalancerToSubnets(req: operations.PostAttachLoadBalancerToSubnetsRequest, config?: AxiosRequestConfig): Promise<operations.PostAttachLoadBalancerToSubnetsResponse>;
    PostConfigureHealthCheck(req: operations.PostConfigureHealthCheckRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigureHealthCheckResponse>;
    PostCreateAppCookieStickinessPolicy(req: operations.PostCreateAppCookieStickinessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateAppCookieStickinessPolicyResponse>;
    PostCreateLbCookieStickinessPolicy(req: operations.PostCreateLbCookieStickinessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateLbCookieStickinessPolicyResponse>;
    PostCreateLoadBalancer(req: operations.PostCreateLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateLoadBalancerResponse>;
    PostCreateLoadBalancerListeners(req: operations.PostCreateLoadBalancerListenersRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateLoadBalancerListenersResponse>;
    PostCreateLoadBalancerPolicy(req: operations.PostCreateLoadBalancerPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateLoadBalancerPolicyResponse>;
    PostDeleteLoadBalancer(req: operations.PostDeleteLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteLoadBalancerResponse>;
    PostDeleteLoadBalancerListeners(req: operations.PostDeleteLoadBalancerListenersRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteLoadBalancerListenersResponse>;
    PostDeleteLoadBalancerPolicy(req: operations.PostDeleteLoadBalancerPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteLoadBalancerPolicyResponse>;
    PostDeregisterInstancesFromLoadBalancer(req: operations.PostDeregisterInstancesFromLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostDeregisterInstancesFromLoadBalancerResponse>;
    PostDescribeAccountLimits(req: operations.PostDescribeAccountLimitsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeAccountLimitsResponse>;
    PostDescribeInstanceHealth(req: operations.PostDescribeInstanceHealthRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeInstanceHealthResponse>;
    PostDescribeLoadBalancerAttributes(req: operations.PostDescribeLoadBalancerAttributesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeLoadBalancerAttributesResponse>;
    PostDescribeLoadBalancerPolicies(req: operations.PostDescribeLoadBalancerPoliciesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeLoadBalancerPoliciesResponse>;
    PostDescribeLoadBalancerPolicyTypes(req: operations.PostDescribeLoadBalancerPolicyTypesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeLoadBalancerPolicyTypesResponse>;
    PostDescribeLoadBalancers(req: operations.PostDescribeLoadBalancersRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeLoadBalancersResponse>;
    PostDescribeTags(req: operations.PostDescribeTagsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeTagsResponse>;
    PostDetachLoadBalancerFromSubnets(req: operations.PostDetachLoadBalancerFromSubnetsRequest, config?: AxiosRequestConfig): Promise<operations.PostDetachLoadBalancerFromSubnetsResponse>;
    PostDisableAvailabilityZonesForLoadBalancer(req: operations.PostDisableAvailabilityZonesForLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostDisableAvailabilityZonesForLoadBalancerResponse>;
    PostEnableAvailabilityZonesForLoadBalancer(req: operations.PostEnableAvailabilityZonesForLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostEnableAvailabilityZonesForLoadBalancerResponse>;
    PostModifyLoadBalancerAttributes(req: operations.PostModifyLoadBalancerAttributesRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyLoadBalancerAttributesResponse>;
    PostRegisterInstancesWithLoadBalancer(req: operations.PostRegisterInstancesWithLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostRegisterInstancesWithLoadBalancerResponse>;
    PostRemoveTags(req: operations.PostRemoveTagsRequest, config?: AxiosRequestConfig): Promise<operations.PostRemoveTagsResponse>;
    PostSetLoadBalancerListenerSslCertificate(req: operations.PostSetLoadBalancerListenerSslCertificateRequest, config?: AxiosRequestConfig): Promise<operations.PostSetLoadBalancerListenerSslCertificateResponse>;
    PostSetLoadBalancerPoliciesForBackendServer(req: operations.PostSetLoadBalancerPoliciesForBackendServerRequest, config?: AxiosRequestConfig): Promise<operations.PostSetLoadBalancerPoliciesForBackendServerResponse>;
    PostSetLoadBalancerPoliciesOfListener(req: operations.PostSetLoadBalancerPoliciesOfListenerRequest, config?: AxiosRequestConfig): Promise<operations.PostSetLoadBalancerPoliciesOfListenerResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AcceptEnvironmentAccountConnection(req: operations.AcceptEnvironmentAccountConnectionRequest, config?: AxiosRequestConfig): Promise<operations.AcceptEnvironmentAccountConnectionResponse>;
    CancelEnvironmentDeployment(req: operations.CancelEnvironmentDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.CancelEnvironmentDeploymentResponse>;
    CancelServiceInstanceDeployment(req: operations.CancelServiceInstanceDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.CancelServiceInstanceDeploymentResponse>;
    CancelServicePipelineDeployment(req: operations.CancelServicePipelineDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.CancelServicePipelineDeploymentResponse>;
    CreateEnvironment(req: operations.CreateEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.CreateEnvironmentResponse>;
    CreateEnvironmentAccountConnection(req: operations.CreateEnvironmentAccountConnectionRequest, config?: AxiosRequestConfig): Promise<operations.CreateEnvironmentAccountConnectionResponse>;
    CreateEnvironmentTemplate(req: operations.CreateEnvironmentTemplateRequest, config?: AxiosRequestConfig): Promise<operations.CreateEnvironmentTemplateResponse>;
    CreateEnvironmentTemplateVersion(req: operations.CreateEnvironmentTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.CreateEnvironmentTemplateVersionResponse>;
    CreateService(req: operations.CreateServiceRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceResponse>;
    CreateServiceTemplate(req: operations.CreateServiceTemplateRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceTemplateResponse>;
    CreateServiceTemplateVersion(req: operations.CreateServiceTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.CreateServiceTemplateVersionResponse>;
    DeleteEnvironment(req: operations.DeleteEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEnvironmentResponse>;
    DeleteEnvironmentAccountConnection(req: operations.DeleteEnvironmentAccountConnectionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEnvironmentAccountConnectionResponse>;
    DeleteEnvironmentTemplate(req: operations.DeleteEnvironmentTemplateRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEnvironmentTemplateResponse>;
    DeleteEnvironmentTemplateVersion(req: operations.DeleteEnvironmentTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEnvironmentTemplateVersionResponse>;
    DeleteService(req: operations.DeleteServiceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceResponse>;
    DeleteServiceTemplate(req: operations.DeleteServiceTemplateRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceTemplateResponse>;
    DeleteServiceTemplateVersion(req: operations.DeleteServiceTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServiceTemplateVersionResponse>;
    GetAccountSettings(req: operations.GetAccountSettingsRequest, config?: AxiosRequestConfig): Promise<operations.GetAccountSettingsResponse>;
    GetEnvironment(req: operations.GetEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.GetEnvironmentResponse>;
    GetEnvironmentAccountConnection(req: operations.GetEnvironmentAccountConnectionRequest, config?: AxiosRequestConfig): Promise<operations.GetEnvironmentAccountConnectionResponse>;
    GetEnvironmentTemplate(req: operations.GetEnvironmentTemplateRequest, config?: AxiosRequestConfig): Promise<operations.GetEnvironmentTemplateResponse>;
    GetEnvironmentTemplateVersion(req: operations.GetEnvironmentTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.GetEnvironmentTemplateVersionResponse>;
    GetService(req: operations.GetServiceRequest, config?: AxiosRequestConfig): Promise<operations.GetServiceResponse>;
    GetServiceInstance(req: operations.GetServiceInstanceRequest, config?: AxiosRequestConfig): Promise<operations.GetServiceInstanceResponse>;
    GetServiceTemplate(req: operations.GetServiceTemplateRequest, config?: AxiosRequestConfig): Promise<operations.GetServiceTemplateResponse>;
    GetServiceTemplateVersion(req: operations.GetServiceTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.GetServiceTemplateVersionResponse>;
    ListEnvironmentAccountConnections(req: operations.ListEnvironmentAccountConnectionsRequest, config?: AxiosRequestConfig): Promise<operations.ListEnvironmentAccountConnectionsResponse>;
    ListEnvironmentTemplateVersions(req: operations.ListEnvironmentTemplateVersionsRequest, config?: AxiosRequestConfig): Promise<operations.ListEnvironmentTemplateVersionsResponse>;
    ListEnvironmentTemplates(req: operations.ListEnvironmentTemplatesRequest, config?: AxiosRequestConfig): Promise<operations.ListEnvironmentTemplatesResponse>;
    ListEnvironments(req: operations.ListEnvironmentsRequest, config?: AxiosRequestConfig): Promise<operations.ListEnvironmentsResponse>;
    ListServiceInstances(req: operations.ListServiceInstancesRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceInstancesResponse>;
    ListServiceTemplateVersions(req: operations.ListServiceTemplateVersionsRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceTemplateVersionsResponse>;
    ListServiceTemplates(req: operations.ListServiceTemplatesRequest, config?: AxiosRequestConfig): Promise<operations.ListServiceTemplatesResponse>;
    ListServices(req: operations.ListServicesRequest, config?: AxiosRequestConfig): Promise<operations.ListServicesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    RejectEnvironmentAccountConnection(req: operations.RejectEnvironmentAccountConnectionRequest, config?: AxiosRequestConfig): Promise<operations.RejectEnvironmentAccountConnectionResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAccountSettings(req: operations.UpdateAccountSettingsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAccountSettingsResponse>;
    UpdateEnvironment(req: operations.UpdateEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEnvironmentResponse>;
    UpdateEnvironmentAccountConnection(req: operations.UpdateEnvironmentAccountConnectionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEnvironmentAccountConnectionResponse>;
    UpdateEnvironmentTemplate(req: operations.UpdateEnvironmentTemplateRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEnvironmentTemplateResponse>;
    UpdateEnvironmentTemplateVersion(req: operations.UpdateEnvironmentTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEnvironmentTemplateVersionResponse>;
    UpdateService(req: operations.UpdateServiceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceResponse>;
    UpdateServiceInstance(req: operations.UpdateServiceInstanceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceInstanceResponse>;
    UpdateServicePipeline(req: operations.UpdateServicePipelineRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServicePipelineResponse>;
    UpdateServiceTemplate(req: operations.UpdateServiceTemplateRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceTemplateResponse>;
    UpdateServiceTemplateVersion(req: operations.UpdateServiceTemplateVersionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateServiceTemplateVersionResponse>;
}
export {};

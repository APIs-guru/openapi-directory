import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateApp(req: operations.CreateAppRequest, config?: AxiosRequestConfig): Promise<operations.CreateAppResponse>;
    CreateReplicationJob(req: operations.CreateReplicationJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplicationJobResponse>;
    DeleteApp(req: operations.DeleteAppRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAppResponse>;
    DeleteAppLaunchConfiguration(req: operations.DeleteAppLaunchConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAppLaunchConfigurationResponse>;
    DeleteAppReplicationConfiguration(req: operations.DeleteAppReplicationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAppReplicationConfigurationResponse>;
    DeleteAppValidationConfiguration(req: operations.DeleteAppValidationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAppValidationConfigurationResponse>;
    DeleteReplicationJob(req: operations.DeleteReplicationJobRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationJobResponse>;
    DeleteServerCatalog(req: operations.DeleteServerCatalogRequest, config?: AxiosRequestConfig): Promise<operations.DeleteServerCatalogResponse>;
    DisassociateConnector(req: operations.DisassociateConnectorRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateConnectorResponse>;
    GenerateChangeSet(req: operations.GenerateChangeSetRequest, config?: AxiosRequestConfig): Promise<operations.GenerateChangeSetResponse>;
    GenerateTemplate(req: operations.GenerateTemplateRequest, config?: AxiosRequestConfig): Promise<operations.GenerateTemplateResponse>;
    GetApp(req: operations.GetAppRequest, config?: AxiosRequestConfig): Promise<operations.GetAppResponse>;
    GetAppLaunchConfiguration(req: operations.GetAppLaunchConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.GetAppLaunchConfigurationResponse>;
    GetAppReplicationConfiguration(req: operations.GetAppReplicationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.GetAppReplicationConfigurationResponse>;
    GetAppValidationConfiguration(req: operations.GetAppValidationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.GetAppValidationConfigurationResponse>;
    GetAppValidationOutput(req: operations.GetAppValidationOutputRequest, config?: AxiosRequestConfig): Promise<operations.GetAppValidationOutputResponse>;
    GetConnectors(req: operations.GetConnectorsRequest, config?: AxiosRequestConfig): Promise<operations.GetConnectorsResponse>;
    GetReplicationJobs(req: operations.GetReplicationJobsRequest, config?: AxiosRequestConfig): Promise<operations.GetReplicationJobsResponse>;
    GetReplicationRuns(req: operations.GetReplicationRunsRequest, config?: AxiosRequestConfig): Promise<operations.GetReplicationRunsResponse>;
    GetServers(req: operations.GetServersRequest, config?: AxiosRequestConfig): Promise<operations.GetServersResponse>;
    ImportAppCatalog(req: operations.ImportAppCatalogRequest, config?: AxiosRequestConfig): Promise<operations.ImportAppCatalogResponse>;
    ImportServerCatalog(req: operations.ImportServerCatalogRequest, config?: AxiosRequestConfig): Promise<operations.ImportServerCatalogResponse>;
    LaunchApp(req: operations.LaunchAppRequest, config?: AxiosRequestConfig): Promise<operations.LaunchAppResponse>;
    ListApps(req: operations.ListAppsRequest, config?: AxiosRequestConfig): Promise<operations.ListAppsResponse>;
    NotifyAppValidationOutput(req: operations.NotifyAppValidationOutputRequest, config?: AxiosRequestConfig): Promise<operations.NotifyAppValidationOutputResponse>;
    PutAppLaunchConfiguration(req: operations.PutAppLaunchConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutAppLaunchConfigurationResponse>;
    PutAppReplicationConfiguration(req: operations.PutAppReplicationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutAppReplicationConfigurationResponse>;
    PutAppValidationConfiguration(req: operations.PutAppValidationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutAppValidationConfigurationResponse>;
    StartAppReplication(req: operations.StartAppReplicationRequest, config?: AxiosRequestConfig): Promise<operations.StartAppReplicationResponse>;
    StartOnDemandAppReplication(req: operations.StartOnDemandAppReplicationRequest, config?: AxiosRequestConfig): Promise<operations.StartOnDemandAppReplicationResponse>;
    StartOnDemandReplicationRun(req: operations.StartOnDemandReplicationRunRequest, config?: AxiosRequestConfig): Promise<operations.StartOnDemandReplicationRunResponse>;
    StopAppReplication(req: operations.StopAppReplicationRequest, config?: AxiosRequestConfig): Promise<operations.StopAppReplicationResponse>;
    TerminateApp(req: operations.TerminateAppRequest, config?: AxiosRequestConfig): Promise<operations.TerminateAppResponse>;
    UpdateApp(req: operations.UpdateAppRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAppResponse>;
    UpdateReplicationJob(req: operations.UpdateReplicationJobRequest, config?: AxiosRequestConfig): Promise<operations.UpdateReplicationJobResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AcceptPage(req: operations.AcceptPageRequest, config?: AxiosRequestConfig): Promise<operations.AcceptPageResponse>;
    ActivateContactChannel(req: operations.ActivateContactChannelRequest, config?: AxiosRequestConfig): Promise<operations.ActivateContactChannelResponse>;
    CreateContact(req: operations.CreateContactRequest, config?: AxiosRequestConfig): Promise<operations.CreateContactResponse>;
    CreateContactChannel(req: operations.CreateContactChannelRequest, config?: AxiosRequestConfig): Promise<operations.CreateContactChannelResponse>;
    DeactivateContactChannel(req: operations.DeactivateContactChannelRequest, config?: AxiosRequestConfig): Promise<operations.DeactivateContactChannelResponse>;
    DeleteContact(req: operations.DeleteContactRequest, config?: AxiosRequestConfig): Promise<operations.DeleteContactResponse>;
    DeleteContactChannel(req: operations.DeleteContactChannelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteContactChannelResponse>;
    DescribeEngagement(req: operations.DescribeEngagementRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEngagementResponse>;
    DescribePage(req: operations.DescribePageRequest, config?: AxiosRequestConfig): Promise<operations.DescribePageResponse>;
    GetContact(req: operations.GetContactRequest, config?: AxiosRequestConfig): Promise<operations.GetContactResponse>;
    GetContactChannel(req: operations.GetContactChannelRequest, config?: AxiosRequestConfig): Promise<operations.GetContactChannelResponse>;
    GetContactPolicy(req: operations.GetContactPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetContactPolicyResponse>;
    ListContactChannels(req: operations.ListContactChannelsRequest, config?: AxiosRequestConfig): Promise<operations.ListContactChannelsResponse>;
    ListContacts(req: operations.ListContactsRequest, config?: AxiosRequestConfig): Promise<operations.ListContactsResponse>;
    ListEngagements(req: operations.ListEngagementsRequest, config?: AxiosRequestConfig): Promise<operations.ListEngagementsResponse>;
    ListPageReceipts(req: operations.ListPageReceiptsRequest, config?: AxiosRequestConfig): Promise<operations.ListPageReceiptsResponse>;
    ListPagesByContact(req: operations.ListPagesByContactRequest, config?: AxiosRequestConfig): Promise<operations.ListPagesByContactResponse>;
    ListPagesByEngagement(req: operations.ListPagesByEngagementRequest, config?: AxiosRequestConfig): Promise<operations.ListPagesByEngagementResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    PutContactPolicy(req: operations.PutContactPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutContactPolicyResponse>;
    SendActivationCode(req: operations.SendActivationCodeRequest, config?: AxiosRequestConfig): Promise<operations.SendActivationCodeResponse>;
    StartEngagement(req: operations.StartEngagementRequest, config?: AxiosRequestConfig): Promise<operations.StartEngagementResponse>;
    StopEngagement(req: operations.StopEngagementRequest, config?: AxiosRequestConfig): Promise<operations.StopEngagementResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateContact(req: operations.UpdateContactRequest, config?: AxiosRequestConfig): Promise<operations.UpdateContactResponse>;
    UpdateContactChannel(req: operations.UpdateContactChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateContactChannelResponse>;
}
export {};

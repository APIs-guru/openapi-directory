import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    ChangeServerLifeCycleState(req: operations.ChangeServerLifeCycleStateRequest, config?: AxiosRequestConfig): Promise<operations.ChangeServerLifeCycleStateResponse>;
    CreateReplicationConfigurationTemplate(req: operations.CreateReplicationConfigurationTemplateRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplicationConfigurationTemplateResponse>;
    DeleteJob(req: operations.DeleteJobRequest, config?: AxiosRequestConfig): Promise<operations.DeleteJobResponse>;
    DeleteReplicationConfigurationTemplate(req: operations.DeleteReplicationConfigurationTemplateRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationConfigurationTemplateResponse>;
    DeleteSourceServer(req: operations.DeleteSourceServerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSourceServerResponse>;
    DescribeJobLogItems(req: operations.DescribeJobLogItemsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeJobLogItemsResponse>;
    DescribeJobs(req: operations.DescribeJobsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeJobsResponse>;
    DescribeReplicationConfigurationTemplates(req: operations.DescribeReplicationConfigurationTemplatesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationConfigurationTemplatesResponse>;
    DescribeSourceServers(req: operations.DescribeSourceServersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSourceServersResponse>;
    DisconnectFromService(req: operations.DisconnectFromServiceRequest, config?: AxiosRequestConfig): Promise<operations.DisconnectFromServiceResponse>;
    FinalizeCutover(req: operations.FinalizeCutoverRequest, config?: AxiosRequestConfig): Promise<operations.FinalizeCutoverResponse>;
    GetLaunchConfiguration(req: operations.GetLaunchConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.GetLaunchConfigurationResponse>;
    GetReplicationConfiguration(req: operations.GetReplicationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.GetReplicationConfigurationResponse>;
    InitializeService(req: operations.InitializeServiceRequest, config?: AxiosRequestConfig): Promise<operations.InitializeServiceResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    MarkAsArchived(req: operations.MarkAsArchivedRequest, config?: AxiosRequestConfig): Promise<operations.MarkAsArchivedResponse>;
    RetryDataReplication(req: operations.RetryDataReplicationRequest, config?: AxiosRequestConfig): Promise<operations.RetryDataReplicationResponse>;
    StartCutover(req: operations.StartCutoverRequest, config?: AxiosRequestConfig): Promise<operations.StartCutoverResponse>;
    StartTest(req: operations.StartTestRequest, config?: AxiosRequestConfig): Promise<operations.StartTestResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    TerminateTargetInstances(req: operations.TerminateTargetInstancesRequest, config?: AxiosRequestConfig): Promise<operations.TerminateTargetInstancesResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateLaunchConfiguration(req: operations.UpdateLaunchConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateLaunchConfigurationResponse>;
    UpdateReplicationConfiguration(req: operations.UpdateReplicationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateReplicationConfigurationResponse>;
    UpdateReplicationConfigurationTemplate(req: operations.UpdateReplicationConfigurationTemplateRequest, config?: AxiosRequestConfig): Promise<operations.UpdateReplicationConfigurationTemplateResponse>;
}
export {};

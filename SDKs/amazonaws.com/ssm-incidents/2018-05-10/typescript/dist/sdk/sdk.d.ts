import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateReplicationSet(req: operations.CreateReplicationSetRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplicationSetResponse>;
    CreateResponsePlan(req: operations.CreateResponsePlanRequest, config?: AxiosRequestConfig): Promise<operations.CreateResponsePlanResponse>;
    CreateTimelineEvent(req: operations.CreateTimelineEventRequest, config?: AxiosRequestConfig): Promise<operations.CreateTimelineEventResponse>;
    DeleteIncidentRecord(req: operations.DeleteIncidentRecordRequest, config?: AxiosRequestConfig): Promise<operations.DeleteIncidentRecordResponse>;
    DeleteReplicationSet(req: operations.DeleteReplicationSetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationSetResponse>;
    DeleteResourcePolicy(req: operations.DeleteResourcePolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResourcePolicyResponse>;
    DeleteResponsePlan(req: operations.DeleteResponsePlanRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResponsePlanResponse>;
    DeleteTimelineEvent(req: operations.DeleteTimelineEventRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTimelineEventResponse>;
    GetIncidentRecord(req: operations.GetIncidentRecordRequest, config?: AxiosRequestConfig): Promise<operations.GetIncidentRecordResponse>;
    GetReplicationSet(req: operations.GetReplicationSetRequest, config?: AxiosRequestConfig): Promise<operations.GetReplicationSetResponse>;
    GetResourcePolicies(req: operations.GetResourcePoliciesRequest, config?: AxiosRequestConfig): Promise<operations.GetResourcePoliciesResponse>;
    GetResponsePlan(req: operations.GetResponsePlanRequest, config?: AxiosRequestConfig): Promise<operations.GetResponsePlanResponse>;
    GetTimelineEvent(req: operations.GetTimelineEventRequest, config?: AxiosRequestConfig): Promise<operations.GetTimelineEventResponse>;
    ListIncidentRecords(req: operations.ListIncidentRecordsRequest, config?: AxiosRequestConfig): Promise<operations.ListIncidentRecordsResponse>;
    ListRelatedItems(req: operations.ListRelatedItemsRequest, config?: AxiosRequestConfig): Promise<operations.ListRelatedItemsResponse>;
    ListReplicationSets(req: operations.ListReplicationSetsRequest, config?: AxiosRequestConfig): Promise<operations.ListReplicationSetsResponse>;
    ListResponsePlans(req: operations.ListResponsePlansRequest, config?: AxiosRequestConfig): Promise<operations.ListResponsePlansResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListTimelineEvents(req: operations.ListTimelineEventsRequest, config?: AxiosRequestConfig): Promise<operations.ListTimelineEventsResponse>;
    PutResourcePolicy(req: operations.PutResourcePolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutResourcePolicyResponse>;
    StartIncident(req: operations.StartIncidentRequest, config?: AxiosRequestConfig): Promise<operations.StartIncidentResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateDeletionProtection(req: operations.UpdateDeletionProtectionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDeletionProtectionResponse>;
    UpdateIncidentRecord(req: operations.UpdateIncidentRecordRequest, config?: AxiosRequestConfig): Promise<operations.UpdateIncidentRecordResponse>;
    UpdateRelatedItems(req: operations.UpdateRelatedItemsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRelatedItemsResponse>;
    UpdateReplicationSet(req: operations.UpdateReplicationSetRequest, config?: AxiosRequestConfig): Promise<operations.UpdateReplicationSetResponse>;
    UpdateResponsePlan(req: operations.UpdateResponsePlanRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResponsePlanResponse>;
    UpdateTimelineEvent(req: operations.UpdateTimelineEventRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTimelineEventResponse>;
}
export {};

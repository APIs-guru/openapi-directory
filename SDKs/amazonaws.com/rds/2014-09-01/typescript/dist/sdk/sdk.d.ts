import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    GetAddSourceIdentifierToSubscription(req: operations.GetAddSourceIdentifierToSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.GetAddSourceIdentifierToSubscriptionResponse>;
    GetAuthorizeDbSecurityGroupIngress(req: operations.GetAuthorizeDbSecurityGroupIngressRequest, config?: AxiosRequestConfig): Promise<operations.GetAuthorizeDbSecurityGroupIngressResponse>;
    GetDeleteDbInstance(req: operations.GetDeleteDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteDbInstanceResponse>;
    GetDeleteDbParameterGroup(req: operations.GetDeleteDbParameterGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteDbParameterGroupResponse>;
    GetDeleteDbSecurityGroup(req: operations.GetDeleteDbSecurityGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteDbSecurityGroupResponse>;
    GetDeleteDbSnapshot(req: operations.GetDeleteDbSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteDbSnapshotResponse>;
    GetDeleteDbSubnetGroup(req: operations.GetDeleteDbSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteDbSubnetGroupResponse>;
    GetDeleteEventSubscription(req: operations.GetDeleteEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteEventSubscriptionResponse>;
    GetDeleteOptionGroup(req: operations.GetDeleteOptionGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteOptionGroupResponse>;
    GetDownloadDbLogFilePortion(req: operations.GetDownloadDbLogFilePortionRequest, config?: AxiosRequestConfig): Promise<operations.GetDownloadDbLogFilePortionResponse>;
    GetModifyDbInstance(req: operations.GetModifyDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.GetModifyDbInstanceResponse>;
    GetModifyDbSubnetGroup(req: operations.GetModifyDbSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetModifyDbSubnetGroupResponse>;
    GetModifyEventSubscription(req: operations.GetModifyEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.GetModifyEventSubscriptionResponse>;
    GetPromoteReadReplica(req: operations.GetPromoteReadReplicaRequest, config?: AxiosRequestConfig): Promise<operations.GetPromoteReadReplicaResponse>;
    GetRebootDbInstance(req: operations.GetRebootDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.GetRebootDbInstanceResponse>;
    GetRemoveSourceIdentifierFromSubscription(req: operations.GetRemoveSourceIdentifierFromSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.GetRemoveSourceIdentifierFromSubscriptionResponse>;
    GetRemoveTagsFromResource(req: operations.GetRemoveTagsFromResourceRequest, config?: AxiosRequestConfig): Promise<operations.GetRemoveTagsFromResourceResponse>;
    GetRevokeDbSecurityGroupIngress(req: operations.GetRevokeDbSecurityGroupIngressRequest, config?: AxiosRequestConfig): Promise<operations.GetRevokeDbSecurityGroupIngressResponse>;
    PostAddSourceIdentifierToSubscription(req: operations.PostAddSourceIdentifierToSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.PostAddSourceIdentifierToSubscriptionResponse>;
    PostAddTagsToResource(req: operations.PostAddTagsToResourceRequest, config?: AxiosRequestConfig): Promise<operations.PostAddTagsToResourceResponse>;
    PostAuthorizeDbSecurityGroupIngress(req: operations.PostAuthorizeDbSecurityGroupIngressRequest, config?: AxiosRequestConfig): Promise<operations.PostAuthorizeDbSecurityGroupIngressResponse>;
    PostCopyDbParameterGroup(req: operations.PostCopyDbParameterGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCopyDbParameterGroupResponse>;
    PostCopyDbSnapshot(req: operations.PostCopyDbSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.PostCopyDbSnapshotResponse>;
    PostCopyOptionGroup(req: operations.PostCopyOptionGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCopyOptionGroupResponse>;
    PostCreateDbInstance(req: operations.PostCreateDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateDbInstanceResponse>;
    PostCreateDbInstanceReadReplica(req: operations.PostCreateDbInstanceReadReplicaRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateDbInstanceReadReplicaResponse>;
    PostCreateDbParameterGroup(req: operations.PostCreateDbParameterGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateDbParameterGroupResponse>;
    PostCreateDbSecurityGroup(req: operations.PostCreateDbSecurityGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateDbSecurityGroupResponse>;
    PostCreateDbSnapshot(req: operations.PostCreateDbSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateDbSnapshotResponse>;
    PostCreateDbSubnetGroup(req: operations.PostCreateDbSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateDbSubnetGroupResponse>;
    PostCreateEventSubscription(req: operations.PostCreateEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateEventSubscriptionResponse>;
    PostCreateOptionGroup(req: operations.PostCreateOptionGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateOptionGroupResponse>;
    PostDeleteDbInstance(req: operations.PostDeleteDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteDbInstanceResponse>;
    PostDeleteDbParameterGroup(req: operations.PostDeleteDbParameterGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteDbParameterGroupResponse>;
    PostDeleteDbSecurityGroup(req: operations.PostDeleteDbSecurityGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteDbSecurityGroupResponse>;
    PostDeleteDbSnapshot(req: operations.PostDeleteDbSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteDbSnapshotResponse>;
    PostDeleteDbSubnetGroup(req: operations.PostDeleteDbSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteDbSubnetGroupResponse>;
    PostDeleteEventSubscription(req: operations.PostDeleteEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteEventSubscriptionResponse>;
    PostDeleteOptionGroup(req: operations.PostDeleteOptionGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteOptionGroupResponse>;
    PostDescribeDbEngineVersions(req: operations.PostDescribeDbEngineVersionsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbEngineVersionsResponse>;
    PostDescribeDbInstances(req: operations.PostDescribeDbInstancesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbInstancesResponse>;
    PostDescribeDbLogFiles(req: operations.PostDescribeDbLogFilesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbLogFilesResponse>;
    PostDescribeDbParameterGroups(req: operations.PostDescribeDbParameterGroupsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbParameterGroupsResponse>;
    PostDescribeDbParameters(req: operations.PostDescribeDbParametersRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbParametersResponse>;
    PostDescribeDbSecurityGroups(req: operations.PostDescribeDbSecurityGroupsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbSecurityGroupsResponse>;
    PostDescribeDbSnapshots(req: operations.PostDescribeDbSnapshotsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbSnapshotsResponse>;
    PostDescribeDbSubnetGroups(req: operations.PostDescribeDbSubnetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeDbSubnetGroupsResponse>;
    PostDescribeEngineDefaultParameters(req: operations.PostDescribeEngineDefaultParametersRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeEngineDefaultParametersResponse>;
    PostDescribeEventCategories(req: operations.PostDescribeEventCategoriesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeEventCategoriesResponse>;
    PostDescribeEventSubscriptions(req: operations.PostDescribeEventSubscriptionsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeEventSubscriptionsResponse>;
    PostDescribeEvents(req: operations.PostDescribeEventsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeEventsResponse>;
    PostDescribeOptionGroupOptions(req: operations.PostDescribeOptionGroupOptionsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeOptionGroupOptionsResponse>;
    PostDescribeOptionGroups(req: operations.PostDescribeOptionGroupsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeOptionGroupsResponse>;
    PostDescribeOrderableDbInstanceOptions(req: operations.PostDescribeOrderableDbInstanceOptionsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeOrderableDbInstanceOptionsResponse>;
    PostDescribeReservedDbInstances(req: operations.PostDescribeReservedDbInstancesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeReservedDbInstancesResponse>;
    PostDescribeReservedDbInstancesOfferings(req: operations.PostDescribeReservedDbInstancesOfferingsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeReservedDbInstancesOfferingsResponse>;
    PostDownloadDbLogFilePortion(req: operations.PostDownloadDbLogFilePortionRequest, config?: AxiosRequestConfig): Promise<operations.PostDownloadDbLogFilePortionResponse>;
    PostListTagsForResource(req: operations.PostListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.PostListTagsForResourceResponse>;
    PostModifyDbInstance(req: operations.PostModifyDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyDbInstanceResponse>;
    PostModifyDbParameterGroup(req: operations.PostModifyDbParameterGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyDbParameterGroupResponse>;
    PostModifyDbSubnetGroup(req: operations.PostModifyDbSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyDbSubnetGroupResponse>;
    PostModifyEventSubscription(req: operations.PostModifyEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyEventSubscriptionResponse>;
    PostModifyOptionGroup(req: operations.PostModifyOptionGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyOptionGroupResponse>;
    PostPromoteReadReplica(req: operations.PostPromoteReadReplicaRequest, config?: AxiosRequestConfig): Promise<operations.PostPromoteReadReplicaResponse>;
    PostPurchaseReservedDbInstancesOffering(req: operations.PostPurchaseReservedDbInstancesOfferingRequest, config?: AxiosRequestConfig): Promise<operations.PostPurchaseReservedDbInstancesOfferingResponse>;
    PostRebootDbInstance(req: operations.PostRebootDbInstanceRequest, config?: AxiosRequestConfig): Promise<operations.PostRebootDbInstanceResponse>;
    PostRemoveSourceIdentifierFromSubscription(req: operations.PostRemoveSourceIdentifierFromSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.PostRemoveSourceIdentifierFromSubscriptionResponse>;
    PostRemoveTagsFromResource(req: operations.PostRemoveTagsFromResourceRequest, config?: AxiosRequestConfig): Promise<operations.PostRemoveTagsFromResourceResponse>;
    PostResetDbParameterGroup(req: operations.PostResetDbParameterGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostResetDbParameterGroupResponse>;
    PostRestoreDbInstanceFromDbSnapshot(req: operations.PostRestoreDbInstanceFromDbSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.PostRestoreDbInstanceFromDbSnapshotResponse>;
    PostRestoreDbInstanceToPointInTime(req: operations.PostRestoreDbInstanceToPointInTimeRequest, config?: AxiosRequestConfig): Promise<operations.PostRestoreDbInstanceToPointInTimeResponse>;
    PostRevokeDbSecurityGroupIngress(req: operations.PostRevokeDbSecurityGroupIngressRequest, config?: AxiosRequestConfig): Promise<operations.PostRevokeDbSecurityGroupIngressResponse>;
}
export {};

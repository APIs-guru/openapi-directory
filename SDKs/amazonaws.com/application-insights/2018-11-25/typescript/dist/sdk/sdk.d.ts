import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateApplication(req: operations.CreateApplicationRequest, config?: AxiosRequestConfig): Promise<operations.CreateApplicationResponse>;
    CreateComponent(req: operations.CreateComponentRequest, config?: AxiosRequestConfig): Promise<operations.CreateComponentResponse>;
    CreateLogPattern(req: operations.CreateLogPatternRequest, config?: AxiosRequestConfig): Promise<operations.CreateLogPatternResponse>;
    DeleteApplication(req: operations.DeleteApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApplicationResponse>;
    DeleteComponent(req: operations.DeleteComponentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteComponentResponse>;
    DeleteLogPattern(req: operations.DeleteLogPatternRequest, config?: AxiosRequestConfig): Promise<operations.DeleteLogPatternResponse>;
    DescribeApplication(req: operations.DescribeApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeApplicationResponse>;
    DescribeComponent(req: operations.DescribeComponentRequest, config?: AxiosRequestConfig): Promise<operations.DescribeComponentResponse>;
    DescribeComponentConfiguration(req: operations.DescribeComponentConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeComponentConfigurationResponse>;
    DescribeComponentConfigurationRecommendation(req: operations.DescribeComponentConfigurationRecommendationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeComponentConfigurationRecommendationResponse>;
    DescribeLogPattern(req: operations.DescribeLogPatternRequest, config?: AxiosRequestConfig): Promise<operations.DescribeLogPatternResponse>;
    DescribeObservation(req: operations.DescribeObservationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeObservationResponse>;
    DescribeProblem(req: operations.DescribeProblemRequest, config?: AxiosRequestConfig): Promise<operations.DescribeProblemResponse>;
    DescribeProblemObservations(req: operations.DescribeProblemObservationsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeProblemObservationsResponse>;
    ListApplications(req: operations.ListApplicationsRequest, config?: AxiosRequestConfig): Promise<operations.ListApplicationsResponse>;
    ListComponents(req: operations.ListComponentsRequest, config?: AxiosRequestConfig): Promise<operations.ListComponentsResponse>;
    ListConfigurationHistory(req: operations.ListConfigurationHistoryRequest, config?: AxiosRequestConfig): Promise<operations.ListConfigurationHistoryResponse>;
    ListLogPatternSets(req: operations.ListLogPatternSetsRequest, config?: AxiosRequestConfig): Promise<operations.ListLogPatternSetsResponse>;
    ListLogPatterns(req: operations.ListLogPatternsRequest, config?: AxiosRequestConfig): Promise<operations.ListLogPatternsResponse>;
    ListProblems(req: operations.ListProblemsRequest, config?: AxiosRequestConfig): Promise<operations.ListProblemsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateApplication(req: operations.UpdateApplicationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApplicationResponse>;
    UpdateComponent(req: operations.UpdateComponentRequest, config?: AxiosRequestConfig): Promise<operations.UpdateComponentResponse>;
    UpdateComponentConfiguration(req: operations.UpdateComponentConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateComponentConfigurationResponse>;
    UpdateLogPattern(req: operations.UpdateLogPatternRequest, config?: AxiosRequestConfig): Promise<operations.UpdateLogPatternResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateBatchInferenceJob(req: operations.CreateBatchInferenceJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateBatchInferenceJobResponse>;
    CreateCampaign(req: operations.CreateCampaignRequest, config?: AxiosRequestConfig): Promise<operations.CreateCampaignResponse>;
    CreateDataset(req: operations.CreateDatasetRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetResponse>;
    CreateDatasetExportJob(req: operations.CreateDatasetExportJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetExportJobResponse>;
    CreateDatasetGroup(req: operations.CreateDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetGroupResponse>;
    CreateDatasetImportJob(req: operations.CreateDatasetImportJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetImportJobResponse>;
    CreateEventTracker(req: operations.CreateEventTrackerRequest, config?: AxiosRequestConfig): Promise<operations.CreateEventTrackerResponse>;
    CreateFilter(req: operations.CreateFilterRequest, config?: AxiosRequestConfig): Promise<operations.CreateFilterResponse>;
    CreateSchema(req: operations.CreateSchemaRequest, config?: AxiosRequestConfig): Promise<operations.CreateSchemaResponse>;
    CreateSolution(req: operations.CreateSolutionRequest, config?: AxiosRequestConfig): Promise<operations.CreateSolutionResponse>;
    CreateSolutionVersion(req: operations.CreateSolutionVersionRequest, config?: AxiosRequestConfig): Promise<operations.CreateSolutionVersionResponse>;
    DeleteCampaign(req: operations.DeleteCampaignRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCampaignResponse>;
    DeleteDataset(req: operations.DeleteDatasetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetResponse>;
    DeleteDatasetGroup(req: operations.DeleteDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetGroupResponse>;
    DeleteEventTracker(req: operations.DeleteEventTrackerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEventTrackerResponse>;
    DeleteFilter(req: operations.DeleteFilterRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFilterResponse>;
    DeleteSchema(req: operations.DeleteSchemaRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSchemaResponse>;
    DeleteSolution(req: operations.DeleteSolutionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSolutionResponse>;
    DescribeAlgorithm(req: operations.DescribeAlgorithmRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAlgorithmResponse>;
    DescribeBatchInferenceJob(req: operations.DescribeBatchInferenceJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeBatchInferenceJobResponse>;
    DescribeCampaign(req: operations.DescribeCampaignRequest, config?: AxiosRequestConfig): Promise<operations.DescribeCampaignResponse>;
    DescribeDataset(req: operations.DescribeDatasetRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetResponse>;
    DescribeDatasetExportJob(req: operations.DescribeDatasetExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetExportJobResponse>;
    DescribeDatasetGroup(req: operations.DescribeDatasetGroupRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetGroupResponse>;
    DescribeDatasetImportJob(req: operations.DescribeDatasetImportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetImportJobResponse>;
    DescribeEventTracker(req: operations.DescribeEventTrackerRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventTrackerResponse>;
    DescribeFeatureTransformation(req: operations.DescribeFeatureTransformationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeFeatureTransformationResponse>;
    DescribeFilter(req: operations.DescribeFilterRequest, config?: AxiosRequestConfig): Promise<operations.DescribeFilterResponse>;
    DescribeRecipe(req: operations.DescribeRecipeRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRecipeResponse>;
    DescribeSchema(req: operations.DescribeSchemaRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSchemaResponse>;
    DescribeSolution(req: operations.DescribeSolutionRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSolutionResponse>;
    DescribeSolutionVersion(req: operations.DescribeSolutionVersionRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSolutionVersionResponse>;
    GetSolutionMetrics(req: operations.GetSolutionMetricsRequest, config?: AxiosRequestConfig): Promise<operations.GetSolutionMetricsResponse>;
    ListBatchInferenceJobs(req: operations.ListBatchInferenceJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListBatchInferenceJobsResponse>;
    ListCampaigns(req: operations.ListCampaignsRequest, config?: AxiosRequestConfig): Promise<operations.ListCampaignsResponse>;
    ListDatasetExportJobs(req: operations.ListDatasetExportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetExportJobsResponse>;
    ListDatasetGroups(req: operations.ListDatasetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetGroupsResponse>;
    ListDatasetImportJobs(req: operations.ListDatasetImportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetImportJobsResponse>;
    ListDatasets(req: operations.ListDatasetsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetsResponse>;
    ListEventTrackers(req: operations.ListEventTrackersRequest, config?: AxiosRequestConfig): Promise<operations.ListEventTrackersResponse>;
    ListFilters(req: operations.ListFiltersRequest, config?: AxiosRequestConfig): Promise<operations.ListFiltersResponse>;
    ListRecipes(req: operations.ListRecipesRequest, config?: AxiosRequestConfig): Promise<operations.ListRecipesResponse>;
    ListSchemas(req: operations.ListSchemasRequest, config?: AxiosRequestConfig): Promise<operations.ListSchemasResponse>;
    ListSolutionVersions(req: operations.ListSolutionVersionsRequest, config?: AxiosRequestConfig): Promise<operations.ListSolutionVersionsResponse>;
    ListSolutions(req: operations.ListSolutionsRequest, config?: AxiosRequestConfig): Promise<operations.ListSolutionsResponse>;
    StopSolutionVersionCreation(req: operations.StopSolutionVersionCreationRequest, config?: AxiosRequestConfig): Promise<operations.StopSolutionVersionCreationResponse>;
    UpdateCampaign(req: operations.UpdateCampaignRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCampaignResponse>;
}
export {};

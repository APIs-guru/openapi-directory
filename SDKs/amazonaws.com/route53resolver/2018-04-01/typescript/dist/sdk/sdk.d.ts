import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateFirewallRuleGroup(req: operations.AssociateFirewallRuleGroupRequest, config?: AxiosRequestConfig): Promise<operations.AssociateFirewallRuleGroupResponse>;
    AssociateResolverEndpointIpAddress(req: operations.AssociateResolverEndpointIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.AssociateResolverEndpointIpAddressResponse>;
    AssociateResolverQueryLogConfig(req: operations.AssociateResolverQueryLogConfigRequest, config?: AxiosRequestConfig): Promise<operations.AssociateResolverQueryLogConfigResponse>;
    AssociateResolverRule(req: operations.AssociateResolverRuleRequest, config?: AxiosRequestConfig): Promise<operations.AssociateResolverRuleResponse>;
    CreateFirewallDomainList(req: operations.CreateFirewallDomainListRequest, config?: AxiosRequestConfig): Promise<operations.CreateFirewallDomainListResponse>;
    CreateFirewallRule(req: operations.CreateFirewallRuleRequest, config?: AxiosRequestConfig): Promise<operations.CreateFirewallRuleResponse>;
    CreateFirewallRuleGroup(req: operations.CreateFirewallRuleGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateFirewallRuleGroupResponse>;
    CreateResolverEndpoint(req: operations.CreateResolverEndpointRequest, config?: AxiosRequestConfig): Promise<operations.CreateResolverEndpointResponse>;
    CreateResolverQueryLogConfig(req: operations.CreateResolverQueryLogConfigRequest, config?: AxiosRequestConfig): Promise<operations.CreateResolverQueryLogConfigResponse>;
    CreateResolverRule(req: operations.CreateResolverRuleRequest, config?: AxiosRequestConfig): Promise<operations.CreateResolverRuleResponse>;
    DeleteFirewallDomainList(req: operations.DeleteFirewallDomainListRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFirewallDomainListResponse>;
    DeleteFirewallRule(req: operations.DeleteFirewallRuleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFirewallRuleResponse>;
    DeleteFirewallRuleGroup(req: operations.DeleteFirewallRuleGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFirewallRuleGroupResponse>;
    DeleteResolverEndpoint(req: operations.DeleteResolverEndpointRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResolverEndpointResponse>;
    DeleteResolverQueryLogConfig(req: operations.DeleteResolverQueryLogConfigRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResolverQueryLogConfigResponse>;
    DeleteResolverRule(req: operations.DeleteResolverRuleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResolverRuleResponse>;
    DisassociateFirewallRuleGroup(req: operations.DisassociateFirewallRuleGroupRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateFirewallRuleGroupResponse>;
    DisassociateResolverEndpointIpAddress(req: operations.DisassociateResolverEndpointIpAddressRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateResolverEndpointIpAddressResponse>;
    DisassociateResolverQueryLogConfig(req: operations.DisassociateResolverQueryLogConfigRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateResolverQueryLogConfigResponse>;
    DisassociateResolverRule(req: operations.DisassociateResolverRuleRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateResolverRuleResponse>;
    GetFirewallConfig(req: operations.GetFirewallConfigRequest, config?: AxiosRequestConfig): Promise<operations.GetFirewallConfigResponse>;
    GetFirewallDomainList(req: operations.GetFirewallDomainListRequest, config?: AxiosRequestConfig): Promise<operations.GetFirewallDomainListResponse>;
    GetFirewallRuleGroup(req: operations.GetFirewallRuleGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetFirewallRuleGroupResponse>;
    GetFirewallRuleGroupAssociation(req: operations.GetFirewallRuleGroupAssociationRequest, config?: AxiosRequestConfig): Promise<operations.GetFirewallRuleGroupAssociationResponse>;
    GetFirewallRuleGroupPolicy(req: operations.GetFirewallRuleGroupPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetFirewallRuleGroupPolicyResponse>;
    GetResolverDnssecConfig(req: operations.GetResolverDnssecConfigRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverDnssecConfigResponse>;
    GetResolverEndpoint(req: operations.GetResolverEndpointRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverEndpointResponse>;
    GetResolverQueryLogConfig(req: operations.GetResolverQueryLogConfigRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverQueryLogConfigResponse>;
    GetResolverQueryLogConfigAssociation(req: operations.GetResolverQueryLogConfigAssociationRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverQueryLogConfigAssociationResponse>;
    GetResolverQueryLogConfigPolicy(req: operations.GetResolverQueryLogConfigPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverQueryLogConfigPolicyResponse>;
    GetResolverRule(req: operations.GetResolverRuleRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverRuleResponse>;
    GetResolverRuleAssociation(req: operations.GetResolverRuleAssociationRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverRuleAssociationResponse>;
    GetResolverRulePolicy(req: operations.GetResolverRulePolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverRulePolicyResponse>;
    ImportFirewallDomains(req: operations.ImportFirewallDomainsRequest, config?: AxiosRequestConfig): Promise<operations.ImportFirewallDomainsResponse>;
    ListFirewallConfigs(req: operations.ListFirewallConfigsRequest, config?: AxiosRequestConfig): Promise<operations.ListFirewallConfigsResponse>;
    ListFirewallDomainLists(req: operations.ListFirewallDomainListsRequest, config?: AxiosRequestConfig): Promise<operations.ListFirewallDomainListsResponse>;
    ListFirewallDomains(req: operations.ListFirewallDomainsRequest, config?: AxiosRequestConfig): Promise<operations.ListFirewallDomainsResponse>;
    ListFirewallRuleGroupAssociations(req: operations.ListFirewallRuleGroupAssociationsRequest, config?: AxiosRequestConfig): Promise<operations.ListFirewallRuleGroupAssociationsResponse>;
    ListFirewallRuleGroups(req: operations.ListFirewallRuleGroupsRequest, config?: AxiosRequestConfig): Promise<operations.ListFirewallRuleGroupsResponse>;
    ListFirewallRules(req: operations.ListFirewallRulesRequest, config?: AxiosRequestConfig): Promise<operations.ListFirewallRulesResponse>;
    ListResolverDnssecConfigs(req: operations.ListResolverDnssecConfigsRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverDnssecConfigsResponse>;
    ListResolverEndpointIpAddresses(req: operations.ListResolverEndpointIpAddressesRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverEndpointIpAddressesResponse>;
    ListResolverEndpoints(req: operations.ListResolverEndpointsRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverEndpointsResponse>;
    ListResolverQueryLogConfigAssociations(req: operations.ListResolverQueryLogConfigAssociationsRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverQueryLogConfigAssociationsResponse>;
    ListResolverQueryLogConfigs(req: operations.ListResolverQueryLogConfigsRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverQueryLogConfigsResponse>;
    ListResolverRuleAssociations(req: operations.ListResolverRuleAssociationsRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverRuleAssociationsResponse>;
    ListResolverRules(req: operations.ListResolverRulesRequest, config?: AxiosRequestConfig): Promise<operations.ListResolverRulesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    PutFirewallRuleGroupPolicy(req: operations.PutFirewallRuleGroupPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutFirewallRuleGroupPolicyResponse>;
    PutResolverQueryLogConfigPolicy(req: operations.PutResolverQueryLogConfigPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutResolverQueryLogConfigPolicyResponse>;
    PutResolverRulePolicy(req: operations.PutResolverRulePolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutResolverRulePolicyResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateFirewallConfig(req: operations.UpdateFirewallConfigRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFirewallConfigResponse>;
    UpdateFirewallDomains(req: operations.UpdateFirewallDomainsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFirewallDomainsResponse>;
    UpdateFirewallRule(req: operations.UpdateFirewallRuleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFirewallRuleResponse>;
    UpdateFirewallRuleGroupAssociation(req: operations.UpdateFirewallRuleGroupAssociationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFirewallRuleGroupAssociationResponse>;
    UpdateResolverDnssecConfig(req: operations.UpdateResolverDnssecConfigRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResolverDnssecConfigResponse>;
    UpdateResolverEndpoint(req: operations.UpdateResolverEndpointRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResolverEndpointResponse>;
    UpdateResolverRule(req: operations.UpdateResolverRuleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResolverRuleResponse>;
}
export {};

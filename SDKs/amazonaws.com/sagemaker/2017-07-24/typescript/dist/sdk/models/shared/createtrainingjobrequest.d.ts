import { SpeakeasyBase } from "../../../internal/utils";
import { AlgorithmSpecification } from "./algorithmspecification";
import { CheckpointConfig } from "./checkpointconfig";
import { DebugHookConfig } from "./debughookconfig";
import { DebugRuleConfiguration } from "./debugruleconfiguration";
import { ExperimentConfig } from "./experimentconfig";
import { Channel } from "./channel";
import { OutputDataConfig } from "./outputdataconfig";
import { ProfilerConfig } from "./profilerconfig";
import { ProfilerRuleConfiguration } from "./profilerruleconfiguration";
import { ResourceConfig } from "./resourceconfig";
import { RetryStrategy } from "./retrystrategy";
import { StoppingCondition } from "./stoppingcondition";
import { Tag } from "./tag";
import { TensorBoardOutputConfig } from "./tensorboardoutputconfig";
import { VpcConfig } from "./vpcconfig";
export declare class CreateTrainingJobRequest extends SpeakeasyBase {
    algorithmSpecification: AlgorithmSpecification;
    checkpointConfig?: CheckpointConfig;
    debugHookConfig?: DebugHookConfig;
    debugRuleConfigurations?: DebugRuleConfiguration[];
    enableInterContainerTrafficEncryption?: boolean;
    enableManagedSpotTraining?: boolean;
    enableNetworkIsolation?: boolean;
    environment?: Map<string, string>;
    experimentConfig?: ExperimentConfig;
    hyperParameters?: Map<string, string>;
    inputDataConfig?: Channel[];
    outputDataConfig: OutputDataConfig;
    profilerConfig?: ProfilerConfig;
    profilerRuleConfigurations?: ProfilerRuleConfiguration[];
    resourceConfig: ResourceConfig;
    retryStrategy?: RetryStrategy;
    roleArn: string;
    stoppingCondition: StoppingCondition;
    tags?: Tag[];
    tensorBoardOutputConfig?: TensorBoardOutputConfig;
    trainingJobName: string;
    vpcConfig?: VpcConfig;
}

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    BatchCheckLayerAvailability(req: operations.BatchCheckLayerAvailabilityRequest, config?: AxiosRequestConfig): Promise<operations.BatchCheckLayerAvailabilityResponse>;
    BatchDeleteImage(req: operations.BatchDeleteImageRequest, config?: AxiosRequestConfig): Promise<operations.BatchDeleteImageResponse>;
    BatchGetImage(req: operations.BatchGetImageRequest, config?: AxiosRequestConfig): Promise<operations.BatchGetImageResponse>;
    CompleteLayerUpload(req: operations.CompleteLayerUploadRequest, config?: AxiosRequestConfig): Promise<operations.CompleteLayerUploadResponse>;
    CreateRepository(req: operations.CreateRepositoryRequest, config?: AxiosRequestConfig): Promise<operations.CreateRepositoryResponse>;
    DeleteLifecyclePolicy(req: operations.DeleteLifecyclePolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteLifecyclePolicyResponse>;
    DeleteRegistryPolicy(req: operations.DeleteRegistryPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRegistryPolicyResponse>;
    DeleteRepository(req: operations.DeleteRepositoryRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRepositoryResponse>;
    DeleteRepositoryPolicy(req: operations.DeleteRepositoryPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRepositoryPolicyResponse>;
    DescribeImageScanFindings(req: operations.DescribeImageScanFindingsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeImageScanFindingsResponse>;
    DescribeImages(req: operations.DescribeImagesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeImagesResponse>;
    DescribeRegistry(req: operations.DescribeRegistryRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRegistryResponse>;
    DescribeRepositories(req: operations.DescribeRepositoriesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRepositoriesResponse>;
    GetAuthorizationToken(req: operations.GetAuthorizationTokenRequest, config?: AxiosRequestConfig): Promise<operations.GetAuthorizationTokenResponse>;
    GetDownloadUrlForLayer(req: operations.GetDownloadUrlForLayerRequest, config?: AxiosRequestConfig): Promise<operations.GetDownloadUrlForLayerResponse>;
    GetLifecyclePolicy(req: operations.GetLifecyclePolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetLifecyclePolicyResponse>;
    GetLifecyclePolicyPreview(req: operations.GetLifecyclePolicyPreviewRequest, config?: AxiosRequestConfig): Promise<operations.GetLifecyclePolicyPreviewResponse>;
    GetRegistryPolicy(req: operations.GetRegistryPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetRegistryPolicyResponse>;
    GetRepositoryPolicy(req: operations.GetRepositoryPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetRepositoryPolicyResponse>;
    InitiateLayerUpload(req: operations.InitiateLayerUploadRequest, config?: AxiosRequestConfig): Promise<operations.InitiateLayerUploadResponse>;
    ListImages(req: operations.ListImagesRequest, config?: AxiosRequestConfig): Promise<operations.ListImagesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    PutImage(req: operations.PutImageRequest, config?: AxiosRequestConfig): Promise<operations.PutImageResponse>;
    PutImageScanningConfiguration(req: operations.PutImageScanningConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutImageScanningConfigurationResponse>;
    PutImageTagMutability(req: operations.PutImageTagMutabilityRequest, config?: AxiosRequestConfig): Promise<operations.PutImageTagMutabilityResponse>;
    PutLifecyclePolicy(req: operations.PutLifecyclePolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutLifecyclePolicyResponse>;
    PutRegistryPolicy(req: operations.PutRegistryPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutRegistryPolicyResponse>;
    PutReplicationConfiguration(req: operations.PutReplicationConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutReplicationConfigurationResponse>;
    SetRepositoryPolicy(req: operations.SetRepositoryPolicyRequest, config?: AxiosRequestConfig): Promise<operations.SetRepositoryPolicyResponse>;
    StartImageScan(req: operations.StartImageScanRequest, config?: AxiosRequestConfig): Promise<operations.StartImageScanResponse>;
    StartLifecyclePolicyPreview(req: operations.StartLifecyclePolicyPreviewRequest, config?: AxiosRequestConfig): Promise<operations.StartLifecyclePolicyPreviewResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UploadLayerPart(req: operations.UploadLayerPartRequest, config?: AxiosRequestConfig): Promise<operations.UploadLayerPartResponse>;
}
export {};

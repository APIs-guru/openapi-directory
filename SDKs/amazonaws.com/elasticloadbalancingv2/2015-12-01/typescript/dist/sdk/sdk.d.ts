import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    GetDeleteListener(req: operations.GetDeleteListenerRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteListenerResponse>;
    GetDeleteLoadBalancer(req: operations.GetDeleteLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteLoadBalancerResponse>;
    GetDeleteRule(req: operations.GetDeleteRuleRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteRuleResponse>;
    GetDeleteTargetGroup(req: operations.GetDeleteTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetDeleteTargetGroupResponse>;
    GetDescribeAccountLimits(req: operations.GetDescribeAccountLimitsRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeAccountLimitsResponse>;
    GetDescribeListenerCertificates(req: operations.GetDescribeListenerCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeListenerCertificatesResponse>;
    GetDescribeListeners(req: operations.GetDescribeListenersRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeListenersResponse>;
    GetDescribeLoadBalancerAttributes(req: operations.GetDescribeLoadBalancerAttributesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeLoadBalancerAttributesResponse>;
    GetDescribeLoadBalancers(req: operations.GetDescribeLoadBalancersRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeLoadBalancersResponse>;
    GetDescribeRules(req: operations.GetDescribeRulesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeRulesResponse>;
    GetDescribeSslPolicies(req: operations.GetDescribeSslPoliciesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeSslPoliciesResponse>;
    GetDescribeTags(req: operations.GetDescribeTagsRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeTagsResponse>;
    GetDescribeTargetGroupAttributes(req: operations.GetDescribeTargetGroupAttributesRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeTargetGroupAttributesResponse>;
    GetDescribeTargetGroups(req: operations.GetDescribeTargetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.GetDescribeTargetGroupsResponse>;
    GetModifyTargetGroup(req: operations.GetModifyTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetModifyTargetGroupResponse>;
    GetRemoveTags(req: operations.GetRemoveTagsRequest, config?: AxiosRequestConfig): Promise<operations.GetRemoveTagsResponse>;
    GetSetIpAddressType(req: operations.GetSetIpAddressTypeRequest, config?: AxiosRequestConfig): Promise<operations.GetSetIpAddressTypeResponse>;
    GetSetSecurityGroups(req: operations.GetSetSecurityGroupsRequest, config?: AxiosRequestConfig): Promise<operations.GetSetSecurityGroupsResponse>;
    PostAddListenerCertificates(req: operations.PostAddListenerCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.PostAddListenerCertificatesResponse>;
    PostAddTags(req: operations.PostAddTagsRequest, config?: AxiosRequestConfig): Promise<operations.PostAddTagsResponse>;
    PostCreateListener(req: operations.PostCreateListenerRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateListenerResponse>;
    PostCreateLoadBalancer(req: operations.PostCreateLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateLoadBalancerResponse>;
    PostCreateRule(req: operations.PostCreateRuleRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateRuleResponse>;
    PostCreateTargetGroup(req: operations.PostCreateTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostCreateTargetGroupResponse>;
    PostDeleteListener(req: operations.PostDeleteListenerRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteListenerResponse>;
    PostDeleteLoadBalancer(req: operations.PostDeleteLoadBalancerRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteLoadBalancerResponse>;
    PostDeleteRule(req: operations.PostDeleteRuleRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteRuleResponse>;
    PostDeleteTargetGroup(req: operations.PostDeleteTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostDeleteTargetGroupResponse>;
    PostDeregisterTargets(req: operations.PostDeregisterTargetsRequest, config?: AxiosRequestConfig): Promise<operations.PostDeregisterTargetsResponse>;
    PostDescribeAccountLimits(req: operations.PostDescribeAccountLimitsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeAccountLimitsResponse>;
    PostDescribeListenerCertificates(req: operations.PostDescribeListenerCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeListenerCertificatesResponse>;
    PostDescribeListeners(req: operations.PostDescribeListenersRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeListenersResponse>;
    PostDescribeLoadBalancerAttributes(req: operations.PostDescribeLoadBalancerAttributesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeLoadBalancerAttributesResponse>;
    PostDescribeLoadBalancers(req: operations.PostDescribeLoadBalancersRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeLoadBalancersResponse>;
    PostDescribeRules(req: operations.PostDescribeRulesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeRulesResponse>;
    PostDescribeSslPolicies(req: operations.PostDescribeSslPoliciesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeSslPoliciesResponse>;
    PostDescribeTags(req: operations.PostDescribeTagsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeTagsResponse>;
    PostDescribeTargetGroupAttributes(req: operations.PostDescribeTargetGroupAttributesRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeTargetGroupAttributesResponse>;
    PostDescribeTargetGroups(req: operations.PostDescribeTargetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeTargetGroupsResponse>;
    PostDescribeTargetHealth(req: operations.PostDescribeTargetHealthRequest, config?: AxiosRequestConfig): Promise<operations.PostDescribeTargetHealthResponse>;
    PostModifyListener(req: operations.PostModifyListenerRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyListenerResponse>;
    PostModifyLoadBalancerAttributes(req: operations.PostModifyLoadBalancerAttributesRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyLoadBalancerAttributesResponse>;
    PostModifyRule(req: operations.PostModifyRuleRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyRuleResponse>;
    PostModifyTargetGroup(req: operations.PostModifyTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyTargetGroupResponse>;
    PostModifyTargetGroupAttributes(req: operations.PostModifyTargetGroupAttributesRequest, config?: AxiosRequestConfig): Promise<operations.PostModifyTargetGroupAttributesResponse>;
    PostRegisterTargets(req: operations.PostRegisterTargetsRequest, config?: AxiosRequestConfig): Promise<operations.PostRegisterTargetsResponse>;
    PostRemoveListenerCertificates(req: operations.PostRemoveListenerCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.PostRemoveListenerCertificatesResponse>;
    PostRemoveTags(req: operations.PostRemoveTagsRequest, config?: AxiosRequestConfig): Promise<operations.PostRemoveTagsResponse>;
    PostSetIpAddressType(req: operations.PostSetIpAddressTypeRequest, config?: AxiosRequestConfig): Promise<operations.PostSetIpAddressTypeResponse>;
    PostSetRulePriorities(req: operations.PostSetRulePrioritiesRequest, config?: AxiosRequestConfig): Promise<operations.PostSetRulePrioritiesResponse>;
    PostSetSecurityGroups(req: operations.PostSetSecurityGroupsRequest, config?: AxiosRequestConfig): Promise<operations.PostSetSecurityGroupsResponse>;
    PostSetSubnets(req: operations.PostSetSubnetsRequest, config?: AxiosRequestConfig): Promise<operations.PostSetSubnetsResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateConfigurationItemsToApplication(req: operations.AssociateConfigurationItemsToApplicationRequest, config?: AxiosRequestConfig): Promise<operations.AssociateConfigurationItemsToApplicationResponse>;
    BatchDeleteImportData(req: operations.BatchDeleteImportDataRequest, config?: AxiosRequestConfig): Promise<operations.BatchDeleteImportDataResponse>;
    CreateApplication(req: operations.CreateApplicationRequest, config?: AxiosRequestConfig): Promise<operations.CreateApplicationResponse>;
    CreateTags(req: operations.CreateTagsRequest, config?: AxiosRequestConfig): Promise<operations.CreateTagsResponse>;
    DeleteApplications(req: operations.DeleteApplicationsRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApplicationsResponse>;
    DeleteTags(req: operations.DeleteTagsRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTagsResponse>;
    DescribeAgents(req: operations.DescribeAgentsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAgentsResponse>;
    DescribeConfigurations(req: operations.DescribeConfigurationsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeConfigurationsResponse>;
    DescribeContinuousExports(req: operations.DescribeContinuousExportsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeContinuousExportsResponse>;
    DescribeExportConfigurations(req: operations.DescribeExportConfigurationsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeExportConfigurationsResponse>;
    DescribeExportTasks(req: operations.DescribeExportTasksRequest, config?: AxiosRequestConfig): Promise<operations.DescribeExportTasksResponse>;
    DescribeImportTasks(req: operations.DescribeImportTasksRequest, config?: AxiosRequestConfig): Promise<operations.DescribeImportTasksResponse>;
    DescribeTags(req: operations.DescribeTagsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeTagsResponse>;
    DisassociateConfigurationItemsFromApplication(req: operations.DisassociateConfigurationItemsFromApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateConfigurationItemsFromApplicationResponse>;
    ExportConfigurations(req: operations.ExportConfigurationsRequest, config?: AxiosRequestConfig): Promise<operations.ExportConfigurationsResponse>;
    GetDiscoverySummary(req: operations.GetDiscoverySummaryRequest, config?: AxiosRequestConfig): Promise<operations.GetDiscoverySummaryResponse>;
    ListConfigurations(req: operations.ListConfigurationsRequest, config?: AxiosRequestConfig): Promise<operations.ListConfigurationsResponse>;
    ListServerNeighbors(req: operations.ListServerNeighborsRequest, config?: AxiosRequestConfig): Promise<operations.ListServerNeighborsResponse>;
    StartContinuousExport(req: operations.StartContinuousExportRequest, config?: AxiosRequestConfig): Promise<operations.StartContinuousExportResponse>;
    StartDataCollectionByAgentIds(req: operations.StartDataCollectionByAgentIdsRequest, config?: AxiosRequestConfig): Promise<operations.StartDataCollectionByAgentIdsResponse>;
    StartExportTask(req: operations.StartExportTaskRequest, config?: AxiosRequestConfig): Promise<operations.StartExportTaskResponse>;
    StartImportTask(req: operations.StartImportTaskRequest, config?: AxiosRequestConfig): Promise<operations.StartImportTaskResponse>;
    StopContinuousExport(req: operations.StopContinuousExportRequest, config?: AxiosRequestConfig): Promise<operations.StopContinuousExportResponse>;
    StopDataCollectionByAgentIds(req: operations.StopDataCollectionByAgentIdsRequest, config?: AxiosRequestConfig): Promise<operations.StopDataCollectionByAgentIdsResponse>;
    UpdateApplication(req: operations.UpdateApplicationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApplicationResponse>;
}
export {};

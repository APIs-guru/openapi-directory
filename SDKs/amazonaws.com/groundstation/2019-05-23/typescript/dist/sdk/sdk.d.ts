import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CancelContact(req: operations.CancelContactRequest, config?: AxiosRequestConfig): Promise<operations.CancelContactResponse>;
    CreateConfig(req: operations.CreateConfigRequest, config?: AxiosRequestConfig): Promise<operations.CreateConfigResponse>;
    CreateDataflowEndpointGroup(req: operations.CreateDataflowEndpointGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateDataflowEndpointGroupResponse>;
    CreateMissionProfile(req: operations.CreateMissionProfileRequest, config?: AxiosRequestConfig): Promise<operations.CreateMissionProfileResponse>;
    DeleteConfig(req: operations.DeleteConfigRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConfigResponse>;
    DeleteDataflowEndpointGroup(req: operations.DeleteDataflowEndpointGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDataflowEndpointGroupResponse>;
    DeleteMissionProfile(req: operations.DeleteMissionProfileRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMissionProfileResponse>;
    DescribeContact(req: operations.DescribeContactRequest, config?: AxiosRequestConfig): Promise<operations.DescribeContactResponse>;
    GetConfig(req: operations.GetConfigRequest, config?: AxiosRequestConfig): Promise<operations.GetConfigResponse>;
    GetDataflowEndpointGroup(req: operations.GetDataflowEndpointGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetDataflowEndpointGroupResponse>;
    GetMinuteUsage(req: operations.GetMinuteUsageRequest, config?: AxiosRequestConfig): Promise<operations.GetMinuteUsageResponse>;
    GetMissionProfile(req: operations.GetMissionProfileRequest, config?: AxiosRequestConfig): Promise<operations.GetMissionProfileResponse>;
    GetSatellite(req: operations.GetSatelliteRequest, config?: AxiosRequestConfig): Promise<operations.GetSatelliteResponse>;
    ListConfigs(req: operations.ListConfigsRequest, config?: AxiosRequestConfig): Promise<operations.ListConfigsResponse>;
    ListContacts(req: operations.ListContactsRequest, config?: AxiosRequestConfig): Promise<operations.ListContactsResponse>;
    ListDataflowEndpointGroups(req: operations.ListDataflowEndpointGroupsRequest, config?: AxiosRequestConfig): Promise<operations.ListDataflowEndpointGroupsResponse>;
    ListGroundStations(req: operations.ListGroundStationsRequest, config?: AxiosRequestConfig): Promise<operations.ListGroundStationsResponse>;
    ListMissionProfiles(req: operations.ListMissionProfilesRequest, config?: AxiosRequestConfig): Promise<operations.ListMissionProfilesResponse>;
    ListSatellites(req: operations.ListSatellitesRequest, config?: AxiosRequestConfig): Promise<operations.ListSatellitesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ReserveContact(req: operations.ReserveContactRequest, config?: AxiosRequestConfig): Promise<operations.ReserveContactResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateConfig(req: operations.UpdateConfigRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConfigResponse>;
    UpdateMissionProfile(req: operations.UpdateMissionProfileRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMissionProfileResponse>;
}
export {};

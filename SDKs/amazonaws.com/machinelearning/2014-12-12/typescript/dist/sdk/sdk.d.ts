import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AddTags(req: operations.AddTagsRequest, config?: AxiosRequestConfig): Promise<operations.AddTagsResponse>;
    CreateBatchPrediction(req: operations.CreateBatchPredictionRequest, config?: AxiosRequestConfig): Promise<operations.CreateBatchPredictionResponse>;
    CreateDataSourceFromRds(req: operations.CreateDataSourceFromRdsRequest, config?: AxiosRequestConfig): Promise<operations.CreateDataSourceFromRdsResponse>;
    CreateDataSourceFromRedshift(req: operations.CreateDataSourceFromRedshiftRequest, config?: AxiosRequestConfig): Promise<operations.CreateDataSourceFromRedshiftResponse>;
    CreateDataSourceFromS3(req: operations.CreateDataSourceFromS3Request, config?: AxiosRequestConfig): Promise<operations.CreateDataSourceFromS3Response>;
    CreateEvaluation(req: operations.CreateEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.CreateEvaluationResponse>;
    CreateMlModel(req: operations.CreateMlModelRequest, config?: AxiosRequestConfig): Promise<operations.CreateMlModelResponse>;
    CreateRealtimeEndpoint(req: operations.CreateRealtimeEndpointRequest, config?: AxiosRequestConfig): Promise<operations.CreateRealtimeEndpointResponse>;
    DeleteBatchPrediction(req: operations.DeleteBatchPredictionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteBatchPredictionResponse>;
    DeleteDataSource(req: operations.DeleteDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDataSourceResponse>;
    DeleteEvaluation(req: operations.DeleteEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEvaluationResponse>;
    DeleteMlModel(req: operations.DeleteMlModelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMlModelResponse>;
    DeleteRealtimeEndpoint(req: operations.DeleteRealtimeEndpointRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRealtimeEndpointResponse>;
    DeleteTags(req: operations.DeleteTagsRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTagsResponse>;
    DescribeBatchPredictions(req: operations.DescribeBatchPredictionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeBatchPredictionsResponse>;
    DescribeDataSources(req: operations.DescribeDataSourcesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDataSourcesResponse>;
    DescribeEvaluations(req: operations.DescribeEvaluationsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEvaluationsResponse>;
    DescribeMlModels(req: operations.DescribeMlModelsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeMlModelsResponse>;
    DescribeTags(req: operations.DescribeTagsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeTagsResponse>;
    GetBatchPrediction(req: operations.GetBatchPredictionRequest, config?: AxiosRequestConfig): Promise<operations.GetBatchPredictionResponse>;
    GetDataSource(req: operations.GetDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.GetDataSourceResponse>;
    GetEvaluation(req: operations.GetEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.GetEvaluationResponse>;
    GetMlModel(req: operations.GetMlModelRequest, config?: AxiosRequestConfig): Promise<operations.GetMlModelResponse>;
    Predict(req: operations.PredictRequest, config?: AxiosRequestConfig): Promise<operations.PredictResponse>;
    UpdateBatchPrediction(req: operations.UpdateBatchPredictionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateBatchPredictionResponse>;
    UpdateDataSource(req: operations.UpdateDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDataSourceResponse>;
    UpdateEvaluation(req: operations.UpdateEvaluationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEvaluationResponse>;
    UpdateMlModel(req: operations.UpdateMlModelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMlModelResponse>;
}
export {};

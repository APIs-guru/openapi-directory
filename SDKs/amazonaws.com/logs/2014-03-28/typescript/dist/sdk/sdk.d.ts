import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateKmsKey(req: operations.AssociateKmsKeyRequest, config?: AxiosRequestConfig): Promise<operations.AssociateKmsKeyResponse>;
    CancelExportTask(req: operations.CancelExportTaskRequest, config?: AxiosRequestConfig): Promise<operations.CancelExportTaskResponse>;
    CreateExportTask(req: operations.CreateExportTaskRequest, config?: AxiosRequestConfig): Promise<operations.CreateExportTaskResponse>;
    CreateLogGroup(req: operations.CreateLogGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateLogGroupResponse>;
    CreateLogStream(req: operations.CreateLogStreamRequest, config?: AxiosRequestConfig): Promise<operations.CreateLogStreamResponse>;
    DeleteDestination(req: operations.DeleteDestinationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDestinationResponse>;
    DeleteLogGroup(req: operations.DeleteLogGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteLogGroupResponse>;
    DeleteLogStream(req: operations.DeleteLogStreamRequest, config?: AxiosRequestConfig): Promise<operations.DeleteLogStreamResponse>;
    DeleteMetricFilter(req: operations.DeleteMetricFilterRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMetricFilterResponse>;
    DeleteQueryDefinition(req: operations.DeleteQueryDefinitionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteQueryDefinitionResponse>;
    DeleteResourcePolicy(req: operations.DeleteResourcePolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResourcePolicyResponse>;
    DeleteRetentionPolicy(req: operations.DeleteRetentionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRetentionPolicyResponse>;
    DeleteSubscriptionFilter(req: operations.DeleteSubscriptionFilterRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSubscriptionFilterResponse>;
    DescribeDestinations(req: operations.DescribeDestinationsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDestinationsResponse>;
    DescribeExportTasks(req: operations.DescribeExportTasksRequest, config?: AxiosRequestConfig): Promise<operations.DescribeExportTasksResponse>;
    DescribeLogGroups(req: operations.DescribeLogGroupsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeLogGroupsResponse>;
    DescribeLogStreams(req: operations.DescribeLogStreamsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeLogStreamsResponse>;
    DescribeMetricFilters(req: operations.DescribeMetricFiltersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeMetricFiltersResponse>;
    DescribeQueries(req: operations.DescribeQueriesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeQueriesResponse>;
    DescribeQueryDefinitions(req: operations.DescribeQueryDefinitionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeQueryDefinitionsResponse>;
    DescribeResourcePolicies(req: operations.DescribeResourcePoliciesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeResourcePoliciesResponse>;
    DescribeSubscriptionFilters(req: operations.DescribeSubscriptionFiltersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSubscriptionFiltersResponse>;
    DisassociateKmsKey(req: operations.DisassociateKmsKeyRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateKmsKeyResponse>;
    FilterLogEvents(req: operations.FilterLogEventsRequest, config?: AxiosRequestConfig): Promise<operations.FilterLogEventsResponse>;
    GetLogEvents(req: operations.GetLogEventsRequest, config?: AxiosRequestConfig): Promise<operations.GetLogEventsResponse>;
    GetLogGroupFields(req: operations.GetLogGroupFieldsRequest, config?: AxiosRequestConfig): Promise<operations.GetLogGroupFieldsResponse>;
    GetLogRecord(req: operations.GetLogRecordRequest, config?: AxiosRequestConfig): Promise<operations.GetLogRecordResponse>;
    GetQueryResults(req: operations.GetQueryResultsRequest, config?: AxiosRequestConfig): Promise<operations.GetQueryResultsResponse>;
    ListTagsLogGroup(req: operations.ListTagsLogGroupRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsLogGroupResponse>;
    PutDestination(req: operations.PutDestinationRequest, config?: AxiosRequestConfig): Promise<operations.PutDestinationResponse>;
    PutDestinationPolicy(req: operations.PutDestinationPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutDestinationPolicyResponse>;
    PutLogEvents(req: operations.PutLogEventsRequest, config?: AxiosRequestConfig): Promise<operations.PutLogEventsResponse>;
    PutMetricFilter(req: operations.PutMetricFilterRequest, config?: AxiosRequestConfig): Promise<operations.PutMetricFilterResponse>;
    PutQueryDefinition(req: operations.PutQueryDefinitionRequest, config?: AxiosRequestConfig): Promise<operations.PutQueryDefinitionResponse>;
    PutResourcePolicy(req: operations.PutResourcePolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutResourcePolicyResponse>;
    PutRetentionPolicy(req: operations.PutRetentionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutRetentionPolicyResponse>;
    PutSubscriptionFilter(req: operations.PutSubscriptionFilterRequest, config?: AxiosRequestConfig): Promise<operations.PutSubscriptionFilterResponse>;
    StartQuery(req: operations.StartQueryRequest, config?: AxiosRequestConfig): Promise<operations.StartQueryResponse>;
    StopQuery(req: operations.StopQueryRequest, config?: AxiosRequestConfig): Promise<operations.StopQueryResponse>;
    TagLogGroup(req: operations.TagLogGroupRequest, config?: AxiosRequestConfig): Promise<operations.TagLogGroupResponse>;
    TestMetricFilter(req: operations.TestMetricFilterRequest, config?: AxiosRequestConfig): Promise<operations.TestMetricFilterResponse>;
    UntagLogGroup(req: operations.UntagLogGroupRequest, config?: AxiosRequestConfig): Promise<operations.UntagLogGroupResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    BatchPutMessage(req: operations.BatchPutMessageRequest, config?: AxiosRequestConfig): Promise<operations.BatchPutMessageResponse>;
    CancelPipelineReprocessing(req: operations.CancelPipelineReprocessingRequest, config?: AxiosRequestConfig): Promise<operations.CancelPipelineReprocessingResponse>;
    CreateChannel(req: operations.CreateChannelRequest, config?: AxiosRequestConfig): Promise<operations.CreateChannelResponse>;
    CreateDataset(req: operations.CreateDatasetRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetResponse>;
    CreateDatasetContent(req: operations.CreateDatasetContentRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatasetContentResponse>;
    CreateDatastore(req: operations.CreateDatastoreRequest, config?: AxiosRequestConfig): Promise<operations.CreateDatastoreResponse>;
    CreatePipeline(req: operations.CreatePipelineRequest, config?: AxiosRequestConfig): Promise<operations.CreatePipelineResponse>;
    DeleteChannel(req: operations.DeleteChannelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteChannelResponse>;
    DeleteDataset(req: operations.DeleteDatasetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetResponse>;
    DeleteDatasetContent(req: operations.DeleteDatasetContentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatasetContentResponse>;
    DeleteDatastore(req: operations.DeleteDatastoreRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDatastoreResponse>;
    DeletePipeline(req: operations.DeletePipelineRequest, config?: AxiosRequestConfig): Promise<operations.DeletePipelineResponse>;
    DescribeChannel(req: operations.DescribeChannelRequest, config?: AxiosRequestConfig): Promise<operations.DescribeChannelResponse>;
    DescribeDataset(req: operations.DescribeDatasetRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatasetResponse>;
    DescribeDatastore(req: operations.DescribeDatastoreRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDatastoreResponse>;
    DescribeLoggingOptions(req: operations.DescribeLoggingOptionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeLoggingOptionsResponse>;
    DescribePipeline(req: operations.DescribePipelineRequest, config?: AxiosRequestConfig): Promise<operations.DescribePipelineResponse>;
    GetDatasetContent(req: operations.GetDatasetContentRequest, config?: AxiosRequestConfig): Promise<operations.GetDatasetContentResponse>;
    ListChannels(req: operations.ListChannelsRequest, config?: AxiosRequestConfig): Promise<operations.ListChannelsResponse>;
    ListDatasetContents(req: operations.ListDatasetContentsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetContentsResponse>;
    ListDatasets(req: operations.ListDatasetsRequest, config?: AxiosRequestConfig): Promise<operations.ListDatasetsResponse>;
    ListDatastores(req: operations.ListDatastoresRequest, config?: AxiosRequestConfig): Promise<operations.ListDatastoresResponse>;
    ListPipelines(req: operations.ListPipelinesRequest, config?: AxiosRequestConfig): Promise<operations.ListPipelinesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    PutLoggingOptions(req: operations.PutLoggingOptionsRequest, config?: AxiosRequestConfig): Promise<operations.PutLoggingOptionsResponse>;
    RunPipelineActivity(req: operations.RunPipelineActivityRequest, config?: AxiosRequestConfig): Promise<operations.RunPipelineActivityResponse>;
    SampleChannelData(req: operations.SampleChannelDataRequest, config?: AxiosRequestConfig): Promise<operations.SampleChannelDataResponse>;
    StartPipelineReprocessing(req: operations.StartPipelineReprocessingRequest, config?: AxiosRequestConfig): Promise<operations.StartPipelineReprocessingResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateChannel(req: operations.UpdateChannelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateChannelResponse>;
    UpdateDataset(req: operations.UpdateDatasetRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDatasetResponse>;
    UpdateDatastore(req: operations.UpdateDatastoreRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDatastoreResponse>;
    UpdatePipeline(req: operations.UpdatePipelineRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePipelineResponse>;
}
export {};

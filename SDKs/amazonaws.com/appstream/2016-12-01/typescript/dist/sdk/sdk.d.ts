import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateFleet(req: operations.AssociateFleetRequest, config?: AxiosRequestConfig): Promise<operations.AssociateFleetResponse>;
    BatchAssociateUserStack(req: operations.BatchAssociateUserStackRequest, config?: AxiosRequestConfig): Promise<operations.BatchAssociateUserStackResponse>;
    BatchDisassociateUserStack(req: operations.BatchDisassociateUserStackRequest, config?: AxiosRequestConfig): Promise<operations.BatchDisassociateUserStackResponse>;
    CopyImage(req: operations.CopyImageRequest, config?: AxiosRequestConfig): Promise<operations.CopyImageResponse>;
    CreateDirectoryConfig(req: operations.CreateDirectoryConfigRequest, config?: AxiosRequestConfig): Promise<operations.CreateDirectoryConfigResponse>;
    CreateFleet(req: operations.CreateFleetRequest, config?: AxiosRequestConfig): Promise<operations.CreateFleetResponse>;
    CreateImageBuilder(req: operations.CreateImageBuilderRequest, config?: AxiosRequestConfig): Promise<operations.CreateImageBuilderResponse>;
    CreateImageBuilderStreamingUrl(req: operations.CreateImageBuilderStreamingUrlRequest, config?: AxiosRequestConfig): Promise<operations.CreateImageBuilderStreamingUrlResponse>;
    CreateStack(req: operations.CreateStackRequest, config?: AxiosRequestConfig): Promise<operations.CreateStackResponse>;
    CreateStreamingUrl(req: operations.CreateStreamingUrlRequest, config?: AxiosRequestConfig): Promise<operations.CreateStreamingUrlResponse>;
    CreateUpdatedImage(req: operations.CreateUpdatedImageRequest, config?: AxiosRequestConfig): Promise<operations.CreateUpdatedImageResponse>;
    CreateUsageReportSubscription(req: operations.CreateUsageReportSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.CreateUsageReportSubscriptionResponse>;
    CreateUser(req: operations.CreateUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateUserResponse>;
    DeleteDirectoryConfig(req: operations.DeleteDirectoryConfigRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDirectoryConfigResponse>;
    DeleteFleet(req: operations.DeleteFleetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFleetResponse>;
    DeleteImage(req: operations.DeleteImageRequest, config?: AxiosRequestConfig): Promise<operations.DeleteImageResponse>;
    DeleteImageBuilder(req: operations.DeleteImageBuilderRequest, config?: AxiosRequestConfig): Promise<operations.DeleteImageBuilderResponse>;
    DeleteImagePermissions(req: operations.DeleteImagePermissionsRequest, config?: AxiosRequestConfig): Promise<operations.DeleteImagePermissionsResponse>;
    DeleteStack(req: operations.DeleteStackRequest, config?: AxiosRequestConfig): Promise<operations.DeleteStackResponse>;
    DeleteUsageReportSubscription(req: operations.DeleteUsageReportSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUsageReportSubscriptionResponse>;
    DeleteUser(req: operations.DeleteUserRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUserResponse>;
    DescribeDirectoryConfigs(req: operations.DescribeDirectoryConfigsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDirectoryConfigsResponse>;
    DescribeFleets(req: operations.DescribeFleetsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeFleetsResponse>;
    DescribeImageBuilders(req: operations.DescribeImageBuildersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeImageBuildersResponse>;
    DescribeImagePermissions(req: operations.DescribeImagePermissionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeImagePermissionsResponse>;
    DescribeImages(req: operations.DescribeImagesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeImagesResponse>;
    DescribeSessions(req: operations.DescribeSessionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSessionsResponse>;
    DescribeStacks(req: operations.DescribeStacksRequest, config?: AxiosRequestConfig): Promise<operations.DescribeStacksResponse>;
    DescribeUsageReportSubscriptions(req: operations.DescribeUsageReportSubscriptionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeUsageReportSubscriptionsResponse>;
    DescribeUserStackAssociations(req: operations.DescribeUserStackAssociationsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeUserStackAssociationsResponse>;
    DescribeUsers(req: operations.DescribeUsersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeUsersResponse>;
    DisableUser(req: operations.DisableUserRequest, config?: AxiosRequestConfig): Promise<operations.DisableUserResponse>;
    DisassociateFleet(req: operations.DisassociateFleetRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateFleetResponse>;
    EnableUser(req: operations.EnableUserRequest, config?: AxiosRequestConfig): Promise<operations.EnableUserResponse>;
    ExpireSession(req: operations.ExpireSessionRequest, config?: AxiosRequestConfig): Promise<operations.ExpireSessionResponse>;
    ListAssociatedFleets(req: operations.ListAssociatedFleetsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssociatedFleetsResponse>;
    ListAssociatedStacks(req: operations.ListAssociatedStacksRequest, config?: AxiosRequestConfig): Promise<operations.ListAssociatedStacksResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    StartFleet(req: operations.StartFleetRequest, config?: AxiosRequestConfig): Promise<operations.StartFleetResponse>;
    StartImageBuilder(req: operations.StartImageBuilderRequest, config?: AxiosRequestConfig): Promise<operations.StartImageBuilderResponse>;
    StopFleet(req: operations.StopFleetRequest, config?: AxiosRequestConfig): Promise<operations.StopFleetResponse>;
    StopImageBuilder(req: operations.StopImageBuilderRequest, config?: AxiosRequestConfig): Promise<operations.StopImageBuilderResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateDirectoryConfig(req: operations.UpdateDirectoryConfigRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDirectoryConfigResponse>;
    UpdateFleet(req: operations.UpdateFleetRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFleetResponse>;
    UpdateImagePermissions(req: operations.UpdateImagePermissionsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateImagePermissionsResponse>;
    UpdateStack(req: operations.UpdateStackRequest, config?: AxiosRequestConfig): Promise<operations.UpdateStackResponse>;
}
export {};

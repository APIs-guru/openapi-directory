import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateDelegateToResource(req: operations.AssociateDelegateToResourceRequest, config?: AxiosRequestConfig): Promise<operations.AssociateDelegateToResourceResponse>;
    AssociateMemberToGroup(req: operations.AssociateMemberToGroupRequest, config?: AxiosRequestConfig): Promise<operations.AssociateMemberToGroupResponse>;
    CancelMailboxExportJob(req: operations.CancelMailboxExportJobRequest, config?: AxiosRequestConfig): Promise<operations.CancelMailboxExportJobResponse>;
    CreateAlias(req: operations.CreateAliasRequest, config?: AxiosRequestConfig): Promise<operations.CreateAliasResponse>;
    CreateGroup(req: operations.CreateGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateGroupResponse>;
    CreateMobileDeviceAccessRule(req: operations.CreateMobileDeviceAccessRuleRequest, config?: AxiosRequestConfig): Promise<operations.CreateMobileDeviceAccessRuleResponse>;
    CreateOrganization(req: operations.CreateOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.CreateOrganizationResponse>;
    CreateResource(req: operations.CreateResourceRequest, config?: AxiosRequestConfig): Promise<operations.CreateResourceResponse>;
    CreateUser(req: operations.CreateUserRequest, config?: AxiosRequestConfig): Promise<operations.CreateUserResponse>;
    DeleteAccessControlRule(req: operations.DeleteAccessControlRuleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAccessControlRuleResponse>;
    DeleteAlias(req: operations.DeleteAliasRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAliasResponse>;
    DeleteGroup(req: operations.DeleteGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteGroupResponse>;
    DeleteMailboxPermissions(req: operations.DeleteMailboxPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMailboxPermissionsResponse>;
    DeleteMobileDeviceAccessRule(req: operations.DeleteMobileDeviceAccessRuleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteMobileDeviceAccessRuleResponse>;
    DeleteOrganization(req: operations.DeleteOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteOrganizationResponse>;
    DeleteResource(req: operations.DeleteResourceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResourceResponse>;
    DeleteRetentionPolicy(req: operations.DeleteRetentionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRetentionPolicyResponse>;
    DeleteUser(req: operations.DeleteUserRequest, config?: AxiosRequestConfig): Promise<operations.DeleteUserResponse>;
    DeregisterFromWorkMail(req: operations.DeregisterFromWorkMailRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterFromWorkMailResponse>;
    DescribeGroup(req: operations.DescribeGroupRequest, config?: AxiosRequestConfig): Promise<operations.DescribeGroupResponse>;
    DescribeMailboxExportJob(req: operations.DescribeMailboxExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeMailboxExportJobResponse>;
    DescribeOrganization(req: operations.DescribeOrganizationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeOrganizationResponse>;
    DescribeResource(req: operations.DescribeResourceRequest, config?: AxiosRequestConfig): Promise<operations.DescribeResourceResponse>;
    DescribeUser(req: operations.DescribeUserRequest, config?: AxiosRequestConfig): Promise<operations.DescribeUserResponse>;
    DisassociateDelegateFromResource(req: operations.DisassociateDelegateFromResourceRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateDelegateFromResourceResponse>;
    DisassociateMemberFromGroup(req: operations.DisassociateMemberFromGroupRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateMemberFromGroupResponse>;
    GetAccessControlEffect(req: operations.GetAccessControlEffectRequest, config?: AxiosRequestConfig): Promise<operations.GetAccessControlEffectResponse>;
    GetDefaultRetentionPolicy(req: operations.GetDefaultRetentionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetDefaultRetentionPolicyResponse>;
    GetMailboxDetails(req: operations.GetMailboxDetailsRequest, config?: AxiosRequestConfig): Promise<operations.GetMailboxDetailsResponse>;
    GetMobileDeviceAccessEffect(req: operations.GetMobileDeviceAccessEffectRequest, config?: AxiosRequestConfig): Promise<operations.GetMobileDeviceAccessEffectResponse>;
    ListAccessControlRules(req: operations.ListAccessControlRulesRequest, config?: AxiosRequestConfig): Promise<operations.ListAccessControlRulesResponse>;
    ListAliases(req: operations.ListAliasesRequest, config?: AxiosRequestConfig): Promise<operations.ListAliasesResponse>;
    ListGroupMembers(req: operations.ListGroupMembersRequest, config?: AxiosRequestConfig): Promise<operations.ListGroupMembersResponse>;
    ListGroups(req: operations.ListGroupsRequest, config?: AxiosRequestConfig): Promise<operations.ListGroupsResponse>;
    ListMailboxExportJobs(req: operations.ListMailboxExportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListMailboxExportJobsResponse>;
    ListMailboxPermissions(req: operations.ListMailboxPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.ListMailboxPermissionsResponse>;
    ListMobileDeviceAccessRules(req: operations.ListMobileDeviceAccessRulesRequest, config?: AxiosRequestConfig): Promise<operations.ListMobileDeviceAccessRulesResponse>;
    ListOrganizations(req: operations.ListOrganizationsRequest, config?: AxiosRequestConfig): Promise<operations.ListOrganizationsResponse>;
    ListResourceDelegates(req: operations.ListResourceDelegatesRequest, config?: AxiosRequestConfig): Promise<operations.ListResourceDelegatesResponse>;
    ListResources(req: operations.ListResourcesRequest, config?: AxiosRequestConfig): Promise<operations.ListResourcesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListUsers(req: operations.ListUsersRequest, config?: AxiosRequestConfig): Promise<operations.ListUsersResponse>;
    PutAccessControlRule(req: operations.PutAccessControlRuleRequest, config?: AxiosRequestConfig): Promise<operations.PutAccessControlRuleResponse>;
    PutMailboxPermissions(req: operations.PutMailboxPermissionsRequest, config?: AxiosRequestConfig): Promise<operations.PutMailboxPermissionsResponse>;
    PutRetentionPolicy(req: operations.PutRetentionPolicyRequest, config?: AxiosRequestConfig): Promise<operations.PutRetentionPolicyResponse>;
    RegisterToWorkMail(req: operations.RegisterToWorkMailRequest, config?: AxiosRequestConfig): Promise<operations.RegisterToWorkMailResponse>;
    ResetPassword(req: operations.ResetPasswordRequest, config?: AxiosRequestConfig): Promise<operations.ResetPasswordResponse>;
    StartMailboxExportJob(req: operations.StartMailboxExportJobRequest, config?: AxiosRequestConfig): Promise<operations.StartMailboxExportJobResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateMailboxQuota(req: operations.UpdateMailboxQuotaRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMailboxQuotaResponse>;
    UpdateMobileDeviceAccessRule(req: operations.UpdateMobileDeviceAccessRuleRequest, config?: AxiosRequestConfig): Promise<operations.UpdateMobileDeviceAccessRuleResponse>;
    UpdatePrimaryEmailAddress(req: operations.UpdatePrimaryEmailAddressRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePrimaryEmailAddressResponse>;
    UpdateResource(req: operations.UpdateResourceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResourceResponse>;
}
export {};

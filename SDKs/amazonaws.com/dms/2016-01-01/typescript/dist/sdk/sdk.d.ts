import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AddTagsToResource(req: operations.AddTagsToResourceRequest, config?: AxiosRequestConfig): Promise<operations.AddTagsToResourceResponse>;
    ApplyPendingMaintenanceAction(req: operations.ApplyPendingMaintenanceActionRequest, config?: AxiosRequestConfig): Promise<operations.ApplyPendingMaintenanceActionResponse>;
    CancelReplicationTaskAssessmentRun(req: operations.CancelReplicationTaskAssessmentRunRequest, config?: AxiosRequestConfig): Promise<operations.CancelReplicationTaskAssessmentRunResponse>;
    CreateEndpoint(req: operations.CreateEndpointRequest, config?: AxiosRequestConfig): Promise<operations.CreateEndpointResponse>;
    CreateEventSubscription(req: operations.CreateEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.CreateEventSubscriptionResponse>;
    CreateReplicationInstance(req: operations.CreateReplicationInstanceRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplicationInstanceResponse>;
    CreateReplicationSubnetGroup(req: operations.CreateReplicationSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplicationSubnetGroupResponse>;
    CreateReplicationTask(req: operations.CreateReplicationTaskRequest, config?: AxiosRequestConfig): Promise<operations.CreateReplicationTaskResponse>;
    DeleteCertificate(req: operations.DeleteCertificateRequest, config?: AxiosRequestConfig): Promise<operations.DeleteCertificateResponse>;
    DeleteConnection(req: operations.DeleteConnectionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConnectionResponse>;
    DeleteEndpoint(req: operations.DeleteEndpointRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEndpointResponse>;
    DeleteEventSubscription(req: operations.DeleteEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEventSubscriptionResponse>;
    DeleteReplicationInstance(req: operations.DeleteReplicationInstanceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationInstanceResponse>;
    DeleteReplicationSubnetGroup(req: operations.DeleteReplicationSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationSubnetGroupResponse>;
    DeleteReplicationTask(req: operations.DeleteReplicationTaskRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationTaskResponse>;
    DeleteReplicationTaskAssessmentRun(req: operations.DeleteReplicationTaskAssessmentRunRequest, config?: AxiosRequestConfig): Promise<operations.DeleteReplicationTaskAssessmentRunResponse>;
    DescribeAccountAttributes(req: operations.DescribeAccountAttributesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAccountAttributesResponse>;
    DescribeApplicableIndividualAssessments(req: operations.DescribeApplicableIndividualAssessmentsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeApplicableIndividualAssessmentsResponse>;
    DescribeCertificates(req: operations.DescribeCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeCertificatesResponse>;
    DescribeConnections(req: operations.DescribeConnectionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeConnectionsResponse>;
    DescribeEndpointSettings(req: operations.DescribeEndpointSettingsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEndpointSettingsResponse>;
    DescribeEndpointTypes(req: operations.DescribeEndpointTypesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEndpointTypesResponse>;
    DescribeEndpoints(req: operations.DescribeEndpointsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEndpointsResponse>;
    DescribeEventCategories(req: operations.DescribeEventCategoriesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventCategoriesResponse>;
    DescribeEventSubscriptions(req: operations.DescribeEventSubscriptionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventSubscriptionsResponse>;
    DescribeEvents(req: operations.DescribeEventsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventsResponse>;
    DescribeOrderableReplicationInstances(req: operations.DescribeOrderableReplicationInstancesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeOrderableReplicationInstancesResponse>;
    DescribePendingMaintenanceActions(req: operations.DescribePendingMaintenanceActionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribePendingMaintenanceActionsResponse>;
    DescribeRefreshSchemasStatus(req: operations.DescribeRefreshSchemasStatusRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRefreshSchemasStatusResponse>;
    DescribeReplicationInstanceTaskLogs(req: operations.DescribeReplicationInstanceTaskLogsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationInstanceTaskLogsResponse>;
    DescribeReplicationInstances(req: operations.DescribeReplicationInstancesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationInstancesResponse>;
    DescribeReplicationSubnetGroups(req: operations.DescribeReplicationSubnetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationSubnetGroupsResponse>;
    DescribeReplicationTaskAssessmentResults(req: operations.DescribeReplicationTaskAssessmentResultsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationTaskAssessmentResultsResponse>;
    DescribeReplicationTaskAssessmentRuns(req: operations.DescribeReplicationTaskAssessmentRunsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationTaskAssessmentRunsResponse>;
    DescribeReplicationTaskIndividualAssessments(req: operations.DescribeReplicationTaskIndividualAssessmentsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationTaskIndividualAssessmentsResponse>;
    DescribeReplicationTasks(req: operations.DescribeReplicationTasksRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplicationTasksResponse>;
    DescribeSchemas(req: operations.DescribeSchemasRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSchemasResponse>;
    DescribeTableStatistics(req: operations.DescribeTableStatisticsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeTableStatisticsResponse>;
    ImportCertificate(req: operations.ImportCertificateRequest, config?: AxiosRequestConfig): Promise<operations.ImportCertificateResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ModifyEndpoint(req: operations.ModifyEndpointRequest, config?: AxiosRequestConfig): Promise<operations.ModifyEndpointResponse>;
    ModifyEventSubscription(req: operations.ModifyEventSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.ModifyEventSubscriptionResponse>;
    ModifyReplicationInstance(req: operations.ModifyReplicationInstanceRequest, config?: AxiosRequestConfig): Promise<operations.ModifyReplicationInstanceResponse>;
    ModifyReplicationSubnetGroup(req: operations.ModifyReplicationSubnetGroupRequest, config?: AxiosRequestConfig): Promise<operations.ModifyReplicationSubnetGroupResponse>;
    ModifyReplicationTask(req: operations.ModifyReplicationTaskRequest, config?: AxiosRequestConfig): Promise<operations.ModifyReplicationTaskResponse>;
    MoveReplicationTask(req: operations.MoveReplicationTaskRequest, config?: AxiosRequestConfig): Promise<operations.MoveReplicationTaskResponse>;
    RebootReplicationInstance(req: operations.RebootReplicationInstanceRequest, config?: AxiosRequestConfig): Promise<operations.RebootReplicationInstanceResponse>;
    RefreshSchemas(req: operations.RefreshSchemasRequest, config?: AxiosRequestConfig): Promise<operations.RefreshSchemasResponse>;
    ReloadTables(req: operations.ReloadTablesRequest, config?: AxiosRequestConfig): Promise<operations.ReloadTablesResponse>;
    RemoveTagsFromResource(req: operations.RemoveTagsFromResourceRequest, config?: AxiosRequestConfig): Promise<operations.RemoveTagsFromResourceResponse>;
    StartReplicationTask(req: operations.StartReplicationTaskRequest, config?: AxiosRequestConfig): Promise<operations.StartReplicationTaskResponse>;
    StartReplicationTaskAssessment(req: operations.StartReplicationTaskAssessmentRequest, config?: AxiosRequestConfig): Promise<operations.StartReplicationTaskAssessmentResponse>;
    StartReplicationTaskAssessmentRun(req: operations.StartReplicationTaskAssessmentRunRequest, config?: AxiosRequestConfig): Promise<operations.StartReplicationTaskAssessmentRunResponse>;
    StopReplicationTask(req: operations.StopReplicationTaskRequest, config?: AxiosRequestConfig): Promise<operations.StopReplicationTaskResponse>;
    TestConnection(req: operations.TestConnectionRequest, config?: AxiosRequestConfig): Promise<operations.TestConnectionResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    BatchDeleteWorlds(req: operations.BatchDeleteWorldsRequest, config?: AxiosRequestConfig): Promise<operations.BatchDeleteWorldsResponse>;
    BatchDescribeSimulationJob(req: operations.BatchDescribeSimulationJobRequest, config?: AxiosRequestConfig): Promise<operations.BatchDescribeSimulationJobResponse>;
    CancelDeploymentJob(req: operations.CancelDeploymentJobRequest, config?: AxiosRequestConfig): Promise<operations.CancelDeploymentJobResponse>;
    CancelSimulationJob(req: operations.CancelSimulationJobRequest, config?: AxiosRequestConfig): Promise<operations.CancelSimulationJobResponse>;
    CancelSimulationJobBatch(req: operations.CancelSimulationJobBatchRequest, config?: AxiosRequestConfig): Promise<operations.CancelSimulationJobBatchResponse>;
    CancelWorldExportJob(req: operations.CancelWorldExportJobRequest, config?: AxiosRequestConfig): Promise<operations.CancelWorldExportJobResponse>;
    CancelWorldGenerationJob(req: operations.CancelWorldGenerationJobRequest, config?: AxiosRequestConfig): Promise<operations.CancelWorldGenerationJobResponse>;
    CreateDeploymentJob(req: operations.CreateDeploymentJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateDeploymentJobResponse>;
    CreateFleet(req: operations.CreateFleetRequest, config?: AxiosRequestConfig): Promise<operations.CreateFleetResponse>;
    CreateRobot(req: operations.CreateRobotRequest, config?: AxiosRequestConfig): Promise<operations.CreateRobotResponse>;
    CreateRobotApplication(req: operations.CreateRobotApplicationRequest, config?: AxiosRequestConfig): Promise<operations.CreateRobotApplicationResponse>;
    CreateRobotApplicationVersion(req: operations.CreateRobotApplicationVersionRequest, config?: AxiosRequestConfig): Promise<operations.CreateRobotApplicationVersionResponse>;
    CreateSimulationApplication(req: operations.CreateSimulationApplicationRequest, config?: AxiosRequestConfig): Promise<operations.CreateSimulationApplicationResponse>;
    CreateSimulationApplicationVersion(req: operations.CreateSimulationApplicationVersionRequest, config?: AxiosRequestConfig): Promise<operations.CreateSimulationApplicationVersionResponse>;
    CreateSimulationJob(req: operations.CreateSimulationJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateSimulationJobResponse>;
    CreateWorldExportJob(req: operations.CreateWorldExportJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorldExportJobResponse>;
    CreateWorldGenerationJob(req: operations.CreateWorldGenerationJobRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorldGenerationJobResponse>;
    CreateWorldTemplate(req: operations.CreateWorldTemplateRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorldTemplateResponse>;
    DeleteFleet(req: operations.DeleteFleetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFleetResponse>;
    DeleteRobot(req: operations.DeleteRobotRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRobotResponse>;
    DeleteRobotApplication(req: operations.DeleteRobotApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRobotApplicationResponse>;
    DeleteSimulationApplication(req: operations.DeleteSimulationApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSimulationApplicationResponse>;
    DeleteWorldTemplate(req: operations.DeleteWorldTemplateRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorldTemplateResponse>;
    DeregisterRobot(req: operations.DeregisterRobotRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterRobotResponse>;
    DescribeDeploymentJob(req: operations.DescribeDeploymentJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDeploymentJobResponse>;
    DescribeFleet(req: operations.DescribeFleetRequest, config?: AxiosRequestConfig): Promise<operations.DescribeFleetResponse>;
    DescribeRobot(req: operations.DescribeRobotRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRobotResponse>;
    DescribeRobotApplication(req: operations.DescribeRobotApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRobotApplicationResponse>;
    DescribeSimulationApplication(req: operations.DescribeSimulationApplicationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSimulationApplicationResponse>;
    DescribeSimulationJob(req: operations.DescribeSimulationJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSimulationJobResponse>;
    DescribeSimulationJobBatch(req: operations.DescribeSimulationJobBatchRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSimulationJobBatchResponse>;
    DescribeWorld(req: operations.DescribeWorldRequest, config?: AxiosRequestConfig): Promise<operations.DescribeWorldResponse>;
    DescribeWorldExportJob(req: operations.DescribeWorldExportJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeWorldExportJobResponse>;
    DescribeWorldGenerationJob(req: operations.DescribeWorldGenerationJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeWorldGenerationJobResponse>;
    DescribeWorldTemplate(req: operations.DescribeWorldTemplateRequest, config?: AxiosRequestConfig): Promise<operations.DescribeWorldTemplateResponse>;
    GetWorldTemplateBody(req: operations.GetWorldTemplateBodyRequest, config?: AxiosRequestConfig): Promise<operations.GetWorldTemplateBodyResponse>;
    ListDeploymentJobs(req: operations.ListDeploymentJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListDeploymentJobsResponse>;
    ListFleets(req: operations.ListFleetsRequest, config?: AxiosRequestConfig): Promise<operations.ListFleetsResponse>;
    ListRobotApplications(req: operations.ListRobotApplicationsRequest, config?: AxiosRequestConfig): Promise<operations.ListRobotApplicationsResponse>;
    ListRobots(req: operations.ListRobotsRequest, config?: AxiosRequestConfig): Promise<operations.ListRobotsResponse>;
    ListSimulationApplications(req: operations.ListSimulationApplicationsRequest, config?: AxiosRequestConfig): Promise<operations.ListSimulationApplicationsResponse>;
    ListSimulationJobBatches(req: operations.ListSimulationJobBatchesRequest, config?: AxiosRequestConfig): Promise<operations.ListSimulationJobBatchesResponse>;
    ListSimulationJobs(req: operations.ListSimulationJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListSimulationJobsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListWorldExportJobs(req: operations.ListWorldExportJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListWorldExportJobsResponse>;
    ListWorldGenerationJobs(req: operations.ListWorldGenerationJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListWorldGenerationJobsResponse>;
    ListWorldTemplates(req: operations.ListWorldTemplatesRequest, config?: AxiosRequestConfig): Promise<operations.ListWorldTemplatesResponse>;
    ListWorlds(req: operations.ListWorldsRequest, config?: AxiosRequestConfig): Promise<operations.ListWorldsResponse>;
    RegisterRobot(req: operations.RegisterRobotRequest, config?: AxiosRequestConfig): Promise<operations.RegisterRobotResponse>;
    RestartSimulationJob(req: operations.RestartSimulationJobRequest, config?: AxiosRequestConfig): Promise<operations.RestartSimulationJobResponse>;
    StartSimulationJobBatch(req: operations.StartSimulationJobBatchRequest, config?: AxiosRequestConfig): Promise<operations.StartSimulationJobBatchResponse>;
    SyncDeploymentJob(req: operations.SyncDeploymentJobRequest, config?: AxiosRequestConfig): Promise<operations.SyncDeploymentJobResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateRobotApplication(req: operations.UpdateRobotApplicationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRobotApplicationResponse>;
    UpdateSimulationApplication(req: operations.UpdateSimulationApplicationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateSimulationApplicationResponse>;
    UpdateWorldTemplate(req: operations.UpdateWorldTemplateRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorldTemplateResponse>;
}
export {};

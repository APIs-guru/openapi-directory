import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    BatchDetectDominantLanguage(req: operations.BatchDetectDominantLanguageRequest, config?: AxiosRequestConfig): Promise<operations.BatchDetectDominantLanguageResponse>;
    BatchDetectEntities(req: operations.BatchDetectEntitiesRequest, config?: AxiosRequestConfig): Promise<operations.BatchDetectEntitiesResponse>;
    BatchDetectKeyPhrases(req: operations.BatchDetectKeyPhrasesRequest, config?: AxiosRequestConfig): Promise<operations.BatchDetectKeyPhrasesResponse>;
    BatchDetectSentiment(req: operations.BatchDetectSentimentRequest, config?: AxiosRequestConfig): Promise<operations.BatchDetectSentimentResponse>;
    BatchDetectSyntax(req: operations.BatchDetectSyntaxRequest, config?: AxiosRequestConfig): Promise<operations.BatchDetectSyntaxResponse>;
    ClassifyDocument(req: operations.ClassifyDocumentRequest, config?: AxiosRequestConfig): Promise<operations.ClassifyDocumentResponse>;
    ContainsPiiEntities(req: operations.ContainsPiiEntitiesRequest, config?: AxiosRequestConfig): Promise<operations.ContainsPiiEntitiesResponse>;
    CreateDocumentClassifier(req: operations.CreateDocumentClassifierRequest, config?: AxiosRequestConfig): Promise<operations.CreateDocumentClassifierResponse>;
    CreateEndpoint(req: operations.CreateEndpointRequest, config?: AxiosRequestConfig): Promise<operations.CreateEndpointResponse>;
    CreateEntityRecognizer(req: operations.CreateEntityRecognizerRequest, config?: AxiosRequestConfig): Promise<operations.CreateEntityRecognizerResponse>;
    DeleteDocumentClassifier(req: operations.DeleteDocumentClassifierRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDocumentClassifierResponse>;
    DeleteEndpoint(req: operations.DeleteEndpointRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEndpointResponse>;
    DeleteEntityRecognizer(req: operations.DeleteEntityRecognizerRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEntityRecognizerResponse>;
    DescribeDocumentClassificationJob(req: operations.DescribeDocumentClassificationJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDocumentClassificationJobResponse>;
    DescribeDocumentClassifier(req: operations.DescribeDocumentClassifierRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDocumentClassifierResponse>;
    DescribeDominantLanguageDetectionJob(req: operations.DescribeDominantLanguageDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDominantLanguageDetectionJobResponse>;
    DescribeEndpoint(req: operations.DescribeEndpointRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEndpointResponse>;
    DescribeEntitiesDetectionJob(req: operations.DescribeEntitiesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEntitiesDetectionJobResponse>;
    DescribeEntityRecognizer(req: operations.DescribeEntityRecognizerRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEntityRecognizerResponse>;
    DescribeEventsDetectionJob(req: operations.DescribeEventsDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventsDetectionJobResponse>;
    DescribeKeyPhrasesDetectionJob(req: operations.DescribeKeyPhrasesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeKeyPhrasesDetectionJobResponse>;
    DescribePiiEntitiesDetectionJob(req: operations.DescribePiiEntitiesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribePiiEntitiesDetectionJobResponse>;
    DescribeSentimentDetectionJob(req: operations.DescribeSentimentDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSentimentDetectionJobResponse>;
    DescribeTopicsDetectionJob(req: operations.DescribeTopicsDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeTopicsDetectionJobResponse>;
    DetectDominantLanguage(req: operations.DetectDominantLanguageRequest, config?: AxiosRequestConfig): Promise<operations.DetectDominantLanguageResponse>;
    DetectEntities(req: operations.DetectEntitiesRequest, config?: AxiosRequestConfig): Promise<operations.DetectEntitiesResponse>;
    DetectKeyPhrases(req: operations.DetectKeyPhrasesRequest, config?: AxiosRequestConfig): Promise<operations.DetectKeyPhrasesResponse>;
    DetectPiiEntities(req: operations.DetectPiiEntitiesRequest, config?: AxiosRequestConfig): Promise<operations.DetectPiiEntitiesResponse>;
    DetectSentiment(req: operations.DetectSentimentRequest, config?: AxiosRequestConfig): Promise<operations.DetectSentimentResponse>;
    DetectSyntax(req: operations.DetectSyntaxRequest, config?: AxiosRequestConfig): Promise<operations.DetectSyntaxResponse>;
    ListDocumentClassificationJobs(req: operations.ListDocumentClassificationJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListDocumentClassificationJobsResponse>;
    ListDocumentClassifiers(req: operations.ListDocumentClassifiersRequest, config?: AxiosRequestConfig): Promise<operations.ListDocumentClassifiersResponse>;
    ListDominantLanguageDetectionJobs(req: operations.ListDominantLanguageDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListDominantLanguageDetectionJobsResponse>;
    ListEndpoints(req: operations.ListEndpointsRequest, config?: AxiosRequestConfig): Promise<operations.ListEndpointsResponse>;
    ListEntitiesDetectionJobs(req: operations.ListEntitiesDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListEntitiesDetectionJobsResponse>;
    ListEntityRecognizers(req: operations.ListEntityRecognizersRequest, config?: AxiosRequestConfig): Promise<operations.ListEntityRecognizersResponse>;
    ListEventsDetectionJobs(req: operations.ListEventsDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListEventsDetectionJobsResponse>;
    ListKeyPhrasesDetectionJobs(req: operations.ListKeyPhrasesDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListKeyPhrasesDetectionJobsResponse>;
    ListPiiEntitiesDetectionJobs(req: operations.ListPiiEntitiesDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListPiiEntitiesDetectionJobsResponse>;
    ListSentimentDetectionJobs(req: operations.ListSentimentDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListSentimentDetectionJobsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListTopicsDetectionJobs(req: operations.ListTopicsDetectionJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListTopicsDetectionJobsResponse>;
    StartDocumentClassificationJob(req: operations.StartDocumentClassificationJobRequest, config?: AxiosRequestConfig): Promise<operations.StartDocumentClassificationJobResponse>;
    StartDominantLanguageDetectionJob(req: operations.StartDominantLanguageDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartDominantLanguageDetectionJobResponse>;
    StartEntitiesDetectionJob(req: operations.StartEntitiesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartEntitiesDetectionJobResponse>;
    StartEventsDetectionJob(req: operations.StartEventsDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartEventsDetectionJobResponse>;
    StartKeyPhrasesDetectionJob(req: operations.StartKeyPhrasesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartKeyPhrasesDetectionJobResponse>;
    StartPiiEntitiesDetectionJob(req: operations.StartPiiEntitiesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartPiiEntitiesDetectionJobResponse>;
    StartSentimentDetectionJob(req: operations.StartSentimentDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartSentimentDetectionJobResponse>;
    StartTopicsDetectionJob(req: operations.StartTopicsDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StartTopicsDetectionJobResponse>;
    StopDominantLanguageDetectionJob(req: operations.StopDominantLanguageDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StopDominantLanguageDetectionJobResponse>;
    StopEntitiesDetectionJob(req: operations.StopEntitiesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StopEntitiesDetectionJobResponse>;
    StopEventsDetectionJob(req: operations.StopEventsDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StopEventsDetectionJobResponse>;
    StopKeyPhrasesDetectionJob(req: operations.StopKeyPhrasesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StopKeyPhrasesDetectionJobResponse>;
    StopPiiEntitiesDetectionJob(req: operations.StopPiiEntitiesDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StopPiiEntitiesDetectionJobResponse>;
    StopSentimentDetectionJob(req: operations.StopSentimentDetectionJobRequest, config?: AxiosRequestConfig): Promise<operations.StopSentimentDetectionJobResponse>;
    StopTrainingDocumentClassifier(req: operations.StopTrainingDocumentClassifierRequest, config?: AxiosRequestConfig): Promise<operations.StopTrainingDocumentClassifierResponse>;
    StopTrainingEntityRecognizer(req: operations.StopTrainingEntityRecognizerRequest, config?: AxiosRequestConfig): Promise<operations.StopTrainingEntityRecognizerResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateEndpoint(req: operations.UpdateEndpointRequest, config?: AxiosRequestConfig): Promise<operations.UpdateEndpointResponse>;
}
export {};

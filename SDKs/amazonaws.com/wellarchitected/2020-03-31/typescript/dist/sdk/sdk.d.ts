import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateLenses(req: operations.AssociateLensesRequest, config?: AxiosRequestConfig): Promise<operations.AssociateLensesResponse>;
    CreateMilestone(req: operations.CreateMilestoneRequest, config?: AxiosRequestConfig): Promise<operations.CreateMilestoneResponse>;
    CreateWorkload(req: operations.CreateWorkloadRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkloadResponse>;
    CreateWorkloadShare(req: operations.CreateWorkloadShareRequest, config?: AxiosRequestConfig): Promise<operations.CreateWorkloadShareResponse>;
    DeleteWorkload(req: operations.DeleteWorkloadRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkloadResponse>;
    DeleteWorkloadShare(req: operations.DeleteWorkloadShareRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWorkloadShareResponse>;
    DisassociateLenses(req: operations.DisassociateLensesRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateLensesResponse>;
    GetAnswer(req: operations.GetAnswerRequest, config?: AxiosRequestConfig): Promise<operations.GetAnswerResponse>;
    GetLensReview(req: operations.GetLensReviewRequest, config?: AxiosRequestConfig): Promise<operations.GetLensReviewResponse>;
    GetLensReviewReport(req: operations.GetLensReviewReportRequest, config?: AxiosRequestConfig): Promise<operations.GetLensReviewReportResponse>;
    GetLensVersionDifference(req: operations.GetLensVersionDifferenceRequest, config?: AxiosRequestConfig): Promise<operations.GetLensVersionDifferenceResponse>;
    GetMilestone(req: operations.GetMilestoneRequest, config?: AxiosRequestConfig): Promise<operations.GetMilestoneResponse>;
    GetWorkload(req: operations.GetWorkloadRequest, config?: AxiosRequestConfig): Promise<operations.GetWorkloadResponse>;
    ListAnswers(req: operations.ListAnswersRequest, config?: AxiosRequestConfig): Promise<operations.ListAnswersResponse>;
    ListLensReviewImprovements(req: operations.ListLensReviewImprovementsRequest, config?: AxiosRequestConfig): Promise<operations.ListLensReviewImprovementsResponse>;
    ListLensReviews(req: operations.ListLensReviewsRequest, config?: AxiosRequestConfig): Promise<operations.ListLensReviewsResponse>;
    ListLenses(req: operations.ListLensesRequest, config?: AxiosRequestConfig): Promise<operations.ListLensesResponse>;
    ListMilestones(req: operations.ListMilestonesRequest, config?: AxiosRequestConfig): Promise<operations.ListMilestonesResponse>;
    ListNotifications(req: operations.ListNotificationsRequest, config?: AxiosRequestConfig): Promise<operations.ListNotificationsResponse>;
    ListShareInvitations(req: operations.ListShareInvitationsRequest, config?: AxiosRequestConfig): Promise<operations.ListShareInvitationsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListWorkloadShares(req: operations.ListWorkloadSharesRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkloadSharesResponse>;
    ListWorkloads(req: operations.ListWorkloadsRequest, config?: AxiosRequestConfig): Promise<operations.ListWorkloadsResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAnswer(req: operations.UpdateAnswerRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAnswerResponse>;
    UpdateLensReview(req: operations.UpdateLensReviewRequest, config?: AxiosRequestConfig): Promise<operations.UpdateLensReviewResponse>;
    UpdateShareInvitation(req: operations.UpdateShareInvitationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateShareInvitationResponse>;
    UpdateWorkload(req: operations.UpdateWorkloadRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkloadResponse>;
    UpdateWorkloadShare(req: operations.UpdateWorkloadShareRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWorkloadShareResponse>;
    UpgradeLensReview(req: operations.UpgradeLensReviewRequest, config?: AxiosRequestConfig): Promise<operations.UpgradeLensReviewResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateApiCache(req: operations.CreateApiCacheRequest, config?: AxiosRequestConfig): Promise<operations.CreateApiCacheResponse>;
    CreateApiKey(req: operations.CreateApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.CreateApiKeyResponse>;
    CreateDataSource(req: operations.CreateDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.CreateDataSourceResponse>;
    CreateFunction(req: operations.CreateFunctionRequest, config?: AxiosRequestConfig): Promise<operations.CreateFunctionResponse>;
    CreateGraphqlApi(req: operations.CreateGraphqlApiRequest, config?: AxiosRequestConfig): Promise<operations.CreateGraphqlApiResponse>;
    CreateResolver(req: operations.CreateResolverRequest, config?: AxiosRequestConfig): Promise<operations.CreateResolverResponse>;
    CreateType(req: operations.CreateTypeRequest, config?: AxiosRequestConfig): Promise<operations.CreateTypeResponse>;
    DeleteApiCache(req: operations.DeleteApiCacheRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApiCacheResponse>;
    DeleteApiKey(req: operations.DeleteApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApiKeyResponse>;
    DeleteDataSource(req: operations.DeleteDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDataSourceResponse>;
    DeleteFunction(req: operations.DeleteFunctionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFunctionResponse>;
    DeleteGraphqlApi(req: operations.DeleteGraphqlApiRequest, config?: AxiosRequestConfig): Promise<operations.DeleteGraphqlApiResponse>;
    DeleteResolver(req: operations.DeleteResolverRequest, config?: AxiosRequestConfig): Promise<operations.DeleteResolverResponse>;
    DeleteType(req: operations.DeleteTypeRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTypeResponse>;
    FlushApiCache(req: operations.FlushApiCacheRequest, config?: AxiosRequestConfig): Promise<operations.FlushApiCacheResponse>;
    GetApiCache(req: operations.GetApiCacheRequest, config?: AxiosRequestConfig): Promise<operations.GetApiCacheResponse>;
    GetDataSource(req: operations.GetDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.GetDataSourceResponse>;
    GetFunction(req: operations.GetFunctionRequest, config?: AxiosRequestConfig): Promise<operations.GetFunctionResponse>;
    GetGraphqlApi(req: operations.GetGraphqlApiRequest, config?: AxiosRequestConfig): Promise<operations.GetGraphqlApiResponse>;
    GetIntrospectionSchema(req: operations.GetIntrospectionSchemaRequest, config?: AxiosRequestConfig): Promise<operations.GetIntrospectionSchemaResponse>;
    GetResolver(req: operations.GetResolverRequest, config?: AxiosRequestConfig): Promise<operations.GetResolverResponse>;
    GetSchemaCreationStatus(req: operations.GetSchemaCreationStatusRequest, config?: AxiosRequestConfig): Promise<operations.GetSchemaCreationStatusResponse>;
    GetType(req: operations.GetTypeRequest, config?: AxiosRequestConfig): Promise<operations.GetTypeResponse>;
    ListApiKeys(req: operations.ListApiKeysRequest, config?: AxiosRequestConfig): Promise<operations.ListApiKeysResponse>;
    ListDataSources(req: operations.ListDataSourcesRequest, config?: AxiosRequestConfig): Promise<operations.ListDataSourcesResponse>;
    ListFunctions(req: operations.ListFunctionsRequest, config?: AxiosRequestConfig): Promise<operations.ListFunctionsResponse>;
    ListGraphqlApis(req: operations.ListGraphqlApisRequest, config?: AxiosRequestConfig): Promise<operations.ListGraphqlApisResponse>;
    ListResolvers(req: operations.ListResolversRequest, config?: AxiosRequestConfig): Promise<operations.ListResolversResponse>;
    ListResolversByFunction(req: operations.ListResolversByFunctionRequest, config?: AxiosRequestConfig): Promise<operations.ListResolversByFunctionResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListTypes(req: operations.ListTypesRequest, config?: AxiosRequestConfig): Promise<operations.ListTypesResponse>;
    StartSchemaCreation(req: operations.StartSchemaCreationRequest, config?: AxiosRequestConfig): Promise<operations.StartSchemaCreationResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateApiCache(req: operations.UpdateApiCacheRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApiCacheResponse>;
    UpdateApiKey(req: operations.UpdateApiKeyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApiKeyResponse>;
    UpdateDataSource(req: operations.UpdateDataSourceRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDataSourceResponse>;
    UpdateFunction(req: operations.UpdateFunctionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFunctionResponse>;
    UpdateGraphqlApi(req: operations.UpdateGraphqlApiRequest, config?: AxiosRequestConfig): Promise<operations.UpdateGraphqlApiResponse>;
    UpdateResolver(req: operations.UpdateResolverRequest, config?: AxiosRequestConfig): Promise<operations.UpdateResolverResponse>;
    UpdateType(req: operations.UpdateTypeRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTypeResponse>;
}
export {};

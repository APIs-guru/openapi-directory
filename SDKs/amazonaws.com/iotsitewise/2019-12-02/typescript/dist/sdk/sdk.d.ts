import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateAssets(req: operations.AssociateAssetsRequest, config?: AxiosRequestConfig): Promise<operations.AssociateAssetsResponse>;
    BatchAssociateProjectAssets(req: operations.BatchAssociateProjectAssetsRequest, config?: AxiosRequestConfig): Promise<operations.BatchAssociateProjectAssetsResponse>;
    BatchDisassociateProjectAssets(req: operations.BatchDisassociateProjectAssetsRequest, config?: AxiosRequestConfig): Promise<operations.BatchDisassociateProjectAssetsResponse>;
    BatchPutAssetPropertyValue(req: operations.BatchPutAssetPropertyValueRequest, config?: AxiosRequestConfig): Promise<operations.BatchPutAssetPropertyValueResponse>;
    CreateAccessPolicy(req: operations.CreateAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccessPolicyResponse>;
    CreateAsset(req: operations.CreateAssetRequest, config?: AxiosRequestConfig): Promise<operations.CreateAssetResponse>;
    CreateAssetModel(req: operations.CreateAssetModelRequest, config?: AxiosRequestConfig): Promise<operations.CreateAssetModelResponse>;
    CreateDashboard(req: operations.CreateDashboardRequest, config?: AxiosRequestConfig): Promise<operations.CreateDashboardResponse>;
    CreateGateway(req: operations.CreateGatewayRequest, config?: AxiosRequestConfig): Promise<operations.CreateGatewayResponse>;
    CreatePortal(req: operations.CreatePortalRequest, config?: AxiosRequestConfig): Promise<operations.CreatePortalResponse>;
    CreateProject(req: operations.CreateProjectRequest, config?: AxiosRequestConfig): Promise<operations.CreateProjectResponse>;
    DeleteAccessPolicy(req: operations.DeleteAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAccessPolicyResponse>;
    DeleteAsset(req: operations.DeleteAssetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAssetResponse>;
    DeleteAssetModel(req: operations.DeleteAssetModelRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAssetModelResponse>;
    DeleteDashboard(req: operations.DeleteDashboardRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDashboardResponse>;
    DeleteGateway(req: operations.DeleteGatewayRequest, config?: AxiosRequestConfig): Promise<operations.DeleteGatewayResponse>;
    DeletePortal(req: operations.DeletePortalRequest, config?: AxiosRequestConfig): Promise<operations.DeletePortalResponse>;
    DeleteProject(req: operations.DeleteProjectRequest, config?: AxiosRequestConfig): Promise<operations.DeleteProjectResponse>;
    DescribeAccessPolicy(req: operations.DescribeAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAccessPolicyResponse>;
    DescribeAsset(req: operations.DescribeAssetRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAssetResponse>;
    DescribeAssetModel(req: operations.DescribeAssetModelRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAssetModelResponse>;
    DescribeAssetProperty(req: operations.DescribeAssetPropertyRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAssetPropertyResponse>;
    DescribeDashboard(req: operations.DescribeDashboardRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDashboardResponse>;
    DescribeDefaultEncryptionConfiguration(req: operations.DescribeDefaultEncryptionConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDefaultEncryptionConfigurationResponse>;
    DescribeGateway(req: operations.DescribeGatewayRequest, config?: AxiosRequestConfig): Promise<operations.DescribeGatewayResponse>;
    DescribeGatewayCapabilityConfiguration(req: operations.DescribeGatewayCapabilityConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeGatewayCapabilityConfigurationResponse>;
    DescribeLoggingOptions(req: operations.DescribeLoggingOptionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeLoggingOptionsResponse>;
    DescribePortal(req: operations.DescribePortalRequest, config?: AxiosRequestConfig): Promise<operations.DescribePortalResponse>;
    DescribeProject(req: operations.DescribeProjectRequest, config?: AxiosRequestConfig): Promise<operations.DescribeProjectResponse>;
    DescribeStorageConfiguration(req: operations.DescribeStorageConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeStorageConfigurationResponse>;
    DisassociateAssets(req: operations.DisassociateAssetsRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateAssetsResponse>;
    GetAssetPropertyAggregates(req: operations.GetAssetPropertyAggregatesRequest, config?: AxiosRequestConfig): Promise<operations.GetAssetPropertyAggregatesResponse>;
    GetAssetPropertyValue(req: operations.GetAssetPropertyValueRequest, config?: AxiosRequestConfig): Promise<operations.GetAssetPropertyValueResponse>;
    GetAssetPropertyValueHistory(req: operations.GetAssetPropertyValueHistoryRequest, config?: AxiosRequestConfig): Promise<operations.GetAssetPropertyValueHistoryResponse>;
    GetInterpolatedAssetPropertyValues(req: operations.GetInterpolatedAssetPropertyValuesRequest, config?: AxiosRequestConfig): Promise<operations.GetInterpolatedAssetPropertyValuesResponse>;
    ListAccessPolicies(req: operations.ListAccessPoliciesRequest, config?: AxiosRequestConfig): Promise<operations.ListAccessPoliciesResponse>;
    ListAssetModels(req: operations.ListAssetModelsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssetModelsResponse>;
    ListAssetRelationships(req: operations.ListAssetRelationshipsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssetRelationshipsResponse>;
    ListAssets(req: operations.ListAssetsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssetsResponse>;
    ListAssociatedAssets(req: operations.ListAssociatedAssetsRequest, config?: AxiosRequestConfig): Promise<operations.ListAssociatedAssetsResponse>;
    ListDashboards(req: operations.ListDashboardsRequest, config?: AxiosRequestConfig): Promise<operations.ListDashboardsResponse>;
    ListGateways(req: operations.ListGatewaysRequest, config?: AxiosRequestConfig): Promise<operations.ListGatewaysResponse>;
    ListPortals(req: operations.ListPortalsRequest, config?: AxiosRequestConfig): Promise<operations.ListPortalsResponse>;
    ListProjectAssets(req: operations.ListProjectAssetsRequest, config?: AxiosRequestConfig): Promise<operations.ListProjectAssetsResponse>;
    ListProjects(req: operations.ListProjectsRequest, config?: AxiosRequestConfig): Promise<operations.ListProjectsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    PutDefaultEncryptionConfiguration(req: operations.PutDefaultEncryptionConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutDefaultEncryptionConfigurationResponse>;
    PutLoggingOptions(req: operations.PutLoggingOptionsRequest, config?: AxiosRequestConfig): Promise<operations.PutLoggingOptionsResponse>;
    PutStorageConfiguration(req: operations.PutStorageConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PutStorageConfigurationResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAccessPolicy(req: operations.UpdateAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAccessPolicyResponse>;
    UpdateAsset(req: operations.UpdateAssetRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssetResponse>;
    UpdateAssetModel(req: operations.UpdateAssetModelRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssetModelResponse>;
    UpdateAssetProperty(req: operations.UpdateAssetPropertyRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAssetPropertyResponse>;
    UpdateDashboard(req: operations.UpdateDashboardRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDashboardResponse>;
    UpdateGateway(req: operations.UpdateGatewayRequest, config?: AxiosRequestConfig): Promise<operations.UpdateGatewayResponse>;
    UpdateGatewayCapabilityConfiguration(req: operations.UpdateGatewayCapabilityConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateGatewayCapabilityConfigurationResponse>;
    UpdatePortal(req: operations.UpdatePortalRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePortalResponse>;
    UpdateProject(req: operations.UpdateProjectRequest, config?: AxiosRequestConfig): Promise<operations.UpdateProjectResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateDomain(req: operations.AssociateDomainRequest, config?: AxiosRequestConfig): Promise<operations.AssociateDomainResponse>;
    AssociateWebsiteAuthorizationProvider(req: operations.AssociateWebsiteAuthorizationProviderRequest, config?: AxiosRequestConfig): Promise<operations.AssociateWebsiteAuthorizationProviderResponse>;
    AssociateWebsiteCertificateAuthority(req: operations.AssociateWebsiteCertificateAuthorityRequest, config?: AxiosRequestConfig): Promise<operations.AssociateWebsiteCertificateAuthorityResponse>;
    CreateFleet(req: operations.CreateFleetRequest, config?: AxiosRequestConfig): Promise<operations.CreateFleetResponse>;
    DeleteFleet(req: operations.DeleteFleetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFleetResponse>;
    DescribeAuditStreamConfiguration(req: operations.DescribeAuditStreamConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAuditStreamConfigurationResponse>;
    DescribeCompanyNetworkConfiguration(req: operations.DescribeCompanyNetworkConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeCompanyNetworkConfigurationResponse>;
    DescribeDevice(req: operations.DescribeDeviceRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDeviceResponse>;
    DescribeDevicePolicyConfiguration(req: operations.DescribeDevicePolicyConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDevicePolicyConfigurationResponse>;
    DescribeDomain(req: operations.DescribeDomainRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDomainResponse>;
    DescribeFleetMetadata(req: operations.DescribeFleetMetadataRequest, config?: AxiosRequestConfig): Promise<operations.DescribeFleetMetadataResponse>;
    DescribeIdentityProviderConfiguration(req: operations.DescribeIdentityProviderConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeIdentityProviderConfigurationResponse>;
    DescribeWebsiteCertificateAuthority(req: operations.DescribeWebsiteCertificateAuthorityRequest, config?: AxiosRequestConfig): Promise<operations.DescribeWebsiteCertificateAuthorityResponse>;
    DisassociateDomain(req: operations.DisassociateDomainRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateDomainResponse>;
    DisassociateWebsiteAuthorizationProvider(req: operations.DisassociateWebsiteAuthorizationProviderRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateWebsiteAuthorizationProviderResponse>;
    DisassociateWebsiteCertificateAuthority(req: operations.DisassociateWebsiteCertificateAuthorityRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateWebsiteCertificateAuthorityResponse>;
    ListDevices(req: operations.ListDevicesRequest, config?: AxiosRequestConfig): Promise<operations.ListDevicesResponse>;
    ListDomains(req: operations.ListDomainsRequest, config?: AxiosRequestConfig): Promise<operations.ListDomainsResponse>;
    ListFleets(req: operations.ListFleetsRequest, config?: AxiosRequestConfig): Promise<operations.ListFleetsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListWebsiteAuthorizationProviders(req: operations.ListWebsiteAuthorizationProvidersRequest, config?: AxiosRequestConfig): Promise<operations.ListWebsiteAuthorizationProvidersResponse>;
    ListWebsiteCertificateAuthorities(req: operations.ListWebsiteCertificateAuthoritiesRequest, config?: AxiosRequestConfig): Promise<operations.ListWebsiteCertificateAuthoritiesResponse>;
    RestoreDomainAccess(req: operations.RestoreDomainAccessRequest, config?: AxiosRequestConfig): Promise<operations.RestoreDomainAccessResponse>;
    RevokeDomainAccess(req: operations.RevokeDomainAccessRequest, config?: AxiosRequestConfig): Promise<operations.RevokeDomainAccessResponse>;
    SignOutUser(req: operations.SignOutUserRequest, config?: AxiosRequestConfig): Promise<operations.SignOutUserResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAuditStreamConfiguration(req: operations.UpdateAuditStreamConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAuditStreamConfigurationResponse>;
    UpdateCompanyNetworkConfiguration(req: operations.UpdateCompanyNetworkConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateCompanyNetworkConfigurationResponse>;
    UpdateDevicePolicyConfiguration(req: operations.UpdateDevicePolicyConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDevicePolicyConfigurationResponse>;
    UpdateDomainMetadata(req: operations.UpdateDomainMetadataRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDomainMetadataResponse>;
    UpdateFleetMetadata(req: operations.UpdateFleetMetadataRequest, config?: AxiosRequestConfig): Promise<operations.UpdateFleetMetadataResponse>;
    UpdateIdentityProviderConfiguration(req: operations.UpdateIdentityProviderConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateIdentityProviderConfigurationResponse>;
}
export {};

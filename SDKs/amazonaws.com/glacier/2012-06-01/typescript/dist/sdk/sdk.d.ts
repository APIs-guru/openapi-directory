import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AbortMultipartUpload(req: operations.AbortMultipartUploadRequest, config?: AxiosRequestConfig): Promise<operations.AbortMultipartUploadResponse>;
    AbortVaultLock(req: operations.AbortVaultLockRequest, config?: AxiosRequestConfig): Promise<operations.AbortVaultLockResponse>;
    AddTagsToVault(req: operations.AddTagsToVaultRequest, config?: AxiosRequestConfig): Promise<operations.AddTagsToVaultResponse>;
    CompleteMultipartUpload(req: operations.CompleteMultipartUploadRequest, config?: AxiosRequestConfig): Promise<operations.CompleteMultipartUploadResponse>;
    CompleteVaultLock(req: operations.CompleteVaultLockRequest, config?: AxiosRequestConfig): Promise<operations.CompleteVaultLockResponse>;
    CreateVault(req: operations.CreateVaultRequest, config?: AxiosRequestConfig): Promise<operations.CreateVaultResponse>;
    DeleteArchive(req: operations.DeleteArchiveRequest, config?: AxiosRequestConfig): Promise<operations.DeleteArchiveResponse>;
    DeleteVault(req: operations.DeleteVaultRequest, config?: AxiosRequestConfig): Promise<operations.DeleteVaultResponse>;
    DeleteVaultAccessPolicy(req: operations.DeleteVaultAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.DeleteVaultAccessPolicyResponse>;
    DeleteVaultNotifications(req: operations.DeleteVaultNotificationsRequest, config?: AxiosRequestConfig): Promise<operations.DeleteVaultNotificationsResponse>;
    DescribeJob(req: operations.DescribeJobRequest, config?: AxiosRequestConfig): Promise<operations.DescribeJobResponse>;
    DescribeVault(req: operations.DescribeVaultRequest, config?: AxiosRequestConfig): Promise<operations.DescribeVaultResponse>;
    GetDataRetrievalPolicy(req: operations.GetDataRetrievalPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetDataRetrievalPolicyResponse>;
    GetJobOutput(req: operations.GetJobOutputRequest, config?: AxiosRequestConfig): Promise<operations.GetJobOutputResponse>;
    GetVaultAccessPolicy(req: operations.GetVaultAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.GetVaultAccessPolicyResponse>;
    GetVaultLock(req: operations.GetVaultLockRequest, config?: AxiosRequestConfig): Promise<operations.GetVaultLockResponse>;
    GetVaultNotifications(req: operations.GetVaultNotificationsRequest, config?: AxiosRequestConfig): Promise<operations.GetVaultNotificationsResponse>;
    InitiateJob(req: operations.InitiateJobRequest, config?: AxiosRequestConfig): Promise<operations.InitiateJobResponse>;
    InitiateMultipartUpload(req: operations.InitiateMultipartUploadRequest, config?: AxiosRequestConfig): Promise<operations.InitiateMultipartUploadResponse>;
    InitiateVaultLock(req: operations.InitiateVaultLockRequest, config?: AxiosRequestConfig): Promise<operations.InitiateVaultLockResponse>;
    ListJobs(req: operations.ListJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListJobsResponse>;
    ListMultipartUploads(req: operations.ListMultipartUploadsRequest, config?: AxiosRequestConfig): Promise<operations.ListMultipartUploadsResponse>;
    ListParts(req: operations.ListPartsRequest, config?: AxiosRequestConfig): Promise<operations.ListPartsResponse>;
    ListProvisionedCapacity(req: operations.ListProvisionedCapacityRequest, config?: AxiosRequestConfig): Promise<operations.ListProvisionedCapacityResponse>;
    ListTagsForVault(req: operations.ListTagsForVaultRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForVaultResponse>;
    ListVaults(req: operations.ListVaultsRequest, config?: AxiosRequestConfig): Promise<operations.ListVaultsResponse>;
    PurchaseProvisionedCapacity(req: operations.PurchaseProvisionedCapacityRequest, config?: AxiosRequestConfig): Promise<operations.PurchaseProvisionedCapacityResponse>;
    RemoveTagsFromVault(req: operations.RemoveTagsFromVaultRequest, config?: AxiosRequestConfig): Promise<operations.RemoveTagsFromVaultResponse>;
    SetDataRetrievalPolicy(req: operations.SetDataRetrievalPolicyRequest, config?: AxiosRequestConfig): Promise<operations.SetDataRetrievalPolicyResponse>;
    SetVaultAccessPolicy(req: operations.SetVaultAccessPolicyRequest, config?: AxiosRequestConfig): Promise<operations.SetVaultAccessPolicyResponse>;
    SetVaultNotifications(req: operations.SetVaultNotificationsRequest, config?: AxiosRequestConfig): Promise<operations.SetVaultNotificationsResponse>;
    UploadArchive(req: operations.UploadArchiveRequest, config?: AxiosRequestConfig): Promise<operations.UploadArchiveResponse>;
    UploadMultipartPart(req: operations.UploadMultipartPartRequest, config?: AxiosRequestConfig): Promise<operations.UploadMultipartPartResponse>;
}
export {};

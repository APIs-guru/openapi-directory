import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    CreateApp(req: operations.CreateAppRequest, config?: AxiosRequestConfig): Promise<operations.CreateAppResponse>;
    CreateBackendEnvironment(req: operations.CreateBackendEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.CreateBackendEnvironmentResponse>;
    CreateBranch(req: operations.CreateBranchRequest, config?: AxiosRequestConfig): Promise<operations.CreateBranchResponse>;
    CreateDeployment(req: operations.CreateDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.CreateDeploymentResponse>;
    CreateDomainAssociation(req: operations.CreateDomainAssociationRequest, config?: AxiosRequestConfig): Promise<operations.CreateDomainAssociationResponse>;
    CreateWebhook(req: operations.CreateWebhookRequest, config?: AxiosRequestConfig): Promise<operations.CreateWebhookResponse>;
    DeleteApp(req: operations.DeleteAppRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAppResponse>;
    DeleteBackendEnvironment(req: operations.DeleteBackendEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteBackendEnvironmentResponse>;
    DeleteBranch(req: operations.DeleteBranchRequest, config?: AxiosRequestConfig): Promise<operations.DeleteBranchResponse>;
    DeleteDomainAssociation(req: operations.DeleteDomainAssociationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDomainAssociationResponse>;
    DeleteJob(req: operations.DeleteJobRequest, config?: AxiosRequestConfig): Promise<operations.DeleteJobResponse>;
    DeleteWebhook(req: operations.DeleteWebhookRequest, config?: AxiosRequestConfig): Promise<operations.DeleteWebhookResponse>;
    GenerateAccessLogs(req: operations.GenerateAccessLogsRequest, config?: AxiosRequestConfig): Promise<operations.GenerateAccessLogsResponse>;
    GetApp(req: operations.GetAppRequest, config?: AxiosRequestConfig): Promise<operations.GetAppResponse>;
    GetArtifactUrl(req: operations.GetArtifactUrlRequest, config?: AxiosRequestConfig): Promise<operations.GetArtifactUrlResponse>;
    GetBackendEnvironment(req: operations.GetBackendEnvironmentRequest, config?: AxiosRequestConfig): Promise<operations.GetBackendEnvironmentResponse>;
    GetBranch(req: operations.GetBranchRequest, config?: AxiosRequestConfig): Promise<operations.GetBranchResponse>;
    GetDomainAssociation(req: operations.GetDomainAssociationRequest, config?: AxiosRequestConfig): Promise<operations.GetDomainAssociationResponse>;
    GetJob(req: operations.GetJobRequest, config?: AxiosRequestConfig): Promise<operations.GetJobResponse>;
    GetWebhook(req: operations.GetWebhookRequest, config?: AxiosRequestConfig): Promise<operations.GetWebhookResponse>;
    ListApps(req: operations.ListAppsRequest, config?: AxiosRequestConfig): Promise<operations.ListAppsResponse>;
    ListArtifacts(req: operations.ListArtifactsRequest, config?: AxiosRequestConfig): Promise<operations.ListArtifactsResponse>;
    ListBackendEnvironments(req: operations.ListBackendEnvironmentsRequest, config?: AxiosRequestConfig): Promise<operations.ListBackendEnvironmentsResponse>;
    ListBranches(req: operations.ListBranchesRequest, config?: AxiosRequestConfig): Promise<operations.ListBranchesResponse>;
    ListDomainAssociations(req: operations.ListDomainAssociationsRequest, config?: AxiosRequestConfig): Promise<operations.ListDomainAssociationsResponse>;
    ListJobs(req: operations.ListJobsRequest, config?: AxiosRequestConfig): Promise<operations.ListJobsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListWebhooks(req: operations.ListWebhooksRequest, config?: AxiosRequestConfig): Promise<operations.ListWebhooksResponse>;
    StartDeployment(req: operations.StartDeploymentRequest, config?: AxiosRequestConfig): Promise<operations.StartDeploymentResponse>;
    StartJob(req: operations.StartJobRequest, config?: AxiosRequestConfig): Promise<operations.StartJobResponse>;
    StopJob(req: operations.StopJobRequest, config?: AxiosRequestConfig): Promise<operations.StopJobResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateApp(req: operations.UpdateAppRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAppResponse>;
    UpdateBranch(req: operations.UpdateBranchRequest, config?: AxiosRequestConfig): Promise<operations.UpdateBranchResponse>;
    UpdateDomainAssociation(req: operations.UpdateDomainAssociationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateDomainAssociationResponse>;
    UpdateWebhook(req: operations.UpdateWebhookRequest, config?: AxiosRequestConfig): Promise<operations.UpdateWebhookResponse>;
}
export {};

import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AcceptSharedDirectory(req: operations.AcceptSharedDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.AcceptSharedDirectoryResponse>;
    AddIpRoutes(req: operations.AddIpRoutesRequest, config?: AxiosRequestConfig): Promise<operations.AddIpRoutesResponse>;
    AddRegion(req: operations.AddRegionRequest, config?: AxiosRequestConfig): Promise<operations.AddRegionResponse>;
    AddTagsToResource(req: operations.AddTagsToResourceRequest, config?: AxiosRequestConfig): Promise<operations.AddTagsToResourceResponse>;
    CancelSchemaExtension(req: operations.CancelSchemaExtensionRequest, config?: AxiosRequestConfig): Promise<operations.CancelSchemaExtensionResponse>;
    ConnectDirectory(req: operations.ConnectDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.ConnectDirectoryResponse>;
    CreateAlias(req: operations.CreateAliasRequest, config?: AxiosRequestConfig): Promise<operations.CreateAliasResponse>;
    CreateComputer(req: operations.CreateComputerRequest, config?: AxiosRequestConfig): Promise<operations.CreateComputerResponse>;
    CreateConditionalForwarder(req: operations.CreateConditionalForwarderRequest, config?: AxiosRequestConfig): Promise<operations.CreateConditionalForwarderResponse>;
    CreateDirectory(req: operations.CreateDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.CreateDirectoryResponse>;
    CreateLogSubscription(req: operations.CreateLogSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.CreateLogSubscriptionResponse>;
    CreateMicrosoftAd(req: operations.CreateMicrosoftAdRequest, config?: AxiosRequestConfig): Promise<operations.CreateMicrosoftAdResponse>;
    CreateSnapshot(req: operations.CreateSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.CreateSnapshotResponse>;
    CreateTrust(req: operations.CreateTrustRequest, config?: AxiosRequestConfig): Promise<operations.CreateTrustResponse>;
    DeleteConditionalForwarder(req: operations.DeleteConditionalForwarderRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConditionalForwarderResponse>;
    DeleteDirectory(req: operations.DeleteDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.DeleteDirectoryResponse>;
    DeleteLogSubscription(req: operations.DeleteLogSubscriptionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteLogSubscriptionResponse>;
    DeleteSnapshot(req: operations.DeleteSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.DeleteSnapshotResponse>;
    DeleteTrust(req: operations.DeleteTrustRequest, config?: AxiosRequestConfig): Promise<operations.DeleteTrustResponse>;
    DeregisterCertificate(req: operations.DeregisterCertificateRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterCertificateResponse>;
    DeregisterEventTopic(req: operations.DeregisterEventTopicRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterEventTopicResponse>;
    DescribeCertificate(req: operations.DescribeCertificateRequest, config?: AxiosRequestConfig): Promise<operations.DescribeCertificateResponse>;
    DescribeClientAuthenticationSettings(req: operations.DescribeClientAuthenticationSettingsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeClientAuthenticationSettingsResponse>;
    DescribeConditionalForwarders(req: operations.DescribeConditionalForwardersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeConditionalForwardersResponse>;
    DescribeDirectories(req: operations.DescribeDirectoriesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDirectoriesResponse>;
    DescribeDomainControllers(req: operations.DescribeDomainControllersRequest, config?: AxiosRequestConfig): Promise<operations.DescribeDomainControllersResponse>;
    DescribeEventTopics(req: operations.DescribeEventTopicsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventTopicsResponse>;
    DescribeLdapsSettings(req: operations.DescribeLdapsSettingsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeLdapsSettingsResponse>;
    DescribeRegions(req: operations.DescribeRegionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRegionsResponse>;
    DescribeSharedDirectories(req: operations.DescribeSharedDirectoriesRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSharedDirectoriesResponse>;
    DescribeSnapshots(req: operations.DescribeSnapshotsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeSnapshotsResponse>;
    DescribeTrusts(req: operations.DescribeTrustsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeTrustsResponse>;
    DisableClientAuthentication(req: operations.DisableClientAuthenticationRequest, config?: AxiosRequestConfig): Promise<operations.DisableClientAuthenticationResponse>;
    DisableLdaps(req: operations.DisableLdapsRequest, config?: AxiosRequestConfig): Promise<operations.DisableLdapsResponse>;
    DisableRadius(req: operations.DisableRadiusRequest, config?: AxiosRequestConfig): Promise<operations.DisableRadiusResponse>;
    DisableSso(req: operations.DisableSsoRequest, config?: AxiosRequestConfig): Promise<operations.DisableSsoResponse>;
    EnableClientAuthentication(req: operations.EnableClientAuthenticationRequest, config?: AxiosRequestConfig): Promise<operations.EnableClientAuthenticationResponse>;
    EnableLdaps(req: operations.EnableLdapsRequest, config?: AxiosRequestConfig): Promise<operations.EnableLdapsResponse>;
    EnableRadius(req: operations.EnableRadiusRequest, config?: AxiosRequestConfig): Promise<operations.EnableRadiusResponse>;
    EnableSso(req: operations.EnableSsoRequest, config?: AxiosRequestConfig): Promise<operations.EnableSsoResponse>;
    GetDirectoryLimits(req: operations.GetDirectoryLimitsRequest, config?: AxiosRequestConfig): Promise<operations.GetDirectoryLimitsResponse>;
    GetSnapshotLimits(req: operations.GetSnapshotLimitsRequest, config?: AxiosRequestConfig): Promise<operations.GetSnapshotLimitsResponse>;
    ListCertificates(req: operations.ListCertificatesRequest, config?: AxiosRequestConfig): Promise<operations.ListCertificatesResponse>;
    ListIpRoutes(req: operations.ListIpRoutesRequest, config?: AxiosRequestConfig): Promise<operations.ListIpRoutesResponse>;
    ListLogSubscriptions(req: operations.ListLogSubscriptionsRequest, config?: AxiosRequestConfig): Promise<operations.ListLogSubscriptionsResponse>;
    ListSchemaExtensions(req: operations.ListSchemaExtensionsRequest, config?: AxiosRequestConfig): Promise<operations.ListSchemaExtensionsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    RegisterCertificate(req: operations.RegisterCertificateRequest, config?: AxiosRequestConfig): Promise<operations.RegisterCertificateResponse>;
    RegisterEventTopic(req: operations.RegisterEventTopicRequest, config?: AxiosRequestConfig): Promise<operations.RegisterEventTopicResponse>;
    RejectSharedDirectory(req: operations.RejectSharedDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.RejectSharedDirectoryResponse>;
    RemoveIpRoutes(req: operations.RemoveIpRoutesRequest, config?: AxiosRequestConfig): Promise<operations.RemoveIpRoutesResponse>;
    RemoveRegion(req: operations.RemoveRegionRequest, config?: AxiosRequestConfig): Promise<operations.RemoveRegionResponse>;
    RemoveTagsFromResource(req: operations.RemoveTagsFromResourceRequest, config?: AxiosRequestConfig): Promise<operations.RemoveTagsFromResourceResponse>;
    ResetUserPassword(req: operations.ResetUserPasswordRequest, config?: AxiosRequestConfig): Promise<operations.ResetUserPasswordResponse>;
    RestoreFromSnapshot(req: operations.RestoreFromSnapshotRequest, config?: AxiosRequestConfig): Promise<operations.RestoreFromSnapshotResponse>;
    ShareDirectory(req: operations.ShareDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.ShareDirectoryResponse>;
    StartSchemaExtension(req: operations.StartSchemaExtensionRequest, config?: AxiosRequestConfig): Promise<operations.StartSchemaExtensionResponse>;
    UnshareDirectory(req: operations.UnshareDirectoryRequest, config?: AxiosRequestConfig): Promise<operations.UnshareDirectoryResponse>;
    UpdateConditionalForwarder(req: operations.UpdateConditionalForwarderRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConditionalForwarderResponse>;
    UpdateNumberOfDomainControllers(req: operations.UpdateNumberOfDomainControllersRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNumberOfDomainControllersResponse>;
    UpdateRadius(req: operations.UpdateRadiusRequest, config?: AxiosRequestConfig): Promise<operations.UpdateRadiusResponse>;
    UpdateTrust(req: operations.UpdateTrustRequest, config?: AxiosRequestConfig): Promise<operations.UpdateTrustResponse>;
    VerifyTrust(req: operations.VerifyTrustRequest, config?: AxiosRequestConfig): Promise<operations.VerifyTrustResponse>;
}
export {};

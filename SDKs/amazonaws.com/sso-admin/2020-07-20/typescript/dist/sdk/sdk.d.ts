import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AttachManagedPolicyToPermissionSet(req: operations.AttachManagedPolicyToPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.AttachManagedPolicyToPermissionSetResponse>;
    CreateAccountAssignment(req: operations.CreateAccountAssignmentRequest, config?: AxiosRequestConfig): Promise<operations.CreateAccountAssignmentResponse>;
    CreateInstanceAccessControlAttributeConfiguration(req: operations.CreateInstanceAccessControlAttributeConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.CreateInstanceAccessControlAttributeConfigurationResponse>;
    CreatePermissionSet(req: operations.CreatePermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.CreatePermissionSetResponse>;
    DeleteAccountAssignment(req: operations.DeleteAccountAssignmentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAccountAssignmentResponse>;
    DeleteInlinePolicyFromPermissionSet(req: operations.DeleteInlinePolicyFromPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.DeleteInlinePolicyFromPermissionSetResponse>;
    DeleteInstanceAccessControlAttributeConfiguration(req: operations.DeleteInstanceAccessControlAttributeConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteInstanceAccessControlAttributeConfigurationResponse>;
    DeletePermissionSet(req: operations.DeletePermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.DeletePermissionSetResponse>;
    DescribeAccountAssignmentCreationStatus(req: operations.DescribeAccountAssignmentCreationStatusRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAccountAssignmentCreationStatusResponse>;
    DescribeAccountAssignmentDeletionStatus(req: operations.DescribeAccountAssignmentDeletionStatusRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAccountAssignmentDeletionStatusResponse>;
    DescribeInstanceAccessControlAttributeConfiguration(req: operations.DescribeInstanceAccessControlAttributeConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeInstanceAccessControlAttributeConfigurationResponse>;
    DescribePermissionSet(req: operations.DescribePermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.DescribePermissionSetResponse>;
    DescribePermissionSetProvisioningStatus(req: operations.DescribePermissionSetProvisioningStatusRequest, config?: AxiosRequestConfig): Promise<operations.DescribePermissionSetProvisioningStatusResponse>;
    DetachManagedPolicyFromPermissionSet(req: operations.DetachManagedPolicyFromPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.DetachManagedPolicyFromPermissionSetResponse>;
    GetInlinePolicyForPermissionSet(req: operations.GetInlinePolicyForPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.GetInlinePolicyForPermissionSetResponse>;
    ListAccountAssignmentCreationStatus(req: operations.ListAccountAssignmentCreationStatusRequest, config?: AxiosRequestConfig): Promise<operations.ListAccountAssignmentCreationStatusResponse>;
    ListAccountAssignmentDeletionStatus(req: operations.ListAccountAssignmentDeletionStatusRequest, config?: AxiosRequestConfig): Promise<operations.ListAccountAssignmentDeletionStatusResponse>;
    ListAccountAssignments(req: operations.ListAccountAssignmentsRequest, config?: AxiosRequestConfig): Promise<operations.ListAccountAssignmentsResponse>;
    ListAccountsForProvisionedPermissionSet(req: operations.ListAccountsForProvisionedPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.ListAccountsForProvisionedPermissionSetResponse>;
    ListInstances(req: operations.ListInstancesRequest, config?: AxiosRequestConfig): Promise<operations.ListInstancesResponse>;
    ListManagedPoliciesInPermissionSet(req: operations.ListManagedPoliciesInPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.ListManagedPoliciesInPermissionSetResponse>;
    ListPermissionSetProvisioningStatus(req: operations.ListPermissionSetProvisioningStatusRequest, config?: AxiosRequestConfig): Promise<operations.ListPermissionSetProvisioningStatusResponse>;
    ListPermissionSets(req: operations.ListPermissionSetsRequest, config?: AxiosRequestConfig): Promise<operations.ListPermissionSetsResponse>;
    ListPermissionSetsProvisionedToAccount(req: operations.ListPermissionSetsProvisionedToAccountRequest, config?: AxiosRequestConfig): Promise<operations.ListPermissionSetsProvisionedToAccountResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ProvisionPermissionSet(req: operations.ProvisionPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.ProvisionPermissionSetResponse>;
    PutInlinePolicyToPermissionSet(req: operations.PutInlinePolicyToPermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.PutInlinePolicyToPermissionSetResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateInstanceAccessControlAttributeConfiguration(req: operations.UpdateInstanceAccessControlAttributeConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateInstanceAccessControlAttributeConfigurationResponse>;
    UpdatePermissionSet(req: operations.UpdatePermissionSetRequest, config?: AxiosRequestConfig): Promise<operations.UpdatePermissionSetResponse>;
}
export {};

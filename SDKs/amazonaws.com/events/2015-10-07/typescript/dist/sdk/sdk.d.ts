import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    ActivateEventSource(req: operations.ActivateEventSourceRequest, config?: AxiosRequestConfig): Promise<operations.ActivateEventSourceResponse>;
    CancelReplay(req: operations.CancelReplayRequest, config?: AxiosRequestConfig): Promise<operations.CancelReplayResponse>;
    CreateApiDestination(req: operations.CreateApiDestinationRequest, config?: AxiosRequestConfig): Promise<operations.CreateApiDestinationResponse>;
    CreateArchive(req: operations.CreateArchiveRequest, config?: AxiosRequestConfig): Promise<operations.CreateArchiveResponse>;
    CreateConnection(req: operations.CreateConnectionRequest, config?: AxiosRequestConfig): Promise<operations.CreateConnectionResponse>;
    CreateEventBus(req: operations.CreateEventBusRequest, config?: AxiosRequestConfig): Promise<operations.CreateEventBusResponse>;
    CreatePartnerEventSource(req: operations.CreatePartnerEventSourceRequest, config?: AxiosRequestConfig): Promise<operations.CreatePartnerEventSourceResponse>;
    DeactivateEventSource(req: operations.DeactivateEventSourceRequest, config?: AxiosRequestConfig): Promise<operations.DeactivateEventSourceResponse>;
    DeauthorizeConnection(req: operations.DeauthorizeConnectionRequest, config?: AxiosRequestConfig): Promise<operations.DeauthorizeConnectionResponse>;
    DeleteApiDestination(req: operations.DeleteApiDestinationRequest, config?: AxiosRequestConfig): Promise<operations.DeleteApiDestinationResponse>;
    DeleteArchive(req: operations.DeleteArchiveRequest, config?: AxiosRequestConfig): Promise<operations.DeleteArchiveResponse>;
    DeleteConnection(req: operations.DeleteConnectionRequest, config?: AxiosRequestConfig): Promise<operations.DeleteConnectionResponse>;
    DeleteEventBus(req: operations.DeleteEventBusRequest, config?: AxiosRequestConfig): Promise<operations.DeleteEventBusResponse>;
    DeletePartnerEventSource(req: operations.DeletePartnerEventSourceRequest, config?: AxiosRequestConfig): Promise<operations.DeletePartnerEventSourceResponse>;
    DeleteRule(req: operations.DeleteRuleRequest, config?: AxiosRequestConfig): Promise<operations.DeleteRuleResponse>;
    DescribeApiDestination(req: operations.DescribeApiDestinationRequest, config?: AxiosRequestConfig): Promise<operations.DescribeApiDestinationResponse>;
    DescribeArchive(req: operations.DescribeArchiveRequest, config?: AxiosRequestConfig): Promise<operations.DescribeArchiveResponse>;
    DescribeConnection(req: operations.DescribeConnectionRequest, config?: AxiosRequestConfig): Promise<operations.DescribeConnectionResponse>;
    DescribeEventBus(req: operations.DescribeEventBusRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventBusResponse>;
    DescribeEventSource(req: operations.DescribeEventSourceRequest, config?: AxiosRequestConfig): Promise<operations.DescribeEventSourceResponse>;
    DescribePartnerEventSource(req: operations.DescribePartnerEventSourceRequest, config?: AxiosRequestConfig): Promise<operations.DescribePartnerEventSourceResponse>;
    DescribeReplay(req: operations.DescribeReplayRequest, config?: AxiosRequestConfig): Promise<operations.DescribeReplayResponse>;
    DescribeRule(req: operations.DescribeRuleRequest, config?: AxiosRequestConfig): Promise<operations.DescribeRuleResponse>;
    DisableRule(req: operations.DisableRuleRequest, config?: AxiosRequestConfig): Promise<operations.DisableRuleResponse>;
    EnableRule(req: operations.EnableRuleRequest, config?: AxiosRequestConfig): Promise<operations.EnableRuleResponse>;
    ListApiDestinations(req: operations.ListApiDestinationsRequest, config?: AxiosRequestConfig): Promise<operations.ListApiDestinationsResponse>;
    ListArchives(req: operations.ListArchivesRequest, config?: AxiosRequestConfig): Promise<operations.ListArchivesResponse>;
    ListConnections(req: operations.ListConnectionsRequest, config?: AxiosRequestConfig): Promise<operations.ListConnectionsResponse>;
    ListEventBuses(req: operations.ListEventBusesRequest, config?: AxiosRequestConfig): Promise<operations.ListEventBusesResponse>;
    ListEventSources(req: operations.ListEventSourcesRequest, config?: AxiosRequestConfig): Promise<operations.ListEventSourcesResponse>;
    ListPartnerEventSourceAccounts(req: operations.ListPartnerEventSourceAccountsRequest, config?: AxiosRequestConfig): Promise<operations.ListPartnerEventSourceAccountsResponse>;
    ListPartnerEventSources(req: operations.ListPartnerEventSourcesRequest, config?: AxiosRequestConfig): Promise<operations.ListPartnerEventSourcesResponse>;
    ListReplays(req: operations.ListReplaysRequest, config?: AxiosRequestConfig): Promise<operations.ListReplaysResponse>;
    ListRuleNamesByTarget(req: operations.ListRuleNamesByTargetRequest, config?: AxiosRequestConfig): Promise<operations.ListRuleNamesByTargetResponse>;
    ListRules(req: operations.ListRulesRequest, config?: AxiosRequestConfig): Promise<operations.ListRulesResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListTargetsByRule(req: operations.ListTargetsByRuleRequest, config?: AxiosRequestConfig): Promise<operations.ListTargetsByRuleResponse>;
    PutEvents(req: operations.PutEventsRequest, config?: AxiosRequestConfig): Promise<operations.PutEventsResponse>;
    PutPartnerEvents(req: operations.PutPartnerEventsRequest, config?: AxiosRequestConfig): Promise<operations.PutPartnerEventsResponse>;
    PutPermission(req: operations.PutPermissionRequest, config?: AxiosRequestConfig): Promise<operations.PutPermissionResponse>;
    PutRule(req: operations.PutRuleRequest, config?: AxiosRequestConfig): Promise<operations.PutRuleResponse>;
    PutTargets(req: operations.PutTargetsRequest, config?: AxiosRequestConfig): Promise<operations.PutTargetsResponse>;
    RemovePermission(req: operations.RemovePermissionRequest, config?: AxiosRequestConfig): Promise<operations.RemovePermissionResponse>;
    RemoveTargets(req: operations.RemoveTargetsRequest, config?: AxiosRequestConfig): Promise<operations.RemoveTargetsResponse>;
    StartReplay(req: operations.StartReplayRequest, config?: AxiosRequestConfig): Promise<operations.StartReplayResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    TestEventPattern(req: operations.TestEventPatternRequest, config?: AxiosRequestConfig): Promise<operations.TestEventPatternResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateApiDestination(req: operations.UpdateApiDestinationRequest, config?: AxiosRequestConfig): Promise<operations.UpdateApiDestinationResponse>;
    UpdateArchive(req: operations.UpdateArchiveRequest, config?: AxiosRequestConfig): Promise<operations.UpdateArchiveResponse>;
    UpdateConnection(req: operations.UpdateConnectionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateConnectionResponse>;
}
export {};

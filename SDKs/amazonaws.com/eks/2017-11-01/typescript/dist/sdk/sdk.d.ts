import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Security } from "./models/shared";
declare type OptsFunc = (sdk: SDK) => void;
export declare function WithServerURL(serverURL: string, params?: Map<string, string>): OptsFunc;
export declare function WithClient(client: AxiosInstance): OptsFunc;
export declare function WithSecurity(security: Security): OptsFunc;
export declare class SDK {
    defaultClient?: AxiosInstance;
    securityClient?: AxiosInstance;
    security?: any;
    serverURL: string;
    constructor(...opts: OptsFunc[]);
    AssociateEncryptionConfig(req: operations.AssociateEncryptionConfigRequest, config?: AxiosRequestConfig): Promise<operations.AssociateEncryptionConfigResponse>;
    AssociateIdentityProviderConfig(req: operations.AssociateIdentityProviderConfigRequest, config?: AxiosRequestConfig): Promise<operations.AssociateIdentityProviderConfigResponse>;
    CreateAddon(req: operations.CreateAddonRequest, config?: AxiosRequestConfig): Promise<operations.CreateAddonResponse>;
    CreateCluster(req: operations.CreateClusterRequest, config?: AxiosRequestConfig): Promise<operations.CreateClusterResponse>;
    CreateFargateProfile(req: operations.CreateFargateProfileRequest, config?: AxiosRequestConfig): Promise<operations.CreateFargateProfileResponse>;
    CreateNodegroup(req: operations.CreateNodegroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateNodegroupResponse>;
    DeleteAddon(req: operations.DeleteAddonRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAddonResponse>;
    DeleteCluster(req: operations.DeleteClusterRequest, config?: AxiosRequestConfig): Promise<operations.DeleteClusterResponse>;
    DeleteFargateProfile(req: operations.DeleteFargateProfileRequest, config?: AxiosRequestConfig): Promise<operations.DeleteFargateProfileResponse>;
    DeleteNodegroup(req: operations.DeleteNodegroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteNodegroupResponse>;
    DeregisterCluster(req: operations.DeregisterClusterRequest, config?: AxiosRequestConfig): Promise<operations.DeregisterClusterResponse>;
    DescribeAddon(req: operations.DescribeAddonRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAddonResponse>;
    DescribeAddonVersions(req: operations.DescribeAddonVersionsRequest, config?: AxiosRequestConfig): Promise<operations.DescribeAddonVersionsResponse>;
    DescribeCluster(req: operations.DescribeClusterRequest, config?: AxiosRequestConfig): Promise<operations.DescribeClusterResponse>;
    DescribeFargateProfile(req: operations.DescribeFargateProfileRequest, config?: AxiosRequestConfig): Promise<operations.DescribeFargateProfileResponse>;
    DescribeIdentityProviderConfig(req: operations.DescribeIdentityProviderConfigRequest, config?: AxiosRequestConfig): Promise<operations.DescribeIdentityProviderConfigResponse>;
    DescribeNodegroup(req: operations.DescribeNodegroupRequest, config?: AxiosRequestConfig): Promise<operations.DescribeNodegroupResponse>;
    DescribeUpdate(req: operations.DescribeUpdateRequest, config?: AxiosRequestConfig): Promise<operations.DescribeUpdateResponse>;
    DisassociateIdentityProviderConfig(req: operations.DisassociateIdentityProviderConfigRequest, config?: AxiosRequestConfig): Promise<operations.DisassociateIdentityProviderConfigResponse>;
    ListAddons(req: operations.ListAddonsRequest, config?: AxiosRequestConfig): Promise<operations.ListAddonsResponse>;
    ListClusters(req: operations.ListClustersRequest, config?: AxiosRequestConfig): Promise<operations.ListClustersResponse>;
    ListFargateProfiles(req: operations.ListFargateProfilesRequest, config?: AxiosRequestConfig): Promise<operations.ListFargateProfilesResponse>;
    ListIdentityProviderConfigs(req: operations.ListIdentityProviderConfigsRequest, config?: AxiosRequestConfig): Promise<operations.ListIdentityProviderConfigsResponse>;
    ListNodegroups(req: operations.ListNodegroupsRequest, config?: AxiosRequestConfig): Promise<operations.ListNodegroupsResponse>;
    ListTagsForResource(req: operations.ListTagsForResourceRequest, config?: AxiosRequestConfig): Promise<operations.ListTagsForResourceResponse>;
    ListUpdates(req: operations.ListUpdatesRequest, config?: AxiosRequestConfig): Promise<operations.ListUpdatesResponse>;
    RegisterCluster(req: operations.RegisterClusterRequest, config?: AxiosRequestConfig): Promise<operations.RegisterClusterResponse>;
    TagResource(req: operations.TagResourceRequest, config?: AxiosRequestConfig): Promise<operations.TagResourceResponse>;
    UntagResource(req: operations.UntagResourceRequest, config?: AxiosRequestConfig): Promise<operations.UntagResourceResponse>;
    UpdateAddon(req: operations.UpdateAddonRequest, config?: AxiosRequestConfig): Promise<operations.UpdateAddonResponse>;
    UpdateClusterConfig(req: operations.UpdateClusterConfigRequest, config?: AxiosRequestConfig): Promise<operations.UpdateClusterConfigResponse>;
    UpdateClusterVersion(req: operations.UpdateClusterVersionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateClusterVersionResponse>;
    UpdateNodegroupConfig(req: operations.UpdateNodegroupConfigRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNodegroupConfigResponse>;
    UpdateNodegroupVersion(req: operations.UpdateNodegroupVersionRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNodegroupVersionResponse>;
}
export {};

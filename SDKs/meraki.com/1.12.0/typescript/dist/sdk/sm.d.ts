import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
export declare class Sm {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    /**
     * checkinNetworkSmDevices - Force check-in a set of devices
     *
     * Force check-in a set of devices
    **/
    checkinNetworkSmDevices(req: operations.CheckinNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.CheckinNetworkSmDevicesResponse>;
    /**
     * createNetworkSmBypassActivationLockAttempt - Bypass activation lock attempt
     *
     * Bypass activation lock attempt
    **/
    createNetworkSmBypassActivationLockAttempt(req: operations.CreateNetworkSmBypassActivationLockAttemptRequest, config?: AxiosRequestConfig): Promise<operations.CreateNetworkSmBypassActivationLockAttemptResponse>;
    /**
     * createNetworkSmTargetGroup - Add a target group
     *
     * Add a target group
    **/
    createNetworkSmTargetGroup(req: operations.CreateNetworkSmTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.CreateNetworkSmTargetGroupResponse>;
    /**
     * deleteNetworkSmTargetGroup - Delete a target group from a network
     *
     * Delete a target group from a network
    **/
    deleteNetworkSmTargetGroup(req: operations.DeleteNetworkSmTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.DeleteNetworkSmTargetGroupResponse>;
    /**
     * deleteNetworkSmUserAccessDevice - Delete a User Access Device
     *
     * Delete a User Access Device
    **/
    deleteNetworkSmUserAccessDevice(req: operations.DeleteNetworkSmUserAccessDeviceRequest, config?: AxiosRequestConfig): Promise<operations.DeleteNetworkSmUserAccessDeviceResponse>;
    /**
     * getNetworkSmBypassActivationLockAttempt - Bypass activation lock attempt status
     *
     * Bypass activation lock attempt status
    **/
    getNetworkSmBypassActivationLockAttempt(req: operations.GetNetworkSmBypassActivationLockAttemptRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmBypassActivationLockAttemptResponse>;
    /**
     * getNetworkSmDeviceCellularUsageHistory - Return the client's daily cellular data usage history
     *
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
    **/
    getNetworkSmDeviceCellularUsageHistory(req: operations.GetNetworkSmDeviceCellularUsageHistoryRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceCellularUsageHistoryResponse>;
    /**
     * getNetworkSmDeviceCerts - List the certs on a device
     *
     * List the certs on a device
    **/
    getNetworkSmDeviceCerts(req: operations.GetNetworkSmDeviceCertsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceCertsResponse>;
    /**
     * getNetworkSmDeviceConnectivity - Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
    **/
    getNetworkSmDeviceConnectivity(req: operations.GetNetworkSmDeviceConnectivityRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceConnectivityResponse>;
    /**
     * getNetworkSmDeviceDesktopLogs - Return historical records of various Systems Manager network connection details for desktop devices.
     *
     * Return historical records of various Systems Manager network connection details for desktop devices.
    **/
    getNetworkSmDeviceDesktopLogs(req: operations.GetNetworkSmDeviceDesktopLogsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceDesktopLogsResponse>;
    /**
     * getNetworkSmDeviceDeviceCommandLogs - Return historical records of commands sent to Systems Manager devices
     *
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
    **/
    getNetworkSmDeviceDeviceCommandLogs(req: operations.GetNetworkSmDeviceDeviceCommandLogsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceDeviceCommandLogsResponse>;
    /**
     * getNetworkSmDeviceDeviceProfiles - Get the profiles associated with a device
     *
     * Get the profiles associated with a device
    **/
    getNetworkSmDeviceDeviceProfiles(req: operations.GetNetworkSmDeviceDeviceProfilesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceDeviceProfilesResponse>;
    /**
     * getNetworkSmDeviceNetworkAdapters - List the network adapters of a device
     *
     * List the network adapters of a device
    **/
    getNetworkSmDeviceNetworkAdapters(req: operations.GetNetworkSmDeviceNetworkAdaptersRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceNetworkAdaptersResponse>;
    /**
     * getNetworkSmDevicePerformanceHistory - Return historical records of various Systems Manager client metrics for desktop devices.
     *
     * Return historical records of various Systems Manager client metrics for desktop devices.
    **/
    getNetworkSmDevicePerformanceHistory(req: operations.GetNetworkSmDevicePerformanceHistoryRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDevicePerformanceHistoryResponse>;
    /**
     * getNetworkSmDeviceRestrictions - List the restrictions on a device
     *
     * List the restrictions on a device
    **/
    getNetworkSmDeviceRestrictions(req: operations.GetNetworkSmDeviceRestrictionsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceRestrictionsResponse>;
    /**
     * getNetworkSmDeviceSecurityCenters - List the security centers on a device
     *
     * List the security centers on a device
    **/
    getNetworkSmDeviceSecurityCenters(req: operations.GetNetworkSmDeviceSecurityCentersRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceSecurityCentersResponse>;
    /**
     * getNetworkSmDeviceSoftwares - Get a list of softwares associated with a device
     *
     * Get a list of softwares associated with a device
    **/
    getNetworkSmDeviceSoftwares(req: operations.GetNetworkSmDeviceSoftwaresRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceSoftwaresResponse>;
    /**
     * getNetworkSmDeviceWlanLists - List the saved SSID names on a device
     *
     * List the saved SSID names on a device
    **/
    getNetworkSmDeviceWlanLists(req: operations.GetNetworkSmDeviceWlanListsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDeviceWlanListsResponse>;
    /**
     * getNetworkSmDevices - List the devices enrolled in an SM network with various specified fields and filters
     *
     * List the devices enrolled in an SM network with various specified fields and filters
    **/
    getNetworkSmDevices(req: operations.GetNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmDevicesResponse>;
    /**
     * getNetworkSmProfiles - List all profiles in a network
     *
     * List all profiles in a network
    **/
    getNetworkSmProfiles(req: operations.GetNetworkSmProfilesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmProfilesResponse>;
    /**
     * getNetworkSmTargetGroup - Return a target group
     *
     * Return a target group
    **/
    getNetworkSmTargetGroup(req: operations.GetNetworkSmTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmTargetGroupResponse>;
    /**
     * getNetworkSmTargetGroups - List the target groups in this network
     *
     * List the target groups in this network
    **/
    getNetworkSmTargetGroups(req: operations.GetNetworkSmTargetGroupsRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmTargetGroupsResponse>;
    /**
     * getNetworkSmUserAccessDevices - List User Access Devices and its Trusted Access Connections
     *
     * List User Access Devices and its Trusted Access Connections
    **/
    getNetworkSmUserAccessDevices(req: operations.GetNetworkSmUserAccessDevicesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUserAccessDevicesResponse>;
    /**
     * getNetworkSmUserDeviceProfiles - Get the profiles associated with a user
     *
     * Get the profiles associated with a user
    **/
    getNetworkSmUserDeviceProfiles(req: operations.GetNetworkSmUserDeviceProfilesRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUserDeviceProfilesResponse>;
    /**
     * getNetworkSmUserSoftwares - Get a list of softwares associated with a user
     *
     * Get a list of softwares associated with a user
    **/
    getNetworkSmUserSoftwares(req: operations.GetNetworkSmUserSoftwaresRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUserSoftwaresResponse>;
    /**
     * getNetworkSmUsers - List the owners in an SM network with various specified fields and filters
     *
     * List the owners in an SM network with various specified fields and filters
    **/
    getNetworkSmUsers(req: operations.GetNetworkSmUsersRequest, config?: AxiosRequestConfig): Promise<operations.GetNetworkSmUsersResponse>;
    /**
     * getOrganizationSmApnsCert - Get the organization's APNS certificate
     *
     * Get the organization's APNS certificate
    **/
    getOrganizationSmApnsCert(req: operations.GetOrganizationSmApnsCertRequest, config?: AxiosRequestConfig): Promise<operations.GetOrganizationSmApnsCertResponse>;
    /**
     * getOrganizationSmVppAccount - Get a hash containing the unparsed token of the VPP account with the given ID
     *
     * Get a hash containing the unparsed token of the VPP account with the given ID
    **/
    getOrganizationSmVppAccount(req: operations.GetOrganizationSmVppAccountRequest, config?: AxiosRequestConfig): Promise<operations.GetOrganizationSmVppAccountResponse>;
    /**
     * getOrganizationSmVppAccounts - List the VPP accounts in the organization
     *
     * List the VPP accounts in the organization
    **/
    getOrganizationSmVppAccounts(req: operations.GetOrganizationSmVppAccountsRequest, config?: AxiosRequestConfig): Promise<operations.GetOrganizationSmVppAccountsResponse>;
    /**
     * lockNetworkSmDevices - Lock a set of devices
     *
     * Lock a set of devices
    **/
    lockNetworkSmDevices(req: operations.LockNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.LockNetworkSmDevicesResponse>;
    /**
     * modifyNetworkSmDevicesTags - Add, delete, or update the tags of a set of devices
     *
     * Add, delete, or update the tags of a set of devices
    **/
    modifyNetworkSmDevicesTags(req: operations.ModifyNetworkSmDevicesTagsRequest, config?: AxiosRequestConfig): Promise<operations.ModifyNetworkSmDevicesTagsResponse>;
    /**
     * moveNetworkSmDevices - Move a set of devices to a new network
     *
     * Move a set of devices to a new network
    **/
    moveNetworkSmDevices(req: operations.MoveNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.MoveNetworkSmDevicesResponse>;
    /**
     * refreshNetworkSmDeviceDetails - Refresh the details of a device
     *
     * Refresh the details of a device
    **/
    refreshNetworkSmDeviceDetails(req: operations.RefreshNetworkSmDeviceDetailsRequest, config?: AxiosRequestConfig): Promise<operations.RefreshNetworkSmDeviceDetailsResponse>;
    /**
     * unenrollNetworkSmDevice - Unenroll a device
     *
     * Unenroll a device
    **/
    unenrollNetworkSmDevice(req: operations.UnenrollNetworkSmDeviceRequest, config?: AxiosRequestConfig): Promise<operations.UnenrollNetworkSmDeviceResponse>;
    /**
     * updateNetworkSmDevicesFields - Modify the fields of a device
     *
     * Modify the fields of a device
    **/
    updateNetworkSmDevicesFields(req: operations.UpdateNetworkSmDevicesFieldsRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNetworkSmDevicesFieldsResponse>;
    /**
     * updateNetworkSmTargetGroup - Update a target group
     *
     * Update a target group
    **/
    updateNetworkSmTargetGroup(req: operations.UpdateNetworkSmTargetGroupRequest, config?: AxiosRequestConfig): Promise<operations.UpdateNetworkSmTargetGroupResponse>;
    /**
     * wipeNetworkSmDevices - Wipe a device
     *
     * Wipe a device
    **/
    wipeNetworkSmDevices(req: operations.WipeNetworkSmDevicesRequest, config?: AxiosRequestConfig): Promise<operations.WipeNetworkSmDevicesResponse>;
}

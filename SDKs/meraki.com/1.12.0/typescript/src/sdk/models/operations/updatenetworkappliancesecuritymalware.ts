import { SpeakeasyMetadata, SpeakeasyBase } from "../../../internal/utils";



export class UpdateNetworkApplianceSecurityMalwarePathParams extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=networkId" })
  networkId: string;
}


export class UpdateNetworkApplianceSecurityMalwareRequestBodyAllowedFiles extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "json, name=comment" })
  comment: string;

  @SpeakeasyMetadata({ data: "json, name=sha256" })
  sha256: string;
}


export class UpdateNetworkApplianceSecurityMalwareRequestBodyAllowedUrls extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "json, name=comment" })
  comment: string;

  @SpeakeasyMetadata({ data: "json, name=url" })
  url: string;
}

export enum UpdateNetworkApplianceSecurityMalwareRequestBodyModeEnum {
    Enabled = "enabled",
    Disabled = "disabled"
}


export class UpdateNetworkApplianceSecurityMalwareRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "json, name=allowedFiles", elemType: UpdateNetworkApplianceSecurityMalwareRequestBodyAllowedFiles })
  allowedFiles?: UpdateNetworkApplianceSecurityMalwareRequestBodyAllowedFiles[];

  @SpeakeasyMetadata({ data: "json, name=allowedUrls", elemType: UpdateNetworkApplianceSecurityMalwareRequestBodyAllowedUrls })
  allowedUrls?: UpdateNetworkApplianceSecurityMalwareRequestBodyAllowedUrls[];

  @SpeakeasyMetadata({ data: "json, name=mode" })
  mode: UpdateNetworkApplianceSecurityMalwareRequestBodyModeEnum;
}


export class UpdateNetworkApplianceSecurityMalwareRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  pathParams: UpdateNetworkApplianceSecurityMalwarePathParams;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  request: UpdateNetworkApplianceSecurityMalwareRequestBody;
}


export class UpdateNetworkApplianceSecurityMalwareResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  updateNetworkApplianceSecurityMalware200ApplicationJsonObject?: Map<string, any>;
}

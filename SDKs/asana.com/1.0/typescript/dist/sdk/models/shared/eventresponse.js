var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { SpeakeasyMetadata, SpeakeasyBase } from "../../../internal/utils";
import { AsanaNamedResource } from "./asananamedresource";
import { UserCompact } from "./usercompact";
// EventResponseChange
/**
 * Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
**/
var EventResponseChange = /** @class */ (function (_super) {
    __extends(EventResponseChange, _super);
    function EventResponseChange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        SpeakeasyMetadata({ data: "json, name=action" }),
        __metadata("design:type", String)
    ], EventResponseChange.prototype, "action", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=added_value" }),
        __metadata("design:type", Object)
    ], EventResponseChange.prototype, "addedValue", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=field" }),
        __metadata("design:type", String)
    ], EventResponseChange.prototype, "field", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=new_value" }),
        __metadata("design:type", Object)
    ], EventResponseChange.prototype, "newValue", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=removed_value" }),
        __metadata("design:type", Object)
    ], EventResponseChange.prototype, "removedValue", void 0);
    return EventResponseChange;
}(SpeakeasyBase));
export { EventResponseChange };
// EventResponse
/**
 * An *event* is an object representing a change to a resource that was
 * observed by an event subscription or delivered asynchronously to
 * the target location of an active webhook.
 *
 * The event may be triggered by a different `user` than the
 * subscriber. For example, if user A subscribes to a task and user B
 * modified it, the eventâ€™s user will be user B. Note: Some events
 * are generated by the system, and will have `null` as the user. API
 * consumers should make sure to handle this case.
 *
 * The `resource` that triggered the event may be different from the one
 * that the events were requested for or the webhook is subscribed to. For
 * example, a subscription to a project will contain events for tasks
 * contained within the project.
 *
 * **Note:** pay close attention to the relationship between the fields
 * `Event.action` and `Event.change.action`.
 * `Event.action` represents the action taken on the resource
 * itself, and `Event.change.action` represents how the information
 * within the resource's fields have been modified.
 *
 * For instance, consider these scenarios:
 *
 *
 * * When at task is added to a project, `Event.action` will be
 * `added`, `Event.parent` will be on object with the `id` and
 * `type` of the project, and there will be no `change` field.
 *
 *
 * * When an assignee is set on the task, `Event.parent` will be
 * `null`, `Event.action` will be `changed`,
 * `Event.change.action` will be `changed`, and `changed_value` will
 * be an object with the user's `id` and `type`.
 *
 *
 * * When a collaborator is added to the task, `Event.parent` will
 * be `null`, `Event.action` will be `changed`,
 * `Event.change.action` will be `added`, and `added_value` will be
 * an object with the user's `id` and `type`.
**/
var EventResponse = /** @class */ (function (_super) {
    __extends(EventResponse, _super);
    function EventResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        SpeakeasyMetadata({ data: "json, name=action" }),
        __metadata("design:type", String)
    ], EventResponse.prototype, "action", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=change" }),
        __metadata("design:type", EventResponseChange)
    ], EventResponse.prototype, "change", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=created_at" }),
        __metadata("design:type", Date)
    ], EventResponse.prototype, "createdAt", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=parent" }),
        __metadata("design:type", AsanaNamedResource)
    ], EventResponse.prototype, "parent", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=resource" }),
        __metadata("design:type", AsanaNamedResource)
    ], EventResponse.prototype, "resource", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=type" }),
        __metadata("design:type", String)
    ], EventResponse.prototype, "type", void 0);
    __decorate([
        SpeakeasyMetadata({ data: "json, name=user" }),
        __metadata("design:type", UserCompact)
    ], EventResponse.prototype, "user", void 0);
    return EventResponse;
}(SpeakeasyBase));
export { EventResponse };
